// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WebSocket/websocket_c2s.proto

#ifndef PROTOBUF_WebSocket_2fwebsocket_5fc2s_2eproto__INCLUDED
#define PROTOBUF_WebSocket_2fwebsocket_5fc2s_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

class CMD_GR_C_PropertyBuy;
class CMD_GP_LogonAccounts;
class CMD_GP_DuihuanMeiliRequest;
class CMD_GP_UserInsureLogon;
class CMD_GP_ModifyInsurePass;
class CMD_GP_QueryInsureInfo;
class CMD_GP_UserSaveScore;
class CMD_GP_UserTakeScore;
class CMD_GP_NewPlayerGift;
class CMD_GP_SignIn;
class CMD_GP_GetHeadUrl;
class CMD_GP_GetNoviceCard;
class CMD_GP_GetActivityCard;
class CMD_GP_GetReliefMoney;
class CMD_GP_GetPayPhone;
class CMD_GP_GetAwardGold;
class CMD_GP_GetRechargeRecord;
class CMD_GP_GetMonthlyCardScore;
class CMD_GP_SendPhoneSms;
class CMD_GP_PhoneBanding;
class CMD_GP_ResetSafePwd;
class CMD_GP_RealNameAuthentication;
class CMD_GP_GetNickName;
class CMD_GP_LuckDraw;
class CMD_GP_GetRechargeCaseBag;
class CMD_GP_BoxConversion;

// ===================================================================

class CMD_GR_C_PropertyBuy : public ::google::protobuf::Message {
 public:
  CMD_GR_C_PropertyBuy();
  virtual ~CMD_GR_C_PropertyBuy();

  CMD_GR_C_PropertyBuy(const CMD_GR_C_PropertyBuy& from);

  inline CMD_GR_C_PropertyBuy& operator=(const CMD_GR_C_PropertyBuy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GR_C_PropertyBuy& default_instance();

  void Swap(CMD_GR_C_PropertyBuy* other);

  // implements Message ----------------------------------------------

  CMD_GR_C_PropertyBuy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GR_C_PropertyBuy& from);
  void MergeFrom(const CMD_GR_C_PropertyBuy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwSourceUserID = 1;
  inline bool has_dwsourceuserid() const;
  inline void clear_dwsourceuserid();
  static const int kDwSourceUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwsourceuserid() const;
  inline void set_dwsourceuserid(::google::protobuf::int32 value);

  // required int32 cbRequestArea = 2;
  inline bool has_cbrequestarea() const;
  inline void clear_cbrequestarea();
  static const int kCbRequestAreaFieldNumber = 2;
  inline ::google::protobuf::int32 cbrequestarea() const;
  inline void set_cbrequestarea(::google::protobuf::int32 value);

  // required int32 cbConsumeScore = 3;
  inline bool has_cbconsumescore() const;
  inline void clear_cbconsumescore();
  static const int kCbConsumeScoreFieldNumber = 3;
  inline ::google::protobuf::int32 cbconsumescore() const;
  inline void set_cbconsumescore(::google::protobuf::int32 value);

  // required int32 wItemCount = 4;
  inline bool has_witemcount() const;
  inline void clear_witemcount();
  static const int kWItemCountFieldNumber = 4;
  inline ::google::protobuf::int32 witemcount() const;
  inline void set_witemcount(::google::protobuf::int32 value);

  // required int32 wPropertyIndex = 5;
  inline bool has_wpropertyindex() const;
  inline void clear_wpropertyindex();
  static const int kWPropertyIndexFieldNumber = 5;
  inline ::google::protobuf::int32 wpropertyindex() const;
  inline void set_wpropertyindex(::google::protobuf::int32 value);

  // required string szTargetUser = 6;
  inline bool has_sztargetuser() const;
  inline void clear_sztargetuser();
  static const int kSzTargetUserFieldNumber = 6;
  inline const ::std::string& sztargetuser() const;
  inline void set_sztargetuser(const ::std::string& value);
  inline void set_sztargetuser(const char* value);
  inline void set_sztargetuser(const char* value, size_t size);
  inline ::std::string* mutable_sztargetuser();
  inline ::std::string* release_sztargetuser();
  inline void set_allocated_sztargetuser(::std::string* sztargetuser);

  // required int32 cbUseNikeName = 7;
  inline bool has_cbusenikename() const;
  inline void clear_cbusenikename();
  static const int kCbUseNikeNameFieldNumber = 7;
  inline ::google::protobuf::int32 cbusenikename() const;
  inline void set_cbusenikename(::google::protobuf::int32 value);

  // required string szPassword = 8;
  inline bool has_szpassword() const;
  inline void clear_szpassword();
  static const int kSzPasswordFieldNumber = 8;
  inline const ::std::string& szpassword() const;
  inline void set_szpassword(const ::std::string& value);
  inline void set_szpassword(const char* value);
  inline void set_szpassword(const char* value, size_t size);
  inline ::std::string* mutable_szpassword();
  inline ::std::string* release_szpassword();
  inline void set_allocated_szpassword(::std::string* szpassword);

  // @@protoc_insertion_point(class_scope:CMD_GR_C_PropertyBuy)
 private:
  inline void set_has_dwsourceuserid();
  inline void clear_has_dwsourceuserid();
  inline void set_has_cbrequestarea();
  inline void clear_has_cbrequestarea();
  inline void set_has_cbconsumescore();
  inline void clear_has_cbconsumescore();
  inline void set_has_witemcount();
  inline void clear_has_witemcount();
  inline void set_has_wpropertyindex();
  inline void clear_has_wpropertyindex();
  inline void set_has_sztargetuser();
  inline void clear_has_sztargetuser();
  inline void set_has_cbusenikename();
  inline void clear_has_cbusenikename();
  inline void set_has_szpassword();
  inline void clear_has_szpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dwsourceuserid_;
  ::google::protobuf::int32 cbrequestarea_;
  ::google::protobuf::int32 cbconsumescore_;
  ::google::protobuf::int32 witemcount_;
  ::std::string* sztargetuser_;
  ::google::protobuf::int32 wpropertyindex_;
  ::google::protobuf::int32 cbusenikename_;
  ::std::string* szpassword_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_C_PropertyBuy* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_LogonAccounts : public ::google::protobuf::Message {
 public:
  CMD_GP_LogonAccounts();
  virtual ~CMD_GP_LogonAccounts();

  CMD_GP_LogonAccounts(const CMD_GP_LogonAccounts& from);

  inline CMD_GP_LogonAccounts& operator=(const CMD_GP_LogonAccounts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_LogonAccounts& default_instance();

  void Swap(CMD_GP_LogonAccounts* other);

  // implements Message ----------------------------------------------

  CMD_GP_LogonAccounts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_LogonAccounts& from);
  void MergeFrom(const CMD_GP_LogonAccounts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string unionid = 1;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionidFieldNumber = 1;
  inline const ::std::string& unionid() const;
  inline void set_unionid(const ::std::string& value);
  inline void set_unionid(const char* value);
  inline void set_unionid(const char* value, size_t size);
  inline ::std::string* mutable_unionid();
  inline ::std::string* release_unionid();
  inline void set_allocated_unionid(::std::string* unionid);

  // required string sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // required string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string loginpass = 4;
  inline bool has_loginpass() const;
  inline void clear_loginpass();
  static const int kLoginpassFieldNumber = 4;
  inline const ::std::string& loginpass() const;
  inline void set_loginpass(const ::std::string& value);
  inline void set_loginpass(const char* value);
  inline void set_loginpass(const char* value, size_t size);
  inline ::std::string* mutable_loginpass();
  inline ::std::string* release_loginpass();
  inline void set_allocated_loginpass(::std::string* loginpass);

  // required string surepass = 5;
  inline bool has_surepass() const;
  inline void clear_surepass();
  static const int kSurepassFieldNumber = 5;
  inline const ::std::string& surepass() const;
  inline void set_surepass(const ::std::string& value);
  inline void set_surepass(const char* value);
  inline void set_surepass(const char* value, size_t size);
  inline ::std::string* mutable_surepass();
  inline ::std::string* release_surepass();
  inline void set_allocated_surepass(::std::string* surepass);

  // required string headImgUrl = 6;
  inline bool has_headimgurl() const;
  inline void clear_headimgurl();
  static const int kHeadImgUrlFieldNumber = 6;
  inline const ::std::string& headimgurl() const;
  inline void set_headimgurl(const ::std::string& value);
  inline void set_headimgurl(const char* value);
  inline void set_headimgurl(const char* value, size_t size);
  inline ::std::string* mutable_headimgurl();
  inline ::std::string* release_headimgurl();
  inline void set_allocated_headimgurl(::std::string* headimgurl);

  // required string channelID = 7;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIDFieldNumber = 7;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // required int32 dwPlazaVersion = 8;
  inline bool has_dwplazaversion() const;
  inline void clear_dwplazaversion();
  static const int kDwPlazaVersionFieldNumber = 8;
  inline ::google::protobuf::int32 dwplazaversion() const;
  inline void set_dwplazaversion(::google::protobuf::int32 value);

  // required string szMachineID = 9;
  inline bool has_szmachineid() const;
  inline void clear_szmachineid();
  static const int kSzMachineIDFieldNumber = 9;
  inline const ::std::string& szmachineid() const;
  inline void set_szmachineid(const ::std::string& value);
  inline void set_szmachineid(const char* value);
  inline void set_szmachineid(const char* value, size_t size);
  inline ::std::string* mutable_szmachineid();
  inline ::std::string* release_szmachineid();
  inline void set_allocated_szmachineid(::std::string* szmachineid);

  // optional int32 cbValidateFlags = 10;
  inline bool has_cbvalidateflags() const;
  inline void clear_cbvalidateflags();
  static const int kCbValidateFlagsFieldNumber = 10;
  inline ::google::protobuf::int32 cbvalidateflags() const;
  inline void set_cbvalidateflags(::google::protobuf::int32 value);

  // optional int32 cbPassPortID = 11;
  inline bool has_cbpassportid() const;
  inline void clear_cbpassportid();
  static const int kCbPassPortIDFieldNumber = 11;
  inline ::google::protobuf::int32 cbpassportid() const;
  inline void set_cbpassportid(::google::protobuf::int32 value);

  // optional string szPassPortID = 12;
  inline bool has_szpassportid() const;
  inline void clear_szpassportid();
  static const int kSzPassPortIDFieldNumber = 12;
  inline const ::std::string& szpassportid() const;
  inline void set_szpassportid(const ::std::string& value);
  inline void set_szpassportid(const char* value);
  inline void set_szpassportid(const char* value, size_t size);
  inline ::std::string* mutable_szpassportid();
  inline ::std::string* release_szpassportid();
  inline void set_allocated_szpassportid(::std::string* szpassportid);

  // @@protoc_insertion_point(class_scope:CMD_GP_LogonAccounts)
 private:
  inline void set_has_unionid();
  inline void clear_has_unionid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_loginpass();
  inline void clear_has_loginpass();
  inline void set_has_surepass();
  inline void clear_has_surepass();
  inline void set_has_headimgurl();
  inline void clear_has_headimgurl();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_dwplazaversion();
  inline void clear_has_dwplazaversion();
  inline void set_has_szmachineid();
  inline void clear_has_szmachineid();
  inline void set_has_cbvalidateflags();
  inline void clear_has_cbvalidateflags();
  inline void set_has_cbpassportid();
  inline void clear_has_cbpassportid();
  inline void set_has_szpassportid();
  inline void clear_has_szpassportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unionid_;
  ::std::string* sex_;
  ::std::string* nickname_;
  ::std::string* loginpass_;
  ::std::string* surepass_;
  ::std::string* headimgurl_;
  ::std::string* channelid_;
  ::std::string* szmachineid_;
  ::google::protobuf::int32 dwplazaversion_;
  ::google::protobuf::int32 cbvalidateflags_;
  ::std::string* szpassportid_;
  ::google::protobuf::int32 cbpassportid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_LogonAccounts* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_DuihuanMeiliRequest : public ::google::protobuf::Message {
 public:
  CMD_GP_DuihuanMeiliRequest();
  virtual ~CMD_GP_DuihuanMeiliRequest();

  CMD_GP_DuihuanMeiliRequest(const CMD_GP_DuihuanMeiliRequest& from);

  inline CMD_GP_DuihuanMeiliRequest& operator=(const CMD_GP_DuihuanMeiliRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_DuihuanMeiliRequest& default_instance();

  void Swap(CMD_GP_DuihuanMeiliRequest* other);

  // implements Message ----------------------------------------------

  CMD_GP_DuihuanMeiliRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_DuihuanMeiliRequest& from);
  void MergeFrom(const CMD_GP_DuihuanMeiliRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwUserID = 1;
  inline bool has_dwuserid() const;
  inline void clear_dwuserid();
  static const int kDwUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwuserid() const;
  inline void set_dwuserid(::google::protobuf::int32 value);

  // required int64 lExchangeNum = 2;
  inline bool has_lexchangenum() const;
  inline void clear_lexchangenum();
  static const int kLExchangeNumFieldNumber = 2;
  inline ::google::protobuf::int64 lexchangenum() const;
  inline void set_lexchangenum(::google::protobuf::int64 value);

  // required string szPassWord = 3;
  inline bool has_szpassword() const;
  inline void clear_szpassword();
  static const int kSzPassWordFieldNumber = 3;
  inline const ::std::string& szpassword() const;
  inline void set_szpassword(const ::std::string& value);
  inline void set_szpassword(const char* value);
  inline void set_szpassword(const char* value, size_t size);
  inline ::std::string* mutable_szpassword();
  inline ::std::string* release_szpassword();
  inline void set_allocated_szpassword(::std::string* szpassword);

  // required string szMachineID = 4;
  inline bool has_szmachineid() const;
  inline void clear_szmachineid();
  static const int kSzMachineIDFieldNumber = 4;
  inline const ::std::string& szmachineid() const;
  inline void set_szmachineid(const ::std::string& value);
  inline void set_szmachineid(const char* value);
  inline void set_szmachineid(const char* value, size_t size);
  inline ::std::string* mutable_szmachineid();
  inline ::std::string* release_szmachineid();
  inline void set_allocated_szmachineid(::std::string* szmachineid);

  // @@protoc_insertion_point(class_scope:CMD_GP_DuihuanMeiliRequest)
 private:
  inline void set_has_dwuserid();
  inline void clear_has_dwuserid();
  inline void set_has_lexchangenum();
  inline void clear_has_lexchangenum();
  inline void set_has_szpassword();
  inline void clear_has_szpassword();
  inline void set_has_szmachineid();
  inline void clear_has_szmachineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 lexchangenum_;
  ::std::string* szpassword_;
  ::std::string* szmachineid_;
  ::google::protobuf::int32 dwuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_DuihuanMeiliRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_UserInsureLogon : public ::google::protobuf::Message {
 public:
  CMD_GP_UserInsureLogon();
  virtual ~CMD_GP_UserInsureLogon();

  CMD_GP_UserInsureLogon(const CMD_GP_UserInsureLogon& from);

  inline CMD_GP_UserInsureLogon& operator=(const CMD_GP_UserInsureLogon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_UserInsureLogon& default_instance();

  void Swap(CMD_GP_UserInsureLogon* other);

  // implements Message ----------------------------------------------

  CMD_GP_UserInsureLogon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_UserInsureLogon& from);
  void MergeFrom(const CMD_GP_UserInsureLogon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwUserID = 1;
  inline bool has_dwuserid() const;
  inline void clear_dwuserid();
  static const int kDwUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwuserid() const;
  inline void set_dwuserid(::google::protobuf::int32 value);

  // required string szPassword = 2;
  inline bool has_szpassword() const;
  inline void clear_szpassword();
  static const int kSzPasswordFieldNumber = 2;
  inline const ::std::string& szpassword() const;
  inline void set_szpassword(const ::std::string& value);
  inline void set_szpassword(const char* value);
  inline void set_szpassword(const char* value, size_t size);
  inline ::std::string* mutable_szpassword();
  inline ::std::string* release_szpassword();
  inline void set_allocated_szpassword(::std::string* szpassword);

  // required string szMachineID = 3;
  inline bool has_szmachineid() const;
  inline void clear_szmachineid();
  static const int kSzMachineIDFieldNumber = 3;
  inline const ::std::string& szmachineid() const;
  inline void set_szmachineid(const ::std::string& value);
  inline void set_szmachineid(const char* value);
  inline void set_szmachineid(const char* value, size_t size);
  inline ::std::string* mutable_szmachineid();
  inline ::std::string* release_szmachineid();
  inline void set_allocated_szmachineid(::std::string* szmachineid);

  // @@protoc_insertion_point(class_scope:CMD_GP_UserInsureLogon)
 private:
  inline void set_has_dwuserid();
  inline void clear_has_dwuserid();
  inline void set_has_szpassword();
  inline void clear_has_szpassword();
  inline void set_has_szmachineid();
  inline void clear_has_szmachineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* szpassword_;
  ::std::string* szmachineid_;
  ::google::protobuf::int32 dwuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_UserInsureLogon* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_ModifyInsurePass : public ::google::protobuf::Message {
 public:
  CMD_GP_ModifyInsurePass();
  virtual ~CMD_GP_ModifyInsurePass();

  CMD_GP_ModifyInsurePass(const CMD_GP_ModifyInsurePass& from);

  inline CMD_GP_ModifyInsurePass& operator=(const CMD_GP_ModifyInsurePass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_ModifyInsurePass& default_instance();

  void Swap(CMD_GP_ModifyInsurePass* other);

  // implements Message ----------------------------------------------

  CMD_GP_ModifyInsurePass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_ModifyInsurePass& from);
  void MergeFrom(const CMD_GP_ModifyInsurePass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwUserID = 1;
  inline bool has_dwuserid() const;
  inline void clear_dwuserid();
  static const int kDwUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwuserid() const;
  inline void set_dwuserid(::google::protobuf::int32 value);

  // required string szDesPassword = 2;
  inline bool has_szdespassword() const;
  inline void clear_szdespassword();
  static const int kSzDesPasswordFieldNumber = 2;
  inline const ::std::string& szdespassword() const;
  inline void set_szdespassword(const ::std::string& value);
  inline void set_szdespassword(const char* value);
  inline void set_szdespassword(const char* value, size_t size);
  inline ::std::string* mutable_szdespassword();
  inline ::std::string* release_szdespassword();
  inline void set_allocated_szdespassword(::std::string* szdespassword);

  // required string szScrPassword = 3;
  inline bool has_szscrpassword() const;
  inline void clear_szscrpassword();
  static const int kSzScrPasswordFieldNumber = 3;
  inline const ::std::string& szscrpassword() const;
  inline void set_szscrpassword(const ::std::string& value);
  inline void set_szscrpassword(const char* value);
  inline void set_szscrpassword(const char* value, size_t size);
  inline ::std::string* mutable_szscrpassword();
  inline ::std::string* release_szscrpassword();
  inline void set_allocated_szscrpassword(::std::string* szscrpassword);

  // @@protoc_insertion_point(class_scope:CMD_GP_ModifyInsurePass)
 private:
  inline void set_has_dwuserid();
  inline void clear_has_dwuserid();
  inline void set_has_szdespassword();
  inline void clear_has_szdespassword();
  inline void set_has_szscrpassword();
  inline void clear_has_szscrpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* szdespassword_;
  ::std::string* szscrpassword_;
  ::google::protobuf::int32 dwuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_ModifyInsurePass* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_QueryInsureInfo : public ::google::protobuf::Message {
 public:
  CMD_GP_QueryInsureInfo();
  virtual ~CMD_GP_QueryInsureInfo();

  CMD_GP_QueryInsureInfo(const CMD_GP_QueryInsureInfo& from);

  inline CMD_GP_QueryInsureInfo& operator=(const CMD_GP_QueryInsureInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_QueryInsureInfo& default_instance();

  void Swap(CMD_GP_QueryInsureInfo* other);

  // implements Message ----------------------------------------------

  CMD_GP_QueryInsureInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_QueryInsureInfo& from);
  void MergeFrom(const CMD_GP_QueryInsureInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwUserID = 1;
  inline bool has_dwuserid() const;
  inline void clear_dwuserid();
  static const int kDwUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwuserid() const;
  inline void set_dwuserid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_QueryInsureInfo)
 private:
  inline void set_has_dwuserid();
  inline void clear_has_dwuserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dwuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_QueryInsureInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_UserSaveScore : public ::google::protobuf::Message {
 public:
  CMD_GP_UserSaveScore();
  virtual ~CMD_GP_UserSaveScore();

  CMD_GP_UserSaveScore(const CMD_GP_UserSaveScore& from);

  inline CMD_GP_UserSaveScore& operator=(const CMD_GP_UserSaveScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_UserSaveScore& default_instance();

  void Swap(CMD_GP_UserSaveScore* other);

  // implements Message ----------------------------------------------

  CMD_GP_UserSaveScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_UserSaveScore& from);
  void MergeFrom(const CMD_GP_UserSaveScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwUserID = 1;
  inline bool has_dwuserid() const;
  inline void clear_dwuserid();
  static const int kDwUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwuserid() const;
  inline void set_dwuserid(::google::protobuf::int32 value);

  // required int32 wKindID = 2;
  inline bool has_wkindid() const;
  inline void clear_wkindid();
  static const int kWKindIDFieldNumber = 2;
  inline ::google::protobuf::int32 wkindid() const;
  inline void set_wkindid(::google::protobuf::int32 value);

  // required int64 lSaveScore = 3;
  inline bool has_lsavescore() const;
  inline void clear_lsavescore();
  static const int kLSaveScoreFieldNumber = 3;
  inline ::google::protobuf::int64 lsavescore() const;
  inline void set_lsavescore(::google::protobuf::int64 value);

  // required string szMachineID = 4;
  inline bool has_szmachineid() const;
  inline void clear_szmachineid();
  static const int kSzMachineIDFieldNumber = 4;
  inline const ::std::string& szmachineid() const;
  inline void set_szmachineid(const ::std::string& value);
  inline void set_szmachineid(const char* value);
  inline void set_szmachineid(const char* value, size_t size);
  inline ::std::string* mutable_szmachineid();
  inline ::std::string* release_szmachineid();
  inline void set_allocated_szmachineid(::std::string* szmachineid);

  // @@protoc_insertion_point(class_scope:CMD_GP_UserSaveScore)
 private:
  inline void set_has_dwuserid();
  inline void clear_has_dwuserid();
  inline void set_has_wkindid();
  inline void clear_has_wkindid();
  inline void set_has_lsavescore();
  inline void clear_has_lsavescore();
  inline void set_has_szmachineid();
  inline void clear_has_szmachineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dwuserid_;
  ::google::protobuf::int32 wkindid_;
  ::google::protobuf::int64 lsavescore_;
  ::std::string* szmachineid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_UserSaveScore* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_UserTakeScore : public ::google::protobuf::Message {
 public:
  CMD_GP_UserTakeScore();
  virtual ~CMD_GP_UserTakeScore();

  CMD_GP_UserTakeScore(const CMD_GP_UserTakeScore& from);

  inline CMD_GP_UserTakeScore& operator=(const CMD_GP_UserTakeScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_UserTakeScore& default_instance();

  void Swap(CMD_GP_UserTakeScore* other);

  // implements Message ----------------------------------------------

  CMD_GP_UserTakeScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_UserTakeScore& from);
  void MergeFrom(const CMD_GP_UserTakeScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwUserID = 1;
  inline bool has_dwuserid() const;
  inline void clear_dwuserid();
  static const int kDwUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwuserid() const;
  inline void set_dwuserid(::google::protobuf::int32 value);

  // required int32 wKindID = 2;
  inline bool has_wkindid() const;
  inline void clear_wkindid();
  static const int kWKindIDFieldNumber = 2;
  inline ::google::protobuf::int32 wkindid() const;
  inline void set_wkindid(::google::protobuf::int32 value);

  // required int64 lTakeScore = 3;
  inline bool has_ltakescore() const;
  inline void clear_ltakescore();
  static const int kLTakeScoreFieldNumber = 3;
  inline ::google::protobuf::int64 ltakescore() const;
  inline void set_ltakescore(::google::protobuf::int64 value);

  // required string szMachineID = 4;
  inline bool has_szmachineid() const;
  inline void clear_szmachineid();
  static const int kSzMachineIDFieldNumber = 4;
  inline const ::std::string& szmachineid() const;
  inline void set_szmachineid(const ::std::string& value);
  inline void set_szmachineid(const char* value);
  inline void set_szmachineid(const char* value, size_t size);
  inline ::std::string* mutable_szmachineid();
  inline ::std::string* release_szmachineid();
  inline void set_allocated_szmachineid(::std::string* szmachineid);

  // required int32 cbStaty = 5;
  inline bool has_cbstaty() const;
  inline void clear_cbstaty();
  static const int kCbStatyFieldNumber = 5;
  inline ::google::protobuf::int32 cbstaty() const;
  inline void set_cbstaty(::google::protobuf::int32 value);

  // required string szCodeID = 6;
  inline bool has_szcodeid() const;
  inline void clear_szcodeid();
  static const int kSzCodeIDFieldNumber = 6;
  inline const ::std::string& szcodeid() const;
  inline void set_szcodeid(const ::std::string& value);
  inline void set_szcodeid(const char* value);
  inline void set_szcodeid(const char* value, size_t size);
  inline ::std::string* mutable_szcodeid();
  inline ::std::string* release_szcodeid();
  inline void set_allocated_szcodeid(::std::string* szcodeid);

  // @@protoc_insertion_point(class_scope:CMD_GP_UserTakeScore)
 private:
  inline void set_has_dwuserid();
  inline void clear_has_dwuserid();
  inline void set_has_wkindid();
  inline void clear_has_wkindid();
  inline void set_has_ltakescore();
  inline void clear_has_ltakescore();
  inline void set_has_szmachineid();
  inline void clear_has_szmachineid();
  inline void set_has_cbstaty();
  inline void clear_has_cbstaty();
  inline void set_has_szcodeid();
  inline void clear_has_szcodeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dwuserid_;
  ::google::protobuf::int32 wkindid_;
  ::google::protobuf::int64 ltakescore_;
  ::std::string* szmachineid_;
  ::std::string* szcodeid_;
  ::google::protobuf::int32 cbstaty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_UserTakeScore* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_NewPlayerGift : public ::google::protobuf::Message {
 public:
  CMD_GP_NewPlayerGift();
  virtual ~CMD_GP_NewPlayerGift();

  CMD_GP_NewPlayerGift(const CMD_GP_NewPlayerGift& from);

  inline CMD_GP_NewPlayerGift& operator=(const CMD_GP_NewPlayerGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_NewPlayerGift& default_instance();

  void Swap(CMD_GP_NewPlayerGift* other);

  // implements Message ----------------------------------------------

  CMD_GP_NewPlayerGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_NewPlayerGift& from);
  void MergeFrom(const CMD_GP_NewPlayerGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wGameID = 1;
  inline bool has_wgameid() const;
  inline void clear_wgameid();
  static const int kWGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 wgameid() const;
  inline void set_wgameid(::google::protobuf::int32 value);

  // required int32 wDayNum = 2;
  inline bool has_wdaynum() const;
  inline void clear_wdaynum();
  static const int kWDayNumFieldNumber = 2;
  inline ::google::protobuf::int32 wdaynum() const;
  inline void set_wdaynum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_NewPlayerGift)
 private:
  inline void set_has_wgameid();
  inline void clear_has_wgameid();
  inline void set_has_wdaynum();
  inline void clear_has_wdaynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wgameid_;
  ::google::protobuf::int32 wdaynum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_NewPlayerGift* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_SignIn : public ::google::protobuf::Message {
 public:
  CMD_GP_SignIn();
  virtual ~CMD_GP_SignIn();

  CMD_GP_SignIn(const CMD_GP_SignIn& from);

  inline CMD_GP_SignIn& operator=(const CMD_GP_SignIn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_SignIn& default_instance();

  void Swap(CMD_GP_SignIn* other);

  // implements Message ----------------------------------------------

  CMD_GP_SignIn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_SignIn& from);
  void MergeFrom(const CMD_GP_SignIn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_SignIn)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_SignIn* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetHeadUrl : public ::google::protobuf::Message {
 public:
  CMD_GP_GetHeadUrl();
  virtual ~CMD_GP_GetHeadUrl();

  CMD_GP_GetHeadUrl(const CMD_GP_GetHeadUrl& from);

  inline CMD_GP_GetHeadUrl& operator=(const CMD_GP_GetHeadUrl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetHeadUrl& default_instance();

  void Swap(CMD_GP_GetHeadUrl* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetHeadUrl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetHeadUrl& from);
  void MergeFrom(const CMD_GP_GetHeadUrl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetHeadUrl)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetHeadUrl* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetNoviceCard : public ::google::protobuf::Message {
 public:
  CMD_GP_GetNoviceCard();
  virtual ~CMD_GP_GetNoviceCard();

  CMD_GP_GetNoviceCard(const CMD_GP_GetNoviceCard& from);

  inline CMD_GP_GetNoviceCard& operator=(const CMD_GP_GetNoviceCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetNoviceCard& default_instance();

  void Swap(CMD_GP_GetNoviceCard* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetNoviceCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetNoviceCard& from);
  void MergeFrom(const CMD_GP_GetNoviceCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required string CardNum = 2;
  inline bool has_cardnum() const;
  inline void clear_cardnum();
  static const int kCardNumFieldNumber = 2;
  inline const ::std::string& cardnum() const;
  inline void set_cardnum(const ::std::string& value);
  inline void set_cardnum(const char* value);
  inline void set_cardnum(const char* value, size_t size);
  inline ::std::string* mutable_cardnum();
  inline ::std::string* release_cardnum();
  inline void set_allocated_cardnum(::std::string* cardnum);

  // required string CardPass = 3;
  inline bool has_cardpass() const;
  inline void clear_cardpass();
  static const int kCardPassFieldNumber = 3;
  inline const ::std::string& cardpass() const;
  inline void set_cardpass(const ::std::string& value);
  inline void set_cardpass(const char* value);
  inline void set_cardpass(const char* value, size_t size);
  inline ::std::string* mutable_cardpass();
  inline ::std::string* release_cardpass();
  inline void set_allocated_cardpass(::std::string* cardpass);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetNoviceCard)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_cardnum();
  inline void clear_has_cardnum();
  inline void set_has_cardpass();
  inline void clear_has_cardpass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cardnum_;
  ::std::string* cardpass_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetNoviceCard* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetActivityCard : public ::google::protobuf::Message {
 public:
  CMD_GP_GetActivityCard();
  virtual ~CMD_GP_GetActivityCard();

  CMD_GP_GetActivityCard(const CMD_GP_GetActivityCard& from);

  inline CMD_GP_GetActivityCard& operator=(const CMD_GP_GetActivityCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetActivityCard& default_instance();

  void Swap(CMD_GP_GetActivityCard* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetActivityCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetActivityCard& from);
  void MergeFrom(const CMD_GP_GetActivityCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required string CardNum = 2;
  inline bool has_cardnum() const;
  inline void clear_cardnum();
  static const int kCardNumFieldNumber = 2;
  inline const ::std::string& cardnum() const;
  inline void set_cardnum(const ::std::string& value);
  inline void set_cardnum(const char* value);
  inline void set_cardnum(const char* value, size_t size);
  inline ::std::string* mutable_cardnum();
  inline ::std::string* release_cardnum();
  inline void set_allocated_cardnum(::std::string* cardnum);

  // required string CardPass = 3;
  inline bool has_cardpass() const;
  inline void clear_cardpass();
  static const int kCardPassFieldNumber = 3;
  inline const ::std::string& cardpass() const;
  inline void set_cardpass(const ::std::string& value);
  inline void set_cardpass(const char* value);
  inline void set_cardpass(const char* value, size_t size);
  inline ::std::string* mutable_cardpass();
  inline ::std::string* release_cardpass();
  inline void set_allocated_cardpass(::std::string* cardpass);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetActivityCard)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_cardnum();
  inline void clear_has_cardnum();
  inline void set_has_cardpass();
  inline void clear_has_cardpass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cardnum_;
  ::std::string* cardpass_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetActivityCard* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetReliefMoney : public ::google::protobuf::Message {
 public:
  CMD_GP_GetReliefMoney();
  virtual ~CMD_GP_GetReliefMoney();

  CMD_GP_GetReliefMoney(const CMD_GP_GetReliefMoney& from);

  inline CMD_GP_GetReliefMoney& operator=(const CMD_GP_GetReliefMoney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetReliefMoney& default_instance();

  void Swap(CMD_GP_GetReliefMoney* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetReliefMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetReliefMoney& from);
  void MergeFrom(const CMD_GP_GetReliefMoney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetReliefMoney)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetReliefMoney* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetPayPhone : public ::google::protobuf::Message {
 public:
  CMD_GP_GetPayPhone();
  virtual ~CMD_GP_GetPayPhone();

  CMD_GP_GetPayPhone(const CMD_GP_GetPayPhone& from);

  inline CMD_GP_GetPayPhone& operator=(const CMD_GP_GetPayPhone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetPayPhone& default_instance();

  void Swap(CMD_GP_GetPayPhone* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetPayPhone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetPayPhone& from);
  void MergeFrom(const CMD_GP_GetPayPhone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required string Phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required int32 RID = 3;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRIDFieldNumber = 3;
  inline ::google::protobuf::int32 rid() const;
  inline void set_rid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetPayPhone)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_rid();
  inline void clear_has_rid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phone_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 rid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetPayPhone* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetAwardGold : public ::google::protobuf::Message {
 public:
  CMD_GP_GetAwardGold();
  virtual ~CMD_GP_GetAwardGold();

  CMD_GP_GetAwardGold(const CMD_GP_GetAwardGold& from);

  inline CMD_GP_GetAwardGold& operator=(const CMD_GP_GetAwardGold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetAwardGold& default_instance();

  void Swap(CMD_GP_GetAwardGold* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetAwardGold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetAwardGold& from);
  void MergeFrom(const CMD_GP_GetAwardGold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 RID = 2;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRIDFieldNumber = 2;
  inline ::google::protobuf::int32 rid() const;
  inline void set_rid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetAwardGold)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_rid();
  inline void clear_has_rid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 rid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetAwardGold* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetRechargeRecord : public ::google::protobuf::Message {
 public:
  CMD_GP_GetRechargeRecord();
  virtual ~CMD_GP_GetRechargeRecord();

  CMD_GP_GetRechargeRecord(const CMD_GP_GetRechargeRecord& from);

  inline CMD_GP_GetRechargeRecord& operator=(const CMD_GP_GetRechargeRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetRechargeRecord& default_instance();

  void Swap(CMD_GP_GetRechargeRecord* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetRechargeRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetRechargeRecord& from);
  void MergeFrom(const CMD_GP_GetRechargeRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetRechargeRecord)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetRechargeRecord* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetMonthlyCardScore : public ::google::protobuf::Message {
 public:
  CMD_GP_GetMonthlyCardScore();
  virtual ~CMD_GP_GetMonthlyCardScore();

  CMD_GP_GetMonthlyCardScore(const CMD_GP_GetMonthlyCardScore& from);

  inline CMD_GP_GetMonthlyCardScore& operator=(const CMD_GP_GetMonthlyCardScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetMonthlyCardScore& default_instance();

  void Swap(CMD_GP_GetMonthlyCardScore* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetMonthlyCardScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetMonthlyCardScore& from);
  void MergeFrom(const CMD_GP_GetMonthlyCardScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetMonthlyCardScore)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetMonthlyCardScore* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_SendPhoneSms : public ::google::protobuf::Message {
 public:
  CMD_GP_SendPhoneSms();
  virtual ~CMD_GP_SendPhoneSms();

  CMD_GP_SendPhoneSms(const CMD_GP_SendPhoneSms& from);

  inline CMD_GP_SendPhoneSms& operator=(const CMD_GP_SendPhoneSms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_SendPhoneSms& default_instance();

  void Swap(CMD_GP_SendPhoneSms* other);

  // implements Message ----------------------------------------------

  CMD_GP_SendPhoneSms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_SendPhoneSms& from);
  void MergeFrom(const CMD_GP_SendPhoneSms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required string Phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required int32 SmsType = 3;
  inline bool has_smstype() const;
  inline void clear_smstype();
  static const int kSmsTypeFieldNumber = 3;
  inline ::google::protobuf::int32 smstype() const;
  inline void set_smstype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_SendPhoneSms)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_smstype();
  inline void clear_has_smstype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phone_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 smstype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_SendPhoneSms* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_PhoneBanding : public ::google::protobuf::Message {
 public:
  CMD_GP_PhoneBanding();
  virtual ~CMD_GP_PhoneBanding();

  CMD_GP_PhoneBanding(const CMD_GP_PhoneBanding& from);

  inline CMD_GP_PhoneBanding& operator=(const CMD_GP_PhoneBanding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_PhoneBanding& default_instance();

  void Swap(CMD_GP_PhoneBanding* other);

  // implements Message ----------------------------------------------

  CMD_GP_PhoneBanding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_PhoneBanding& from);
  void MergeFrom(const CMD_GP_PhoneBanding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required string Phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required int32 MsgID = 3;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 3;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // required string SMS = 4;
  inline bool has_sms() const;
  inline void clear_sms();
  static const int kSMSFieldNumber = 4;
  inline const ::std::string& sms() const;
  inline void set_sms(const ::std::string& value);
  inline void set_sms(const char* value);
  inline void set_sms(const char* value, size_t size);
  inline ::std::string* mutable_sms();
  inline ::std::string* release_sms();
  inline void set_allocated_sms(::std::string* sms);

  // @@protoc_insertion_point(class_scope:CMD_GP_PhoneBanding)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_sms();
  inline void clear_has_sms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phone_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 msgid_;
  ::std::string* sms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_PhoneBanding* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_ResetSafePwd : public ::google::protobuf::Message {
 public:
  CMD_GP_ResetSafePwd();
  virtual ~CMD_GP_ResetSafePwd();

  CMD_GP_ResetSafePwd(const CMD_GP_ResetSafePwd& from);

  inline CMD_GP_ResetSafePwd& operator=(const CMD_GP_ResetSafePwd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_ResetSafePwd& default_instance();

  void Swap(CMD_GP_ResetSafePwd* other);

  // implements Message ----------------------------------------------

  CMD_GP_ResetSafePwd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_ResetSafePwd& from);
  void MergeFrom(const CMD_GP_ResetSafePwd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required string Phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required int32 MsgID = 3;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 3;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // required string SMS = 4;
  inline bool has_sms() const;
  inline void clear_sms();
  static const int kSMSFieldNumber = 4;
  inline const ::std::string& sms() const;
  inline void set_sms(const ::std::string& value);
  inline void set_sms(const char* value);
  inline void set_sms(const char* value, size_t size);
  inline ::std::string* mutable_sms();
  inline ::std::string* release_sms();
  inline void set_allocated_sms(::std::string* sms);

  // required string Pwd = 5;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 5;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:CMD_GP_ResetSafePwd)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_sms();
  inline void clear_has_sms();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phone_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 msgid_;
  ::std::string* sms_;
  ::std::string* pwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_ResetSafePwd* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_RealNameAuthentication : public ::google::protobuf::Message {
 public:
  CMD_GP_RealNameAuthentication();
  virtual ~CMD_GP_RealNameAuthentication();

  CMD_GP_RealNameAuthentication(const CMD_GP_RealNameAuthentication& from);

  inline CMD_GP_RealNameAuthentication& operator=(const CMD_GP_RealNameAuthentication& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_RealNameAuthentication& default_instance();

  void Swap(CMD_GP_RealNameAuthentication* other);

  // implements Message ----------------------------------------------

  CMD_GP_RealNameAuthentication* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_RealNameAuthentication& from);
  void MergeFrom(const CMD_GP_RealNameAuthentication& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required string Compellation = 2;
  inline bool has_compellation() const;
  inline void clear_compellation();
  static const int kCompellationFieldNumber = 2;
  inline const ::std::string& compellation() const;
  inline void set_compellation(const ::std::string& value);
  inline void set_compellation(const char* value);
  inline void set_compellation(const char* value, size_t size);
  inline ::std::string* mutable_compellation();
  inline ::std::string* release_compellation();
  inline void set_allocated_compellation(::std::string* compellation);

  // required string PassPortID = 3;
  inline bool has_passportid() const;
  inline void clear_passportid();
  static const int kPassPortIDFieldNumber = 3;
  inline const ::std::string& passportid() const;
  inline void set_passportid(const ::std::string& value);
  inline void set_passportid(const char* value);
  inline void set_passportid(const char* value, size_t size);
  inline ::std::string* mutable_passportid();
  inline ::std::string* release_passportid();
  inline void set_allocated_passportid(::std::string* passportid);

  // @@protoc_insertion_point(class_scope:CMD_GP_RealNameAuthentication)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_compellation();
  inline void clear_has_compellation();
  inline void set_has_passportid();
  inline void clear_has_passportid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* compellation_;
  ::std::string* passportid_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_RealNameAuthentication* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetNickName : public ::google::protobuf::Message {
 public:
  CMD_GP_GetNickName();
  virtual ~CMD_GP_GetNickName();

  CMD_GP_GetNickName(const CMD_GP_GetNickName& from);

  inline CMD_GP_GetNickName& operator=(const CMD_GP_GetNickName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetNickName& default_instance();

  void Swap(CMD_GP_GetNickName* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetNickName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetNickName& from);
  void MergeFrom(const CMD_GP_GetNickName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetNickName)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetNickName* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_LuckDraw : public ::google::protobuf::Message {
 public:
  CMD_GP_LuckDraw();
  virtual ~CMD_GP_LuckDraw();

  CMD_GP_LuckDraw(const CMD_GP_LuckDraw& from);

  inline CMD_GP_LuckDraw& operator=(const CMD_GP_LuckDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_LuckDraw& default_instance();

  void Swap(CMD_GP_LuckDraw* other);

  // implements Message ----------------------------------------------

  CMD_GP_LuckDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_LuckDraw& from);
  void MergeFrom(const CMD_GP_LuckDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 LuckNum = 2;
  inline bool has_lucknum() const;
  inline void clear_lucknum();
  static const int kLuckNumFieldNumber = 2;
  inline ::google::protobuf::int32 lucknum() const;
  inline void set_lucknum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_LuckDraw)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_lucknum();
  inline void clear_has_lucknum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 lucknum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_LuckDraw* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetRechargeCaseBag : public ::google::protobuf::Message {
 public:
  CMD_GP_GetRechargeCaseBag();
  virtual ~CMD_GP_GetRechargeCaseBag();

  CMD_GP_GetRechargeCaseBag(const CMD_GP_GetRechargeCaseBag& from);

  inline CMD_GP_GetRechargeCaseBag& operator=(const CMD_GP_GetRechargeCaseBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetRechargeCaseBag& default_instance();

  void Swap(CMD_GP_GetRechargeCaseBag* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetRechargeCaseBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetRechargeCaseBag& from);
  void MergeFrom(const CMD_GP_GetRechargeCaseBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional int32 casegradeid = 2;
  inline bool has_casegradeid() const;
  inline void clear_casegradeid();
  static const int kCasegradeidFieldNumber = 2;
  inline ::google::protobuf::int32 casegradeid() const;
  inline void set_casegradeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetRechargeCaseBag)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_casegradeid();
  inline void clear_has_casegradeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 casegradeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetRechargeCaseBag* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_BoxConversion : public ::google::protobuf::Message {
 public:
  CMD_GP_BoxConversion();
  virtual ~CMD_GP_BoxConversion();

  CMD_GP_BoxConversion(const CMD_GP_BoxConversion& from);

  inline CMD_GP_BoxConversion& operator=(const CMD_GP_BoxConversion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_BoxConversion& default_instance();

  void Swap(CMD_GP_BoxConversion* other);

  // implements Message ----------------------------------------------

  CMD_GP_BoxConversion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_BoxConversion& from);
  void MergeFrom(const CMD_GP_BoxConversion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 BoxId = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 2;
  inline ::google::protobuf::int32 boxid() const;
  inline void set_boxid(::google::protobuf::int32 value);

  // required int32 Count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_BoxConversion)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 boxid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_BoxConversion* default_instance_;
};
// ===================================================================


// ===================================================================

// CMD_GR_C_PropertyBuy

// required int32 dwSourceUserID = 1;
inline bool CMD_GR_C_PropertyBuy::has_dwsourceuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_C_PropertyBuy::set_has_dwsourceuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_C_PropertyBuy::clear_has_dwsourceuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_C_PropertyBuy::clear_dwsourceuserid() {
  dwsourceuserid_ = 0;
  clear_has_dwsourceuserid();
}
inline ::google::protobuf::int32 CMD_GR_C_PropertyBuy::dwsourceuserid() const {
  return dwsourceuserid_;
}
inline void CMD_GR_C_PropertyBuy::set_dwsourceuserid(::google::protobuf::int32 value) {
  set_has_dwsourceuserid();
  dwsourceuserid_ = value;
}

// required int32 cbRequestArea = 2;
inline bool CMD_GR_C_PropertyBuy::has_cbrequestarea() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_C_PropertyBuy::set_has_cbrequestarea() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_C_PropertyBuy::clear_has_cbrequestarea() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_C_PropertyBuy::clear_cbrequestarea() {
  cbrequestarea_ = 0;
  clear_has_cbrequestarea();
}
inline ::google::protobuf::int32 CMD_GR_C_PropertyBuy::cbrequestarea() const {
  return cbrequestarea_;
}
inline void CMD_GR_C_PropertyBuy::set_cbrequestarea(::google::protobuf::int32 value) {
  set_has_cbrequestarea();
  cbrequestarea_ = value;
}

// required int32 cbConsumeScore = 3;
inline bool CMD_GR_C_PropertyBuy::has_cbconsumescore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GR_C_PropertyBuy::set_has_cbconsumescore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GR_C_PropertyBuy::clear_has_cbconsumescore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GR_C_PropertyBuy::clear_cbconsumescore() {
  cbconsumescore_ = 0;
  clear_has_cbconsumescore();
}
inline ::google::protobuf::int32 CMD_GR_C_PropertyBuy::cbconsumescore() const {
  return cbconsumescore_;
}
inline void CMD_GR_C_PropertyBuy::set_cbconsumescore(::google::protobuf::int32 value) {
  set_has_cbconsumescore();
  cbconsumescore_ = value;
}

// required int32 wItemCount = 4;
inline bool CMD_GR_C_PropertyBuy::has_witemcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GR_C_PropertyBuy::set_has_witemcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GR_C_PropertyBuy::clear_has_witemcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GR_C_PropertyBuy::clear_witemcount() {
  witemcount_ = 0;
  clear_has_witemcount();
}
inline ::google::protobuf::int32 CMD_GR_C_PropertyBuy::witemcount() const {
  return witemcount_;
}
inline void CMD_GR_C_PropertyBuy::set_witemcount(::google::protobuf::int32 value) {
  set_has_witemcount();
  witemcount_ = value;
}

// required int32 wPropertyIndex = 5;
inline bool CMD_GR_C_PropertyBuy::has_wpropertyindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GR_C_PropertyBuy::set_has_wpropertyindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GR_C_PropertyBuy::clear_has_wpropertyindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GR_C_PropertyBuy::clear_wpropertyindex() {
  wpropertyindex_ = 0;
  clear_has_wpropertyindex();
}
inline ::google::protobuf::int32 CMD_GR_C_PropertyBuy::wpropertyindex() const {
  return wpropertyindex_;
}
inline void CMD_GR_C_PropertyBuy::set_wpropertyindex(::google::protobuf::int32 value) {
  set_has_wpropertyindex();
  wpropertyindex_ = value;
}

// required string szTargetUser = 6;
inline bool CMD_GR_C_PropertyBuy::has_sztargetuser() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GR_C_PropertyBuy::set_has_sztargetuser() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GR_C_PropertyBuy::clear_has_sztargetuser() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GR_C_PropertyBuy::clear_sztargetuser() {
  if (sztargetuser_ != &::google::protobuf::internal::kEmptyString) {
    sztargetuser_->clear();
  }
  clear_has_sztargetuser();
}
inline const ::std::string& CMD_GR_C_PropertyBuy::sztargetuser() const {
  return *sztargetuser_;
}
inline void CMD_GR_C_PropertyBuy::set_sztargetuser(const ::std::string& value) {
  set_has_sztargetuser();
  if (sztargetuser_ == &::google::protobuf::internal::kEmptyString) {
    sztargetuser_ = new ::std::string;
  }
  sztargetuser_->assign(value);
}
inline void CMD_GR_C_PropertyBuy::set_sztargetuser(const char* value) {
  set_has_sztargetuser();
  if (sztargetuser_ == &::google::protobuf::internal::kEmptyString) {
    sztargetuser_ = new ::std::string;
  }
  sztargetuser_->assign(value);
}
inline void CMD_GR_C_PropertyBuy::set_sztargetuser(const char* value, size_t size) {
  set_has_sztargetuser();
  if (sztargetuser_ == &::google::protobuf::internal::kEmptyString) {
    sztargetuser_ = new ::std::string;
  }
  sztargetuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GR_C_PropertyBuy::mutable_sztargetuser() {
  set_has_sztargetuser();
  if (sztargetuser_ == &::google::protobuf::internal::kEmptyString) {
    sztargetuser_ = new ::std::string;
  }
  return sztargetuser_;
}
inline ::std::string* CMD_GR_C_PropertyBuy::release_sztargetuser() {
  clear_has_sztargetuser();
  if (sztargetuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sztargetuser_;
    sztargetuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GR_C_PropertyBuy::set_allocated_sztargetuser(::std::string* sztargetuser) {
  if (sztargetuser_ != &::google::protobuf::internal::kEmptyString) {
    delete sztargetuser_;
  }
  if (sztargetuser) {
    set_has_sztargetuser();
    sztargetuser_ = sztargetuser;
  } else {
    clear_has_sztargetuser();
    sztargetuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 cbUseNikeName = 7;
inline bool CMD_GR_C_PropertyBuy::has_cbusenikename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GR_C_PropertyBuy::set_has_cbusenikename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GR_C_PropertyBuy::clear_has_cbusenikename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GR_C_PropertyBuy::clear_cbusenikename() {
  cbusenikename_ = 0;
  clear_has_cbusenikename();
}
inline ::google::protobuf::int32 CMD_GR_C_PropertyBuy::cbusenikename() const {
  return cbusenikename_;
}
inline void CMD_GR_C_PropertyBuy::set_cbusenikename(::google::protobuf::int32 value) {
  set_has_cbusenikename();
  cbusenikename_ = value;
}

// required string szPassword = 8;
inline bool CMD_GR_C_PropertyBuy::has_szpassword() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_GR_C_PropertyBuy::set_has_szpassword() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_GR_C_PropertyBuy::clear_has_szpassword() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_GR_C_PropertyBuy::clear_szpassword() {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    szpassword_->clear();
  }
  clear_has_szpassword();
}
inline const ::std::string& CMD_GR_C_PropertyBuy::szpassword() const {
  return *szpassword_;
}
inline void CMD_GR_C_PropertyBuy::set_szpassword(const ::std::string& value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void CMD_GR_C_PropertyBuy::set_szpassword(const char* value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void CMD_GR_C_PropertyBuy::set_szpassword(const char* value, size_t size) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GR_C_PropertyBuy::mutable_szpassword() {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  return szpassword_;
}
inline ::std::string* CMD_GR_C_PropertyBuy::release_szpassword() {
  clear_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szpassword_;
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GR_C_PropertyBuy::set_allocated_szpassword(::std::string* szpassword) {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (szpassword) {
    set_has_szpassword();
    szpassword_ = szpassword;
  } else {
    clear_has_szpassword();
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_LogonAccounts

// required string unionid = 1;
inline bool CMD_GP_LogonAccounts::has_unionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_unionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_LogonAccounts::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_LogonAccounts::clear_unionid() {
  if (unionid_ != &::google::protobuf::internal::kEmptyString) {
    unionid_->clear();
  }
  clear_has_unionid();
}
inline const ::std::string& CMD_GP_LogonAccounts::unionid() const {
  return *unionid_;
}
inline void CMD_GP_LogonAccounts::set_unionid(const ::std::string& value) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_unionid(const char* value) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_unionid(const char* value, size_t size) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonAccounts::mutable_unionid() {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  return unionid_;
}
inline ::std::string* CMD_GP_LogonAccounts::release_unionid() {
  clear_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unionid_;
    unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonAccounts::set_allocated_unionid(::std::string* unionid) {
  if (unionid_ != &::google::protobuf::internal::kEmptyString) {
    delete unionid_;
  }
  if (unionid) {
    set_has_unionid();
    unionid_ = unionid;
  } else {
    clear_has_unionid();
    unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sex = 2;
inline bool CMD_GP_LogonAccounts::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_LogonAccounts::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_LogonAccounts::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& CMD_GP_LogonAccounts::sex() const {
  return *sex_;
}
inline void CMD_GP_LogonAccounts::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonAccounts::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* CMD_GP_LogonAccounts::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonAccounts::set_allocated_sex(::std::string* sex) {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nickname = 3;
inline bool CMD_GP_LogonAccounts::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_LogonAccounts::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_LogonAccounts::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CMD_GP_LogonAccounts::nickname() const {
  return *nickname_;
}
inline void CMD_GP_LogonAccounts::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonAccounts::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CMD_GP_LogonAccounts::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonAccounts::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string loginpass = 4;
inline bool CMD_GP_LogonAccounts::has_loginpass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_loginpass() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_LogonAccounts::clear_has_loginpass() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_LogonAccounts::clear_loginpass() {
  if (loginpass_ != &::google::protobuf::internal::kEmptyString) {
    loginpass_->clear();
  }
  clear_has_loginpass();
}
inline const ::std::string& CMD_GP_LogonAccounts::loginpass() const {
  return *loginpass_;
}
inline void CMD_GP_LogonAccounts::set_loginpass(const ::std::string& value) {
  set_has_loginpass();
  if (loginpass_ == &::google::protobuf::internal::kEmptyString) {
    loginpass_ = new ::std::string;
  }
  loginpass_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_loginpass(const char* value) {
  set_has_loginpass();
  if (loginpass_ == &::google::protobuf::internal::kEmptyString) {
    loginpass_ = new ::std::string;
  }
  loginpass_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_loginpass(const char* value, size_t size) {
  set_has_loginpass();
  if (loginpass_ == &::google::protobuf::internal::kEmptyString) {
    loginpass_ = new ::std::string;
  }
  loginpass_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonAccounts::mutable_loginpass() {
  set_has_loginpass();
  if (loginpass_ == &::google::protobuf::internal::kEmptyString) {
    loginpass_ = new ::std::string;
  }
  return loginpass_;
}
inline ::std::string* CMD_GP_LogonAccounts::release_loginpass() {
  clear_has_loginpass();
  if (loginpass_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = loginpass_;
    loginpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonAccounts::set_allocated_loginpass(::std::string* loginpass) {
  if (loginpass_ != &::google::protobuf::internal::kEmptyString) {
    delete loginpass_;
  }
  if (loginpass) {
    set_has_loginpass();
    loginpass_ = loginpass;
  } else {
    clear_has_loginpass();
    loginpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string surepass = 5;
inline bool CMD_GP_LogonAccounts::has_surepass() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_surepass() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_LogonAccounts::clear_has_surepass() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_LogonAccounts::clear_surepass() {
  if (surepass_ != &::google::protobuf::internal::kEmptyString) {
    surepass_->clear();
  }
  clear_has_surepass();
}
inline const ::std::string& CMD_GP_LogonAccounts::surepass() const {
  return *surepass_;
}
inline void CMD_GP_LogonAccounts::set_surepass(const ::std::string& value) {
  set_has_surepass();
  if (surepass_ == &::google::protobuf::internal::kEmptyString) {
    surepass_ = new ::std::string;
  }
  surepass_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_surepass(const char* value) {
  set_has_surepass();
  if (surepass_ == &::google::protobuf::internal::kEmptyString) {
    surepass_ = new ::std::string;
  }
  surepass_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_surepass(const char* value, size_t size) {
  set_has_surepass();
  if (surepass_ == &::google::protobuf::internal::kEmptyString) {
    surepass_ = new ::std::string;
  }
  surepass_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonAccounts::mutable_surepass() {
  set_has_surepass();
  if (surepass_ == &::google::protobuf::internal::kEmptyString) {
    surepass_ = new ::std::string;
  }
  return surepass_;
}
inline ::std::string* CMD_GP_LogonAccounts::release_surepass() {
  clear_has_surepass();
  if (surepass_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = surepass_;
    surepass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonAccounts::set_allocated_surepass(::std::string* surepass) {
  if (surepass_ != &::google::protobuf::internal::kEmptyString) {
    delete surepass_;
  }
  if (surepass) {
    set_has_surepass();
    surepass_ = surepass;
  } else {
    clear_has_surepass();
    surepass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string headImgUrl = 6;
inline bool CMD_GP_LogonAccounts::has_headimgurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_headimgurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GP_LogonAccounts::clear_has_headimgurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GP_LogonAccounts::clear_headimgurl() {
  if (headimgurl_ != &::google::protobuf::internal::kEmptyString) {
    headimgurl_->clear();
  }
  clear_has_headimgurl();
}
inline const ::std::string& CMD_GP_LogonAccounts::headimgurl() const {
  return *headimgurl_;
}
inline void CMD_GP_LogonAccounts::set_headimgurl(const ::std::string& value) {
  set_has_headimgurl();
  if (headimgurl_ == &::google::protobuf::internal::kEmptyString) {
    headimgurl_ = new ::std::string;
  }
  headimgurl_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_headimgurl(const char* value) {
  set_has_headimgurl();
  if (headimgurl_ == &::google::protobuf::internal::kEmptyString) {
    headimgurl_ = new ::std::string;
  }
  headimgurl_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_headimgurl(const char* value, size_t size) {
  set_has_headimgurl();
  if (headimgurl_ == &::google::protobuf::internal::kEmptyString) {
    headimgurl_ = new ::std::string;
  }
  headimgurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonAccounts::mutable_headimgurl() {
  set_has_headimgurl();
  if (headimgurl_ == &::google::protobuf::internal::kEmptyString) {
    headimgurl_ = new ::std::string;
  }
  return headimgurl_;
}
inline ::std::string* CMD_GP_LogonAccounts::release_headimgurl() {
  clear_has_headimgurl();
  if (headimgurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headimgurl_;
    headimgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonAccounts::set_allocated_headimgurl(::std::string* headimgurl) {
  if (headimgurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headimgurl_;
  }
  if (headimgurl) {
    set_has_headimgurl();
    headimgurl_ = headimgurl;
  } else {
    clear_has_headimgurl();
    headimgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channelID = 7;
inline bool CMD_GP_LogonAccounts::has_channelid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_channelid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GP_LogonAccounts::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GP_LogonAccounts::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& CMD_GP_LogonAccounts::channelid() const {
  return *channelid_;
}
inline void CMD_GP_LogonAccounts::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonAccounts::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* CMD_GP_LogonAccounts::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonAccounts::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 dwPlazaVersion = 8;
inline bool CMD_GP_LogonAccounts::has_dwplazaversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_dwplazaversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_GP_LogonAccounts::clear_has_dwplazaversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_GP_LogonAccounts::clear_dwplazaversion() {
  dwplazaversion_ = 0;
  clear_has_dwplazaversion();
}
inline ::google::protobuf::int32 CMD_GP_LogonAccounts::dwplazaversion() const {
  return dwplazaversion_;
}
inline void CMD_GP_LogonAccounts::set_dwplazaversion(::google::protobuf::int32 value) {
  set_has_dwplazaversion();
  dwplazaversion_ = value;
}

// required string szMachineID = 9;
inline bool CMD_GP_LogonAccounts::has_szmachineid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_szmachineid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_GP_LogonAccounts::clear_has_szmachineid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_GP_LogonAccounts::clear_szmachineid() {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    szmachineid_->clear();
  }
  clear_has_szmachineid();
}
inline const ::std::string& CMD_GP_LogonAccounts::szmachineid() const {
  return *szmachineid_;
}
inline void CMD_GP_LogonAccounts::set_szmachineid(const ::std::string& value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_szmachineid(const char* value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_szmachineid(const char* value, size_t size) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonAccounts::mutable_szmachineid() {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  return szmachineid_;
}
inline ::std::string* CMD_GP_LogonAccounts::release_szmachineid() {
  clear_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szmachineid_;
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonAccounts::set_allocated_szmachineid(::std::string* szmachineid) {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (szmachineid) {
    set_has_szmachineid();
    szmachineid_ = szmachineid;
  } else {
    clear_has_szmachineid();
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 cbValidateFlags = 10;
inline bool CMD_GP_LogonAccounts::has_cbvalidateflags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_cbvalidateflags() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_GP_LogonAccounts::clear_has_cbvalidateflags() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_GP_LogonAccounts::clear_cbvalidateflags() {
  cbvalidateflags_ = 0;
  clear_has_cbvalidateflags();
}
inline ::google::protobuf::int32 CMD_GP_LogonAccounts::cbvalidateflags() const {
  return cbvalidateflags_;
}
inline void CMD_GP_LogonAccounts::set_cbvalidateflags(::google::protobuf::int32 value) {
  set_has_cbvalidateflags();
  cbvalidateflags_ = value;
}

// optional int32 cbPassPortID = 11;
inline bool CMD_GP_LogonAccounts::has_cbpassportid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_cbpassportid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMD_GP_LogonAccounts::clear_has_cbpassportid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMD_GP_LogonAccounts::clear_cbpassportid() {
  cbpassportid_ = 0;
  clear_has_cbpassportid();
}
inline ::google::protobuf::int32 CMD_GP_LogonAccounts::cbpassportid() const {
  return cbpassportid_;
}
inline void CMD_GP_LogonAccounts::set_cbpassportid(::google::protobuf::int32 value) {
  set_has_cbpassportid();
  cbpassportid_ = value;
}

// optional string szPassPortID = 12;
inline bool CMD_GP_LogonAccounts::has_szpassportid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMD_GP_LogonAccounts::set_has_szpassportid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMD_GP_LogonAccounts::clear_has_szpassportid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMD_GP_LogonAccounts::clear_szpassportid() {
  if (szpassportid_ != &::google::protobuf::internal::kEmptyString) {
    szpassportid_->clear();
  }
  clear_has_szpassportid();
}
inline const ::std::string& CMD_GP_LogonAccounts::szpassportid() const {
  return *szpassportid_;
}
inline void CMD_GP_LogonAccounts::set_szpassportid(const ::std::string& value) {
  set_has_szpassportid();
  if (szpassportid_ == &::google::protobuf::internal::kEmptyString) {
    szpassportid_ = new ::std::string;
  }
  szpassportid_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_szpassportid(const char* value) {
  set_has_szpassportid();
  if (szpassportid_ == &::google::protobuf::internal::kEmptyString) {
    szpassportid_ = new ::std::string;
  }
  szpassportid_->assign(value);
}
inline void CMD_GP_LogonAccounts::set_szpassportid(const char* value, size_t size) {
  set_has_szpassportid();
  if (szpassportid_ == &::google::protobuf::internal::kEmptyString) {
    szpassportid_ = new ::std::string;
  }
  szpassportid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonAccounts::mutable_szpassportid() {
  set_has_szpassportid();
  if (szpassportid_ == &::google::protobuf::internal::kEmptyString) {
    szpassportid_ = new ::std::string;
  }
  return szpassportid_;
}
inline ::std::string* CMD_GP_LogonAccounts::release_szpassportid() {
  clear_has_szpassportid();
  if (szpassportid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szpassportid_;
    szpassportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonAccounts::set_allocated_szpassportid(::std::string* szpassportid) {
  if (szpassportid_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassportid_;
  }
  if (szpassportid) {
    set_has_szpassportid();
    szpassportid_ = szpassportid;
  } else {
    clear_has_szpassportid();
    szpassportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_DuihuanMeiliRequest

// required int32 dwUserID = 1;
inline bool CMD_GP_DuihuanMeiliRequest::has_dwuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_DuihuanMeiliRequest::set_has_dwuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_DuihuanMeiliRequest::clear_has_dwuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_DuihuanMeiliRequest::clear_dwuserid() {
  dwuserid_ = 0;
  clear_has_dwuserid();
}
inline ::google::protobuf::int32 CMD_GP_DuihuanMeiliRequest::dwuserid() const {
  return dwuserid_;
}
inline void CMD_GP_DuihuanMeiliRequest::set_dwuserid(::google::protobuf::int32 value) {
  set_has_dwuserid();
  dwuserid_ = value;
}

// required int64 lExchangeNum = 2;
inline bool CMD_GP_DuihuanMeiliRequest::has_lexchangenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_DuihuanMeiliRequest::set_has_lexchangenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_DuihuanMeiliRequest::clear_has_lexchangenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_DuihuanMeiliRequest::clear_lexchangenum() {
  lexchangenum_ = GOOGLE_LONGLONG(0);
  clear_has_lexchangenum();
}
inline ::google::protobuf::int64 CMD_GP_DuihuanMeiliRequest::lexchangenum() const {
  return lexchangenum_;
}
inline void CMD_GP_DuihuanMeiliRequest::set_lexchangenum(::google::protobuf::int64 value) {
  set_has_lexchangenum();
  lexchangenum_ = value;
}

// required string szPassWord = 3;
inline bool CMD_GP_DuihuanMeiliRequest::has_szpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_DuihuanMeiliRequest::set_has_szpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_DuihuanMeiliRequest::clear_has_szpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_DuihuanMeiliRequest::clear_szpassword() {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    szpassword_->clear();
  }
  clear_has_szpassword();
}
inline const ::std::string& CMD_GP_DuihuanMeiliRequest::szpassword() const {
  return *szpassword_;
}
inline void CMD_GP_DuihuanMeiliRequest::set_szpassword(const ::std::string& value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void CMD_GP_DuihuanMeiliRequest::set_szpassword(const char* value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void CMD_GP_DuihuanMeiliRequest::set_szpassword(const char* value, size_t size) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_DuihuanMeiliRequest::mutable_szpassword() {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  return szpassword_;
}
inline ::std::string* CMD_GP_DuihuanMeiliRequest::release_szpassword() {
  clear_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szpassword_;
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_DuihuanMeiliRequest::set_allocated_szpassword(::std::string* szpassword) {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (szpassword) {
    set_has_szpassword();
    szpassword_ = szpassword;
  } else {
    clear_has_szpassword();
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string szMachineID = 4;
inline bool CMD_GP_DuihuanMeiliRequest::has_szmachineid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_DuihuanMeiliRequest::set_has_szmachineid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_DuihuanMeiliRequest::clear_has_szmachineid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_DuihuanMeiliRequest::clear_szmachineid() {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    szmachineid_->clear();
  }
  clear_has_szmachineid();
}
inline const ::std::string& CMD_GP_DuihuanMeiliRequest::szmachineid() const {
  return *szmachineid_;
}
inline void CMD_GP_DuihuanMeiliRequest::set_szmachineid(const ::std::string& value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_DuihuanMeiliRequest::set_szmachineid(const char* value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_DuihuanMeiliRequest::set_szmachineid(const char* value, size_t size) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_DuihuanMeiliRequest::mutable_szmachineid() {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  return szmachineid_;
}
inline ::std::string* CMD_GP_DuihuanMeiliRequest::release_szmachineid() {
  clear_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szmachineid_;
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_DuihuanMeiliRequest::set_allocated_szmachineid(::std::string* szmachineid) {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (szmachineid) {
    set_has_szmachineid();
    szmachineid_ = szmachineid;
  } else {
    clear_has_szmachineid();
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_UserInsureLogon

// required int32 dwUserID = 1;
inline bool CMD_GP_UserInsureLogon::has_dwuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_UserInsureLogon::set_has_dwuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_UserInsureLogon::clear_has_dwuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_UserInsureLogon::clear_dwuserid() {
  dwuserid_ = 0;
  clear_has_dwuserid();
}
inline ::google::protobuf::int32 CMD_GP_UserInsureLogon::dwuserid() const {
  return dwuserid_;
}
inline void CMD_GP_UserInsureLogon::set_dwuserid(::google::protobuf::int32 value) {
  set_has_dwuserid();
  dwuserid_ = value;
}

// required string szPassword = 2;
inline bool CMD_GP_UserInsureLogon::has_szpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_UserInsureLogon::set_has_szpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_UserInsureLogon::clear_has_szpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_UserInsureLogon::clear_szpassword() {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    szpassword_->clear();
  }
  clear_has_szpassword();
}
inline const ::std::string& CMD_GP_UserInsureLogon::szpassword() const {
  return *szpassword_;
}
inline void CMD_GP_UserInsureLogon::set_szpassword(const ::std::string& value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void CMD_GP_UserInsureLogon::set_szpassword(const char* value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void CMD_GP_UserInsureLogon::set_szpassword(const char* value, size_t size) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_UserInsureLogon::mutable_szpassword() {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  return szpassword_;
}
inline ::std::string* CMD_GP_UserInsureLogon::release_szpassword() {
  clear_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szpassword_;
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_UserInsureLogon::set_allocated_szpassword(::std::string* szpassword) {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (szpassword) {
    set_has_szpassword();
    szpassword_ = szpassword;
  } else {
    clear_has_szpassword();
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string szMachineID = 3;
inline bool CMD_GP_UserInsureLogon::has_szmachineid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_UserInsureLogon::set_has_szmachineid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_UserInsureLogon::clear_has_szmachineid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_UserInsureLogon::clear_szmachineid() {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    szmachineid_->clear();
  }
  clear_has_szmachineid();
}
inline const ::std::string& CMD_GP_UserInsureLogon::szmachineid() const {
  return *szmachineid_;
}
inline void CMD_GP_UserInsureLogon::set_szmachineid(const ::std::string& value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_UserInsureLogon::set_szmachineid(const char* value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_UserInsureLogon::set_szmachineid(const char* value, size_t size) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_UserInsureLogon::mutable_szmachineid() {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  return szmachineid_;
}
inline ::std::string* CMD_GP_UserInsureLogon::release_szmachineid() {
  clear_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szmachineid_;
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_UserInsureLogon::set_allocated_szmachineid(::std::string* szmachineid) {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (szmachineid) {
    set_has_szmachineid();
    szmachineid_ = szmachineid;
  } else {
    clear_has_szmachineid();
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_ModifyInsurePass

// required int32 dwUserID = 1;
inline bool CMD_GP_ModifyInsurePass::has_dwuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_ModifyInsurePass::set_has_dwuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_ModifyInsurePass::clear_has_dwuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_ModifyInsurePass::clear_dwuserid() {
  dwuserid_ = 0;
  clear_has_dwuserid();
}
inline ::google::protobuf::int32 CMD_GP_ModifyInsurePass::dwuserid() const {
  return dwuserid_;
}
inline void CMD_GP_ModifyInsurePass::set_dwuserid(::google::protobuf::int32 value) {
  set_has_dwuserid();
  dwuserid_ = value;
}

// required string szDesPassword = 2;
inline bool CMD_GP_ModifyInsurePass::has_szdespassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_ModifyInsurePass::set_has_szdespassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_ModifyInsurePass::clear_has_szdespassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_ModifyInsurePass::clear_szdespassword() {
  if (szdespassword_ != &::google::protobuf::internal::kEmptyString) {
    szdespassword_->clear();
  }
  clear_has_szdespassword();
}
inline const ::std::string& CMD_GP_ModifyInsurePass::szdespassword() const {
  return *szdespassword_;
}
inline void CMD_GP_ModifyInsurePass::set_szdespassword(const ::std::string& value) {
  set_has_szdespassword();
  if (szdespassword_ == &::google::protobuf::internal::kEmptyString) {
    szdespassword_ = new ::std::string;
  }
  szdespassword_->assign(value);
}
inline void CMD_GP_ModifyInsurePass::set_szdespassword(const char* value) {
  set_has_szdespassword();
  if (szdespassword_ == &::google::protobuf::internal::kEmptyString) {
    szdespassword_ = new ::std::string;
  }
  szdespassword_->assign(value);
}
inline void CMD_GP_ModifyInsurePass::set_szdespassword(const char* value, size_t size) {
  set_has_szdespassword();
  if (szdespassword_ == &::google::protobuf::internal::kEmptyString) {
    szdespassword_ = new ::std::string;
  }
  szdespassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ModifyInsurePass::mutable_szdespassword() {
  set_has_szdespassword();
  if (szdespassword_ == &::google::protobuf::internal::kEmptyString) {
    szdespassword_ = new ::std::string;
  }
  return szdespassword_;
}
inline ::std::string* CMD_GP_ModifyInsurePass::release_szdespassword() {
  clear_has_szdespassword();
  if (szdespassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szdespassword_;
    szdespassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ModifyInsurePass::set_allocated_szdespassword(::std::string* szdespassword) {
  if (szdespassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szdespassword_;
  }
  if (szdespassword) {
    set_has_szdespassword();
    szdespassword_ = szdespassword;
  } else {
    clear_has_szdespassword();
    szdespassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string szScrPassword = 3;
inline bool CMD_GP_ModifyInsurePass::has_szscrpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_ModifyInsurePass::set_has_szscrpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_ModifyInsurePass::clear_has_szscrpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_ModifyInsurePass::clear_szscrpassword() {
  if (szscrpassword_ != &::google::protobuf::internal::kEmptyString) {
    szscrpassword_->clear();
  }
  clear_has_szscrpassword();
}
inline const ::std::string& CMD_GP_ModifyInsurePass::szscrpassword() const {
  return *szscrpassword_;
}
inline void CMD_GP_ModifyInsurePass::set_szscrpassword(const ::std::string& value) {
  set_has_szscrpassword();
  if (szscrpassword_ == &::google::protobuf::internal::kEmptyString) {
    szscrpassword_ = new ::std::string;
  }
  szscrpassword_->assign(value);
}
inline void CMD_GP_ModifyInsurePass::set_szscrpassword(const char* value) {
  set_has_szscrpassword();
  if (szscrpassword_ == &::google::protobuf::internal::kEmptyString) {
    szscrpassword_ = new ::std::string;
  }
  szscrpassword_->assign(value);
}
inline void CMD_GP_ModifyInsurePass::set_szscrpassword(const char* value, size_t size) {
  set_has_szscrpassword();
  if (szscrpassword_ == &::google::protobuf::internal::kEmptyString) {
    szscrpassword_ = new ::std::string;
  }
  szscrpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ModifyInsurePass::mutable_szscrpassword() {
  set_has_szscrpassword();
  if (szscrpassword_ == &::google::protobuf::internal::kEmptyString) {
    szscrpassword_ = new ::std::string;
  }
  return szscrpassword_;
}
inline ::std::string* CMD_GP_ModifyInsurePass::release_szscrpassword() {
  clear_has_szscrpassword();
  if (szscrpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szscrpassword_;
    szscrpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ModifyInsurePass::set_allocated_szscrpassword(::std::string* szscrpassword) {
  if (szscrpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szscrpassword_;
  }
  if (szscrpassword) {
    set_has_szscrpassword();
    szscrpassword_ = szscrpassword;
  } else {
    clear_has_szscrpassword();
    szscrpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_QueryInsureInfo

// required int32 dwUserID = 1;
inline bool CMD_GP_QueryInsureInfo::has_dwuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_QueryInsureInfo::set_has_dwuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_QueryInsureInfo::clear_has_dwuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_QueryInsureInfo::clear_dwuserid() {
  dwuserid_ = 0;
  clear_has_dwuserid();
}
inline ::google::protobuf::int32 CMD_GP_QueryInsureInfo::dwuserid() const {
  return dwuserid_;
}
inline void CMD_GP_QueryInsureInfo::set_dwuserid(::google::protobuf::int32 value) {
  set_has_dwuserid();
  dwuserid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_UserSaveScore

// required int32 dwUserID = 1;
inline bool CMD_GP_UserSaveScore::has_dwuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_UserSaveScore::set_has_dwuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_UserSaveScore::clear_has_dwuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_UserSaveScore::clear_dwuserid() {
  dwuserid_ = 0;
  clear_has_dwuserid();
}
inline ::google::protobuf::int32 CMD_GP_UserSaveScore::dwuserid() const {
  return dwuserid_;
}
inline void CMD_GP_UserSaveScore::set_dwuserid(::google::protobuf::int32 value) {
  set_has_dwuserid();
  dwuserid_ = value;
}

// required int32 wKindID = 2;
inline bool CMD_GP_UserSaveScore::has_wkindid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_UserSaveScore::set_has_wkindid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_UserSaveScore::clear_has_wkindid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_UserSaveScore::clear_wkindid() {
  wkindid_ = 0;
  clear_has_wkindid();
}
inline ::google::protobuf::int32 CMD_GP_UserSaveScore::wkindid() const {
  return wkindid_;
}
inline void CMD_GP_UserSaveScore::set_wkindid(::google::protobuf::int32 value) {
  set_has_wkindid();
  wkindid_ = value;
}

// required int64 lSaveScore = 3;
inline bool CMD_GP_UserSaveScore::has_lsavescore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_UserSaveScore::set_has_lsavescore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_UserSaveScore::clear_has_lsavescore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_UserSaveScore::clear_lsavescore() {
  lsavescore_ = GOOGLE_LONGLONG(0);
  clear_has_lsavescore();
}
inline ::google::protobuf::int64 CMD_GP_UserSaveScore::lsavescore() const {
  return lsavescore_;
}
inline void CMD_GP_UserSaveScore::set_lsavescore(::google::protobuf::int64 value) {
  set_has_lsavescore();
  lsavescore_ = value;
}

// required string szMachineID = 4;
inline bool CMD_GP_UserSaveScore::has_szmachineid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_UserSaveScore::set_has_szmachineid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_UserSaveScore::clear_has_szmachineid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_UserSaveScore::clear_szmachineid() {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    szmachineid_->clear();
  }
  clear_has_szmachineid();
}
inline const ::std::string& CMD_GP_UserSaveScore::szmachineid() const {
  return *szmachineid_;
}
inline void CMD_GP_UserSaveScore::set_szmachineid(const ::std::string& value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_UserSaveScore::set_szmachineid(const char* value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_UserSaveScore::set_szmachineid(const char* value, size_t size) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_UserSaveScore::mutable_szmachineid() {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  return szmachineid_;
}
inline ::std::string* CMD_GP_UserSaveScore::release_szmachineid() {
  clear_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szmachineid_;
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_UserSaveScore::set_allocated_szmachineid(::std::string* szmachineid) {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (szmachineid) {
    set_has_szmachineid();
    szmachineid_ = szmachineid;
  } else {
    clear_has_szmachineid();
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_UserTakeScore

// required int32 dwUserID = 1;
inline bool CMD_GP_UserTakeScore::has_dwuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_UserTakeScore::set_has_dwuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_UserTakeScore::clear_has_dwuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_UserTakeScore::clear_dwuserid() {
  dwuserid_ = 0;
  clear_has_dwuserid();
}
inline ::google::protobuf::int32 CMD_GP_UserTakeScore::dwuserid() const {
  return dwuserid_;
}
inline void CMD_GP_UserTakeScore::set_dwuserid(::google::protobuf::int32 value) {
  set_has_dwuserid();
  dwuserid_ = value;
}

// required int32 wKindID = 2;
inline bool CMD_GP_UserTakeScore::has_wkindid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_UserTakeScore::set_has_wkindid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_UserTakeScore::clear_has_wkindid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_UserTakeScore::clear_wkindid() {
  wkindid_ = 0;
  clear_has_wkindid();
}
inline ::google::protobuf::int32 CMD_GP_UserTakeScore::wkindid() const {
  return wkindid_;
}
inline void CMD_GP_UserTakeScore::set_wkindid(::google::protobuf::int32 value) {
  set_has_wkindid();
  wkindid_ = value;
}

// required int64 lTakeScore = 3;
inline bool CMD_GP_UserTakeScore::has_ltakescore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_UserTakeScore::set_has_ltakescore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_UserTakeScore::clear_has_ltakescore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_UserTakeScore::clear_ltakescore() {
  ltakescore_ = GOOGLE_LONGLONG(0);
  clear_has_ltakescore();
}
inline ::google::protobuf::int64 CMD_GP_UserTakeScore::ltakescore() const {
  return ltakescore_;
}
inline void CMD_GP_UserTakeScore::set_ltakescore(::google::protobuf::int64 value) {
  set_has_ltakescore();
  ltakescore_ = value;
}

// required string szMachineID = 4;
inline bool CMD_GP_UserTakeScore::has_szmachineid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_UserTakeScore::set_has_szmachineid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_UserTakeScore::clear_has_szmachineid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_UserTakeScore::clear_szmachineid() {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    szmachineid_->clear();
  }
  clear_has_szmachineid();
}
inline const ::std::string& CMD_GP_UserTakeScore::szmachineid() const {
  return *szmachineid_;
}
inline void CMD_GP_UserTakeScore::set_szmachineid(const ::std::string& value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_UserTakeScore::set_szmachineid(const char* value) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(value);
}
inline void CMD_GP_UserTakeScore::set_szmachineid(const char* value, size_t size) {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  szmachineid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_UserTakeScore::mutable_szmachineid() {
  set_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    szmachineid_ = new ::std::string;
  }
  return szmachineid_;
}
inline ::std::string* CMD_GP_UserTakeScore::release_szmachineid() {
  clear_has_szmachineid();
  if (szmachineid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szmachineid_;
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_UserTakeScore::set_allocated_szmachineid(::std::string* szmachineid) {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (szmachineid) {
    set_has_szmachineid();
    szmachineid_ = szmachineid;
  } else {
    clear_has_szmachineid();
    szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 cbStaty = 5;
inline bool CMD_GP_UserTakeScore::has_cbstaty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_UserTakeScore::set_has_cbstaty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_UserTakeScore::clear_has_cbstaty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_UserTakeScore::clear_cbstaty() {
  cbstaty_ = 0;
  clear_has_cbstaty();
}
inline ::google::protobuf::int32 CMD_GP_UserTakeScore::cbstaty() const {
  return cbstaty_;
}
inline void CMD_GP_UserTakeScore::set_cbstaty(::google::protobuf::int32 value) {
  set_has_cbstaty();
  cbstaty_ = value;
}

// required string szCodeID = 6;
inline bool CMD_GP_UserTakeScore::has_szcodeid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GP_UserTakeScore::set_has_szcodeid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GP_UserTakeScore::clear_has_szcodeid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GP_UserTakeScore::clear_szcodeid() {
  if (szcodeid_ != &::google::protobuf::internal::kEmptyString) {
    szcodeid_->clear();
  }
  clear_has_szcodeid();
}
inline const ::std::string& CMD_GP_UserTakeScore::szcodeid() const {
  return *szcodeid_;
}
inline void CMD_GP_UserTakeScore::set_szcodeid(const ::std::string& value) {
  set_has_szcodeid();
  if (szcodeid_ == &::google::protobuf::internal::kEmptyString) {
    szcodeid_ = new ::std::string;
  }
  szcodeid_->assign(value);
}
inline void CMD_GP_UserTakeScore::set_szcodeid(const char* value) {
  set_has_szcodeid();
  if (szcodeid_ == &::google::protobuf::internal::kEmptyString) {
    szcodeid_ = new ::std::string;
  }
  szcodeid_->assign(value);
}
inline void CMD_GP_UserTakeScore::set_szcodeid(const char* value, size_t size) {
  set_has_szcodeid();
  if (szcodeid_ == &::google::protobuf::internal::kEmptyString) {
    szcodeid_ = new ::std::string;
  }
  szcodeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_UserTakeScore::mutable_szcodeid() {
  set_has_szcodeid();
  if (szcodeid_ == &::google::protobuf::internal::kEmptyString) {
    szcodeid_ = new ::std::string;
  }
  return szcodeid_;
}
inline ::std::string* CMD_GP_UserTakeScore::release_szcodeid() {
  clear_has_szcodeid();
  if (szcodeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szcodeid_;
    szcodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_UserTakeScore::set_allocated_szcodeid(::std::string* szcodeid) {
  if (szcodeid_ != &::google::protobuf::internal::kEmptyString) {
    delete szcodeid_;
  }
  if (szcodeid) {
    set_has_szcodeid();
    szcodeid_ = szcodeid;
  } else {
    clear_has_szcodeid();
    szcodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_NewPlayerGift

// required int32 wGameID = 1;
inline bool CMD_GP_NewPlayerGift::has_wgameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_NewPlayerGift::set_has_wgameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_NewPlayerGift::clear_has_wgameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_NewPlayerGift::clear_wgameid() {
  wgameid_ = 0;
  clear_has_wgameid();
}
inline ::google::protobuf::int32 CMD_GP_NewPlayerGift::wgameid() const {
  return wgameid_;
}
inline void CMD_GP_NewPlayerGift::set_wgameid(::google::protobuf::int32 value) {
  set_has_wgameid();
  wgameid_ = value;
}

// required int32 wDayNum = 2;
inline bool CMD_GP_NewPlayerGift::has_wdaynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_NewPlayerGift::set_has_wdaynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_NewPlayerGift::clear_has_wdaynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_NewPlayerGift::clear_wdaynum() {
  wdaynum_ = 0;
  clear_has_wdaynum();
}
inline ::google::protobuf::int32 CMD_GP_NewPlayerGift::wdaynum() const {
  return wdaynum_;
}
inline void CMD_GP_NewPlayerGift::set_wdaynum(::google::protobuf::int32 value) {
  set_has_wdaynum();
  wdaynum_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_SignIn

// required int32 GameID = 1;
inline bool CMD_GP_SignIn::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_SignIn::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_SignIn::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_SignIn::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_SignIn::gameid() const {
  return gameid_;
}
inline void CMD_GP_SignIn::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GetHeadUrl

// required int32 GameID = 1;
inline bool CMD_GP_GetHeadUrl::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetHeadUrl::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetHeadUrl::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetHeadUrl::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetHeadUrl::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetHeadUrl::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GetNoviceCard

// required int32 GameID = 1;
inline bool CMD_GP_GetNoviceCard::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetNoviceCard::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetNoviceCard::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetNoviceCard::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetNoviceCard::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required string CardNum = 2;
inline bool CMD_GP_GetNoviceCard::has_cardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_cardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetNoviceCard::clear_has_cardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetNoviceCard::clear_cardnum() {
  if (cardnum_ != &::google::protobuf::internal::kEmptyString) {
    cardnum_->clear();
  }
  clear_has_cardnum();
}
inline const ::std::string& CMD_GP_GetNoviceCard::cardnum() const {
  return *cardnum_;
}
inline void CMD_GP_GetNoviceCard::set_cardnum(const ::std::string& value) {
  set_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    cardnum_ = new ::std::string;
  }
  cardnum_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_cardnum(const char* value) {
  set_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    cardnum_ = new ::std::string;
  }
  cardnum_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_cardnum(const char* value, size_t size) {
  set_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    cardnum_ = new ::std::string;
  }
  cardnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNoviceCard::mutable_cardnum() {
  set_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    cardnum_ = new ::std::string;
  }
  return cardnum_;
}
inline ::std::string* CMD_GP_GetNoviceCard::release_cardnum() {
  clear_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardnum_;
    cardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNoviceCard::set_allocated_cardnum(::std::string* cardnum) {
  if (cardnum_ != &::google::protobuf::internal::kEmptyString) {
    delete cardnum_;
  }
  if (cardnum) {
    set_has_cardnum();
    cardnum_ = cardnum;
  } else {
    clear_has_cardnum();
    cardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CardPass = 3;
inline bool CMD_GP_GetNoviceCard::has_cardpass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_cardpass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GetNoviceCard::clear_has_cardpass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GetNoviceCard::clear_cardpass() {
  if (cardpass_ != &::google::protobuf::internal::kEmptyString) {
    cardpass_->clear();
  }
  clear_has_cardpass();
}
inline const ::std::string& CMD_GP_GetNoviceCard::cardpass() const {
  return *cardpass_;
}
inline void CMD_GP_GetNoviceCard::set_cardpass(const ::std::string& value) {
  set_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    cardpass_ = new ::std::string;
  }
  cardpass_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_cardpass(const char* value) {
  set_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    cardpass_ = new ::std::string;
  }
  cardpass_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_cardpass(const char* value, size_t size) {
  set_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    cardpass_ = new ::std::string;
  }
  cardpass_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNoviceCard::mutable_cardpass() {
  set_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    cardpass_ = new ::std::string;
  }
  return cardpass_;
}
inline ::std::string* CMD_GP_GetNoviceCard::release_cardpass() {
  clear_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardpass_;
    cardpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNoviceCard::set_allocated_cardpass(::std::string* cardpass) {
  if (cardpass_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpass_;
  }
  if (cardpass) {
    set_has_cardpass();
    cardpass_ = cardpass;
  } else {
    clear_has_cardpass();
    cardpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetActivityCard

// required int32 GameID = 1;
inline bool CMD_GP_GetActivityCard::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetActivityCard::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetActivityCard::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetActivityCard::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetActivityCard::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetActivityCard::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required string CardNum = 2;
inline bool CMD_GP_GetActivityCard::has_cardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetActivityCard::set_has_cardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetActivityCard::clear_has_cardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetActivityCard::clear_cardnum() {
  if (cardnum_ != &::google::protobuf::internal::kEmptyString) {
    cardnum_->clear();
  }
  clear_has_cardnum();
}
inline const ::std::string& CMD_GP_GetActivityCard::cardnum() const {
  return *cardnum_;
}
inline void CMD_GP_GetActivityCard::set_cardnum(const ::std::string& value) {
  set_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    cardnum_ = new ::std::string;
  }
  cardnum_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_cardnum(const char* value) {
  set_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    cardnum_ = new ::std::string;
  }
  cardnum_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_cardnum(const char* value, size_t size) {
  set_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    cardnum_ = new ::std::string;
  }
  cardnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetActivityCard::mutable_cardnum() {
  set_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    cardnum_ = new ::std::string;
  }
  return cardnum_;
}
inline ::std::string* CMD_GP_GetActivityCard::release_cardnum() {
  clear_has_cardnum();
  if (cardnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardnum_;
    cardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetActivityCard::set_allocated_cardnum(::std::string* cardnum) {
  if (cardnum_ != &::google::protobuf::internal::kEmptyString) {
    delete cardnum_;
  }
  if (cardnum) {
    set_has_cardnum();
    cardnum_ = cardnum;
  } else {
    clear_has_cardnum();
    cardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CardPass = 3;
inline bool CMD_GP_GetActivityCard::has_cardpass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GetActivityCard::set_has_cardpass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GetActivityCard::clear_has_cardpass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GetActivityCard::clear_cardpass() {
  if (cardpass_ != &::google::protobuf::internal::kEmptyString) {
    cardpass_->clear();
  }
  clear_has_cardpass();
}
inline const ::std::string& CMD_GP_GetActivityCard::cardpass() const {
  return *cardpass_;
}
inline void CMD_GP_GetActivityCard::set_cardpass(const ::std::string& value) {
  set_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    cardpass_ = new ::std::string;
  }
  cardpass_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_cardpass(const char* value) {
  set_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    cardpass_ = new ::std::string;
  }
  cardpass_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_cardpass(const char* value, size_t size) {
  set_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    cardpass_ = new ::std::string;
  }
  cardpass_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetActivityCard::mutable_cardpass() {
  set_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    cardpass_ = new ::std::string;
  }
  return cardpass_;
}
inline ::std::string* CMD_GP_GetActivityCard::release_cardpass() {
  clear_has_cardpass();
  if (cardpass_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardpass_;
    cardpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetActivityCard::set_allocated_cardpass(::std::string* cardpass) {
  if (cardpass_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpass_;
  }
  if (cardpass) {
    set_has_cardpass();
    cardpass_ = cardpass;
  } else {
    clear_has_cardpass();
    cardpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetReliefMoney

// required int32 GameID = 1;
inline bool CMD_GP_GetReliefMoney::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetReliefMoney::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetReliefMoney::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetReliefMoney::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetReliefMoney::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetReliefMoney::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 Type = 2;
inline bool CMD_GP_GetReliefMoney::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetReliefMoney::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetReliefMoney::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetReliefMoney::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CMD_GP_GetReliefMoney::type() const {
  return type_;
}
inline void CMD_GP_GetReliefMoney::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GetPayPhone

// required int32 GameID = 1;
inline bool CMD_GP_GetPayPhone::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetPayPhone::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetPayPhone::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetPayPhone::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetPayPhone::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetPayPhone::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required string Phone = 2;
inline bool CMD_GP_GetPayPhone::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetPayPhone::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetPayPhone::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetPayPhone::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& CMD_GP_GetPayPhone::phone() const {
  return *phone_;
}
inline void CMD_GP_GetPayPhone::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CMD_GP_GetPayPhone::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CMD_GP_GetPayPhone::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetPayPhone::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* CMD_GP_GetPayPhone::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetPayPhone::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 RID = 3;
inline bool CMD_GP_GetPayPhone::has_rid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GetPayPhone::set_has_rid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GetPayPhone::clear_has_rid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GetPayPhone::clear_rid() {
  rid_ = 0;
  clear_has_rid();
}
inline ::google::protobuf::int32 CMD_GP_GetPayPhone::rid() const {
  return rid_;
}
inline void CMD_GP_GetPayPhone::set_rid(::google::protobuf::int32 value) {
  set_has_rid();
  rid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GetAwardGold

// required int32 GameID = 1;
inline bool CMD_GP_GetAwardGold::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetAwardGold::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetAwardGold::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetAwardGold::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetAwardGold::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetAwardGold::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 RID = 2;
inline bool CMD_GP_GetAwardGold::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetAwardGold::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetAwardGold::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetAwardGold::clear_rid() {
  rid_ = 0;
  clear_has_rid();
}
inline ::google::protobuf::int32 CMD_GP_GetAwardGold::rid() const {
  return rid_;
}
inline void CMD_GP_GetAwardGold::set_rid(::google::protobuf::int32 value) {
  set_has_rid();
  rid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GetRechargeRecord

// required int32 GameID = 1;
inline bool CMD_GP_GetRechargeRecord::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetRechargeRecord::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetRechargeRecord::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetRechargeRecord::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetRechargeRecord::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetRechargeRecord::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GetMonthlyCardScore

// required int32 GameID = 1;
inline bool CMD_GP_GetMonthlyCardScore::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetMonthlyCardScore::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetMonthlyCardScore::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetMonthlyCardScore::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetMonthlyCardScore::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetMonthlyCardScore::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_SendPhoneSms

// required int32 GameID = 1;
inline bool CMD_GP_SendPhoneSms::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_SendPhoneSms::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_SendPhoneSms::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_SendPhoneSms::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_SendPhoneSms::gameid() const {
  return gameid_;
}
inline void CMD_GP_SendPhoneSms::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required string Phone = 2;
inline bool CMD_GP_SendPhoneSms::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_SendPhoneSms::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_SendPhoneSms::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_SendPhoneSms::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& CMD_GP_SendPhoneSms::phone() const {
  return *phone_;
}
inline void CMD_GP_SendPhoneSms::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CMD_GP_SendPhoneSms::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CMD_GP_SendPhoneSms::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_SendPhoneSms::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* CMD_GP_SendPhoneSms::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_SendPhoneSms::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 SmsType = 3;
inline bool CMD_GP_SendPhoneSms::has_smstype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_SendPhoneSms::set_has_smstype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_SendPhoneSms::clear_has_smstype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_SendPhoneSms::clear_smstype() {
  smstype_ = 0;
  clear_has_smstype();
}
inline ::google::protobuf::int32 CMD_GP_SendPhoneSms::smstype() const {
  return smstype_;
}
inline void CMD_GP_SendPhoneSms::set_smstype(::google::protobuf::int32 value) {
  set_has_smstype();
  smstype_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_PhoneBanding

// required int32 GameID = 1;
inline bool CMD_GP_PhoneBanding::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_PhoneBanding::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_PhoneBanding::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_PhoneBanding::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_PhoneBanding::gameid() const {
  return gameid_;
}
inline void CMD_GP_PhoneBanding::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required string Phone = 2;
inline bool CMD_GP_PhoneBanding::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_PhoneBanding::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_PhoneBanding::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_PhoneBanding::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& CMD_GP_PhoneBanding::phone() const {
  return *phone_;
}
inline void CMD_GP_PhoneBanding::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CMD_GP_PhoneBanding::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CMD_GP_PhoneBanding::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_PhoneBanding::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* CMD_GP_PhoneBanding::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_PhoneBanding::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 MsgID = 3;
inline bool CMD_GP_PhoneBanding::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_PhoneBanding::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_PhoneBanding::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_PhoneBanding::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 CMD_GP_PhoneBanding::msgid() const {
  return msgid_;
}
inline void CMD_GP_PhoneBanding::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required string SMS = 4;
inline bool CMD_GP_PhoneBanding::has_sms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_PhoneBanding::set_has_sms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_PhoneBanding::clear_has_sms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_PhoneBanding::clear_sms() {
  if (sms_ != &::google::protobuf::internal::kEmptyString) {
    sms_->clear();
  }
  clear_has_sms();
}
inline const ::std::string& CMD_GP_PhoneBanding::sms() const {
  return *sms_;
}
inline void CMD_GP_PhoneBanding::set_sms(const ::std::string& value) {
  set_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    sms_ = new ::std::string;
  }
  sms_->assign(value);
}
inline void CMD_GP_PhoneBanding::set_sms(const char* value) {
  set_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    sms_ = new ::std::string;
  }
  sms_->assign(value);
}
inline void CMD_GP_PhoneBanding::set_sms(const char* value, size_t size) {
  set_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    sms_ = new ::std::string;
  }
  sms_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_PhoneBanding::mutable_sms() {
  set_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    sms_ = new ::std::string;
  }
  return sms_;
}
inline ::std::string* CMD_GP_PhoneBanding::release_sms() {
  clear_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sms_;
    sms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_PhoneBanding::set_allocated_sms(::std::string* sms) {
  if (sms_ != &::google::protobuf::internal::kEmptyString) {
    delete sms_;
  }
  if (sms) {
    set_has_sms();
    sms_ = sms;
  } else {
    clear_has_sms();
    sms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_ResetSafePwd

// required int32 GameID = 1;
inline bool CMD_GP_ResetSafePwd::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_ResetSafePwd::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_ResetSafePwd::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_ResetSafePwd::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_ResetSafePwd::gameid() const {
  return gameid_;
}
inline void CMD_GP_ResetSafePwd::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required string Phone = 2;
inline bool CMD_GP_ResetSafePwd::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_ResetSafePwd::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_ResetSafePwd::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_ResetSafePwd::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& CMD_GP_ResetSafePwd::phone() const {
  return *phone_;
}
inline void CMD_GP_ResetSafePwd::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ResetSafePwd::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* CMD_GP_ResetSafePwd::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ResetSafePwd::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 MsgID = 3;
inline bool CMD_GP_ResetSafePwd::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_ResetSafePwd::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_ResetSafePwd::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_ResetSafePwd::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 CMD_GP_ResetSafePwd::msgid() const {
  return msgid_;
}
inline void CMD_GP_ResetSafePwd::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required string SMS = 4;
inline bool CMD_GP_ResetSafePwd::has_sms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_ResetSafePwd::set_has_sms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_ResetSafePwd::clear_has_sms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_ResetSafePwd::clear_sms() {
  if (sms_ != &::google::protobuf::internal::kEmptyString) {
    sms_->clear();
  }
  clear_has_sms();
}
inline const ::std::string& CMD_GP_ResetSafePwd::sms() const {
  return *sms_;
}
inline void CMD_GP_ResetSafePwd::set_sms(const ::std::string& value) {
  set_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    sms_ = new ::std::string;
  }
  sms_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_sms(const char* value) {
  set_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    sms_ = new ::std::string;
  }
  sms_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_sms(const char* value, size_t size) {
  set_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    sms_ = new ::std::string;
  }
  sms_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ResetSafePwd::mutable_sms() {
  set_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    sms_ = new ::std::string;
  }
  return sms_;
}
inline ::std::string* CMD_GP_ResetSafePwd::release_sms() {
  clear_has_sms();
  if (sms_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sms_;
    sms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ResetSafePwd::set_allocated_sms(::std::string* sms) {
  if (sms_ != &::google::protobuf::internal::kEmptyString) {
    delete sms_;
  }
  if (sms) {
    set_has_sms();
    sms_ = sms;
  } else {
    clear_has_sms();
    sms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Pwd = 5;
inline bool CMD_GP_ResetSafePwd::has_pwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_ResetSafePwd::set_has_pwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_ResetSafePwd::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_ResetSafePwd::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& CMD_GP_ResetSafePwd::pwd() const {
  return *pwd_;
}
inline void CMD_GP_ResetSafePwd::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ResetSafePwd::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* CMD_GP_ResetSafePwd::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ResetSafePwd::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_RealNameAuthentication

// required int32 GameID = 1;
inline bool CMD_GP_RealNameAuthentication::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_RealNameAuthentication::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_RealNameAuthentication::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_RealNameAuthentication::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_RealNameAuthentication::gameid() const {
  return gameid_;
}
inline void CMD_GP_RealNameAuthentication::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required string Compellation = 2;
inline bool CMD_GP_RealNameAuthentication::has_compellation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_RealNameAuthentication::set_has_compellation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_RealNameAuthentication::clear_has_compellation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_RealNameAuthentication::clear_compellation() {
  if (compellation_ != &::google::protobuf::internal::kEmptyString) {
    compellation_->clear();
  }
  clear_has_compellation();
}
inline const ::std::string& CMD_GP_RealNameAuthentication::compellation() const {
  return *compellation_;
}
inline void CMD_GP_RealNameAuthentication::set_compellation(const ::std::string& value) {
  set_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    compellation_ = new ::std::string;
  }
  compellation_->assign(value);
}
inline void CMD_GP_RealNameAuthentication::set_compellation(const char* value) {
  set_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    compellation_ = new ::std::string;
  }
  compellation_->assign(value);
}
inline void CMD_GP_RealNameAuthentication::set_compellation(const char* value, size_t size) {
  set_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    compellation_ = new ::std::string;
  }
  compellation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_RealNameAuthentication::mutable_compellation() {
  set_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    compellation_ = new ::std::string;
  }
  return compellation_;
}
inline ::std::string* CMD_GP_RealNameAuthentication::release_compellation() {
  clear_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = compellation_;
    compellation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_RealNameAuthentication::set_allocated_compellation(::std::string* compellation) {
  if (compellation_ != &::google::protobuf::internal::kEmptyString) {
    delete compellation_;
  }
  if (compellation) {
    set_has_compellation();
    compellation_ = compellation;
  } else {
    clear_has_compellation();
    compellation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string PassPortID = 3;
inline bool CMD_GP_RealNameAuthentication::has_passportid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_RealNameAuthentication::set_has_passportid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_RealNameAuthentication::clear_has_passportid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_RealNameAuthentication::clear_passportid() {
  if (passportid_ != &::google::protobuf::internal::kEmptyString) {
    passportid_->clear();
  }
  clear_has_passportid();
}
inline const ::std::string& CMD_GP_RealNameAuthentication::passportid() const {
  return *passportid_;
}
inline void CMD_GP_RealNameAuthentication::set_passportid(const ::std::string& value) {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  passportid_->assign(value);
}
inline void CMD_GP_RealNameAuthentication::set_passportid(const char* value) {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  passportid_->assign(value);
}
inline void CMD_GP_RealNameAuthentication::set_passportid(const char* value, size_t size) {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  passportid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_RealNameAuthentication::mutable_passportid() {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  return passportid_;
}
inline ::std::string* CMD_GP_RealNameAuthentication::release_passportid() {
  clear_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passportid_;
    passportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_RealNameAuthentication::set_allocated_passportid(::std::string* passportid) {
  if (passportid_ != &::google::protobuf::internal::kEmptyString) {
    delete passportid_;
  }
  if (passportid) {
    set_has_passportid();
    passportid_ = passportid;
  } else {
    clear_has_passportid();
    passportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetNickName

// required int32 GameID = 1;
inline bool CMD_GP_GetNickName::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetNickName::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetNickName::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetNickName::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetNickName::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetNickName::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_LuckDraw

// required int32 GameID = 1;
inline bool CMD_GP_LuckDraw::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_LuckDraw::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_LuckDraw::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_LuckDraw::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_LuckDraw::gameid() const {
  return gameid_;
}
inline void CMD_GP_LuckDraw::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 LuckNum = 2;
inline bool CMD_GP_LuckDraw::has_lucknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_LuckDraw::set_has_lucknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_LuckDraw::clear_has_lucknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_LuckDraw::clear_lucknum() {
  lucknum_ = 0;
  clear_has_lucknum();
}
inline ::google::protobuf::int32 CMD_GP_LuckDraw::lucknum() const {
  return lucknum_;
}
inline void CMD_GP_LuckDraw::set_lucknum(::google::protobuf::int32 value) {
  set_has_lucknum();
  lucknum_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GetRechargeCaseBag

// required int32 GameID = 1;
inline bool CMD_GP_GetRechargeCaseBag::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetRechargeCaseBag::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetRechargeCaseBag::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetRechargeCaseBag::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_GetRechargeCaseBag::gameid() const {
  return gameid_;
}
inline void CMD_GP_GetRechargeCaseBag::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional int32 casegradeid = 2;
inline bool CMD_GP_GetRechargeCaseBag::has_casegradeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetRechargeCaseBag::set_has_casegradeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetRechargeCaseBag::clear_has_casegradeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetRechargeCaseBag::clear_casegradeid() {
  casegradeid_ = 0;
  clear_has_casegradeid();
}
inline ::google::protobuf::int32 CMD_GP_GetRechargeCaseBag::casegradeid() const {
  return casegradeid_;
}
inline void CMD_GP_GetRechargeCaseBag::set_casegradeid(::google::protobuf::int32 value) {
  set_has_casegradeid();
  casegradeid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_BoxConversion

// required int32 GameID = 1;
inline bool CMD_GP_BoxConversion::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_BoxConversion::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_BoxConversion::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_BoxConversion::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CMD_GP_BoxConversion::gameid() const {
  return gameid_;
}
inline void CMD_GP_BoxConversion::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 BoxId = 2;
inline bool CMD_GP_BoxConversion::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_BoxConversion::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_BoxConversion::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_BoxConversion::clear_boxid() {
  boxid_ = 0;
  clear_has_boxid();
}
inline ::google::protobuf::int32 CMD_GP_BoxConversion::boxid() const {
  return boxid_;
}
inline void CMD_GP_BoxConversion::set_boxid(::google::protobuf::int32 value) {
  set_has_boxid();
  boxid_ = value;
}

// required int32 Count = 3;
inline bool CMD_GP_BoxConversion::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_BoxConversion::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_BoxConversion::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_BoxConversion::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CMD_GP_BoxConversion::count() const {
  return count_;
}
inline void CMD_GP_BoxConversion::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WebSocket_2fwebsocket_5fc2s_2eproto__INCLUDED

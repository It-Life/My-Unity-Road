// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WebSocket/websocket_c2s.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WebSocket/websocket_c2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMD_GR_C_PropertyBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GR_C_PropertyBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_LogonAccounts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_LogonAccounts_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_DuihuanMeiliRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_DuihuanMeiliRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_UserInsureLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_UserInsureLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_ModifyInsurePass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_ModifyInsurePass_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_QueryInsureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_QueryInsureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_UserSaveScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_UserSaveScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_UserTakeScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_UserTakeScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_NewPlayerGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_NewPlayerGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_SignIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_SignIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetHeadUrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetHeadUrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetNoviceCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetNoviceCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetActivityCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetActivityCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetReliefMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetReliefMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetPayPhone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetPayPhone_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetAwardGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetAwardGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetRechargeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetRechargeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetMonthlyCardScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetMonthlyCardScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_SendPhoneSms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_SendPhoneSms_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_PhoneBanding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_PhoneBanding_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_ResetSafePwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_ResetSafePwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_RealNameAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_RealNameAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetNickName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetNickName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_LuckDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_LuckDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetRechargeCaseBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetRechargeCaseBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_BoxConversion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_BoxConversion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto() {
  protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WebSocket/websocket_c2s.proto");
  GOOGLE_CHECK(file != NULL);
  CMD_GR_C_PropertyBuy_descriptor_ = file->message_type(0);
  static const int CMD_GR_C_PropertyBuy_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, dwsourceuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, cbrequestarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, cbconsumescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, witemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, wpropertyindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, sztargetuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, cbusenikename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, szpassword_),
  };
  CMD_GR_C_PropertyBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GR_C_PropertyBuy_descriptor_,
      CMD_GR_C_PropertyBuy::default_instance_,
      CMD_GR_C_PropertyBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_C_PropertyBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GR_C_PropertyBuy));
  CMD_GP_LogonAccounts_descriptor_ = file->message_type(1);
  static const int CMD_GP_LogonAccounts_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, loginpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, surepass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, headimgurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, dwplazaversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, szmachineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, cbvalidateflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, cbpassportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, szpassportid_),
  };
  CMD_GP_LogonAccounts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_LogonAccounts_descriptor_,
      CMD_GP_LogonAccounts::default_instance_,
      CMD_GP_LogonAccounts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonAccounts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_LogonAccounts));
  CMD_GP_DuihuanMeiliRequest_descriptor_ = file->message_type(2);
  static const int CMD_GP_DuihuanMeiliRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_DuihuanMeiliRequest, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_DuihuanMeiliRequest, lexchangenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_DuihuanMeiliRequest, szpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_DuihuanMeiliRequest, szmachineid_),
  };
  CMD_GP_DuihuanMeiliRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_DuihuanMeiliRequest_descriptor_,
      CMD_GP_DuihuanMeiliRequest::default_instance_,
      CMD_GP_DuihuanMeiliRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_DuihuanMeiliRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_DuihuanMeiliRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_DuihuanMeiliRequest));
  CMD_GP_UserInsureLogon_descriptor_ = file->message_type(3);
  static const int CMD_GP_UserInsureLogon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureLogon, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureLogon, szpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureLogon, szmachineid_),
  };
  CMD_GP_UserInsureLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_UserInsureLogon_descriptor_,
      CMD_GP_UserInsureLogon::default_instance_,
      CMD_GP_UserInsureLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_UserInsureLogon));
  CMD_GP_ModifyInsurePass_descriptor_ = file->message_type(4);
  static const int CMD_GP_ModifyInsurePass_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ModifyInsurePass, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ModifyInsurePass, szdespassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ModifyInsurePass, szscrpassword_),
  };
  CMD_GP_ModifyInsurePass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_ModifyInsurePass_descriptor_,
      CMD_GP_ModifyInsurePass::default_instance_,
      CMD_GP_ModifyInsurePass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ModifyInsurePass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ModifyInsurePass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_ModifyInsurePass));
  CMD_GP_QueryInsureInfo_descriptor_ = file->message_type(5);
  static const int CMD_GP_QueryInsureInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_QueryInsureInfo, dwuserid_),
  };
  CMD_GP_QueryInsureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_QueryInsureInfo_descriptor_,
      CMD_GP_QueryInsureInfo::default_instance_,
      CMD_GP_QueryInsureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_QueryInsureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_QueryInsureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_QueryInsureInfo));
  CMD_GP_UserSaveScore_descriptor_ = file->message_type(6);
  static const int CMD_GP_UserSaveScore_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserSaveScore, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserSaveScore, wkindid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserSaveScore, lsavescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserSaveScore, szmachineid_),
  };
  CMD_GP_UserSaveScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_UserSaveScore_descriptor_,
      CMD_GP_UserSaveScore::default_instance_,
      CMD_GP_UserSaveScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserSaveScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserSaveScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_UserSaveScore));
  CMD_GP_UserTakeScore_descriptor_ = file->message_type(7);
  static const int CMD_GP_UserTakeScore_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserTakeScore, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserTakeScore, wkindid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserTakeScore, ltakescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserTakeScore, szmachineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserTakeScore, cbstaty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserTakeScore, szcodeid_),
  };
  CMD_GP_UserTakeScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_UserTakeScore_descriptor_,
      CMD_GP_UserTakeScore::default_instance_,
      CMD_GP_UserTakeScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserTakeScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserTakeScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_UserTakeScore));
  CMD_GP_NewPlayerGift_descriptor_ = file->message_type(8);
  static const int CMD_GP_NewPlayerGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewPlayerGift, wgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewPlayerGift, wdaynum_),
  };
  CMD_GP_NewPlayerGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_NewPlayerGift_descriptor_,
      CMD_GP_NewPlayerGift::default_instance_,
      CMD_GP_NewPlayerGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewPlayerGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewPlayerGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_NewPlayerGift));
  CMD_GP_SignIn_descriptor_ = file->message_type(9);
  static const int CMD_GP_SignIn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SignIn, gameid_),
  };
  CMD_GP_SignIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_SignIn_descriptor_,
      CMD_GP_SignIn::default_instance_,
      CMD_GP_SignIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SignIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SignIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_SignIn));
  CMD_GP_GetHeadUrl_descriptor_ = file->message_type(10);
  static const int CMD_GP_GetHeadUrl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetHeadUrl, gameid_),
  };
  CMD_GP_GetHeadUrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetHeadUrl_descriptor_,
      CMD_GP_GetHeadUrl::default_instance_,
      CMD_GP_GetHeadUrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetHeadUrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetHeadUrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetHeadUrl));
  CMD_GP_GetNoviceCard_descriptor_ = file->message_type(11);
  static const int CMD_GP_GetNoviceCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, cardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, cardpass_),
  };
  CMD_GP_GetNoviceCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetNoviceCard_descriptor_,
      CMD_GP_GetNoviceCard::default_instance_,
      CMD_GP_GetNoviceCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetNoviceCard));
  CMD_GP_GetActivityCard_descriptor_ = file->message_type(12);
  static const int CMD_GP_GetActivityCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, cardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, cardpass_),
  };
  CMD_GP_GetActivityCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetActivityCard_descriptor_,
      CMD_GP_GetActivityCard::default_instance_,
      CMD_GP_GetActivityCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetActivityCard));
  CMD_GP_GetReliefMoney_descriptor_ = file->message_type(13);
  static const int CMD_GP_GetReliefMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, type_),
  };
  CMD_GP_GetReliefMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetReliefMoney_descriptor_,
      CMD_GP_GetReliefMoney::default_instance_,
      CMD_GP_GetReliefMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetReliefMoney));
  CMD_GP_GetPayPhone_descriptor_ = file->message_type(14);
  static const int CMD_GP_GetPayPhone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, rid_),
  };
  CMD_GP_GetPayPhone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetPayPhone_descriptor_,
      CMD_GP_GetPayPhone::default_instance_,
      CMD_GP_GetPayPhone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetPayPhone));
  CMD_GP_GetAwardGold_descriptor_ = file->message_type(15);
  static const int CMD_GP_GetAwardGold_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, rid_),
  };
  CMD_GP_GetAwardGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetAwardGold_descriptor_,
      CMD_GP_GetAwardGold::default_instance_,
      CMD_GP_GetAwardGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetAwardGold));
  CMD_GP_GetRechargeRecord_descriptor_ = file->message_type(16);
  static const int CMD_GP_GetRechargeRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeRecord, gameid_),
  };
  CMD_GP_GetRechargeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetRechargeRecord_descriptor_,
      CMD_GP_GetRechargeRecord::default_instance_,
      CMD_GP_GetRechargeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetRechargeRecord));
  CMD_GP_GetMonthlyCardScore_descriptor_ = file->message_type(17);
  static const int CMD_GP_GetMonthlyCardScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetMonthlyCardScore, gameid_),
  };
  CMD_GP_GetMonthlyCardScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetMonthlyCardScore_descriptor_,
      CMD_GP_GetMonthlyCardScore::default_instance_,
      CMD_GP_GetMonthlyCardScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetMonthlyCardScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetMonthlyCardScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetMonthlyCardScore));
  CMD_GP_SendPhoneSms_descriptor_ = file->message_type(18);
  static const int CMD_GP_SendPhoneSms_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SendPhoneSms, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SendPhoneSms, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SendPhoneSms, smstype_),
  };
  CMD_GP_SendPhoneSms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_SendPhoneSms_descriptor_,
      CMD_GP_SendPhoneSms::default_instance_,
      CMD_GP_SendPhoneSms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SendPhoneSms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SendPhoneSms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_SendPhoneSms));
  CMD_GP_PhoneBanding_descriptor_ = file->message_type(19);
  static const int CMD_GP_PhoneBanding_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, sms_),
  };
  CMD_GP_PhoneBanding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_PhoneBanding_descriptor_,
      CMD_GP_PhoneBanding::default_instance_,
      CMD_GP_PhoneBanding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_PhoneBanding));
  CMD_GP_ResetSafePwd_descriptor_ = file->message_type(20);
  static const int CMD_GP_ResetSafePwd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, sms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, pwd_),
  };
  CMD_GP_ResetSafePwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_ResetSafePwd_descriptor_,
      CMD_GP_ResetSafePwd::default_instance_,
      CMD_GP_ResetSafePwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_ResetSafePwd));
  CMD_GP_RealNameAuthentication_descriptor_ = file->message_type(21);
  static const int CMD_GP_RealNameAuthentication_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_RealNameAuthentication, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_RealNameAuthentication, compellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_RealNameAuthentication, passportid_),
  };
  CMD_GP_RealNameAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_RealNameAuthentication_descriptor_,
      CMD_GP_RealNameAuthentication::default_instance_,
      CMD_GP_RealNameAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_RealNameAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_RealNameAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_RealNameAuthentication));
  CMD_GP_GetNickName_descriptor_ = file->message_type(22);
  static const int CMD_GP_GetNickName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNickName, gameid_),
  };
  CMD_GP_GetNickName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetNickName_descriptor_,
      CMD_GP_GetNickName::default_instance_,
      CMD_GP_GetNickName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNickName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNickName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetNickName));
  CMD_GP_LuckDraw_descriptor_ = file->message_type(23);
  static const int CMD_GP_LuckDraw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LuckDraw, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LuckDraw, lucknum_),
  };
  CMD_GP_LuckDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_LuckDraw_descriptor_,
      CMD_GP_LuckDraw::default_instance_,
      CMD_GP_LuckDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LuckDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LuckDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_LuckDraw));
  CMD_GP_GetRechargeCaseBag_descriptor_ = file->message_type(24);
  static const int CMD_GP_GetRechargeCaseBag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeCaseBag, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeCaseBag, casegradeid_),
  };
  CMD_GP_GetRechargeCaseBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetRechargeCaseBag_descriptor_,
      CMD_GP_GetRechargeCaseBag::default_instance_,
      CMD_GP_GetRechargeCaseBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeCaseBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeCaseBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetRechargeCaseBag));
  CMD_GP_BoxConversion_descriptor_ = file->message_type(25);
  static const int CMD_GP_BoxConversion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_BoxConversion, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_BoxConversion, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_BoxConversion, count_),
  };
  CMD_GP_BoxConversion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_BoxConversion_descriptor_,
      CMD_GP_BoxConversion::default_instance_,
      CMD_GP_BoxConversion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_BoxConversion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_BoxConversion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_BoxConversion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WebSocket_2fwebsocket_5fc2s_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GR_C_PropertyBuy_descriptor_, &CMD_GR_C_PropertyBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_LogonAccounts_descriptor_, &CMD_GP_LogonAccounts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_DuihuanMeiliRequest_descriptor_, &CMD_GP_DuihuanMeiliRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_UserInsureLogon_descriptor_, &CMD_GP_UserInsureLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_ModifyInsurePass_descriptor_, &CMD_GP_ModifyInsurePass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_QueryInsureInfo_descriptor_, &CMD_GP_QueryInsureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_UserSaveScore_descriptor_, &CMD_GP_UserSaveScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_UserTakeScore_descriptor_, &CMD_GP_UserTakeScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_NewPlayerGift_descriptor_, &CMD_GP_NewPlayerGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_SignIn_descriptor_, &CMD_GP_SignIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetHeadUrl_descriptor_, &CMD_GP_GetHeadUrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetNoviceCard_descriptor_, &CMD_GP_GetNoviceCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetActivityCard_descriptor_, &CMD_GP_GetActivityCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetReliefMoney_descriptor_, &CMD_GP_GetReliefMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetPayPhone_descriptor_, &CMD_GP_GetPayPhone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetAwardGold_descriptor_, &CMD_GP_GetAwardGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetRechargeRecord_descriptor_, &CMD_GP_GetRechargeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetMonthlyCardScore_descriptor_, &CMD_GP_GetMonthlyCardScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_SendPhoneSms_descriptor_, &CMD_GP_SendPhoneSms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_PhoneBanding_descriptor_, &CMD_GP_PhoneBanding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_ResetSafePwd_descriptor_, &CMD_GP_ResetSafePwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_RealNameAuthentication_descriptor_, &CMD_GP_RealNameAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetNickName_descriptor_, &CMD_GP_GetNickName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_LuckDraw_descriptor_, &CMD_GP_LuckDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetRechargeCaseBag_descriptor_, &CMD_GP_GetRechargeCaseBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_BoxConversion_descriptor_, &CMD_GP_BoxConversion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto() {
  delete CMD_GR_C_PropertyBuy::default_instance_;
  delete CMD_GR_C_PropertyBuy_reflection_;
  delete CMD_GP_LogonAccounts::default_instance_;
  delete CMD_GP_LogonAccounts_reflection_;
  delete CMD_GP_DuihuanMeiliRequest::default_instance_;
  delete CMD_GP_DuihuanMeiliRequest_reflection_;
  delete CMD_GP_UserInsureLogon::default_instance_;
  delete CMD_GP_UserInsureLogon_reflection_;
  delete CMD_GP_ModifyInsurePass::default_instance_;
  delete CMD_GP_ModifyInsurePass_reflection_;
  delete CMD_GP_QueryInsureInfo::default_instance_;
  delete CMD_GP_QueryInsureInfo_reflection_;
  delete CMD_GP_UserSaveScore::default_instance_;
  delete CMD_GP_UserSaveScore_reflection_;
  delete CMD_GP_UserTakeScore::default_instance_;
  delete CMD_GP_UserTakeScore_reflection_;
  delete CMD_GP_NewPlayerGift::default_instance_;
  delete CMD_GP_NewPlayerGift_reflection_;
  delete CMD_GP_SignIn::default_instance_;
  delete CMD_GP_SignIn_reflection_;
  delete CMD_GP_GetHeadUrl::default_instance_;
  delete CMD_GP_GetHeadUrl_reflection_;
  delete CMD_GP_GetNoviceCard::default_instance_;
  delete CMD_GP_GetNoviceCard_reflection_;
  delete CMD_GP_GetActivityCard::default_instance_;
  delete CMD_GP_GetActivityCard_reflection_;
  delete CMD_GP_GetReliefMoney::default_instance_;
  delete CMD_GP_GetReliefMoney_reflection_;
  delete CMD_GP_GetPayPhone::default_instance_;
  delete CMD_GP_GetPayPhone_reflection_;
  delete CMD_GP_GetAwardGold::default_instance_;
  delete CMD_GP_GetAwardGold_reflection_;
  delete CMD_GP_GetRechargeRecord::default_instance_;
  delete CMD_GP_GetRechargeRecord_reflection_;
  delete CMD_GP_GetMonthlyCardScore::default_instance_;
  delete CMD_GP_GetMonthlyCardScore_reflection_;
  delete CMD_GP_SendPhoneSms::default_instance_;
  delete CMD_GP_SendPhoneSms_reflection_;
  delete CMD_GP_PhoneBanding::default_instance_;
  delete CMD_GP_PhoneBanding_reflection_;
  delete CMD_GP_ResetSafePwd::default_instance_;
  delete CMD_GP_ResetSafePwd_reflection_;
  delete CMD_GP_RealNameAuthentication::default_instance_;
  delete CMD_GP_RealNameAuthentication_reflection_;
  delete CMD_GP_GetNickName::default_instance_;
  delete CMD_GP_GetNickName_reflection_;
  delete CMD_GP_LuckDraw::default_instance_;
  delete CMD_GP_LuckDraw_reflection_;
  delete CMD_GP_GetRechargeCaseBag::default_instance_;
  delete CMD_GP_GetRechargeCaseBag_reflection_;
  delete CMD_GP_BoxConversion::default_instance_;
  delete CMD_GP_BoxConversion_reflection_;
}

void protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035WebSocket/websocket_c2s.proto\"\312\001\n\024CMD_"
    "GR_C_PropertyBuy\022\026\n\016dwSourceUserID\030\001 \002(\005"
    "\022\025\n\rcbRequestArea\030\002 \002(\005\022\026\n\016cbConsumeScor"
    "e\030\003 \002(\005\022\022\n\nwItemCount\030\004 \002(\005\022\026\n\016wProperty"
    "Index\030\005 \002(\005\022\024\n\014szTargetUser\030\006 \002(\t\022\025\n\rcbU"
    "seNikeName\030\007 \002(\005\022\022\n\nszPassword\030\010 \002(\t\"\204\002\n"
    "\024CMD_GP_LogonAccounts\022\017\n\007unionid\030\001 \002(\t\022\013"
    "\n\003sex\030\002 \002(\t\022\020\n\010nickname\030\003 \002(\t\022\021\n\tloginpa"
    "ss\030\004 \002(\t\022\020\n\010surepass\030\005 \002(\t\022\022\n\nheadImgUrl"
    "\030\006 \002(\t\022\021\n\tchannelID\030\007 \002(\t\022\026\n\016dwPlazaVers"
    "ion\030\010 \002(\005\022\023\n\013szMachineID\030\t \002(\t\022\027\n\017cbVali"
    "dateFlags\030\n \001(\005\022\024\n\014cbPassPortID\030\013 \001(\005\022\024\n"
    "\014szPassPortID\030\014 \001(\t\"m\n\032CMD_GP_DuihuanMei"
    "liRequest\022\020\n\010dwUserID\030\001 \002(\005\022\024\n\014lExchange"
    "Num\030\002 \002(\003\022\022\n\nszPassWord\030\003 \002(\t\022\023\n\013szMachi"
    "neID\030\004 \002(\t\"S\n\026CMD_GP_UserInsureLogon\022\020\n\010"
    "dwUserID\030\001 \002(\005\022\022\n\nszPassword\030\002 \002(\t\022\023\n\013sz"
    "MachineID\030\003 \002(\t\"Y\n\027CMD_GP_ModifyInsurePa"
    "ss\022\020\n\010dwUserID\030\001 \002(\005\022\025\n\rszDesPassword\030\002 "
    "\002(\t\022\025\n\rszScrPassword\030\003 \002(\t\"*\n\026CMD_GP_Que"
    "ryInsureInfo\022\020\n\010dwUserID\030\001 \002(\005\"b\n\024CMD_GP"
    "_UserSaveScore\022\020\n\010dwUserID\030\001 \002(\005\022\017\n\007wKin"
    "dID\030\002 \002(\005\022\022\n\nlSaveScore\030\003 \002(\003\022\023\n\013szMachi"
    "neID\030\004 \002(\t\"\205\001\n\024CMD_GP_UserTakeScore\022\020\n\010d"
    "wUserID\030\001 \002(\005\022\017\n\007wKindID\030\002 \002(\005\022\022\n\nlTakeS"
    "core\030\003 \002(\003\022\023\n\013szMachineID\030\004 \002(\t\022\017\n\007cbSta"
    "ty\030\005 \002(\005\022\020\n\010szCodeID\030\006 \002(\t\"8\n\024CMD_GP_New"
    "PlayerGift\022\017\n\007wGameID\030\001 \002(\005\022\017\n\007wDayNum\030\002"
    " \002(\005\"\037\n\rCMD_GP_SignIn\022\016\n\006GameID\030\001 \002(\005\"#\n"
    "\021CMD_GP_GetHeadUrl\022\016\n\006GameID\030\001 \002(\005\"I\n\024CM"
    "D_GP_GetNoviceCard\022\016\n\006GameID\030\001 \002(\005\022\017\n\007Ca"
    "rdNum\030\002 \002(\t\022\020\n\010CardPass\030\003 \002(\t\"K\n\026CMD_GP_"
    "GetActivityCard\022\016\n\006GameID\030\001 \002(\005\022\017\n\007CardN"
    "um\030\002 \002(\t\022\020\n\010CardPass\030\003 \002(\t\"5\n\025CMD_GP_Get"
    "ReliefMoney\022\016\n\006GameID\030\001 \002(\005\022\014\n\004Type\030\002 \002("
    "\005\"@\n\022CMD_GP_GetPayPhone\022\016\n\006GameID\030\001 \002(\005\022"
    "\r\n\005Phone\030\002 \002(\t\022\013\n\003RID\030\003 \002(\005\"2\n\023CMD_GP_Ge"
    "tAwardGold\022\016\n\006GameID\030\001 \002(\005\022\013\n\003RID\030\002 \002(\005\""
    "*\n\030CMD_GP_GetRechargeRecord\022\016\n\006GameID\030\001 "
    "\002(\005\",\n\032CMD_GP_GetMonthlyCardScore\022\016\n\006Gam"
    "eID\030\001 \002(\005\"E\n\023CMD_GP_SendPhoneSms\022\016\n\006Game"
    "ID\030\001 \002(\005\022\r\n\005Phone\030\002 \002(\t\022\017\n\007SmsType\030\003 \002(\005"
    "\"P\n\023CMD_GP_PhoneBanding\022\016\n\006GameID\030\001 \002(\005\022"
    "\r\n\005Phone\030\002 \002(\t\022\r\n\005MsgID\030\003 \002(\005\022\013\n\003SMS\030\004 \002"
    "(\t\"]\n\023CMD_GP_ResetSafePwd\022\016\n\006GameID\030\001 \002("
    "\005\022\r\n\005Phone\030\002 \002(\t\022\r\n\005MsgID\030\003 \002(\005\022\013\n\003SMS\030\004"
    " \002(\t\022\013\n\003Pwd\030\005 \002(\t\"Y\n\035CMD_GP_RealNameAuth"
    "entication\022\016\n\006GameID\030\001 \002(\005\022\024\n\014Compellati"
    "on\030\002 \002(\t\022\022\n\nPassPortID\030\003 \002(\t\"$\n\022CMD_GP_G"
    "etNickName\022\016\n\006GameID\030\001 \002(\005\"2\n\017CMD_GP_Luc"
    "kDraw\022\016\n\006GameID\030\001 \002(\005\022\017\n\007LuckNum\030\002 \002(\005\"@"
    "\n\031CMD_GP_GetRechargeCaseBag\022\016\n\006GameID\030\001 "
    "\002(\005\022\023\n\013casegradeid\030\002 \001(\005\"D\n\024CMD_GP_BoxCo"
    "nversion\022\016\n\006GameID\030\001 \002(\005\022\r\n\005BoxId\030\002 \002(\005\022"
    "\r\n\005Count\030\003 \002(\005B+\n\032com.example.websocket."
    "beanB\rPropertyBuyDo", 2219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WebSocket/websocket_c2s.proto", &protobuf_RegisterTypes);
  CMD_GR_C_PropertyBuy::default_instance_ = new CMD_GR_C_PropertyBuy();
  CMD_GP_LogonAccounts::default_instance_ = new CMD_GP_LogonAccounts();
  CMD_GP_DuihuanMeiliRequest::default_instance_ = new CMD_GP_DuihuanMeiliRequest();
  CMD_GP_UserInsureLogon::default_instance_ = new CMD_GP_UserInsureLogon();
  CMD_GP_ModifyInsurePass::default_instance_ = new CMD_GP_ModifyInsurePass();
  CMD_GP_QueryInsureInfo::default_instance_ = new CMD_GP_QueryInsureInfo();
  CMD_GP_UserSaveScore::default_instance_ = new CMD_GP_UserSaveScore();
  CMD_GP_UserTakeScore::default_instance_ = new CMD_GP_UserTakeScore();
  CMD_GP_NewPlayerGift::default_instance_ = new CMD_GP_NewPlayerGift();
  CMD_GP_SignIn::default_instance_ = new CMD_GP_SignIn();
  CMD_GP_GetHeadUrl::default_instance_ = new CMD_GP_GetHeadUrl();
  CMD_GP_GetNoviceCard::default_instance_ = new CMD_GP_GetNoviceCard();
  CMD_GP_GetActivityCard::default_instance_ = new CMD_GP_GetActivityCard();
  CMD_GP_GetReliefMoney::default_instance_ = new CMD_GP_GetReliefMoney();
  CMD_GP_GetPayPhone::default_instance_ = new CMD_GP_GetPayPhone();
  CMD_GP_GetAwardGold::default_instance_ = new CMD_GP_GetAwardGold();
  CMD_GP_GetRechargeRecord::default_instance_ = new CMD_GP_GetRechargeRecord();
  CMD_GP_GetMonthlyCardScore::default_instance_ = new CMD_GP_GetMonthlyCardScore();
  CMD_GP_SendPhoneSms::default_instance_ = new CMD_GP_SendPhoneSms();
  CMD_GP_PhoneBanding::default_instance_ = new CMD_GP_PhoneBanding();
  CMD_GP_ResetSafePwd::default_instance_ = new CMD_GP_ResetSafePwd();
  CMD_GP_RealNameAuthentication::default_instance_ = new CMD_GP_RealNameAuthentication();
  CMD_GP_GetNickName::default_instance_ = new CMD_GP_GetNickName();
  CMD_GP_LuckDraw::default_instance_ = new CMD_GP_LuckDraw();
  CMD_GP_GetRechargeCaseBag::default_instance_ = new CMD_GP_GetRechargeCaseBag();
  CMD_GP_BoxConversion::default_instance_ = new CMD_GP_BoxConversion();
  CMD_GR_C_PropertyBuy::default_instance_->InitAsDefaultInstance();
  CMD_GP_LogonAccounts::default_instance_->InitAsDefaultInstance();
  CMD_GP_DuihuanMeiliRequest::default_instance_->InitAsDefaultInstance();
  CMD_GP_UserInsureLogon::default_instance_->InitAsDefaultInstance();
  CMD_GP_ModifyInsurePass::default_instance_->InitAsDefaultInstance();
  CMD_GP_QueryInsureInfo::default_instance_->InitAsDefaultInstance();
  CMD_GP_UserSaveScore::default_instance_->InitAsDefaultInstance();
  CMD_GP_UserTakeScore::default_instance_->InitAsDefaultInstance();
  CMD_GP_NewPlayerGift::default_instance_->InitAsDefaultInstance();
  CMD_GP_SignIn::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetHeadUrl::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetNoviceCard::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetActivityCard::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetReliefMoney::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetPayPhone::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetAwardGold::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetRechargeRecord::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetMonthlyCardScore::default_instance_->InitAsDefaultInstance();
  CMD_GP_SendPhoneSms::default_instance_->InitAsDefaultInstance();
  CMD_GP_PhoneBanding::default_instance_->InitAsDefaultInstance();
  CMD_GP_ResetSafePwd::default_instance_->InitAsDefaultInstance();
  CMD_GP_RealNameAuthentication::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetNickName::default_instance_->InitAsDefaultInstance();
  CMD_GP_LuckDraw::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetRechargeCaseBag::default_instance_->InitAsDefaultInstance();
  CMD_GP_BoxConversion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WebSocket_2fwebsocket_5fc2s_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WebSocket_2fwebsocket_5fc2s_2eproto {
  StaticDescriptorInitializer_WebSocket_2fwebsocket_5fc2s_2eproto() {
    protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  }
} static_descriptor_initializer_WebSocket_2fwebsocket_5fc2s_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_C_PropertyBuy::kDwSourceUserIDFieldNumber;
const int CMD_GR_C_PropertyBuy::kCbRequestAreaFieldNumber;
const int CMD_GR_C_PropertyBuy::kCbConsumeScoreFieldNumber;
const int CMD_GR_C_PropertyBuy::kWItemCountFieldNumber;
const int CMD_GR_C_PropertyBuy::kWPropertyIndexFieldNumber;
const int CMD_GR_C_PropertyBuy::kSzTargetUserFieldNumber;
const int CMD_GR_C_PropertyBuy::kCbUseNikeNameFieldNumber;
const int CMD_GR_C_PropertyBuy::kSzPasswordFieldNumber;
#endif  // !_MSC_VER

CMD_GR_C_PropertyBuy::CMD_GR_C_PropertyBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GR_C_PropertyBuy::InitAsDefaultInstance() {
}

CMD_GR_C_PropertyBuy::CMD_GR_C_PropertyBuy(const CMD_GR_C_PropertyBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_C_PropertyBuy::SharedCtor() {
  _cached_size_ = 0;
  dwsourceuserid_ = 0;
  cbrequestarea_ = 0;
  cbconsumescore_ = 0;
  witemcount_ = 0;
  wpropertyindex_ = 0;
  sztargetuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cbusenikename_ = 0;
  szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_C_PropertyBuy::~CMD_GR_C_PropertyBuy() {
  SharedDtor();
}

void CMD_GR_C_PropertyBuy::SharedDtor() {
  if (sztargetuser_ != &::google::protobuf::internal::kEmptyString) {
    delete sztargetuser_;
  }
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GR_C_PropertyBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GR_C_PropertyBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GR_C_PropertyBuy_descriptor_;
}

const CMD_GR_C_PropertyBuy& CMD_GR_C_PropertyBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GR_C_PropertyBuy* CMD_GR_C_PropertyBuy::default_instance_ = NULL;

CMD_GR_C_PropertyBuy* CMD_GR_C_PropertyBuy::New() const {
  return new CMD_GR_C_PropertyBuy;
}

void CMD_GR_C_PropertyBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwsourceuserid_ = 0;
    cbrequestarea_ = 0;
    cbconsumescore_ = 0;
    witemcount_ = 0;
    wpropertyindex_ = 0;
    if (has_sztargetuser()) {
      if (sztargetuser_ != &::google::protobuf::internal::kEmptyString) {
        sztargetuser_->clear();
      }
    }
    cbusenikename_ = 0;
    if (has_szpassword()) {
      if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
        szpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GR_C_PropertyBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwSourceUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwsourceuserid_)));
          set_has_dwsourceuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cbRequestArea;
        break;
      }

      // required int32 cbRequestArea = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbRequestArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbrequestarea_)));
          set_has_cbrequestarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbConsumeScore;
        break;
      }

      // required int32 cbConsumeScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbConsumeScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbconsumescore_)));
          set_has_cbconsumescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wItemCount;
        break;
      }

      // required int32 wItemCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &witemcount_)));
          set_has_witemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wPropertyIndex;
        break;
      }

      // required int32 wPropertyIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wPropertyIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpropertyindex_)));
          set_has_wpropertyindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_szTargetUser;
        break;
      }

      // required string szTargetUser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szTargetUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sztargetuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sztargetuser().data(), this->sztargetuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cbUseNikeName;
        break;
      }

      // required int32 cbUseNikeName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbUseNikeName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbusenikename_)));
          set_has_cbusenikename();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_szPassword;
        break;
      }

      // required string szPassword = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szpassword().data(), this->szpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_C_PropertyBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwSourceUserID = 1;
  if (has_dwsourceuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwsourceuserid(), output);
  }

  // required int32 cbRequestArea = 2;
  if (has_cbrequestarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbrequestarea(), output);
  }

  // required int32 cbConsumeScore = 3;
  if (has_cbconsumescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbconsumescore(), output);
  }

  // required int32 wItemCount = 4;
  if (has_witemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->witemcount(), output);
  }

  // required int32 wPropertyIndex = 5;
  if (has_wpropertyindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wpropertyindex(), output);
  }

  // required string szTargetUser = 6;
  if (has_sztargetuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztargetuser().data(), this->sztargetuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sztargetuser(), output);
  }

  // required int32 cbUseNikeName = 7;
  if (has_cbusenikename()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cbusenikename(), output);
  }

  // required string szPassword = 8;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassword().data(), this->szpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->szpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GR_C_PropertyBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwSourceUserID = 1;
  if (has_dwsourceuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwsourceuserid(), target);
  }

  // required int32 cbRequestArea = 2;
  if (has_cbrequestarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cbrequestarea(), target);
  }

  // required int32 cbConsumeScore = 3;
  if (has_cbconsumescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbconsumescore(), target);
  }

  // required int32 wItemCount = 4;
  if (has_witemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->witemcount(), target);
  }

  // required int32 wPropertyIndex = 5;
  if (has_wpropertyindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wpropertyindex(), target);
  }

  // required string szTargetUser = 6;
  if (has_sztargetuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztargetuser().data(), this->sztargetuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sztargetuser(), target);
  }

  // required int32 cbUseNikeName = 7;
  if (has_cbusenikename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cbusenikename(), target);
  }

  // required string szPassword = 8;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassword().data(), this->szpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->szpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GR_C_PropertyBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwSourceUserID = 1;
    if (has_dwsourceuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwsourceuserid());
    }

    // required int32 cbRequestArea = 2;
    if (has_cbrequestarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbrequestarea());
    }

    // required int32 cbConsumeScore = 3;
    if (has_cbconsumescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbconsumescore());
    }

    // required int32 wItemCount = 4;
    if (has_witemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->witemcount());
    }

    // required int32 wPropertyIndex = 5;
    if (has_wpropertyindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpropertyindex());
    }

    // required string szTargetUser = 6;
    if (has_sztargetuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sztargetuser());
    }

    // required int32 cbUseNikeName = 7;
    if (has_cbusenikename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbusenikename());
    }

    // required string szPassword = 8;
    if (has_szpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_C_PropertyBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GR_C_PropertyBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GR_C_PropertyBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GR_C_PropertyBuy::MergeFrom(const CMD_GR_C_PropertyBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwsourceuserid()) {
      set_dwsourceuserid(from.dwsourceuserid());
    }
    if (from.has_cbrequestarea()) {
      set_cbrequestarea(from.cbrequestarea());
    }
    if (from.has_cbconsumescore()) {
      set_cbconsumescore(from.cbconsumescore());
    }
    if (from.has_witemcount()) {
      set_witemcount(from.witemcount());
    }
    if (from.has_wpropertyindex()) {
      set_wpropertyindex(from.wpropertyindex());
    }
    if (from.has_sztargetuser()) {
      set_sztargetuser(from.sztargetuser());
    }
    if (from.has_cbusenikename()) {
      set_cbusenikename(from.cbusenikename());
    }
    if (from.has_szpassword()) {
      set_szpassword(from.szpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GR_C_PropertyBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GR_C_PropertyBuy::CopyFrom(const CMD_GR_C_PropertyBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_C_PropertyBuy::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CMD_GR_C_PropertyBuy::Swap(CMD_GR_C_PropertyBuy* other) {
  if (other != this) {
    std::swap(dwsourceuserid_, other->dwsourceuserid_);
    std::swap(cbrequestarea_, other->cbrequestarea_);
    std::swap(cbconsumescore_, other->cbconsumescore_);
    std::swap(witemcount_, other->witemcount_);
    std::swap(wpropertyindex_, other->wpropertyindex_);
    std::swap(sztargetuser_, other->sztargetuser_);
    std::swap(cbusenikename_, other->cbusenikename_);
    std::swap(szpassword_, other->szpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GR_C_PropertyBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GR_C_PropertyBuy_descriptor_;
  metadata.reflection = CMD_GR_C_PropertyBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LogonAccounts::kUnionidFieldNumber;
const int CMD_GP_LogonAccounts::kSexFieldNumber;
const int CMD_GP_LogonAccounts::kNicknameFieldNumber;
const int CMD_GP_LogonAccounts::kLoginpassFieldNumber;
const int CMD_GP_LogonAccounts::kSurepassFieldNumber;
const int CMD_GP_LogonAccounts::kHeadImgUrlFieldNumber;
const int CMD_GP_LogonAccounts::kChannelIDFieldNumber;
const int CMD_GP_LogonAccounts::kDwPlazaVersionFieldNumber;
const int CMD_GP_LogonAccounts::kSzMachineIDFieldNumber;
const int CMD_GP_LogonAccounts::kCbValidateFlagsFieldNumber;
const int CMD_GP_LogonAccounts::kCbPassPortIDFieldNumber;
const int CMD_GP_LogonAccounts::kSzPassPortIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LogonAccounts::CMD_GP_LogonAccounts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_LogonAccounts::InitAsDefaultInstance() {
}

CMD_GP_LogonAccounts::CMD_GP_LogonAccounts(const CMD_GP_LogonAccounts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_LogonAccounts::SharedCtor() {
  _cached_size_ = 0;
  unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  surepass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headimgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dwplazaversion_ = 0;
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cbvalidateflags_ = 0;
  cbpassportid_ = 0;
  szpassportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LogonAccounts::~CMD_GP_LogonAccounts() {
  SharedDtor();
}

void CMD_GP_LogonAccounts::SharedDtor() {
  if (unionid_ != &::google::protobuf::internal::kEmptyString) {
    delete unionid_;
  }
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (loginpass_ != &::google::protobuf::internal::kEmptyString) {
    delete loginpass_;
  }
  if (surepass_ != &::google::protobuf::internal::kEmptyString) {
    delete surepass_;
  }
  if (headimgurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headimgurl_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (szpassportid_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassportid_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_LogonAccounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_LogonAccounts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_LogonAccounts_descriptor_;
}

const CMD_GP_LogonAccounts& CMD_GP_LogonAccounts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_LogonAccounts* CMD_GP_LogonAccounts::default_instance_ = NULL;

CMD_GP_LogonAccounts* CMD_GP_LogonAccounts::New() const {
  return new CMD_GP_LogonAccounts;
}

void CMD_GP_LogonAccounts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unionid()) {
      if (unionid_ != &::google::protobuf::internal::kEmptyString) {
        unionid_->clear();
      }
    }
    if (has_sex()) {
      if (sex_ != &::google::protobuf::internal::kEmptyString) {
        sex_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_loginpass()) {
      if (loginpass_ != &::google::protobuf::internal::kEmptyString) {
        loginpass_->clear();
      }
    }
    if (has_surepass()) {
      if (surepass_ != &::google::protobuf::internal::kEmptyString) {
        surepass_->clear();
      }
    }
    if (has_headimgurl()) {
      if (headimgurl_ != &::google::protobuf::internal::kEmptyString) {
        headimgurl_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    dwplazaversion_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
        szmachineid_->clear();
      }
    }
    cbvalidateflags_ = 0;
    cbpassportid_ = 0;
    if (has_szpassportid()) {
      if (szpassportid_ != &::google::protobuf::internal::kEmptyString) {
        szpassportid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_LogonAccounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string unionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unionid().data(), this->unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sex;
        break;
      }

      // required string sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // required string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_loginpass;
        break;
      }

      // required string loginpass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginpass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginpass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginpass().data(), this->loginpass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_surepass;
        break;
      }

      // required string surepass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surepass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surepass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->surepass().data(), this->surepass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_headImgUrl;
        break;
      }

      // required string headImgUrl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headImgUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headimgurl().data(), this->headimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_channelID;
        break;
      }

      // required string channelID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dwPlazaVersion;
        break;
      }

      // required int32 dwPlazaVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwPlazaVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwplazaversion_)));
          set_has_dwplazaversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szmachineid().data(), this->szmachineid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cbValidateFlags;
        break;
      }

      // optional int32 cbValidateFlags = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbValidateFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbvalidateflags_)));
          set_has_cbvalidateflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cbPassPortID;
        break;
      }

      // optional int32 cbPassPortID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbPassPortID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbpassportid_)));
          set_has_cbpassportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_szPassPortID;
        break;
      }

      // optional string szPassPortID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szPassPortID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassportid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szpassportid().data(), this->szpassportid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_LogonAccounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string unionid = 1;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->unionid(), output);
  }

  // required string sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sex(), output);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // required string loginpass = 4;
  if (has_loginpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginpass().data(), this->loginpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->loginpass(), output);
  }

  // required string surepass = 5;
  if (has_surepass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surepass().data(), this->surepass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->surepass(), output);
  }

  // required string headImgUrl = 6;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->headimgurl(), output);
  }

  // required string channelID = 7;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->channelid(), output);
  }

  // required int32 dwPlazaVersion = 8;
  if (has_dwplazaversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dwplazaversion(), output);
  }

  // required string szMachineID = 9;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->szmachineid(), output);
  }

  // optional int32 cbValidateFlags = 10;
  if (has_cbvalidateflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cbvalidateflags(), output);
  }

  // optional int32 cbPassPortID = 11;
  if (has_cbpassportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cbpassportid(), output);
  }

  // optional string szPassPortID = 12;
  if (has_szpassportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassportid().data(), this->szpassportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->szpassportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_LogonAccounts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string unionid = 1;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unionid(), target);
  }

  // required string sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sex(), target);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // required string loginpass = 4;
  if (has_loginpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginpass().data(), this->loginpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->loginpass(), target);
  }

  // required string surepass = 5;
  if (has_surepass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->surepass().data(), this->surepass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->surepass(), target);
  }

  // required string headImgUrl = 6;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->headimgurl(), target);
  }

  // required string channelID = 7;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->channelid(), target);
  }

  // required int32 dwPlazaVersion = 8;
  if (has_dwplazaversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dwplazaversion(), target);
  }

  // required string szMachineID = 9;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->szmachineid(), target);
  }

  // optional int32 cbValidateFlags = 10;
  if (has_cbvalidateflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cbvalidateflags(), target);
  }

  // optional int32 cbPassPortID = 11;
  if (has_cbpassportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cbpassportid(), target);
  }

  // optional string szPassPortID = 12;
  if (has_szpassportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassportid().data(), this->szpassportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->szpassportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_LogonAccounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string unionid = 1;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionid());
    }

    // required string sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // required string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string loginpass = 4;
    if (has_loginpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginpass());
    }

    // required string surepass = 5;
    if (has_surepass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surepass());
    }

    // required string headImgUrl = 6;
    if (has_headimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimgurl());
    }

    // required string channelID = 7;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required int32 dwPlazaVersion = 8;
    if (has_dwplazaversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwplazaversion());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string szMachineID = 9;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

    // optional int32 cbValidateFlags = 10;
    if (has_cbvalidateflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbvalidateflags());
    }

    // optional int32 cbPassPortID = 11;
    if (has_cbpassportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbpassportid());
    }

    // optional string szPassPortID = 12;
    if (has_szpassportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LogonAccounts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_LogonAccounts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_LogonAccounts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_LogonAccounts::MergeFrom(const CMD_GP_LogonAccounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_loginpass()) {
      set_loginpass(from.loginpass());
    }
    if (from.has_surepass()) {
      set_surepass(from.surepass());
    }
    if (from.has_headimgurl()) {
      set_headimgurl(from.headimgurl());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_dwplazaversion()) {
      set_dwplazaversion(from.dwplazaversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
    if (from.has_cbvalidateflags()) {
      set_cbvalidateflags(from.cbvalidateflags());
    }
    if (from.has_cbpassportid()) {
      set_cbpassportid(from.cbpassportid());
    }
    if (from.has_szpassportid()) {
      set_szpassportid(from.szpassportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_LogonAccounts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_LogonAccounts::CopyFrom(const CMD_GP_LogonAccounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LogonAccounts::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CMD_GP_LogonAccounts::Swap(CMD_GP_LogonAccounts* other) {
  if (other != this) {
    std::swap(unionid_, other->unionid_);
    std::swap(sex_, other->sex_);
    std::swap(nickname_, other->nickname_);
    std::swap(loginpass_, other->loginpass_);
    std::swap(surepass_, other->surepass_);
    std::swap(headimgurl_, other->headimgurl_);
    std::swap(channelid_, other->channelid_);
    std::swap(dwplazaversion_, other->dwplazaversion_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(cbvalidateflags_, other->cbvalidateflags_);
    std::swap(cbpassportid_, other->cbpassportid_);
    std::swap(szpassportid_, other->szpassportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_LogonAccounts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_LogonAccounts_descriptor_;
  metadata.reflection = CMD_GP_LogonAccounts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_DuihuanMeiliRequest::kDwUserIDFieldNumber;
const int CMD_GP_DuihuanMeiliRequest::kLExchangeNumFieldNumber;
const int CMD_GP_DuihuanMeiliRequest::kSzPassWordFieldNumber;
const int CMD_GP_DuihuanMeiliRequest::kSzMachineIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_DuihuanMeiliRequest::CMD_GP_DuihuanMeiliRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_DuihuanMeiliRequest::InitAsDefaultInstance() {
}

CMD_GP_DuihuanMeiliRequest::CMD_GP_DuihuanMeiliRequest(const CMD_GP_DuihuanMeiliRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_DuihuanMeiliRequest::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = 0;
  lexchangenum_ = GOOGLE_LONGLONG(0);
  szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_DuihuanMeiliRequest::~CMD_GP_DuihuanMeiliRequest() {
  SharedDtor();
}

void CMD_GP_DuihuanMeiliRequest::SharedDtor() {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_DuihuanMeiliRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_DuihuanMeiliRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_DuihuanMeiliRequest_descriptor_;
}

const CMD_GP_DuihuanMeiliRequest& CMD_GP_DuihuanMeiliRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_DuihuanMeiliRequest* CMD_GP_DuihuanMeiliRequest::default_instance_ = NULL;

CMD_GP_DuihuanMeiliRequest* CMD_GP_DuihuanMeiliRequest::New() const {
  return new CMD_GP_DuihuanMeiliRequest;
}

void CMD_GP_DuihuanMeiliRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwuserid_ = 0;
    lexchangenum_ = GOOGLE_LONGLONG(0);
    if (has_szpassword()) {
      if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
        szpassword_->clear();
      }
    }
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
        szmachineid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_DuihuanMeiliRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lExchangeNum;
        break;
      }

      // required int64 lExchangeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lExchangeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lexchangenum_)));
          set_has_lexchangenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szPassWord;
        break;
      }

      // required string szPassWord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szPassWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szpassword().data(), this->szpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szmachineid().data(), this->szmachineid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_DuihuanMeiliRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwuserid(), output);
  }

  // required int64 lExchangeNum = 2;
  if (has_lexchangenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lexchangenum(), output);
  }

  // required string szPassWord = 3;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassword().data(), this->szpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->szpassword(), output);
  }

  // required string szMachineID = 4;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->szmachineid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_DuihuanMeiliRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwuserid(), target);
  }

  // required int64 lExchangeNum = 2;
  if (has_lexchangenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lexchangenum(), target);
  }

  // required string szPassWord = 3;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassword().data(), this->szpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szpassword(), target);
  }

  // required string szMachineID = 4;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->szmachineid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_DuihuanMeiliRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwuserid());
    }

    // required int64 lExchangeNum = 2;
    if (has_lexchangenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lexchangenum());
    }

    // required string szPassWord = 3;
    if (has_szpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassword());
    }

    // required string szMachineID = 4;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_DuihuanMeiliRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_DuihuanMeiliRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_DuihuanMeiliRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_DuihuanMeiliRequest::MergeFrom(const CMD_GP_DuihuanMeiliRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_lexchangenum()) {
      set_lexchangenum(from.lexchangenum());
    }
    if (from.has_szpassword()) {
      set_szpassword(from.szpassword());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_DuihuanMeiliRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_DuihuanMeiliRequest::CopyFrom(const CMD_GP_DuihuanMeiliRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_DuihuanMeiliRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_GP_DuihuanMeiliRequest::Swap(CMD_GP_DuihuanMeiliRequest* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(lexchangenum_, other->lexchangenum_);
    std::swap(szpassword_, other->szpassword_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_DuihuanMeiliRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_DuihuanMeiliRequest_descriptor_;
  metadata.reflection = CMD_GP_DuihuanMeiliRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_UserInsureLogon::kDwUserIDFieldNumber;
const int CMD_GP_UserInsureLogon::kSzPasswordFieldNumber;
const int CMD_GP_UserInsureLogon::kSzMachineIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_UserInsureLogon::CMD_GP_UserInsureLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_UserInsureLogon::InitAsDefaultInstance() {
}

CMD_GP_UserInsureLogon::CMD_GP_UserInsureLogon(const CMD_GP_UserInsureLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_UserInsureLogon::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = 0;
  szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_UserInsureLogon::~CMD_GP_UserInsureLogon() {
  SharedDtor();
}

void CMD_GP_UserInsureLogon::SharedDtor() {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_UserInsureLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_UserInsureLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_UserInsureLogon_descriptor_;
}

const CMD_GP_UserInsureLogon& CMD_GP_UserInsureLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_UserInsureLogon* CMD_GP_UserInsureLogon::default_instance_ = NULL;

CMD_GP_UserInsureLogon* CMD_GP_UserInsureLogon::New() const {
  return new CMD_GP_UserInsureLogon;
}

void CMD_GP_UserInsureLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwuserid_ = 0;
    if (has_szpassword()) {
      if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
        szpassword_->clear();
      }
    }
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
        szmachineid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_UserInsureLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szPassword;
        break;
      }

      // required string szPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szpassword().data(), this->szpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szmachineid().data(), this->szmachineid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_UserInsureLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwuserid(), output);
  }

  // required string szPassword = 2;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassword().data(), this->szpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->szpassword(), output);
  }

  // required string szMachineID = 3;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->szmachineid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_UserInsureLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwuserid(), target);
  }

  // required string szPassword = 2;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassword().data(), this->szpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szpassword(), target);
  }

  // required string szMachineID = 3;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szmachineid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_UserInsureLogon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwuserid());
    }

    // required string szPassword = 2;
    if (has_szpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassword());
    }

    // required string szMachineID = 3;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_UserInsureLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_UserInsureLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_UserInsureLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_UserInsureLogon::MergeFrom(const CMD_GP_UserInsureLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_szpassword()) {
      set_szpassword(from.szpassword());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_UserInsureLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_UserInsureLogon::CopyFrom(const CMD_GP_UserInsureLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_UserInsureLogon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_UserInsureLogon::Swap(CMD_GP_UserInsureLogon* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(szpassword_, other->szpassword_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_UserInsureLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_UserInsureLogon_descriptor_;
  metadata.reflection = CMD_GP_UserInsureLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_ModifyInsurePass::kDwUserIDFieldNumber;
const int CMD_GP_ModifyInsurePass::kSzDesPasswordFieldNumber;
const int CMD_GP_ModifyInsurePass::kSzScrPasswordFieldNumber;
#endif  // !_MSC_VER

CMD_GP_ModifyInsurePass::CMD_GP_ModifyInsurePass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_ModifyInsurePass::InitAsDefaultInstance() {
}

CMD_GP_ModifyInsurePass::CMD_GP_ModifyInsurePass(const CMD_GP_ModifyInsurePass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_ModifyInsurePass::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = 0;
  szdespassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szscrpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_ModifyInsurePass::~CMD_GP_ModifyInsurePass() {
  SharedDtor();
}

void CMD_GP_ModifyInsurePass::SharedDtor() {
  if (szdespassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szdespassword_;
  }
  if (szscrpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szscrpassword_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_ModifyInsurePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_ModifyInsurePass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_ModifyInsurePass_descriptor_;
}

const CMD_GP_ModifyInsurePass& CMD_GP_ModifyInsurePass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_ModifyInsurePass* CMD_GP_ModifyInsurePass::default_instance_ = NULL;

CMD_GP_ModifyInsurePass* CMD_GP_ModifyInsurePass::New() const {
  return new CMD_GP_ModifyInsurePass;
}

void CMD_GP_ModifyInsurePass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwuserid_ = 0;
    if (has_szdespassword()) {
      if (szdespassword_ != &::google::protobuf::internal::kEmptyString) {
        szdespassword_->clear();
      }
    }
    if (has_szscrpassword()) {
      if (szscrpassword_ != &::google::protobuf::internal::kEmptyString) {
        szscrpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_ModifyInsurePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szDesPassword;
        break;
      }

      // required string szDesPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szDesPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdespassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szdespassword().data(), this->szdespassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szScrPassword;
        break;
      }

      // required string szScrPassword = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szScrPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szscrpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szscrpassword().data(), this->szscrpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_ModifyInsurePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwuserid(), output);
  }

  // required string szDesPassword = 2;
  if (has_szdespassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdespassword().data(), this->szdespassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->szdespassword(), output);
  }

  // required string szScrPassword = 3;
  if (has_szscrpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szscrpassword().data(), this->szscrpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->szscrpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_ModifyInsurePass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwuserid(), target);
  }

  // required string szDesPassword = 2;
  if (has_szdespassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdespassword().data(), this->szdespassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szdespassword(), target);
  }

  // required string szScrPassword = 3;
  if (has_szscrpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szscrpassword().data(), this->szscrpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szscrpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_ModifyInsurePass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwuserid());
    }

    // required string szDesPassword = 2;
    if (has_szdespassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdespassword());
    }

    // required string szScrPassword = 3;
    if (has_szscrpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szscrpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_ModifyInsurePass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_ModifyInsurePass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_ModifyInsurePass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_ModifyInsurePass::MergeFrom(const CMD_GP_ModifyInsurePass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_szdespassword()) {
      set_szdespassword(from.szdespassword());
    }
    if (from.has_szscrpassword()) {
      set_szscrpassword(from.szscrpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_ModifyInsurePass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_ModifyInsurePass::CopyFrom(const CMD_GP_ModifyInsurePass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_ModifyInsurePass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_ModifyInsurePass::Swap(CMD_GP_ModifyInsurePass* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(szdespassword_, other->szdespassword_);
    std::swap(szscrpassword_, other->szscrpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_ModifyInsurePass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_ModifyInsurePass_descriptor_;
  metadata.reflection = CMD_GP_ModifyInsurePass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_QueryInsureInfo::kDwUserIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_QueryInsureInfo::CMD_GP_QueryInsureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_QueryInsureInfo::InitAsDefaultInstance() {
}

CMD_GP_QueryInsureInfo::CMD_GP_QueryInsureInfo(const CMD_GP_QueryInsureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_QueryInsureInfo::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_QueryInsureInfo::~CMD_GP_QueryInsureInfo() {
  SharedDtor();
}

void CMD_GP_QueryInsureInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_QueryInsureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_QueryInsureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_QueryInsureInfo_descriptor_;
}

const CMD_GP_QueryInsureInfo& CMD_GP_QueryInsureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_QueryInsureInfo* CMD_GP_QueryInsureInfo::default_instance_ = NULL;

CMD_GP_QueryInsureInfo* CMD_GP_QueryInsureInfo::New() const {
  return new CMD_GP_QueryInsureInfo;
}

void CMD_GP_QueryInsureInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwuserid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_QueryInsureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_QueryInsureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwuserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_QueryInsureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwuserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_QueryInsureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwuserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_QueryInsureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_QueryInsureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_QueryInsureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_QueryInsureInfo::MergeFrom(const CMD_GP_QueryInsureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_QueryInsureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_QueryInsureInfo::CopyFrom(const CMD_GP_QueryInsureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_QueryInsureInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_QueryInsureInfo::Swap(CMD_GP_QueryInsureInfo* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_QueryInsureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_QueryInsureInfo_descriptor_;
  metadata.reflection = CMD_GP_QueryInsureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_UserSaveScore::kDwUserIDFieldNumber;
const int CMD_GP_UserSaveScore::kWKindIDFieldNumber;
const int CMD_GP_UserSaveScore::kLSaveScoreFieldNumber;
const int CMD_GP_UserSaveScore::kSzMachineIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_UserSaveScore::CMD_GP_UserSaveScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_UserSaveScore::InitAsDefaultInstance() {
}

CMD_GP_UserSaveScore::CMD_GP_UserSaveScore(const CMD_GP_UserSaveScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_UserSaveScore::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = 0;
  wkindid_ = 0;
  lsavescore_ = GOOGLE_LONGLONG(0);
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_UserSaveScore::~CMD_GP_UserSaveScore() {
  SharedDtor();
}

void CMD_GP_UserSaveScore::SharedDtor() {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_UserSaveScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_UserSaveScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_UserSaveScore_descriptor_;
}

const CMD_GP_UserSaveScore& CMD_GP_UserSaveScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_UserSaveScore* CMD_GP_UserSaveScore::default_instance_ = NULL;

CMD_GP_UserSaveScore* CMD_GP_UserSaveScore::New() const {
  return new CMD_GP_UserSaveScore;
}

void CMD_GP_UserSaveScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwuserid_ = 0;
    wkindid_ = 0;
    lsavescore_ = GOOGLE_LONGLONG(0);
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
        szmachineid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_UserSaveScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wKindID;
        break;
      }

      // required int32 wKindID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wKindID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
          set_has_wkindid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lSaveScore;
        break;
      }

      // required int64 lSaveScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lSaveScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lsavescore_)));
          set_has_lsavescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szmachineid().data(), this->szmachineid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_UserSaveScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwuserid(), output);
  }

  // required int32 wKindID = 2;
  if (has_wkindid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wkindid(), output);
  }

  // required int64 lSaveScore = 3;
  if (has_lsavescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lsavescore(), output);
  }

  // required string szMachineID = 4;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->szmachineid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_UserSaveScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwuserid(), target);
  }

  // required int32 wKindID = 2;
  if (has_wkindid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wkindid(), target);
  }

  // required int64 lSaveScore = 3;
  if (has_lsavescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lsavescore(), target);
  }

  // required string szMachineID = 4;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->szmachineid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_UserSaveScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwuserid());
    }

    // required int32 wKindID = 2;
    if (has_wkindid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wkindid());
    }

    // required int64 lSaveScore = 3;
    if (has_lsavescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lsavescore());
    }

    // required string szMachineID = 4;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_UserSaveScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_UserSaveScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_UserSaveScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_UserSaveScore::MergeFrom(const CMD_GP_UserSaveScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_wkindid()) {
      set_wkindid(from.wkindid());
    }
    if (from.has_lsavescore()) {
      set_lsavescore(from.lsavescore());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_UserSaveScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_UserSaveScore::CopyFrom(const CMD_GP_UserSaveScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_UserSaveScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_GP_UserSaveScore::Swap(CMD_GP_UserSaveScore* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(wkindid_, other->wkindid_);
    std::swap(lsavescore_, other->lsavescore_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_UserSaveScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_UserSaveScore_descriptor_;
  metadata.reflection = CMD_GP_UserSaveScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_UserTakeScore::kDwUserIDFieldNumber;
const int CMD_GP_UserTakeScore::kWKindIDFieldNumber;
const int CMD_GP_UserTakeScore::kLTakeScoreFieldNumber;
const int CMD_GP_UserTakeScore::kSzMachineIDFieldNumber;
const int CMD_GP_UserTakeScore::kCbStatyFieldNumber;
const int CMD_GP_UserTakeScore::kSzCodeIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_UserTakeScore::CMD_GP_UserTakeScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_UserTakeScore::InitAsDefaultInstance() {
}

CMD_GP_UserTakeScore::CMD_GP_UserTakeScore(const CMD_GP_UserTakeScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_UserTakeScore::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = 0;
  wkindid_ = 0;
  ltakescore_ = GOOGLE_LONGLONG(0);
  szmachineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cbstaty_ = 0;
  szcodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_UserTakeScore::~CMD_GP_UserTakeScore() {
  SharedDtor();
}

void CMD_GP_UserTakeScore::SharedDtor() {
  if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
    delete szmachineid_;
  }
  if (szcodeid_ != &::google::protobuf::internal::kEmptyString) {
    delete szcodeid_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_UserTakeScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_UserTakeScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_UserTakeScore_descriptor_;
}

const CMD_GP_UserTakeScore& CMD_GP_UserTakeScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_UserTakeScore* CMD_GP_UserTakeScore::default_instance_ = NULL;

CMD_GP_UserTakeScore* CMD_GP_UserTakeScore::New() const {
  return new CMD_GP_UserTakeScore;
}

void CMD_GP_UserTakeScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwuserid_ = 0;
    wkindid_ = 0;
    ltakescore_ = GOOGLE_LONGLONG(0);
    if (has_szmachineid()) {
      if (szmachineid_ != &::google::protobuf::internal::kEmptyString) {
        szmachineid_->clear();
      }
    }
    cbstaty_ = 0;
    if (has_szcodeid()) {
      if (szcodeid_ != &::google::protobuf::internal::kEmptyString) {
        szcodeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_UserTakeScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wKindID;
        break;
      }

      // required int32 wKindID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wKindID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
          set_has_wkindid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lTakeScore;
        break;
      }

      // required int64 lTakeScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTakeScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ltakescore_)));
          set_has_ltakescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szMachineID;
        break;
      }

      // required string szMachineID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szMachineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmachineid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szmachineid().data(), this->szmachineid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbStaty;
        break;
      }

      // required int32 cbStaty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbStaty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbstaty_)));
          set_has_cbstaty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_szCodeID;
        break;
      }

      // required string szCodeID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szCodeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szcodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szcodeid().data(), this->szcodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_UserTakeScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwuserid(), output);
  }

  // required int32 wKindID = 2;
  if (has_wkindid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wkindid(), output);
  }

  // required int64 lTakeScore = 3;
  if (has_ltakescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ltakescore(), output);
  }

  // required string szMachineID = 4;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->szmachineid(), output);
  }

  // required int32 cbStaty = 5;
  if (has_cbstaty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbstaty(), output);
  }

  // required string szCodeID = 6;
  if (has_szcodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szcodeid().data(), this->szcodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->szcodeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_UserTakeScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwuserid(), target);
  }

  // required int32 wKindID = 2;
  if (has_wkindid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wkindid(), target);
  }

  // required int64 lTakeScore = 3;
  if (has_ltakescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ltakescore(), target);
  }

  // required string szMachineID = 4;
  if (has_szmachineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmachineid().data(), this->szmachineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->szmachineid(), target);
  }

  // required int32 cbStaty = 5;
  if (has_cbstaty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cbstaty(), target);
  }

  // required string szCodeID = 6;
  if (has_szcodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szcodeid().data(), this->szcodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->szcodeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_UserTakeScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwuserid());
    }

    // required int32 wKindID = 2;
    if (has_wkindid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wkindid());
    }

    // required int64 lTakeScore = 3;
    if (has_ltakescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltakescore());
    }

    // required string szMachineID = 4;
    if (has_szmachineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmachineid());
    }

    // required int32 cbStaty = 5;
    if (has_cbstaty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbstaty());
    }

    // required string szCodeID = 6;
    if (has_szcodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szcodeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_UserTakeScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_UserTakeScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_UserTakeScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_UserTakeScore::MergeFrom(const CMD_GP_UserTakeScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_wkindid()) {
      set_wkindid(from.wkindid());
    }
    if (from.has_ltakescore()) {
      set_ltakescore(from.ltakescore());
    }
    if (from.has_szmachineid()) {
      set_szmachineid(from.szmachineid());
    }
    if (from.has_cbstaty()) {
      set_cbstaty(from.cbstaty());
    }
    if (from.has_szcodeid()) {
      set_szcodeid(from.szcodeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_UserTakeScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_UserTakeScore::CopyFrom(const CMD_GP_UserTakeScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_UserTakeScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CMD_GP_UserTakeScore::Swap(CMD_GP_UserTakeScore* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(wkindid_, other->wkindid_);
    std::swap(ltakescore_, other->ltakescore_);
    std::swap(szmachineid_, other->szmachineid_);
    std::swap(cbstaty_, other->cbstaty_);
    std::swap(szcodeid_, other->szcodeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_UserTakeScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_UserTakeScore_descriptor_;
  metadata.reflection = CMD_GP_UserTakeScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_NewPlayerGift::kWGameIDFieldNumber;
const int CMD_GP_NewPlayerGift::kWDayNumFieldNumber;
#endif  // !_MSC_VER

CMD_GP_NewPlayerGift::CMD_GP_NewPlayerGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_NewPlayerGift::InitAsDefaultInstance() {
}

CMD_GP_NewPlayerGift::CMD_GP_NewPlayerGift(const CMD_GP_NewPlayerGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_NewPlayerGift::SharedCtor() {
  _cached_size_ = 0;
  wgameid_ = 0;
  wdaynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_NewPlayerGift::~CMD_GP_NewPlayerGift() {
  SharedDtor();
}

void CMD_GP_NewPlayerGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_NewPlayerGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_NewPlayerGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_NewPlayerGift_descriptor_;
}

const CMD_GP_NewPlayerGift& CMD_GP_NewPlayerGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_NewPlayerGift* CMD_GP_NewPlayerGift::default_instance_ = NULL;

CMD_GP_NewPlayerGift* CMD_GP_NewPlayerGift::New() const {
  return new CMD_GP_NewPlayerGift;
}

void CMD_GP_NewPlayerGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wgameid_ = 0;
    wdaynum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_NewPlayerGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wGameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wgameid_)));
          set_has_wgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wDayNum;
        break;
      }

      // required int32 wDayNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wDayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wdaynum_)));
          set_has_wdaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_NewPlayerGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 wGameID = 1;
  if (has_wgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wgameid(), output);
  }

  // required int32 wDayNum = 2;
  if (has_wdaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wdaynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_NewPlayerGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 wGameID = 1;
  if (has_wgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wgameid(), target);
  }

  // required int32 wDayNum = 2;
  if (has_wdaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wdaynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_NewPlayerGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wGameID = 1;
    if (has_wgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wgameid());
    }

    // required int32 wDayNum = 2;
    if (has_wdaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wdaynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_NewPlayerGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_NewPlayerGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_NewPlayerGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_NewPlayerGift::MergeFrom(const CMD_GP_NewPlayerGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wgameid()) {
      set_wgameid(from.wgameid());
    }
    if (from.has_wdaynum()) {
      set_wdaynum(from.wdaynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_NewPlayerGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_NewPlayerGift::CopyFrom(const CMD_GP_NewPlayerGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_NewPlayerGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_NewPlayerGift::Swap(CMD_GP_NewPlayerGift* other) {
  if (other != this) {
    std::swap(wgameid_, other->wgameid_);
    std::swap(wdaynum_, other->wdaynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_NewPlayerGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_NewPlayerGift_descriptor_;
  metadata.reflection = CMD_GP_NewPlayerGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_SignIn::kGameIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_SignIn::CMD_GP_SignIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_SignIn::InitAsDefaultInstance() {
}

CMD_GP_SignIn::CMD_GP_SignIn(const CMD_GP_SignIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_SignIn::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_SignIn::~CMD_GP_SignIn() {
  SharedDtor();
}

void CMD_GP_SignIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_SignIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_SignIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_SignIn_descriptor_;
}

const CMD_GP_SignIn& CMD_GP_SignIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_SignIn* CMD_GP_SignIn::default_instance_ = NULL;

CMD_GP_SignIn* CMD_GP_SignIn::New() const {
  return new CMD_GP_SignIn;
}

void CMD_GP_SignIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_SignIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_SignIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_SignIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_SignIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_SignIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_SignIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_SignIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_SignIn::MergeFrom(const CMD_GP_SignIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_SignIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_SignIn::CopyFrom(const CMD_GP_SignIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_SignIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_SignIn::Swap(CMD_GP_SignIn* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_SignIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_SignIn_descriptor_;
  metadata.reflection = CMD_GP_SignIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetHeadUrl::kGameIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetHeadUrl::CMD_GP_GetHeadUrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetHeadUrl::InitAsDefaultInstance() {
}

CMD_GP_GetHeadUrl::CMD_GP_GetHeadUrl(const CMD_GP_GetHeadUrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetHeadUrl::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetHeadUrl::~CMD_GP_GetHeadUrl() {
  SharedDtor();
}

void CMD_GP_GetHeadUrl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GetHeadUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetHeadUrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetHeadUrl_descriptor_;
}

const CMD_GP_GetHeadUrl& CMD_GP_GetHeadUrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetHeadUrl* CMD_GP_GetHeadUrl::default_instance_ = NULL;

CMD_GP_GetHeadUrl* CMD_GP_GetHeadUrl::New() const {
  return new CMD_GP_GetHeadUrl;
}

void CMD_GP_GetHeadUrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetHeadUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetHeadUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetHeadUrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetHeadUrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetHeadUrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetHeadUrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetHeadUrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetHeadUrl::MergeFrom(const CMD_GP_GetHeadUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetHeadUrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetHeadUrl::CopyFrom(const CMD_GP_GetHeadUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetHeadUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_GetHeadUrl::Swap(CMD_GP_GetHeadUrl* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetHeadUrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetHeadUrl_descriptor_;
  metadata.reflection = CMD_GP_GetHeadUrl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetNoviceCard::kGameIDFieldNumber;
const int CMD_GP_GetNoviceCard::kCardNumFieldNumber;
const int CMD_GP_GetNoviceCard::kCardPassFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetNoviceCard::CMD_GP_GetNoviceCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetNoviceCard::InitAsDefaultInstance() {
}

CMD_GP_GetNoviceCard::CMD_GP_GetNoviceCard(const CMD_GP_GetNoviceCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetNoviceCard::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  cardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetNoviceCard::~CMD_GP_GetNoviceCard() {
  SharedDtor();
}

void CMD_GP_GetNoviceCard::SharedDtor() {
  if (cardnum_ != &::google::protobuf::internal::kEmptyString) {
    delete cardnum_;
  }
  if (cardpass_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpass_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetNoviceCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetNoviceCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetNoviceCard_descriptor_;
}

const CMD_GP_GetNoviceCard& CMD_GP_GetNoviceCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetNoviceCard* CMD_GP_GetNoviceCard::default_instance_ = NULL;

CMD_GP_GetNoviceCard* CMD_GP_GetNoviceCard::New() const {
  return new CMD_GP_GetNoviceCard;
}

void CMD_GP_GetNoviceCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_cardnum()) {
      if (cardnum_ != &::google::protobuf::internal::kEmptyString) {
        cardnum_->clear();
      }
    }
    if (has_cardpass()) {
      if (cardpass_ != &::google::protobuf::internal::kEmptyString) {
        cardpass_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetNoviceCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CardNum;
        break;
      }

      // required string CardNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardnum().data(), this->cardnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CardPass;
        break;
      }

      // required string CardPass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardPass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardpass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardpass().data(), this->cardpass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetNoviceCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required string CardNum = 2;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardnum().data(), this->cardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cardnum(), output);
  }

  // required string CardPass = 3;
  if (has_cardpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardpass().data(), this->cardpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cardpass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetNoviceCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required string CardNum = 2;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardnum().data(), this->cardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cardnum(), target);
  }

  // required string CardPass = 3;
  if (has_cardpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardpass().data(), this->cardpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cardpass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetNoviceCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string CardNum = 2;
    if (has_cardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardnum());
    }

    // required string CardPass = 3;
    if (has_cardpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardpass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetNoviceCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetNoviceCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetNoviceCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetNoviceCard::MergeFrom(const CMD_GP_GetNoviceCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_cardnum()) {
      set_cardnum(from.cardnum());
    }
    if (from.has_cardpass()) {
      set_cardpass(from.cardpass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetNoviceCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetNoviceCard::CopyFrom(const CMD_GP_GetNoviceCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetNoviceCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_GetNoviceCard::Swap(CMD_GP_GetNoviceCard* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(cardnum_, other->cardnum_);
    std::swap(cardpass_, other->cardpass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetNoviceCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetNoviceCard_descriptor_;
  metadata.reflection = CMD_GP_GetNoviceCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetActivityCard::kGameIDFieldNumber;
const int CMD_GP_GetActivityCard::kCardNumFieldNumber;
const int CMD_GP_GetActivityCard::kCardPassFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetActivityCard::CMD_GP_GetActivityCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetActivityCard::InitAsDefaultInstance() {
}

CMD_GP_GetActivityCard::CMD_GP_GetActivityCard(const CMD_GP_GetActivityCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetActivityCard::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  cardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetActivityCard::~CMD_GP_GetActivityCard() {
  SharedDtor();
}

void CMD_GP_GetActivityCard::SharedDtor() {
  if (cardnum_ != &::google::protobuf::internal::kEmptyString) {
    delete cardnum_;
  }
  if (cardpass_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpass_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetActivityCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetActivityCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetActivityCard_descriptor_;
}

const CMD_GP_GetActivityCard& CMD_GP_GetActivityCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetActivityCard* CMD_GP_GetActivityCard::default_instance_ = NULL;

CMD_GP_GetActivityCard* CMD_GP_GetActivityCard::New() const {
  return new CMD_GP_GetActivityCard;
}

void CMD_GP_GetActivityCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_cardnum()) {
      if (cardnum_ != &::google::protobuf::internal::kEmptyString) {
        cardnum_->clear();
      }
    }
    if (has_cardpass()) {
      if (cardpass_ != &::google::protobuf::internal::kEmptyString) {
        cardpass_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetActivityCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CardNum;
        break;
      }

      // required string CardNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardnum().data(), this->cardnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CardPass;
        break;
      }

      // required string CardPass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardPass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardpass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardpass().data(), this->cardpass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetActivityCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required string CardNum = 2;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardnum().data(), this->cardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cardnum(), output);
  }

  // required string CardPass = 3;
  if (has_cardpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardpass().data(), this->cardpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cardpass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetActivityCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required string CardNum = 2;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardnum().data(), this->cardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cardnum(), target);
  }

  // required string CardPass = 3;
  if (has_cardpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardpass().data(), this->cardpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cardpass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetActivityCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string CardNum = 2;
    if (has_cardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardnum());
    }

    // required string CardPass = 3;
    if (has_cardpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardpass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetActivityCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetActivityCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetActivityCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetActivityCard::MergeFrom(const CMD_GP_GetActivityCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_cardnum()) {
      set_cardnum(from.cardnum());
    }
    if (from.has_cardpass()) {
      set_cardpass(from.cardpass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetActivityCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetActivityCard::CopyFrom(const CMD_GP_GetActivityCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetActivityCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_GetActivityCard::Swap(CMD_GP_GetActivityCard* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(cardnum_, other->cardnum_);
    std::swap(cardpass_, other->cardpass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetActivityCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetActivityCard_descriptor_;
  metadata.reflection = CMD_GP_GetActivityCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetReliefMoney::kGameIDFieldNumber;
const int CMD_GP_GetReliefMoney::kTypeFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetReliefMoney::CMD_GP_GetReliefMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetReliefMoney::InitAsDefaultInstance() {
}

CMD_GP_GetReliefMoney::CMD_GP_GetReliefMoney(const CMD_GP_GetReliefMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetReliefMoney::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetReliefMoney::~CMD_GP_GetReliefMoney() {
  SharedDtor();
}

void CMD_GP_GetReliefMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GetReliefMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetReliefMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetReliefMoney_descriptor_;
}

const CMD_GP_GetReliefMoney& CMD_GP_GetReliefMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetReliefMoney* CMD_GP_GetReliefMoney::default_instance_ = NULL;

CMD_GP_GetReliefMoney* CMD_GP_GetReliefMoney::New() const {
  return new CMD_GP_GetReliefMoney;
}

void CMD_GP_GetReliefMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetReliefMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required int32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetReliefMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetReliefMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetReliefMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetReliefMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetReliefMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetReliefMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetReliefMoney::MergeFrom(const CMD_GP_GetReliefMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetReliefMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetReliefMoney::CopyFrom(const CMD_GP_GetReliefMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetReliefMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_GetReliefMoney::Swap(CMD_GP_GetReliefMoney* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetReliefMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetReliefMoney_descriptor_;
  metadata.reflection = CMD_GP_GetReliefMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetPayPhone::kGameIDFieldNumber;
const int CMD_GP_GetPayPhone::kPhoneFieldNumber;
const int CMD_GP_GetPayPhone::kRIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetPayPhone::CMD_GP_GetPayPhone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetPayPhone::InitAsDefaultInstance() {
}

CMD_GP_GetPayPhone::CMD_GP_GetPayPhone(const CMD_GP_GetPayPhone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetPayPhone::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetPayPhone::~CMD_GP_GetPayPhone() {
  SharedDtor();
}

void CMD_GP_GetPayPhone::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetPayPhone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetPayPhone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetPayPhone_descriptor_;
}

const CMD_GP_GetPayPhone& CMD_GP_GetPayPhone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetPayPhone* CMD_GP_GetPayPhone::default_instance_ = NULL;

CMD_GP_GetPayPhone* CMD_GP_GetPayPhone::New() const {
  return new CMD_GP_GetPayPhone;
}

void CMD_GP_GetPayPhone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    rid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetPayPhone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Phone;
        break;
      }

      // required string Phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RID;
        break;
      }

      // required int32 RID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetPayPhone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required string Phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // required int32 RID = 3;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetPayPhone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required string Phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // required int32 RID = 3;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetPayPhone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string Phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // required int32 RID = 3;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetPayPhone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetPayPhone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetPayPhone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetPayPhone::MergeFrom(const CMD_GP_GetPayPhone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetPayPhone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetPayPhone::CopyFrom(const CMD_GP_GetPayPhone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetPayPhone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_GetPayPhone::Swap(CMD_GP_GetPayPhone* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(phone_, other->phone_);
    std::swap(rid_, other->rid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetPayPhone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetPayPhone_descriptor_;
  metadata.reflection = CMD_GP_GetPayPhone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetAwardGold::kGameIDFieldNumber;
const int CMD_GP_GetAwardGold::kRIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetAwardGold::CMD_GP_GetAwardGold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetAwardGold::InitAsDefaultInstance() {
}

CMD_GP_GetAwardGold::CMD_GP_GetAwardGold(const CMD_GP_GetAwardGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetAwardGold::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  rid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetAwardGold::~CMD_GP_GetAwardGold() {
  SharedDtor();
}

void CMD_GP_GetAwardGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GetAwardGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetAwardGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetAwardGold_descriptor_;
}

const CMD_GP_GetAwardGold& CMD_GP_GetAwardGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetAwardGold* CMD_GP_GetAwardGold::default_instance_ = NULL;

CMD_GP_GetAwardGold* CMD_GP_GetAwardGold::New() const {
  return new CMD_GP_GetAwardGold;
}

void CMD_GP_GetAwardGold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    rid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetAwardGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RID;
        break;
      }

      // required int32 RID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetAwardGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 RID = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetAwardGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 RID = 2;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetAwardGold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 RID = 2;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetAwardGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetAwardGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetAwardGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetAwardGold::MergeFrom(const CMD_GP_GetAwardGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetAwardGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetAwardGold::CopyFrom(const CMD_GP_GetAwardGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetAwardGold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_GetAwardGold::Swap(CMD_GP_GetAwardGold* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(rid_, other->rid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetAwardGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetAwardGold_descriptor_;
  metadata.reflection = CMD_GP_GetAwardGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetRechargeRecord::kGameIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetRechargeRecord::CMD_GP_GetRechargeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetRechargeRecord::InitAsDefaultInstance() {
}

CMD_GP_GetRechargeRecord::CMD_GP_GetRechargeRecord(const CMD_GP_GetRechargeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetRechargeRecord::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetRechargeRecord::~CMD_GP_GetRechargeRecord() {
  SharedDtor();
}

void CMD_GP_GetRechargeRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GetRechargeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetRechargeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetRechargeRecord_descriptor_;
}

const CMD_GP_GetRechargeRecord& CMD_GP_GetRechargeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetRechargeRecord* CMD_GP_GetRechargeRecord::default_instance_ = NULL;

CMD_GP_GetRechargeRecord* CMD_GP_GetRechargeRecord::New() const {
  return new CMD_GP_GetRechargeRecord;
}

void CMD_GP_GetRechargeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetRechargeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetRechargeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetRechargeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetRechargeRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetRechargeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetRechargeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetRechargeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetRechargeRecord::MergeFrom(const CMD_GP_GetRechargeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetRechargeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetRechargeRecord::CopyFrom(const CMD_GP_GetRechargeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetRechargeRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_GetRechargeRecord::Swap(CMD_GP_GetRechargeRecord* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetRechargeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetRechargeRecord_descriptor_;
  metadata.reflection = CMD_GP_GetRechargeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetMonthlyCardScore::kGameIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetMonthlyCardScore::CMD_GP_GetMonthlyCardScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetMonthlyCardScore::InitAsDefaultInstance() {
}

CMD_GP_GetMonthlyCardScore::CMD_GP_GetMonthlyCardScore(const CMD_GP_GetMonthlyCardScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetMonthlyCardScore::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetMonthlyCardScore::~CMD_GP_GetMonthlyCardScore() {
  SharedDtor();
}

void CMD_GP_GetMonthlyCardScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GetMonthlyCardScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetMonthlyCardScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetMonthlyCardScore_descriptor_;
}

const CMD_GP_GetMonthlyCardScore& CMD_GP_GetMonthlyCardScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetMonthlyCardScore* CMD_GP_GetMonthlyCardScore::default_instance_ = NULL;

CMD_GP_GetMonthlyCardScore* CMD_GP_GetMonthlyCardScore::New() const {
  return new CMD_GP_GetMonthlyCardScore;
}

void CMD_GP_GetMonthlyCardScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetMonthlyCardScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetMonthlyCardScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetMonthlyCardScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetMonthlyCardScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetMonthlyCardScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetMonthlyCardScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetMonthlyCardScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetMonthlyCardScore::MergeFrom(const CMD_GP_GetMonthlyCardScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetMonthlyCardScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetMonthlyCardScore::CopyFrom(const CMD_GP_GetMonthlyCardScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetMonthlyCardScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_GetMonthlyCardScore::Swap(CMD_GP_GetMonthlyCardScore* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetMonthlyCardScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetMonthlyCardScore_descriptor_;
  metadata.reflection = CMD_GP_GetMonthlyCardScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_SendPhoneSms::kGameIDFieldNumber;
const int CMD_GP_SendPhoneSms::kPhoneFieldNumber;
const int CMD_GP_SendPhoneSms::kSmsTypeFieldNumber;
#endif  // !_MSC_VER

CMD_GP_SendPhoneSms::CMD_GP_SendPhoneSms()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_SendPhoneSms::InitAsDefaultInstance() {
}

CMD_GP_SendPhoneSms::CMD_GP_SendPhoneSms(const CMD_GP_SendPhoneSms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_SendPhoneSms::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smstype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_SendPhoneSms::~CMD_GP_SendPhoneSms() {
  SharedDtor();
}

void CMD_GP_SendPhoneSms::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_SendPhoneSms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_SendPhoneSms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_SendPhoneSms_descriptor_;
}

const CMD_GP_SendPhoneSms& CMD_GP_SendPhoneSms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_SendPhoneSms* CMD_GP_SendPhoneSms::default_instance_ = NULL;

CMD_GP_SendPhoneSms* CMD_GP_SendPhoneSms::New() const {
  return new CMD_GP_SendPhoneSms;
}

void CMD_GP_SendPhoneSms::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    smstype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_SendPhoneSms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Phone;
        break;
      }

      // required string Phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SmsType;
        break;
      }

      // required int32 SmsType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SmsType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smstype_)));
          set_has_smstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_SendPhoneSms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required string Phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // required int32 SmsType = 3;
  if (has_smstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->smstype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_SendPhoneSms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required string Phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // required int32 SmsType = 3;
  if (has_smstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->smstype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_SendPhoneSms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string Phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // required int32 SmsType = 3;
    if (has_smstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smstype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_SendPhoneSms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_SendPhoneSms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_SendPhoneSms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_SendPhoneSms::MergeFrom(const CMD_GP_SendPhoneSms& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_smstype()) {
      set_smstype(from.smstype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_SendPhoneSms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_SendPhoneSms::CopyFrom(const CMD_GP_SendPhoneSms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_SendPhoneSms::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_SendPhoneSms::Swap(CMD_GP_SendPhoneSms* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(phone_, other->phone_);
    std::swap(smstype_, other->smstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_SendPhoneSms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_SendPhoneSms_descriptor_;
  metadata.reflection = CMD_GP_SendPhoneSms_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_PhoneBanding::kGameIDFieldNumber;
const int CMD_GP_PhoneBanding::kPhoneFieldNumber;
const int CMD_GP_PhoneBanding::kMsgIDFieldNumber;
const int CMD_GP_PhoneBanding::kSMSFieldNumber;
#endif  // !_MSC_VER

CMD_GP_PhoneBanding::CMD_GP_PhoneBanding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_PhoneBanding::InitAsDefaultInstance() {
}

CMD_GP_PhoneBanding::CMD_GP_PhoneBanding(const CMD_GP_PhoneBanding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_PhoneBanding::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgid_ = 0;
  sms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_PhoneBanding::~CMD_GP_PhoneBanding() {
  SharedDtor();
}

void CMD_GP_PhoneBanding::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (sms_ != &::google::protobuf::internal::kEmptyString) {
    delete sms_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_PhoneBanding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_PhoneBanding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_PhoneBanding_descriptor_;
}

const CMD_GP_PhoneBanding& CMD_GP_PhoneBanding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_PhoneBanding* CMD_GP_PhoneBanding::default_instance_ = NULL;

CMD_GP_PhoneBanding* CMD_GP_PhoneBanding::New() const {
  return new CMD_GP_PhoneBanding;
}

void CMD_GP_PhoneBanding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    msgid_ = 0;
    if (has_sms()) {
      if (sms_ != &::google::protobuf::internal::kEmptyString) {
        sms_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_PhoneBanding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Phone;
        break;
      }

      // required string Phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MsgID;
        break;
      }

      // required int32 MsgID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SMS;
        break;
      }

      // required string SMS = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SMS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sms().data(), this->sms().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_PhoneBanding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required string Phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // required int32 MsgID = 3;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgid(), output);
  }

  // required string SMS = 4;
  if (has_sms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sms().data(), this->sms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_PhoneBanding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required string Phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // required int32 MsgID = 3;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgid(), target);
  }

  // required string SMS = 4;
  if (has_sms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sms().data(), this->sms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_PhoneBanding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string Phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // required int32 MsgID = 3;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // required string SMS = 4;
    if (has_sms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_PhoneBanding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_PhoneBanding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_PhoneBanding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_PhoneBanding::MergeFrom(const CMD_GP_PhoneBanding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sms()) {
      set_sms(from.sms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_PhoneBanding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_PhoneBanding::CopyFrom(const CMD_GP_PhoneBanding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_PhoneBanding::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_GP_PhoneBanding::Swap(CMD_GP_PhoneBanding* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(phone_, other->phone_);
    std::swap(msgid_, other->msgid_);
    std::swap(sms_, other->sms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_PhoneBanding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_PhoneBanding_descriptor_;
  metadata.reflection = CMD_GP_PhoneBanding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_ResetSafePwd::kGameIDFieldNumber;
const int CMD_GP_ResetSafePwd::kPhoneFieldNumber;
const int CMD_GP_ResetSafePwd::kMsgIDFieldNumber;
const int CMD_GP_ResetSafePwd::kSMSFieldNumber;
const int CMD_GP_ResetSafePwd::kPwdFieldNumber;
#endif  // !_MSC_VER

CMD_GP_ResetSafePwd::CMD_GP_ResetSafePwd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_ResetSafePwd::InitAsDefaultInstance() {
}

CMD_GP_ResetSafePwd::CMD_GP_ResetSafePwd(const CMD_GP_ResetSafePwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_ResetSafePwd::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgid_ = 0;
  sms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_ResetSafePwd::~CMD_GP_ResetSafePwd() {
  SharedDtor();
}

void CMD_GP_ResetSafePwd::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (sms_ != &::google::protobuf::internal::kEmptyString) {
    delete sms_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_ResetSafePwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_ResetSafePwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_ResetSafePwd_descriptor_;
}

const CMD_GP_ResetSafePwd& CMD_GP_ResetSafePwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_ResetSafePwd* CMD_GP_ResetSafePwd::default_instance_ = NULL;

CMD_GP_ResetSafePwd* CMD_GP_ResetSafePwd::New() const {
  return new CMD_GP_ResetSafePwd;
}

void CMD_GP_ResetSafePwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    msgid_ = 0;
    if (has_sms()) {
      if (sms_ != &::google::protobuf::internal::kEmptyString) {
        sms_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_ResetSafePwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Phone;
        break;
      }

      // required string Phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MsgID;
        break;
      }

      // required int32 MsgID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SMS;
        break;
      }

      // required string SMS = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SMS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sms().data(), this->sms().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Pwd;
        break;
      }

      // required string Pwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_ResetSafePwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required string Phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // required int32 MsgID = 3;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgid(), output);
  }

  // required string SMS = 4;
  if (has_sms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sms().data(), this->sms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sms(), output);
  }

  // required string Pwd = 5;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_ResetSafePwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required string Phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // required int32 MsgID = 3;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgid(), target);
  }

  // required string SMS = 4;
  if (has_sms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sms().data(), this->sms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sms(), target);
  }

  // required string Pwd = 5;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_ResetSafePwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string Phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // required int32 MsgID = 3;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgid());
    }

    // required string SMS = 4;
    if (has_sms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sms());
    }

    // required string Pwd = 5;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_ResetSafePwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_ResetSafePwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_ResetSafePwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_ResetSafePwd::MergeFrom(const CMD_GP_ResetSafePwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sms()) {
      set_sms(from.sms());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_ResetSafePwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_ResetSafePwd::CopyFrom(const CMD_GP_ResetSafePwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_ResetSafePwd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CMD_GP_ResetSafePwd::Swap(CMD_GP_ResetSafePwd* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(phone_, other->phone_);
    std::swap(msgid_, other->msgid_);
    std::swap(sms_, other->sms_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_ResetSafePwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_ResetSafePwd_descriptor_;
  metadata.reflection = CMD_GP_ResetSafePwd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_RealNameAuthentication::kGameIDFieldNumber;
const int CMD_GP_RealNameAuthentication::kCompellationFieldNumber;
const int CMD_GP_RealNameAuthentication::kPassPortIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_RealNameAuthentication::CMD_GP_RealNameAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_RealNameAuthentication::InitAsDefaultInstance() {
}

CMD_GP_RealNameAuthentication::CMD_GP_RealNameAuthentication(const CMD_GP_RealNameAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_RealNameAuthentication::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  compellation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_RealNameAuthentication::~CMD_GP_RealNameAuthentication() {
  SharedDtor();
}

void CMD_GP_RealNameAuthentication::SharedDtor() {
  if (compellation_ != &::google::protobuf::internal::kEmptyString) {
    delete compellation_;
  }
  if (passportid_ != &::google::protobuf::internal::kEmptyString) {
    delete passportid_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_RealNameAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_RealNameAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_RealNameAuthentication_descriptor_;
}

const CMD_GP_RealNameAuthentication& CMD_GP_RealNameAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_RealNameAuthentication* CMD_GP_RealNameAuthentication::default_instance_ = NULL;

CMD_GP_RealNameAuthentication* CMD_GP_RealNameAuthentication::New() const {
  return new CMD_GP_RealNameAuthentication;
}

void CMD_GP_RealNameAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_compellation()) {
      if (compellation_ != &::google::protobuf::internal::kEmptyString) {
        compellation_->clear();
      }
    }
    if (has_passportid()) {
      if (passportid_ != &::google::protobuf::internal::kEmptyString) {
        passportid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_RealNameAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Compellation;
        break;
      }

      // required string Compellation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Compellation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compellation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->compellation().data(), this->compellation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PassPortID;
        break;
      }

      // required string PassPortID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassPortID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passportid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passportid().data(), this->passportid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_RealNameAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required string Compellation = 2;
  if (has_compellation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compellation().data(), this->compellation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->compellation(), output);
  }

  // required string PassPortID = 3;
  if (has_passportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passportid().data(), this->passportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_RealNameAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required string Compellation = 2;
  if (has_compellation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compellation().data(), this->compellation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->compellation(), target);
  }

  // required string PassPortID = 3;
  if (has_passportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passportid().data(), this->passportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_RealNameAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string Compellation = 2;
    if (has_compellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compellation());
    }

    // required string PassPortID = 3;
    if (has_passportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_RealNameAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_RealNameAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_RealNameAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_RealNameAuthentication::MergeFrom(const CMD_GP_RealNameAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_compellation()) {
      set_compellation(from.compellation());
    }
    if (from.has_passportid()) {
      set_passportid(from.passportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_RealNameAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_RealNameAuthentication::CopyFrom(const CMD_GP_RealNameAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_RealNameAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_RealNameAuthentication::Swap(CMD_GP_RealNameAuthentication* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(compellation_, other->compellation_);
    std::swap(passportid_, other->passportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_RealNameAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_RealNameAuthentication_descriptor_;
  metadata.reflection = CMD_GP_RealNameAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetNickName::kGameIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetNickName::CMD_GP_GetNickName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetNickName::InitAsDefaultInstance() {
}

CMD_GP_GetNickName::CMD_GP_GetNickName(const CMD_GP_GetNickName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetNickName::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetNickName::~CMD_GP_GetNickName() {
  SharedDtor();
}

void CMD_GP_GetNickName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GetNickName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetNickName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetNickName_descriptor_;
}

const CMD_GP_GetNickName& CMD_GP_GetNickName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetNickName* CMD_GP_GetNickName::default_instance_ = NULL;

CMD_GP_GetNickName* CMD_GP_GetNickName::New() const {
  return new CMD_GP_GetNickName;
}

void CMD_GP_GetNickName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetNickName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetNickName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetNickName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetNickName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetNickName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetNickName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetNickName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetNickName::MergeFrom(const CMD_GP_GetNickName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetNickName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetNickName::CopyFrom(const CMD_GP_GetNickName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetNickName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_GetNickName::Swap(CMD_GP_GetNickName* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetNickName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetNickName_descriptor_;
  metadata.reflection = CMD_GP_GetNickName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LuckDraw::kGameIDFieldNumber;
const int CMD_GP_LuckDraw::kLuckNumFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LuckDraw::CMD_GP_LuckDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_LuckDraw::InitAsDefaultInstance() {
}

CMD_GP_LuckDraw::CMD_GP_LuckDraw(const CMD_GP_LuckDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_LuckDraw::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  lucknum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LuckDraw::~CMD_GP_LuckDraw() {
  SharedDtor();
}

void CMD_GP_LuckDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_LuckDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_LuckDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_LuckDraw_descriptor_;
}

const CMD_GP_LuckDraw& CMD_GP_LuckDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_LuckDraw* CMD_GP_LuckDraw::default_instance_ = NULL;

CMD_GP_LuckDraw* CMD_GP_LuckDraw::New() const {
  return new CMD_GP_LuckDraw;
}

void CMD_GP_LuckDraw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    lucknum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_LuckDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LuckNum;
        break;
      }

      // required int32 LuckNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LuckNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucknum_)));
          set_has_lucknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_LuckDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 LuckNum = 2;
  if (has_lucknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lucknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_LuckDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 LuckNum = 2;
  if (has_lucknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lucknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_LuckDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 LuckNum = 2;
    if (has_lucknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LuckDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_LuckDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_LuckDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_LuckDraw::MergeFrom(const CMD_GP_LuckDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_lucknum()) {
      set_lucknum(from.lucknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_LuckDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_LuckDraw::CopyFrom(const CMD_GP_LuckDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LuckDraw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_LuckDraw::Swap(CMD_GP_LuckDraw* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(lucknum_, other->lucknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_LuckDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_LuckDraw_descriptor_;
  metadata.reflection = CMD_GP_LuckDraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetRechargeCaseBag::kGameIDFieldNumber;
const int CMD_GP_GetRechargeCaseBag::kCasegradeidFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetRechargeCaseBag::CMD_GP_GetRechargeCaseBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetRechargeCaseBag::InitAsDefaultInstance() {
}

CMD_GP_GetRechargeCaseBag::CMD_GP_GetRechargeCaseBag(const CMD_GP_GetRechargeCaseBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetRechargeCaseBag::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  casegradeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetRechargeCaseBag::~CMD_GP_GetRechargeCaseBag() {
  SharedDtor();
}

void CMD_GP_GetRechargeCaseBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GetRechargeCaseBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetRechargeCaseBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetRechargeCaseBag_descriptor_;
}

const CMD_GP_GetRechargeCaseBag& CMD_GP_GetRechargeCaseBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_GetRechargeCaseBag* CMD_GP_GetRechargeCaseBag::default_instance_ = NULL;

CMD_GP_GetRechargeCaseBag* CMD_GP_GetRechargeCaseBag::New() const {
  return new CMD_GP_GetRechargeCaseBag;
}

void CMD_GP_GetRechargeCaseBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    casegradeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetRechargeCaseBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_casegradeid;
        break;
      }

      // optional int32 casegradeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_casegradeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &casegradeid_)));
          set_has_casegradeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetRechargeCaseBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // optional int32 casegradeid = 2;
  if (has_casegradeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->casegradeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetRechargeCaseBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // optional int32 casegradeid = 2;
  if (has_casegradeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->casegradeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetRechargeCaseBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 casegradeid = 2;
    if (has_casegradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->casegradeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetRechargeCaseBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetRechargeCaseBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetRechargeCaseBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetRechargeCaseBag::MergeFrom(const CMD_GP_GetRechargeCaseBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_casegradeid()) {
      set_casegradeid(from.casegradeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetRechargeCaseBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetRechargeCaseBag::CopyFrom(const CMD_GP_GetRechargeCaseBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetRechargeCaseBag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_GetRechargeCaseBag::Swap(CMD_GP_GetRechargeCaseBag* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(casegradeid_, other->casegradeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetRechargeCaseBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetRechargeCaseBag_descriptor_;
  metadata.reflection = CMD_GP_GetRechargeCaseBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_BoxConversion::kGameIDFieldNumber;
const int CMD_GP_BoxConversion::kBoxIdFieldNumber;
const int CMD_GP_BoxConversion::kCountFieldNumber;
#endif  // !_MSC_VER

CMD_GP_BoxConversion::CMD_GP_BoxConversion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_BoxConversion::InitAsDefaultInstance() {
}

CMD_GP_BoxConversion::CMD_GP_BoxConversion(const CMD_GP_BoxConversion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_BoxConversion::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  boxid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_BoxConversion::~CMD_GP_BoxConversion() {
  SharedDtor();
}

void CMD_GP_BoxConversion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_BoxConversion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_BoxConversion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_BoxConversion_descriptor_;
}

const CMD_GP_BoxConversion& CMD_GP_BoxConversion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fc2s_2eproto();
  return *default_instance_;
}

CMD_GP_BoxConversion* CMD_GP_BoxConversion::default_instance_ = NULL;

CMD_GP_BoxConversion* CMD_GP_BoxConversion::New() const {
  return new CMD_GP_BoxConversion;
}

void CMD_GP_BoxConversion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    boxid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_BoxConversion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BoxId;
        break;
      }

      // required int32 BoxId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BoxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }

      // required int32 Count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_BoxConversion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 BoxId = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->boxid(), output);
  }

  // required int32 Count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_BoxConversion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 BoxId = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->boxid(), target);
  }

  // required int32 Count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_BoxConversion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 BoxId = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxid());
    }

    // required int32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_BoxConversion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_BoxConversion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_BoxConversion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_BoxConversion::MergeFrom(const CMD_GP_BoxConversion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_BoxConversion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_BoxConversion::CopyFrom(const CMD_GP_BoxConversion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_BoxConversion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GP_BoxConversion::Swap(CMD_GP_BoxConversion* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(boxid_, other->boxid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_BoxConversion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_BoxConversion_descriptor_;
  metadata.reflection = CMD_GP_BoxConversion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

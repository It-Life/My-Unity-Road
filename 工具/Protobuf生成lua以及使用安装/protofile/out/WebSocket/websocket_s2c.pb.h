// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WebSocket/websocket_s2c.proto

#ifndef PROTOBUF_WebSocket_2fwebsocket_5fs2c_2eproto__INCLUDED
#define PROTOBUF_WebSocket_2fwebsocket_5fs2c_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

class CMD_GR_S_PropertySuccess;
class ResultFailure;
class CMD_GP_UserInsureSuccess;
class CMD_GP_UserInsureInfo;
class CMD_GP_OperateSuccess;
class CMD_GP_MeiliDuihuanSuccess;
class GiftBag;
class ActivityConfig;
class Activity;
class MemberInfo;
class RechargeCaseBag;
class Secure;
class Novice;
class Hall;
class Relief;
class NewGiftBag;
class LanternBag;
class HomeConfig;
class FunctionalConfig;
class FunctionalConfig1;
class LuckDraw;
class RechargeCase;
class BoxDate;
class BoxDateInfo;
class BoxConfig;
class RechargeConfig;
class NewGift;
class Lantern;
class MonthlyCard;
class NovicePack;
class CMD_GP_NewDayRefresh;
class CMD_GP_LogonSuccess;
class CMD_GP_LogonSuccess_CMD_GP_UserInfo;
class CMD_GP_LogonFinish;
class CMD_GP_GameServer;
class CMD_GP_GameServer_GameServer;
class CMD_GP_GameKind;
class CMD_GP_GameKind_GameKind;
class CMD_GP_GiftDetail;
class CMD_GP_GiftDetail_GiftDetail;
class CMD_GP_LanternGiftDetail;
class CMD_GP_LanternGiftDetail_LanternGiftDetail;
class CMD_GP_ChangeAccount;
class CMD_GP_TreasureChange;
class SUB_GP_RANK;
class SUB_GP_RANK_GoldRank;
class SUB_GP_FISHRANK;
class SUB_GP_FISHRANK_FishRank;
class SUB_GP_NEWPLAYGIFTFLAG;
class SUB_GP_AllModelsSwitch;
class SUB_GP_AllModelsSwitch_AllModelsSwitch;
class CMD_GP_SignIn;
class CMD_GP_GetHeadUrl;
class CMD_GP_GetNoviceCard;
class CMD_GP_GetActivityCard;
class CMD_GP_GetReliefMoney;
class CMD_GP_GetPayPhone;
class CMD_GP_GetAwardGold;
class SUB_GP_GetRechargeRecord;
class SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult;
class CMD_GP_GetMonthlyCardScore;
class CMD_GP_SendPhoneSms;
class CMD_GP_PhoneBanding;
class CMD_GP_ResetSafePwd;
class CMD_GP_RealNameAuthentication;
class CMD_GP_GetNickName;
class CMD_GP_LuckDraw;
class CMD_GP_ReceiveNovicePack;
class CMD_GP_GetRechargeCaseBag;
class CMD_GP_BoxConversion;

// ===================================================================

class CMD_GR_S_PropertySuccess : public ::google::protobuf::Message {
 public:
  CMD_GR_S_PropertySuccess();
  virtual ~CMD_GR_S_PropertySuccess();

  CMD_GR_S_PropertySuccess(const CMD_GR_S_PropertySuccess& from);

  inline CMD_GR_S_PropertySuccess& operator=(const CMD_GR_S_PropertySuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GR_S_PropertySuccess& default_instance();

  void Swap(CMD_GR_S_PropertySuccess* other);

  // implements Message ----------------------------------------------

  CMD_GR_S_PropertySuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GR_S_PropertySuccess& from);
  void MergeFrom(const CMD_GR_S_PropertySuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cbRequestArea = 1;
  inline bool has_cbrequestarea() const;
  inline void clear_cbrequestarea();
  static const int kCbRequestAreaFieldNumber = 1;
  inline ::google::protobuf::int32 cbrequestarea() const;
  inline void set_cbrequestarea(::google::protobuf::int32 value);

  // optional int32 wItemCount = 2;
  inline bool has_witemcount() const;
  inline void clear_witemcount();
  static const int kWItemCountFieldNumber = 2;
  inline ::google::protobuf::int32 witemcount() const;
  inline void set_witemcount(::google::protobuf::int32 value);

  // optional int32 wPropertyIndex = 3;
  inline bool has_wpropertyindex() const;
  inline void clear_wpropertyindex();
  static const int kWPropertyIndexFieldNumber = 3;
  inline ::google::protobuf::int32 wpropertyindex() const;
  inline void set_wpropertyindex(::google::protobuf::int32 value);

  // required int32 dwSourceUserID = 4;
  inline bool has_dwsourceuserid() const;
  inline void clear_dwsourceuserid();
  static const int kDwSourceUserIDFieldNumber = 4;
  inline ::google::protobuf::int32 dwsourceuserid() const;
  inline void set_dwsourceuserid(::google::protobuf::int32 value);

  // required int32 dwTargetUserID = 5;
  inline bool has_dwtargetuserid() const;
  inline void clear_dwtargetuserid();
  static const int kDwTargetUserIDFieldNumber = 5;
  inline ::google::protobuf::int32 dwtargetuserid() const;
  inline void set_dwtargetuserid(::google::protobuf::int32 value);

  // optional int32 dwLoveLess = 6;
  inline bool has_dwloveless() const;
  inline void clear_dwloveless();
  static const int kDwLoveLessFieldNumber = 6;
  inline ::google::protobuf::int32 dwloveless() const;
  inline void set_dwloveless(::google::protobuf::int32 value);

  // optional string szTargetNickName = 7;
  inline bool has_sztargetnickname() const;
  inline void clear_sztargetnickname();
  static const int kSzTargetNickNameFieldNumber = 7;
  inline const ::std::string& sztargetnickname() const;
  inline void set_sztargetnickname(const ::std::string& value);
  inline void set_sztargetnickname(const char* value);
  inline void set_sztargetnickname(const char* value, size_t size);
  inline ::std::string* mutable_sztargetnickname();
  inline ::std::string* release_sztargetnickname();
  inline void set_allocated_sztargetnickname(::std::string* sztargetnickname);

  // @@protoc_insertion_point(class_scope:CMD_GR_S_PropertySuccess)
 private:
  inline void set_has_cbrequestarea();
  inline void clear_has_cbrequestarea();
  inline void set_has_witemcount();
  inline void clear_has_witemcount();
  inline void set_has_wpropertyindex();
  inline void clear_has_wpropertyindex();
  inline void set_has_dwsourceuserid();
  inline void clear_has_dwsourceuserid();
  inline void set_has_dwtargetuserid();
  inline void clear_has_dwtargetuserid();
  inline void set_has_dwloveless();
  inline void clear_has_dwloveless();
  inline void set_has_sztargetnickname();
  inline void clear_has_sztargetnickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cbrequestarea_;
  ::google::protobuf::int32 witemcount_;
  ::google::protobuf::int32 wpropertyindex_;
  ::google::protobuf::int32 dwsourceuserid_;
  ::google::protobuf::int32 dwtargetuserid_;
  ::google::protobuf::int32 dwloveless_;
  ::std::string* sztargetnickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_S_PropertySuccess* default_instance_;
};
// -------------------------------------------------------------------

class ResultFailure : public ::google::protobuf::Message {
 public:
  ResultFailure();
  virtual ~ResultFailure();

  ResultFailure(const ResultFailure& from);

  inline ResultFailure& operator=(const ResultFailure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultFailure& default_instance();

  void Swap(ResultFailure* other);

  // implements Message ----------------------------------------------

  ResultFailure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultFailure& from);
  void MergeFrom(const ResultFailure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 wRequestArea = 1;
  inline bool has_wrequestarea() const;
  inline void clear_wrequestarea();
  static const int kWRequestAreaFieldNumber = 1;
  inline ::google::protobuf::int32 wrequestarea() const;
  inline void set_wrequestarea(::google::protobuf::int32 value);

  // required int32 lErrorCode = 2;
  inline bool has_lerrorcode() const;
  inline void clear_lerrorcode();
  static const int kLErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 lerrorcode() const;
  inline void set_lerrorcode(::google::protobuf::int32 value);

  // required string szDescribeString = 3;
  inline bool has_szdescribestring() const;
  inline void clear_szdescribestring();
  static const int kSzDescribeStringFieldNumber = 3;
  inline const ::std::string& szdescribestring() const;
  inline void set_szdescribestring(const ::std::string& value);
  inline void set_szdescribestring(const char* value);
  inline void set_szdescribestring(const char* value, size_t size);
  inline ::std::string* mutable_szdescribestring();
  inline ::std::string* release_szdescribestring();
  inline void set_allocated_szdescribestring(::std::string* szdescribestring);

  // @@protoc_insertion_point(class_scope:ResultFailure)
 private:
  inline void set_has_wrequestarea();
  inline void clear_has_wrequestarea();
  inline void set_has_lerrorcode();
  inline void clear_has_lerrorcode();
  inline void set_has_szdescribestring();
  inline void clear_has_szdescribestring();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wrequestarea_;
  ::google::protobuf::int32 lerrorcode_;
  ::std::string* szdescribestring_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static ResultFailure* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_UserInsureSuccess : public ::google::protobuf::Message {
 public:
  CMD_GP_UserInsureSuccess();
  virtual ~CMD_GP_UserInsureSuccess();

  CMD_GP_UserInsureSuccess(const CMD_GP_UserInsureSuccess& from);

  inline CMD_GP_UserInsureSuccess& operator=(const CMD_GP_UserInsureSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_UserInsureSuccess& default_instance();

  void Swap(CMD_GP_UserInsureSuccess* other);

  // implements Message ----------------------------------------------

  CMD_GP_UserInsureSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_UserInsureSuccess& from);
  void MergeFrom(const CMD_GP_UserInsureSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwUserID = 1;
  inline bool has_dwuserid() const;
  inline void clear_dwuserid();
  static const int kDwUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwuserid() const;
  inline void set_dwuserid(::google::protobuf::int32 value);

  // required int64 lUserScore = 2;
  inline bool has_luserscore() const;
  inline void clear_luserscore();
  static const int kLUserScoreFieldNumber = 2;
  inline ::google::protobuf::int64 luserscore() const;
  inline void set_luserscore(::google::protobuf::int64 value);

  // required int64 lUserInsure = 3;
  inline bool has_luserinsure() const;
  inline void clear_luserinsure();
  static const int kLUserInsureFieldNumber = 3;
  inline ::google::protobuf::int64 luserinsure() const;
  inline void set_luserinsure(::google::protobuf::int64 value);

  // required string szDescribeString = 4;
  inline bool has_szdescribestring() const;
  inline void clear_szdescribestring();
  static const int kSzDescribeStringFieldNumber = 4;
  inline const ::std::string& szdescribestring() const;
  inline void set_szdescribestring(const ::std::string& value);
  inline void set_szdescribestring(const char* value);
  inline void set_szdescribestring(const char* value, size_t size);
  inline ::std::string* mutable_szdescribestring();
  inline ::std::string* release_szdescribestring();
  inline void set_allocated_szdescribestring(::std::string* szdescribestring);

  // @@protoc_insertion_point(class_scope:CMD_GP_UserInsureSuccess)
 private:
  inline void set_has_dwuserid();
  inline void clear_has_dwuserid();
  inline void set_has_luserscore();
  inline void clear_has_luserscore();
  inline void set_has_luserinsure();
  inline void clear_has_luserinsure();
  inline void set_has_szdescribestring();
  inline void clear_has_szdescribestring();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 luserscore_;
  ::google::protobuf::int64 luserinsure_;
  ::std::string* szdescribestring_;
  ::google::protobuf::int32 dwuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_UserInsureSuccess* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_UserInsureInfo : public ::google::protobuf::Message {
 public:
  CMD_GP_UserInsureInfo();
  virtual ~CMD_GP_UserInsureInfo();

  CMD_GP_UserInsureInfo(const CMD_GP_UserInsureInfo& from);

  inline CMD_GP_UserInsureInfo& operator=(const CMD_GP_UserInsureInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_UserInsureInfo& default_instance();

  void Swap(CMD_GP_UserInsureInfo* other);

  // implements Message ----------------------------------------------

  CMD_GP_UserInsureInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_UserInsureInfo& from);
  void MergeFrom(const CMD_GP_UserInsureInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wRevenueTake = 1;
  inline bool has_wrevenuetake() const;
  inline void clear_wrevenuetake();
  static const int kWRevenueTakeFieldNumber = 1;
  inline ::google::protobuf::int32 wrevenuetake() const;
  inline void set_wrevenuetake(::google::protobuf::int32 value);

  // required int32 wRevenueTransfer = 2;
  inline bool has_wrevenuetransfer() const;
  inline void clear_wrevenuetransfer();
  static const int kWRevenueTransferFieldNumber = 2;
  inline ::google::protobuf::int32 wrevenuetransfer() const;
  inline void set_wrevenuetransfer(::google::protobuf::int32 value);

  // required int32 wServerID = 3;
  inline bool has_wserverid() const;
  inline void clear_wserverid();
  static const int kWServerIDFieldNumber = 3;
  inline ::google::protobuf::int32 wserverid() const;
  inline void set_wserverid(::google::protobuf::int32 value);

  // required int32 wMemberOrder = 4;
  inline bool has_wmemberorder() const;
  inline void clear_wmemberorder();
  static const int kWMemberOrderFieldNumber = 4;
  inline ::google::protobuf::int32 wmemberorder() const;
  inline void set_wmemberorder(::google::protobuf::int32 value);

  // required int64 lUserScore = 5;
  inline bool has_luserscore() const;
  inline void clear_luserscore();
  static const int kLUserScoreFieldNumber = 5;
  inline ::google::protobuf::int64 luserscore() const;
  inline void set_luserscore(::google::protobuf::int64 value);

  // required int64 lUserInsure = 6;
  inline bool has_luserinsure() const;
  inline void clear_luserinsure();
  static const int kLUserInsureFieldNumber = 6;
  inline ::google::protobuf::int64 luserinsure() const;
  inline void set_luserinsure(::google::protobuf::int64 value);

  // required int64 lTransferPrerequisite = 7;
  inline bool has_ltransferprerequisite() const;
  inline void clear_ltransferprerequisite();
  static const int kLTransferPrerequisiteFieldNumber = 7;
  inline ::google::protobuf::int64 ltransferprerequisite() const;
  inline void set_ltransferprerequisite(::google::protobuf::int64 value);

  // required int64 lLoveNess = 8;
  inline bool has_lloveness() const;
  inline void clear_lloveness();
  static const int kLLoveNessFieldNumber = 8;
  inline ::google::protobuf::int64 lloveness() const;
  inline void set_lloveness(::google::protobuf::int64 value);

  // required int64 MeiliDuihuanRatio = 9;
  inline bool has_meiliduihuanratio() const;
  inline void clear_meiliduihuanratio();
  static const int kMeiliDuihuanRatioFieldNumber = 9;
  inline ::google::protobuf::int64 meiliduihuanratio() const;
  inline void set_meiliduihuanratio(::google::protobuf::int64 value);

  // required int64 MeiliDuihuanMax = 10;
  inline bool has_meiliduihuanmax() const;
  inline void clear_meiliduihuanmax();
  static const int kMeiliDuihuanMaxFieldNumber = 10;
  inline ::google::protobuf::int64 meiliduihuanmax() const;
  inline void set_meiliduihuanmax(::google::protobuf::int64 value);

  // required int64 MeiliDuihuanDailyCount = 11;
  inline bool has_meiliduihuandailycount() const;
  inline void clear_meiliduihuandailycount();
  static const int kMeiliDuihuanDailyCountFieldNumber = 11;
  inline ::google::protobuf::int64 meiliduihuandailycount() const;
  inline void set_meiliduihuandailycount(::google::protobuf::int64 value);

  // required int64 DailyDuihuanCount = 12;
  inline bool has_dailyduihuancount() const;
  inline void clear_dailyduihuancount();
  static const int kDailyDuihuanCountFieldNumber = 12;
  inline ::google::protobuf::int64 dailyduihuancount() const;
  inline void set_dailyduihuancount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_UserInsureInfo)
 private:
  inline void set_has_wrevenuetake();
  inline void clear_has_wrevenuetake();
  inline void set_has_wrevenuetransfer();
  inline void clear_has_wrevenuetransfer();
  inline void set_has_wserverid();
  inline void clear_has_wserverid();
  inline void set_has_wmemberorder();
  inline void clear_has_wmemberorder();
  inline void set_has_luserscore();
  inline void clear_has_luserscore();
  inline void set_has_luserinsure();
  inline void clear_has_luserinsure();
  inline void set_has_ltransferprerequisite();
  inline void clear_has_ltransferprerequisite();
  inline void set_has_lloveness();
  inline void clear_has_lloveness();
  inline void set_has_meiliduihuanratio();
  inline void clear_has_meiliduihuanratio();
  inline void set_has_meiliduihuanmax();
  inline void clear_has_meiliduihuanmax();
  inline void set_has_meiliduihuandailycount();
  inline void clear_has_meiliduihuandailycount();
  inline void set_has_dailyduihuancount();
  inline void clear_has_dailyduihuancount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wrevenuetake_;
  ::google::protobuf::int32 wrevenuetransfer_;
  ::google::protobuf::int32 wserverid_;
  ::google::protobuf::int32 wmemberorder_;
  ::google::protobuf::int64 luserscore_;
  ::google::protobuf::int64 luserinsure_;
  ::google::protobuf::int64 ltransferprerequisite_;
  ::google::protobuf::int64 lloveness_;
  ::google::protobuf::int64 meiliduihuanratio_;
  ::google::protobuf::int64 meiliduihuanmax_;
  ::google::protobuf::int64 meiliduihuandailycount_;
  ::google::protobuf::int64 dailyduihuancount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_UserInsureInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_OperateSuccess : public ::google::protobuf::Message {
 public:
  CMD_GP_OperateSuccess();
  virtual ~CMD_GP_OperateSuccess();

  CMD_GP_OperateSuccess(const CMD_GP_OperateSuccess& from);

  inline CMD_GP_OperateSuccess& operator=(const CMD_GP_OperateSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_OperateSuccess& default_instance();

  void Swap(CMD_GP_OperateSuccess* other);

  // implements Message ----------------------------------------------

  CMD_GP_OperateSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_OperateSuccess& from);
  void MergeFrom(const CMD_GP_OperateSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 lResultCode = 1;
  inline bool has_lresultcode() const;
  inline void clear_lresultcode();
  static const int kLResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 lresultcode() const;
  inline void set_lresultcode(::google::protobuf::int32 value);

  // required string szDescribeString = 2;
  inline bool has_szdescribestring() const;
  inline void clear_szdescribestring();
  static const int kSzDescribeStringFieldNumber = 2;
  inline const ::std::string& szdescribestring() const;
  inline void set_szdescribestring(const ::std::string& value);
  inline void set_szdescribestring(const char* value);
  inline void set_szdescribestring(const char* value, size_t size);
  inline ::std::string* mutable_szdescribestring();
  inline ::std::string* release_szdescribestring();
  inline void set_allocated_szdescribestring(::std::string* szdescribestring);

  // @@protoc_insertion_point(class_scope:CMD_GP_OperateSuccess)
 private:
  inline void set_has_lresultcode();
  inline void clear_has_lresultcode();
  inline void set_has_szdescribestring();
  inline void clear_has_szdescribestring();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* szdescribestring_;
  ::google::protobuf::int32 lresultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_OperateSuccess* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_MeiliDuihuanSuccess : public ::google::protobuf::Message {
 public:
  CMD_GP_MeiliDuihuanSuccess();
  virtual ~CMD_GP_MeiliDuihuanSuccess();

  CMD_GP_MeiliDuihuanSuccess(const CMD_GP_MeiliDuihuanSuccess& from);

  inline CMD_GP_MeiliDuihuanSuccess& operator=(const CMD_GP_MeiliDuihuanSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_MeiliDuihuanSuccess& default_instance();

  void Swap(CMD_GP_MeiliDuihuanSuccess* other);

  // implements Message ----------------------------------------------

  CMD_GP_MeiliDuihuanSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_MeiliDuihuanSuccess& from);
  void MergeFrom(const CMD_GP_MeiliDuihuanSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwUserID = 1;
  inline bool has_dwuserid() const;
  inline void clear_dwuserid();
  static const int kDwUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwuserid() const;
  inline void set_dwuserid(::google::protobuf::int32 value);

  // required int64 lUserScore = 2;
  inline bool has_luserscore() const;
  inline void clear_luserscore();
  static const int kLUserScoreFieldNumber = 2;
  inline ::google::protobuf::int64 luserscore() const;
  inline void set_luserscore(::google::protobuf::int64 value);

  // required int64 lUserLoveness = 3;
  inline bool has_luserloveness() const;
  inline void clear_luserloveness();
  static const int kLUserLovenessFieldNumber = 3;
  inline ::google::protobuf::int64 luserloveness() const;
  inline void set_luserloveness(::google::protobuf::int64 value);

  // required string szDescribeString = 4;
  inline bool has_szdescribestring() const;
  inline void clear_szdescribestring();
  static const int kSzDescribeStringFieldNumber = 4;
  inline const ::std::string& szdescribestring() const;
  inline void set_szdescribestring(const ::std::string& value);
  inline void set_szdescribestring(const char* value);
  inline void set_szdescribestring(const char* value, size_t size);
  inline ::std::string* mutable_szdescribestring();
  inline ::std::string* release_szdescribestring();
  inline void set_allocated_szdescribestring(::std::string* szdescribestring);

  // @@protoc_insertion_point(class_scope:CMD_GP_MeiliDuihuanSuccess)
 private:
  inline void set_has_dwuserid();
  inline void clear_has_dwuserid();
  inline void set_has_luserscore();
  inline void clear_has_luserscore();
  inline void set_has_luserloveness();
  inline void clear_has_luserloveness();
  inline void set_has_szdescribestring();
  inline void clear_has_szdescribestring();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 luserscore_;
  ::google::protobuf::int64 luserloveness_;
  ::std::string* szdescribestring_;
  ::google::protobuf::int32 dwuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_MeiliDuihuanSuccess* default_instance_;
};
// -------------------------------------------------------------------

class GiftBag : public ::google::protobuf::Message {
 public:
  GiftBag();
  virtual ~GiftBag();

  GiftBag(const GiftBag& from);

  inline GiftBag& operator=(const GiftBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiftBag& default_instance();

  void Swap(GiftBag* other);

  // implements Message ----------------------------------------------

  GiftBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiftBag& from);
  void MergeFrom(const GiftBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 giftBag1 = 1;
  inline bool has_giftbag1() const;
  inline void clear_giftbag1();
  static const int kGiftBag1FieldNumber = 1;
  inline ::google::protobuf::int32 giftbag1() const;
  inline void set_giftbag1(::google::protobuf::int32 value);

  // optional int32 giftBag2 = 2;
  inline bool has_giftbag2() const;
  inline void clear_giftbag2();
  static const int kGiftBag2FieldNumber = 2;
  inline ::google::protobuf::int32 giftbag2() const;
  inline void set_giftbag2(::google::protobuf::int32 value);

  // optional int32 giftBag3 = 3;
  inline bool has_giftbag3() const;
  inline void clear_giftbag3();
  static const int kGiftBag3FieldNumber = 3;
  inline ::google::protobuf::int32 giftbag3() const;
  inline void set_giftbag3(::google::protobuf::int32 value);

  // optional int32 giftBag4 = 4;
  inline bool has_giftbag4() const;
  inline void clear_giftbag4();
  static const int kGiftBag4FieldNumber = 4;
  inline ::google::protobuf::int32 giftbag4() const;
  inline void set_giftbag4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GiftBag)
 private:
  inline void set_has_giftbag1();
  inline void clear_has_giftbag1();
  inline void set_has_giftbag2();
  inline void clear_has_giftbag2();
  inline void set_has_giftbag3();
  inline void clear_has_giftbag3();
  inline void set_has_giftbag4();
  inline void clear_has_giftbag4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 giftbag1_;
  ::google::protobuf::int32 giftbag2_;
  ::google::protobuf::int32 giftbag3_;
  ::google::protobuf::int32 giftbag4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static GiftBag* default_instance_;
};
// -------------------------------------------------------------------

class ActivityConfig : public ::google::protobuf::Message {
 public:
  ActivityConfig();
  virtual ~ActivityConfig();

  ActivityConfig(const ActivityConfig& from);

  inline ActivityConfig& operator=(const ActivityConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityConfig& default_instance();

  void Swap(ActivityConfig* other);

  // implements Message ----------------------------------------------

  ActivityConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityConfig& from);
  void MergeFrom(const ActivityConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string activityName = 1;
  inline bool has_activityname() const;
  inline void clear_activityname();
  static const int kActivityNameFieldNumber = 1;
  inline const ::std::string& activityname() const;
  inline void set_activityname(const ::std::string& value);
  inline void set_activityname(const char* value);
  inline void set_activityname(const char* value, size_t size);
  inline ::std::string* mutable_activityname();
  inline ::std::string* release_activityname();
  inline void set_allocated_activityname(::std::string* activityname);

  // optional int32 activityid = 2;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityidFieldNumber = 2;
  inline ::google::protobuf::int32 activityid() const;
  inline void set_activityid(::google::protobuf::int32 value);

  // optional string startTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const char* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  inline void set_allocated_starttime(::std::string* starttime);

  // optional string endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // @@protoc_insertion_point(class_scope:ActivityConfig)
 private:
  inline void set_has_activityname();
  inline void clear_has_activityname();
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* activityname_;
  ::std::string* starttime_;
  ::std::string* endtime_;
  ::google::protobuf::int32 activityid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static ActivityConfig* default_instance_;
};
// -------------------------------------------------------------------

class Activity : public ::google::protobuf::Message {
 public:
  Activity();
  virtual ~Activity();

  Activity(const Activity& from);

  inline Activity& operator=(const Activity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Activity& default_instance();

  void Swap(Activity* other);

  // implements Message ----------------------------------------------

  Activity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Activity& from);
  void MergeFrom(const Activity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string startTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const char* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  inline void set_allocated_starttime(::std::string* starttime);

  // optional string endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // optional string reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // @@protoc_insertion_point(class_scope:Activity)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* starttime_;
  ::std::string* endtime_;
  ::std::string* reward_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static Activity* default_instance_;
};
// -------------------------------------------------------------------

class MemberInfo : public ::google::protobuf::Message {
 public:
  MemberInfo();
  virtual ~MemberInfo();

  MemberInfo(const MemberInfo& from);

  inline MemberInfo& operator=(const MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberInfo& default_instance();

  void Swap(MemberInfo* other);

  // implements Message ----------------------------------------------

  MemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemberInfo& from);
  void MergeFrom(const MemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string memberSwitchDate = 1;
  inline bool has_memberswitchdate() const;
  inline void clear_memberswitchdate();
  static const int kMemberSwitchDateFieldNumber = 1;
  inline const ::std::string& memberswitchdate() const;
  inline void set_memberswitchdate(const ::std::string& value);
  inline void set_memberswitchdate(const char* value);
  inline void set_memberswitchdate(const char* value, size_t size);
  inline ::std::string* mutable_memberswitchdate();
  inline ::std::string* release_memberswitchdate();
  inline void set_allocated_memberswitchdate(::std::string* memberswitchdate);

  // optional int32 memberOrder = 2;
  inline bool has_memberorder() const;
  inline void clear_memberorder();
  static const int kMemberOrderFieldNumber = 2;
  inline ::google::protobuf::int32 memberorder() const;
  inline void set_memberorder(::google::protobuf::int32 value);

  // optional int32 memberDays = 3;
  inline bool has_memberdays() const;
  inline void clear_memberdays();
  static const int kMemberDaysFieldNumber = 3;
  inline ::google::protobuf::int32 memberdays() const;
  inline void set_memberdays(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MemberInfo)
 private:
  inline void set_has_memberswitchdate();
  inline void clear_has_memberswitchdate();
  inline void set_has_memberorder();
  inline void clear_has_memberorder();
  inline void set_has_memberdays();
  inline void clear_has_memberdays();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* memberswitchdate_;
  ::google::protobuf::int32 memberorder_;
  ::google::protobuf::int32 memberdays_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static MemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class RechargeCaseBag : public ::google::protobuf::Message {
 public:
  RechargeCaseBag();
  virtual ~RechargeCaseBag();

  RechargeCaseBag(const RechargeCaseBag& from);

  inline RechargeCaseBag& operator=(const RechargeCaseBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RechargeCaseBag& default_instance();

  void Swap(RechargeCaseBag* other);

  // implements Message ----------------------------------------------

  RechargeCaseBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RechargeCaseBag& from);
  void MergeFrom(const RechargeCaseBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rechargeCaseBag1 = 1;
  inline bool has_rechargecasebag1() const;
  inline void clear_rechargecasebag1();
  static const int kRechargeCaseBag1FieldNumber = 1;
  inline ::google::protobuf::int32 rechargecasebag1() const;
  inline void set_rechargecasebag1(::google::protobuf::int32 value);

  // optional int32 rechargeCaseBag2 = 2;
  inline bool has_rechargecasebag2() const;
  inline void clear_rechargecasebag2();
  static const int kRechargeCaseBag2FieldNumber = 2;
  inline ::google::protobuf::int32 rechargecasebag2() const;
  inline void set_rechargecasebag2(::google::protobuf::int32 value);

  // optional int32 rechargeCaseBag3 = 3;
  inline bool has_rechargecasebag3() const;
  inline void clear_rechargecasebag3();
  static const int kRechargeCaseBag3FieldNumber = 3;
  inline ::google::protobuf::int32 rechargecasebag3() const;
  inline void set_rechargecasebag3(::google::protobuf::int32 value);

  // optional int32 rechargeCaseBag4 = 4;
  inline bool has_rechargecasebag4() const;
  inline void clear_rechargecasebag4();
  static const int kRechargeCaseBag4FieldNumber = 4;
  inline ::google::protobuf::int32 rechargecasebag4() const;
  inline void set_rechargecasebag4(::google::protobuf::int32 value);

  // optional int32 rechargeCaseBag5 = 5;
  inline bool has_rechargecasebag5() const;
  inline void clear_rechargecasebag5();
  static const int kRechargeCaseBag5FieldNumber = 5;
  inline ::google::protobuf::int32 rechargecasebag5() const;
  inline void set_rechargecasebag5(::google::protobuf::int32 value);

  // optional int32 rechargeCaseBag6 = 6;
  inline bool has_rechargecasebag6() const;
  inline void clear_rechargecasebag6();
  static const int kRechargeCaseBag6FieldNumber = 6;
  inline ::google::protobuf::int32 rechargecasebag6() const;
  inline void set_rechargecasebag6(::google::protobuf::int32 value);

  // optional int32 rechargeCaseBag7 = 7;
  inline bool has_rechargecasebag7() const;
  inline void clear_rechargecasebag7();
  static const int kRechargeCaseBag7FieldNumber = 7;
  inline ::google::protobuf::int32 rechargecasebag7() const;
  inline void set_rechargecasebag7(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RechargeCaseBag)
 private:
  inline void set_has_rechargecasebag1();
  inline void clear_has_rechargecasebag1();
  inline void set_has_rechargecasebag2();
  inline void clear_has_rechargecasebag2();
  inline void set_has_rechargecasebag3();
  inline void clear_has_rechargecasebag3();
  inline void set_has_rechargecasebag4();
  inline void clear_has_rechargecasebag4();
  inline void set_has_rechargecasebag5();
  inline void clear_has_rechargecasebag5();
  inline void set_has_rechargecasebag6();
  inline void clear_has_rechargecasebag6();
  inline void set_has_rechargecasebag7();
  inline void clear_has_rechargecasebag7();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rechargecasebag1_;
  ::google::protobuf::int32 rechargecasebag2_;
  ::google::protobuf::int32 rechargecasebag3_;
  ::google::protobuf::int32 rechargecasebag4_;
  ::google::protobuf::int32 rechargecasebag5_;
  ::google::protobuf::int32 rechargecasebag6_;
  ::google::protobuf::int32 rechargecasebag7_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static RechargeCaseBag* default_instance_;
};
// -------------------------------------------------------------------

class Secure : public ::google::protobuf::Message {
 public:
  Secure();
  virtual ~Secure();

  Secure(const Secure& from);

  inline Secure& operator=(const Secure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Secure& default_instance();

  void Swap(Secure* other);

  // implements Message ----------------------------------------------

  Secure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Secure& from);
  void MergeFrom(const Secure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string compellation = 1;
  inline bool has_compellation() const;
  inline void clear_compellation();
  static const int kCompellationFieldNumber = 1;
  inline const ::std::string& compellation() const;
  inline void set_compellation(const ::std::string& value);
  inline void set_compellation(const char* value);
  inline void set_compellation(const char* value, size_t size);
  inline ::std::string* mutable_compellation();
  inline ::std::string* release_compellation();
  inline void set_allocated_compellation(::std::string* compellation);

  // optional string passPortID = 2;
  inline bool has_passportid() const;
  inline void clear_passportid();
  static const int kPassPortIDFieldNumber = 2;
  inline const ::std::string& passportid() const;
  inline void set_passportid(const ::std::string& value);
  inline void set_passportid(const char* value);
  inline void set_passportid(const char* value, size_t size);
  inline ::std::string* mutable_passportid();
  inline ::std::string* release_passportid();
  inline void set_allocated_passportid(::std::string* passportid);

  // optional int32 isSecure = 3;
  inline bool has_issecure() const;
  inline void clear_issecure();
  static const int kIsSecureFieldNumber = 3;
  inline ::google::protobuf::int32 issecure() const;
  inline void set_issecure(::google::protobuf::int32 value);

  // optional string verificationPhone = 4;
  inline bool has_verificationphone() const;
  inline void clear_verificationphone();
  static const int kVerificationPhoneFieldNumber = 4;
  inline const ::std::string& verificationphone() const;
  inline void set_verificationphone(const ::std::string& value);
  inline void set_verificationphone(const char* value);
  inline void set_verificationphone(const char* value, size_t size);
  inline ::std::string* mutable_verificationphone();
  inline ::std::string* release_verificationphone();
  inline void set_allocated_verificationphone(::std::string* verificationphone);

  // @@protoc_insertion_point(class_scope:Secure)
 private:
  inline void set_has_compellation();
  inline void clear_has_compellation();
  inline void set_has_passportid();
  inline void clear_has_passportid();
  inline void set_has_issecure();
  inline void clear_has_issecure();
  inline void set_has_verificationphone();
  inline void clear_has_verificationphone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* compellation_;
  ::std::string* passportid_;
  ::std::string* verificationphone_;
  ::google::protobuf::int32 issecure_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static Secure* default_instance_;
};
// -------------------------------------------------------------------

class Novice : public ::google::protobuf::Message {
 public:
  Novice();
  virtual ~Novice();

  Novice(const Novice& from);

  inline Novice& operator=(const Novice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Novice& default_instance();

  void Swap(Novice* other);

  // implements Message ----------------------------------------------

  Novice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Novice& from);
  void MergeFrom(const Novice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string noviceCard = 1;
  inline bool has_novicecard() const;
  inline void clear_novicecard();
  static const int kNoviceCardFieldNumber = 1;
  inline const ::std::string& novicecard() const;
  inline void set_novicecard(const ::std::string& value);
  inline void set_novicecard(const char* value);
  inline void set_novicecard(const char* value, size_t size);
  inline ::std::string* mutable_novicecard();
  inline ::std::string* release_novicecard();
  inline void set_allocated_novicecard(::std::string* novicecard);

  // optional string quota = 2;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 2;
  inline const ::std::string& quota() const;
  inline void set_quota(const ::std::string& value);
  inline void set_quota(const char* value);
  inline void set_quota(const char* value, size_t size);
  inline ::std::string* mutable_quota();
  inline ::std::string* release_quota();
  inline void set_allocated_quota(::std::string* quota);

  // optional string durationTerm = 3;
  inline bool has_durationterm() const;
  inline void clear_durationterm();
  static const int kDurationTermFieldNumber = 3;
  inline const ::std::string& durationterm() const;
  inline void set_durationterm(const ::std::string& value);
  inline void set_durationterm(const char* value);
  inline void set_durationterm(const char* value, size_t size);
  inline ::std::string* mutable_durationterm();
  inline ::std::string* release_durationterm();
  inline void set_allocated_durationterm(::std::string* durationterm);

  // optional int32 cardDay = 4;
  inline bool has_cardday() const;
  inline void clear_cardday();
  static const int kCardDayFieldNumber = 4;
  inline ::google::protobuf::int32 cardday() const;
  inline void set_cardday(::google::protobuf::int32 value);

  // optional int32 cardState = 5;
  inline bool has_cardstate() const;
  inline void clear_cardstate();
  static const int kCardStateFieldNumber = 5;
  inline ::google::protobuf::int32 cardstate() const;
  inline void set_cardstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Novice)
 private:
  inline void set_has_novicecard();
  inline void clear_has_novicecard();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_durationterm();
  inline void clear_has_durationterm();
  inline void set_has_cardday();
  inline void clear_has_cardday();
  inline void set_has_cardstate();
  inline void clear_has_cardstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* novicecard_;
  ::std::string* quota_;
  ::std::string* durationterm_;
  ::google::protobuf::int32 cardday_;
  ::google::protobuf::int32 cardstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static Novice* default_instance_;
};
// -------------------------------------------------------------------

class Hall : public ::google::protobuf::Message {
 public:
  Hall();
  virtual ~Hall();

  Hall(const Hall& from);

  inline Hall& operator=(const Hall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hall& default_instance();

  void Swap(Hall* other);

  // implements Message ----------------------------------------------

  Hall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hall& from);
  void MergeFrom(const Hall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type1 = 1;
  inline bool has_type1() const;
  inline void clear_type1();
  static const int kType1FieldNumber = 1;
  inline ::google::protobuf::int32 type1() const;
  inline void set_type1(::google::protobuf::int32 value);

  // optional int32 type2 = 2;
  inline bool has_type2() const;
  inline void clear_type2();
  static const int kType2FieldNumber = 2;
  inline ::google::protobuf::int32 type2() const;
  inline void set_type2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Hall)
 private:
  inline void set_has_type1();
  inline void clear_has_type1();
  inline void set_has_type2();
  inline void clear_has_type2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type1_;
  ::google::protobuf::int32 type2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static Hall* default_instance_;
};
// -------------------------------------------------------------------

class Relief : public ::google::protobuf::Message {
 public:
  Relief();
  virtual ~Relief();

  Relief(const Relief& from);

  inline Relief& operator=(const Relief& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Relief& default_instance();

  void Swap(Relief* other);

  // implements Message ----------------------------------------------

  Relief* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Relief& from);
  void MergeFrom(const Relief& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reliefNum = 1;
  inline bool has_reliefnum() const;
  inline void clear_reliefnum();
  static const int kReliefNumFieldNumber = 1;
  inline ::google::protobuf::int32 reliefnum() const;
  inline void set_reliefnum(::google::protobuf::int32 value);

  // optional int32 countDown = 2;
  inline bool has_countdown() const;
  inline void clear_countdown();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 countdown() const;
  inline void set_countdown(::google::protobuf::int32 value);

  // optional int32 conditions = 3;
  inline bool has_conditions() const;
  inline void clear_conditions();
  static const int kConditionsFieldNumber = 3;
  inline ::google::protobuf::int32 conditions() const;
  inline void set_conditions(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Relief)
 private:
  inline void set_has_reliefnum();
  inline void clear_has_reliefnum();
  inline void set_has_countdown();
  inline void clear_has_countdown();
  inline void set_has_conditions();
  inline void clear_has_conditions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reliefnum_;
  ::google::protobuf::int32 countdown_;
  ::google::protobuf::int32 conditions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static Relief* default_instance_;
};
// -------------------------------------------------------------------

class NewGiftBag : public ::google::protobuf::Message {
 public:
  NewGiftBag();
  virtual ~NewGiftBag();

  NewGiftBag(const NewGiftBag& from);

  inline NewGiftBag& operator=(const NewGiftBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewGiftBag& default_instance();

  void Swap(NewGiftBag* other);

  // implements Message ----------------------------------------------

  NewGiftBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewGiftBag& from);
  void MergeFrom(const NewGiftBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 newGiftBag1 = 1;
  inline bool has_newgiftbag1() const;
  inline void clear_newgiftbag1();
  static const int kNewGiftBag1FieldNumber = 1;
  inline ::google::protobuf::int32 newgiftbag1() const;
  inline void set_newgiftbag1(::google::protobuf::int32 value);

  // optional int32 newGiftBag2 = 2;
  inline bool has_newgiftbag2() const;
  inline void clear_newgiftbag2();
  static const int kNewGiftBag2FieldNumber = 2;
  inline ::google::protobuf::int32 newgiftbag2() const;
  inline void set_newgiftbag2(::google::protobuf::int32 value);

  // optional int32 newGiftBag3 = 3;
  inline bool has_newgiftbag3() const;
  inline void clear_newgiftbag3();
  static const int kNewGiftBag3FieldNumber = 3;
  inline ::google::protobuf::int32 newgiftbag3() const;
  inline void set_newgiftbag3(::google::protobuf::int32 value);

  // optional int32 newGiftBag4 = 4;
  inline bool has_newgiftbag4() const;
  inline void clear_newgiftbag4();
  static const int kNewGiftBag4FieldNumber = 4;
  inline ::google::protobuf::int32 newgiftbag4() const;
  inline void set_newgiftbag4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NewGiftBag)
 private:
  inline void set_has_newgiftbag1();
  inline void clear_has_newgiftbag1();
  inline void set_has_newgiftbag2();
  inline void clear_has_newgiftbag2();
  inline void set_has_newgiftbag3();
  inline void clear_has_newgiftbag3();
  inline void set_has_newgiftbag4();
  inline void clear_has_newgiftbag4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 newgiftbag1_;
  ::google::protobuf::int32 newgiftbag2_;
  ::google::protobuf::int32 newgiftbag3_;
  ::google::protobuf::int32 newgiftbag4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static NewGiftBag* default_instance_;
};
// -------------------------------------------------------------------

class LanternBag : public ::google::protobuf::Message {
 public:
  LanternBag();
  virtual ~LanternBag();

  LanternBag(const LanternBag& from);

  inline LanternBag& operator=(const LanternBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LanternBag& default_instance();

  void Swap(LanternBag* other);

  // implements Message ----------------------------------------------

  LanternBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LanternBag& from);
  void MergeFrom(const LanternBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lanternBag1 = 1;
  inline bool has_lanternbag1() const;
  inline void clear_lanternbag1();
  static const int kLanternBag1FieldNumber = 1;
  inline ::google::protobuf::int32 lanternbag1() const;
  inline void set_lanternbag1(::google::protobuf::int32 value);

  // optional int32 lanternBag2 = 2;
  inline bool has_lanternbag2() const;
  inline void clear_lanternbag2();
  static const int kLanternBag2FieldNumber = 2;
  inline ::google::protobuf::int32 lanternbag2() const;
  inline void set_lanternbag2(::google::protobuf::int32 value);

  // optional int32 lanternBag3 = 3;
  inline bool has_lanternbag3() const;
  inline void clear_lanternbag3();
  static const int kLanternBag3FieldNumber = 3;
  inline ::google::protobuf::int32 lanternbag3() const;
  inline void set_lanternbag3(::google::protobuf::int32 value);

  // optional int32 lanternBag4 = 4;
  inline bool has_lanternbag4() const;
  inline void clear_lanternbag4();
  static const int kLanternBag4FieldNumber = 4;
  inline ::google::protobuf::int32 lanternbag4() const;
  inline void set_lanternbag4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LanternBag)
 private:
  inline void set_has_lanternbag1();
  inline void clear_has_lanternbag1();
  inline void set_has_lanternbag2();
  inline void clear_has_lanternbag2();
  inline void set_has_lanternbag3();
  inline void clear_has_lanternbag3();
  inline void set_has_lanternbag4();
  inline void clear_has_lanternbag4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lanternbag1_;
  ::google::protobuf::int32 lanternbag2_;
  ::google::protobuf::int32 lanternbag3_;
  ::google::protobuf::int32 lanternbag4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static LanternBag* default_instance_;
};
// -------------------------------------------------------------------

class HomeConfig : public ::google::protobuf::Message {
 public:
  HomeConfig();
  virtual ~HomeConfig();

  HomeConfig(const HomeConfig& from);

  inline HomeConfig& operator=(const HomeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HomeConfig& default_instance();

  void Swap(HomeConfig* other);

  // implements Message ----------------------------------------------

  HomeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HomeConfig& from);
  void MergeFrom(const HomeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FunctionalConfig functionalConfig = 1;
  inline int functionalconfig_size() const;
  inline void clear_functionalconfig();
  static const int kFunctionalConfigFieldNumber = 1;
  inline const ::FunctionalConfig& functionalconfig(int index) const;
  inline ::FunctionalConfig* mutable_functionalconfig(int index);
  inline ::FunctionalConfig* add_functionalconfig();
  inline const ::google::protobuf::RepeatedPtrField< ::FunctionalConfig >&
      functionalconfig() const;
  inline ::google::protobuf::RepeatedPtrField< ::FunctionalConfig >*
      mutable_functionalconfig();

  // optional .LuckDraw luckDraw = 2;
  inline bool has_luckdraw() const;
  inline void clear_luckdraw();
  static const int kLuckDrawFieldNumber = 2;
  inline const ::LuckDraw& luckdraw() const;
  inline ::LuckDraw* mutable_luckdraw();
  inline ::LuckDraw* release_luckdraw();
  inline void set_allocated_luckdraw(::LuckDraw* luckdraw);

  // repeated .RechargeCase rechargeCase = 3;
  inline int rechargecase_size() const;
  inline void clear_rechargecase();
  static const int kRechargeCaseFieldNumber = 3;
  inline const ::RechargeCase& rechargecase(int index) const;
  inline ::RechargeCase* mutable_rechargecase(int index);
  inline ::RechargeCase* add_rechargecase();
  inline const ::google::protobuf::RepeatedPtrField< ::RechargeCase >&
      rechargecase() const;
  inline ::google::protobuf::RepeatedPtrField< ::RechargeCase >*
      mutable_rechargecase();

  // optional string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // repeated .BoxDate boxDate = 5;
  inline int boxdate_size() const;
  inline void clear_boxdate();
  static const int kBoxDateFieldNumber = 5;
  inline const ::BoxDate& boxdate(int index) const;
  inline ::BoxDate* mutable_boxdate(int index);
  inline ::BoxDate* add_boxdate();
  inline const ::google::protobuf::RepeatedPtrField< ::BoxDate >&
      boxdate() const;
  inline ::google::protobuf::RepeatedPtrField< ::BoxDate >*
      mutable_boxdate();

  // optional string relief = 6;
  inline bool has_relief() const;
  inline void clear_relief();
  static const int kReliefFieldNumber = 6;
  inline const ::std::string& relief() const;
  inline void set_relief(const ::std::string& value);
  inline void set_relief(const char* value);
  inline void set_relief(const char* value, size_t size);
  inline ::std::string* mutable_relief();
  inline ::std::string* release_relief();
  inline void set_allocated_relief(::std::string* relief);

  // optional string share = 7;
  inline bool has_share() const;
  inline void clear_share();
  static const int kShareFieldNumber = 7;
  inline const ::std::string& share() const;
  inline void set_share(const ::std::string& value);
  inline void set_share(const char* value);
  inline void set_share(const char* value, size_t size);
  inline ::std::string* mutable_share();
  inline ::std::string* release_share();
  inline void set_allocated_share(::std::string* share);

  // repeated .BoxConfig boxConfig = 8;
  inline int boxconfig_size() const;
  inline void clear_boxconfig();
  static const int kBoxConfigFieldNumber = 8;
  inline const ::BoxConfig& boxconfig(int index) const;
  inline ::BoxConfig* mutable_boxconfig(int index);
  inline ::BoxConfig* add_boxconfig();
  inline const ::google::protobuf::RepeatedPtrField< ::BoxConfig >&
      boxconfig() const;
  inline ::google::protobuf::RepeatedPtrField< ::BoxConfig >*
      mutable_boxconfig();

  // repeated .RechargeConfig rechargeConfig = 9;
  inline int rechargeconfig_size() const;
  inline void clear_rechargeconfig();
  static const int kRechargeConfigFieldNumber = 9;
  inline const ::RechargeConfig& rechargeconfig(int index) const;
  inline ::RechargeConfig* mutable_rechargeconfig(int index);
  inline ::RechargeConfig* add_rechargeconfig();
  inline const ::google::protobuf::RepeatedPtrField< ::RechargeConfig >&
      rechargeconfig() const;
  inline ::google::protobuf::RepeatedPtrField< ::RechargeConfig >*
      mutable_rechargeconfig();

  // repeated .NewGift newGift = 10;
  inline int newgift_size() const;
  inline void clear_newgift();
  static const int kNewGiftFieldNumber = 10;
  inline const ::NewGift& newgift(int index) const;
  inline ::NewGift* mutable_newgift(int index);
  inline ::NewGift* add_newgift();
  inline const ::google::protobuf::RepeatedPtrField< ::NewGift >&
      newgift() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewGift >*
      mutable_newgift();

  // repeated .Lantern lantern = 11;
  inline int lantern_size() const;
  inline void clear_lantern();
  static const int kLanternFieldNumber = 11;
  inline const ::Lantern& lantern(int index) const;
  inline ::Lantern* mutable_lantern(int index);
  inline ::Lantern* add_lantern();
  inline const ::google::protobuf::RepeatedPtrField< ::Lantern >&
      lantern() const;
  inline ::google::protobuf::RepeatedPtrField< ::Lantern >*
      mutable_lantern();

  // @@protoc_insertion_point(class_scope:HomeConfig)
 private:
  inline void set_has_luckdraw();
  inline void clear_has_luckdraw();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_relief();
  inline void clear_has_relief();
  inline void set_has_share();
  inline void clear_has_share();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FunctionalConfig > functionalconfig_;
  ::LuckDraw* luckdraw_;
  ::google::protobuf::RepeatedPtrField< ::RechargeCase > rechargecase_;
  ::std::string* sign_;
  ::google::protobuf::RepeatedPtrField< ::BoxDate > boxdate_;
  ::std::string* relief_;
  ::std::string* share_;
  ::google::protobuf::RepeatedPtrField< ::BoxConfig > boxconfig_;
  ::google::protobuf::RepeatedPtrField< ::RechargeConfig > rechargeconfig_;
  ::google::protobuf::RepeatedPtrField< ::NewGift > newgift_;
  ::google::protobuf::RepeatedPtrField< ::Lantern > lantern_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static HomeConfig* default_instance_;
};
// -------------------------------------------------------------------

class FunctionalConfig : public ::google::protobuf::Message {
 public:
  FunctionalConfig();
  virtual ~FunctionalConfig();

  FunctionalConfig(const FunctionalConfig& from);

  inline FunctionalConfig& operator=(const FunctionalConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionalConfig& default_instance();

  void Swap(FunctionalConfig* other);

  // implements Message ----------------------------------------------

  FunctionalConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionalConfig& from);
  void MergeFrom(const FunctionalConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:FunctionalConfig)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static FunctionalConfig* default_instance_;
};
// -------------------------------------------------------------------

class FunctionalConfig1 : public ::google::protobuf::Message {
 public:
  FunctionalConfig1();
  virtual ~FunctionalConfig1();

  FunctionalConfig1(const FunctionalConfig1& from);

  inline FunctionalConfig1& operator=(const FunctionalConfig1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionalConfig1& default_instance();

  void Swap(FunctionalConfig1* other);

  // implements Message ----------------------------------------------

  FunctionalConfig1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionalConfig1& from);
  void MergeFrom(const FunctionalConfig1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bank = 1;
  inline bool has_bank() const;
  inline void clear_bank();
  static const int kBankFieldNumber = 1;
  inline ::google::protobuf::int32 bank() const;
  inline void set_bank(::google::protobuf::int32 value);

  // optional int32 actCard = 2;
  inline bool has_actcard() const;
  inline void clear_actcard();
  static const int kActCardFieldNumber = 2;
  inline ::google::protobuf::int32 actcard() const;
  inline void set_actcard(::google::protobuf::int32 value);

  // optional int32 ReliefMoney = 3;
  inline bool has_reliefmoney() const;
  inline void clear_reliefmoney();
  static const int kReliefMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 reliefmoney() const;
  inline void set_reliefmoney(::google::protobuf::int32 value);

  // optional int32 Activity = 4;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 4;
  inline ::google::protobuf::int32 activity() const;
  inline void set_activity(::google::protobuf::int32 value);

  // optional int32 MonCard = 5;
  inline bool has_moncard() const;
  inline void clear_moncard();
  static const int kMonCardFieldNumber = 5;
  inline ::google::protobuf::int32 moncard() const;
  inline void set_moncard(::google::protobuf::int32 value);

  // optional int32 DailyGift = 6;
  inline bool has_dailygift() const;
  inline void clear_dailygift();
  static const int kDailyGiftFieldNumber = 6;
  inline ::google::protobuf::int32 dailygift() const;
  inline void set_dailygift(::google::protobuf::int32 value);

  // optional int32 RankList = 7;
  inline bool has_ranklist() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 7;
  inline ::google::protobuf::int32 ranklist() const;
  inline void set_ranklist(::google::protobuf::int32 value);

  // optional int32 NewCard = 8;
  inline bool has_newcard() const;
  inline void clear_newcard();
  static const int kNewCardFieldNumber = 8;
  inline ::google::protobuf::int32 newcard() const;
  inline void set_newcard(::google::protobuf::int32 value);

  // optional int32 GivePresent = 9;
  inline bool has_givepresent() const;
  inline void clear_givepresent();
  static const int kGivePresentFieldNumber = 9;
  inline ::google::protobuf::int32 givepresent() const;
  inline void set_givepresent(::google::protobuf::int32 value);

  // optional int32 isAudit = 10;
  inline bool has_isaudit() const;
  inline void clear_isaudit();
  static const int kIsAuditFieldNumber = 10;
  inline ::google::protobuf::int32 isaudit() const;
  inline void set_isaudit(::google::protobuf::int32 value);

  // optional int32 isH5Pay = 11;
  inline bool has_ish5pay() const;
  inline void clear_ish5pay();
  static const int kIsH5PayFieldNumber = 11;
  inline ::google::protobuf::int32 ish5pay() const;
  inline void set_ish5pay(::google::protobuf::int32 value);

  // optional int32 HorseLamp = 12;
  inline bool has_horselamp() const;
  inline void clear_horselamp();
  static const int kHorseLampFieldNumber = 12;
  inline ::google::protobuf::int32 horselamp() const;
  inline void set_horselamp(::google::protobuf::int32 value);

  // optional int32 Extension = 13;
  inline bool has_extension() const;
  inline void clear_extension();
  static const int kExtensionFieldNumber = 13;
  inline ::google::protobuf::int32 extension() const;
  inline void set_extension(::google::protobuf::int32 value);

  // optional string RunContent = 14;
  inline bool has_runcontent() const;
  inline void clear_runcontent();
  static const int kRunContentFieldNumber = 14;
  inline const ::std::string& runcontent() const;
  inline void set_runcontent(const ::std::string& value);
  inline void set_runcontent(const char* value);
  inline void set_runcontent(const char* value, size_t size);
  inline ::std::string* mutable_runcontent();
  inline ::std::string* release_runcontent();
  inline void set_allocated_runcontent(::std::string* runcontent);

  // optional int32 ReliefMoneyShare = 15;
  inline bool has_reliefmoneyshare() const;
  inline void clear_reliefmoneyshare();
  static const int kReliefMoneyShareFieldNumber = 15;
  inline ::google::protobuf::int32 reliefmoneyshare() const;
  inline void set_reliefmoneyshare(::google::protobuf::int32 value);

  // optional int32 Register = 16;
  inline bool has_register_() const;
  inline void clear_register_();
  static const int kRegisterFieldNumber = 16;
  inline ::google::protobuf::int32 register_() const;
  inline void set_register_(::google::protobuf::int32 value);

  // optional int32 PersonalCenter = 17;
  inline bool has_personalcenter() const;
  inline void clear_personalcenter();
  static const int kPersonalCenterFieldNumber = 17;
  inline ::google::protobuf::int32 personalcenter() const;
  inline void set_personalcenter(::google::protobuf::int32 value);

  // optional int32 ExchangeCenter = 18;
  inline bool has_exchangecenter() const;
  inline void clear_exchangecenter();
  static const int kExchangeCenterFieldNumber = 18;
  inline ::google::protobuf::int32 exchangecenter() const;
  inline void set_exchangecenter(::google::protobuf::int32 value);

  // optional int32 Sign = 19;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 19;
  inline ::google::protobuf::int32 sign() const;
  inline void set_sign(::google::protobuf::int32 value);

  // optional int32 BindPhone = 20;
  inline bool has_bindphone() const;
  inline void clear_bindphone();
  static const int kBindPhoneFieldNumber = 20;
  inline ::google::protobuf::int32 bindphone() const;
  inline void set_bindphone(::google::protobuf::int32 value);

  // optional string ShCirFriends = 21;
  inline bool has_shcirfriends() const;
  inline void clear_shcirfriends();
  static const int kShCirFriendsFieldNumber = 21;
  inline const ::std::string& shcirfriends() const;
  inline void set_shcirfriends(const ::std::string& value);
  inline void set_shcirfriends(const char* value);
  inline void set_shcirfriends(const char* value, size_t size);
  inline ::std::string* mutable_shcirfriends();
  inline ::std::string* release_shcirfriends();
  inline void set_allocated_shcirfriends(::std::string* shcirfriends);

  // optional int32 ShoppingMall = 22;
  inline bool has_shoppingmall() const;
  inline void clear_shoppingmall();
  static const int kShoppingMallFieldNumber = 22;
  inline ::google::protobuf::int32 shoppingmall() const;
  inline void set_shoppingmall(::google::protobuf::int32 value);

  // optional int32 SetUp = 23;
  inline bool has_setup() const;
  inline void clear_setup();
  static const int kSetUpFieldNumber = 23;
  inline ::google::protobuf::int32 setup() const;
  inline void set_setup(::google::protobuf::int32 value);

  // optional int32 Share = 24;
  inline bool has_share() const;
  inline void clear_share();
  static const int kShareFieldNumber = 24;
  inline ::google::protobuf::int32 share() const;
  inline void set_share(::google::protobuf::int32 value);

  // optional int32 ShFriends = 25;
  inline bool has_shfriends() const;
  inline void clear_shfriends();
  static const int kShFriendsFieldNumber = 25;
  inline ::google::protobuf::int32 shfriends() const;
  inline void set_shfriends(::google::protobuf::int32 value);

  // optional int32 NewGift = 26;
  inline bool has_newgift() const;
  inline void clear_newgift();
  static const int kNewGiftFieldNumber = 26;
  inline ::google::protobuf::int32 newgift() const;
  inline void set_newgift(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FunctionalConfig1)
 private:
  inline void set_has_bank();
  inline void clear_has_bank();
  inline void set_has_actcard();
  inline void clear_has_actcard();
  inline void set_has_reliefmoney();
  inline void clear_has_reliefmoney();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_moncard();
  inline void clear_has_moncard();
  inline void set_has_dailygift();
  inline void clear_has_dailygift();
  inline void set_has_ranklist();
  inline void clear_has_ranklist();
  inline void set_has_newcard();
  inline void clear_has_newcard();
  inline void set_has_givepresent();
  inline void clear_has_givepresent();
  inline void set_has_isaudit();
  inline void clear_has_isaudit();
  inline void set_has_ish5pay();
  inline void clear_has_ish5pay();
  inline void set_has_horselamp();
  inline void clear_has_horselamp();
  inline void set_has_extension();
  inline void clear_has_extension();
  inline void set_has_runcontent();
  inline void clear_has_runcontent();
  inline void set_has_reliefmoneyshare();
  inline void clear_has_reliefmoneyshare();
  inline void set_has_register_();
  inline void clear_has_register_();
  inline void set_has_personalcenter();
  inline void clear_has_personalcenter();
  inline void set_has_exchangecenter();
  inline void clear_has_exchangecenter();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_bindphone();
  inline void clear_has_bindphone();
  inline void set_has_shcirfriends();
  inline void clear_has_shcirfriends();
  inline void set_has_shoppingmall();
  inline void clear_has_shoppingmall();
  inline void set_has_setup();
  inline void clear_has_setup();
  inline void set_has_share();
  inline void clear_has_share();
  inline void set_has_shfriends();
  inline void clear_has_shfriends();
  inline void set_has_newgift();
  inline void clear_has_newgift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bank_;
  ::google::protobuf::int32 actcard_;
  ::google::protobuf::int32 reliefmoney_;
  ::google::protobuf::int32 activity_;
  ::google::protobuf::int32 moncard_;
  ::google::protobuf::int32 dailygift_;
  ::google::protobuf::int32 ranklist_;
  ::google::protobuf::int32 newcard_;
  ::google::protobuf::int32 givepresent_;
  ::google::protobuf::int32 isaudit_;
  ::google::protobuf::int32 ish5pay_;
  ::google::protobuf::int32 horselamp_;
  ::std::string* runcontent_;
  ::google::protobuf::int32 extension_;
  ::google::protobuf::int32 reliefmoneyshare_;
  ::google::protobuf::int32 register__;
  ::google::protobuf::int32 personalcenter_;
  ::google::protobuf::int32 exchangecenter_;
  ::google::protobuf::int32 sign_;
  ::std::string* shcirfriends_;
  ::google::protobuf::int32 bindphone_;
  ::google::protobuf::int32 shoppingmall_;
  ::google::protobuf::int32 setup_;
  ::google::protobuf::int32 share_;
  ::google::protobuf::int32 shfriends_;
  ::google::protobuf::int32 newgift_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static FunctionalConfig1* default_instance_;
};
// -------------------------------------------------------------------

class LuckDraw : public ::google::protobuf::Message {
 public:
  LuckDraw();
  virtual ~LuckDraw();

  LuckDraw(const LuckDraw& from);

  inline LuckDraw& operator=(const LuckDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LuckDraw& default_instance();

  void Swap(LuckDraw* other);

  // implements Message ----------------------------------------------

  LuckDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LuckDraw& from);
  void MergeFrom(const LuckDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string activityTime = 1;
  inline bool has_activitytime() const;
  inline void clear_activitytime();
  static const int kActivityTimeFieldNumber = 1;
  inline const ::std::string& activitytime() const;
  inline void set_activitytime(const ::std::string& value);
  inline void set_activitytime(const char* value);
  inline void set_activitytime(const char* value, size_t size);
  inline ::std::string* mutable_activitytime();
  inline ::std::string* release_activitytime();
  inline void set_allocated_activitytime(::std::string* activitytime);

  // optional string luchDrawAmount = 2;
  inline bool has_luchdrawamount() const;
  inline void clear_luchdrawamount();
  static const int kLuchDrawAmountFieldNumber = 2;
  inline const ::std::string& luchdrawamount() const;
  inline void set_luchdrawamount(const ::std::string& value);
  inline void set_luchdrawamount(const char* value);
  inline void set_luchdrawamount(const char* value, size_t size);
  inline ::std::string* mutable_luchdrawamount();
  inline ::std::string* release_luchdrawamount();
  inline void set_allocated_luchdrawamount(::std::string* luchdrawamount);

  // optional int32 luchDrawNum = 3;
  inline bool has_luchdrawnum() const;
  inline void clear_luchdrawnum();
  static const int kLuchDrawNumFieldNumber = 3;
  inline ::google::protobuf::int32 luchdrawnum() const;
  inline void set_luchdrawnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LuckDraw)
 private:
  inline void set_has_activitytime();
  inline void clear_has_activitytime();
  inline void set_has_luchdrawamount();
  inline void clear_has_luchdrawamount();
  inline void set_has_luchdrawnum();
  inline void clear_has_luchdrawnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* activitytime_;
  ::std::string* luchdrawamount_;
  ::google::protobuf::int32 luchdrawnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static LuckDraw* default_instance_;
};
// -------------------------------------------------------------------

class RechargeCase : public ::google::protobuf::Message {
 public:
  RechargeCase();
  virtual ~RechargeCase();

  RechargeCase(const RechargeCase& from);

  inline RechargeCase& operator=(const RechargeCase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RechargeCase& default_instance();

  void Swap(RechargeCase* other);

  // implements Message ----------------------------------------------

  RechargeCase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RechargeCase& from);
  void MergeFrom(const RechargeCase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 price = 1;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 1;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int32 casegradeid = 2;
  inline bool has_casegradeid() const;
  inline void clear_casegradeid();
  static const int kCasegradeidFieldNumber = 2;
  inline ::google::protobuf::int32 casegradeid() const;
  inline void set_casegradeid(::google::protobuf::int32 value);

  // optional int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 mid = 4;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 4;
  inline ::google::protobuf::int32 mid() const;
  inline void set_mid(::google::protobuf::int32 value);

  // optional int32 membershipperiod = 5;
  inline bool has_membershipperiod() const;
  inline void clear_membershipperiod();
  static const int kMembershipperiodFieldNumber = 5;
  inline ::google::protobuf::int32 membershipperiod() const;
  inline void set_membershipperiod(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RechargeCase)
 private:
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_casegradeid();
  inline void clear_has_casegradeid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_membershipperiod();
  inline void clear_has_membershipperiod();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 casegradeid_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 mid_;
  ::google::protobuf::int32 membershipperiod_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static RechargeCase* default_instance_;
};
// -------------------------------------------------------------------

class BoxDate : public ::google::protobuf::Message {
 public:
  BoxDate();
  virtual ~BoxDate();

  BoxDate(const BoxDate& from);

  inline BoxDate& operator=(const BoxDate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxDate& default_instance();

  void Swap(BoxDate* other);

  // implements Message ----------------------------------------------

  BoxDate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoxDate& from);
  void MergeFrom(const BoxDate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // repeated .BoxDateInfo boxDateInfo = 2;
  inline int boxdateinfo_size() const;
  inline void clear_boxdateinfo();
  static const int kBoxDateInfoFieldNumber = 2;
  inline const ::BoxDateInfo& boxdateinfo(int index) const;
  inline ::BoxDateInfo* mutable_boxdateinfo(int index);
  inline ::BoxDateInfo* add_boxdateinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::BoxDateInfo >&
      boxdateinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::BoxDateInfo >*
      mutable_boxdateinfo();

  // @@protoc_insertion_point(class_scope:BoxDate)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BoxDateInfo > boxdateinfo_;
  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static BoxDate* default_instance_;
};
// -------------------------------------------------------------------

class BoxDateInfo : public ::google::protobuf::Message {
 public:
  BoxDateInfo();
  virtual ~BoxDateInfo();

  BoxDateInfo(const BoxDateInfo& from);

  inline BoxDateInfo& operator=(const BoxDateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxDateInfo& default_instance();

  void Swap(BoxDateInfo* other);

  // implements Message ----------------------------------------------

  BoxDateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoxDateInfo& from);
  void MergeFrom(const BoxDateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 goodsType = 1;
  inline bool has_goodstype() const;
  inline void clear_goodstype();
  static const int kGoodsTypeFieldNumber = 1;
  inline ::google::protobuf::int32 goodstype() const;
  inline void set_goodstype(::google::protobuf::int32 value);

  // optional int32 goodsValue = 2;
  inline bool has_goodsvalue() const;
  inline void clear_goodsvalue();
  static const int kGoodsValueFieldNumber = 2;
  inline ::google::protobuf::int32 goodsvalue() const;
  inline void set_goodsvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BoxDateInfo)
 private:
  inline void set_has_goodstype();
  inline void clear_has_goodstype();
  inline void set_has_goodsvalue();
  inline void clear_has_goodsvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 goodstype_;
  ::google::protobuf::int32 goodsvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static BoxDateInfo* default_instance_;
};
// -------------------------------------------------------------------

class BoxConfig : public ::google::protobuf::Message {
 public:
  BoxConfig();
  virtual ~BoxConfig();

  BoxConfig(const BoxConfig& from);

  inline BoxConfig& operator=(const BoxConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxConfig& default_instance();

  void Swap(BoxConfig* other);

  // implements Message ----------------------------------------------

  BoxConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoxConfig& from);
  void MergeFrom(const BoxConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 boxID = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIDFieldNumber = 1;
  inline ::google::protobuf::int32 boxid() const;
  inline void set_boxid(::google::protobuf::int32 value);

  // optional int32 boxType = 2;
  inline bool has_boxtype() const;
  inline void clear_boxtype();
  static const int kBoxTypeFieldNumber = 2;
  inline ::google::protobuf::int32 boxtype() const;
  inline void set_boxtype(::google::protobuf::int32 value);

  // optional int32 boxValue = 3;
  inline bool has_boxvalue() const;
  inline void clear_boxvalue();
  static const int kBoxValueFieldNumber = 3;
  inline ::google::protobuf::int32 boxvalue() const;
  inline void set_boxvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BoxConfig)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_boxtype();
  inline void clear_has_boxtype();
  inline void set_has_boxvalue();
  inline void clear_has_boxvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 boxid_;
  ::google::protobuf::int32 boxtype_;
  ::google::protobuf::int32 boxvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static BoxConfig* default_instance_;
};
// -------------------------------------------------------------------

class RechargeConfig : public ::google::protobuf::Message {
 public:
  RechargeConfig();
  virtual ~RechargeConfig();

  RechargeConfig(const RechargeConfig& from);

  inline RechargeConfig& operator=(const RechargeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RechargeConfig& default_instance();

  void Swap(RechargeConfig* other);

  // implements Message ----------------------------------------------

  RechargeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RechargeConfig& from);
  void MergeFrom(const RechargeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string payID = 1;
  inline bool has_payid() const;
  inline void clear_payid();
  static const int kPayIDFieldNumber = 1;
  inline const ::std::string& payid() const;
  inline void set_payid(const ::std::string& value);
  inline void set_payid(const char* value);
  inline void set_payid(const char* value, size_t size);
  inline ::std::string* mutable_payid();
  inline ::std::string* release_payid();
  inline void set_allocated_payid(::std::string* payid);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:RechargeConfig)
 private:
  inline void set_has_payid();
  inline void clear_has_payid();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* payid_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static RechargeConfig* default_instance_;
};
// -------------------------------------------------------------------

class NewGift : public ::google::protobuf::Message {
 public:
  NewGift();
  virtual ~NewGift();

  NewGift(const NewGift& from);

  inline NewGift& operator=(const NewGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewGift& default_instance();

  void Swap(NewGift* other);

  // implements Message ----------------------------------------------

  NewGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewGift& from);
  void MergeFrom(const NewGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string payID = 1;
  inline bool has_payid() const;
  inline void clear_payid();
  static const int kPayIDFieldNumber = 1;
  inline const ::std::string& payid() const;
  inline void set_payid(const ::std::string& value);
  inline void set_payid(const char* value);
  inline void set_payid(const char* value, size_t size);
  inline ::std::string* mutable_payid();
  inline ::std::string* release_payid();
  inline void set_allocated_payid(::std::string* payid);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional string multiple = 3;
  inline bool has_multiple() const;
  inline void clear_multiple();
  static const int kMultipleFieldNumber = 3;
  inline const ::std::string& multiple() const;
  inline void set_multiple(const ::std::string& value);
  inline void set_multiple(const char* value);
  inline void set_multiple(const char* value, size_t size);
  inline ::std::string* mutable_multiple();
  inline ::std::string* release_multiple();
  inline void set_allocated_multiple(::std::string* multiple);

  // optional int32 member = 4;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 4;
  inline ::google::protobuf::int32 member() const;
  inline void set_member(::google::protobuf::int32 value);

  // optional int32 memberday = 5;
  inline bool has_memberday() const;
  inline void clear_memberday();
  static const int kMemberdayFieldNumber = 5;
  inline ::google::protobuf::int32 memberday() const;
  inline void set_memberday(::google::protobuf::int32 value);

  // optional int32 actualvalue = 6;
  inline bool has_actualvalue() const;
  inline void clear_actualvalue();
  static const int kActualvalueFieldNumber = 6;
  inline ::google::protobuf::int32 actualvalue() const;
  inline void set_actualvalue(::google::protobuf::int32 value);

  // optional int32 originalprice = 7;
  inline bool has_originalprice() const;
  inline void clear_originalprice();
  static const int kOriginalpriceFieldNumber = 7;
  inline ::google::protobuf::int32 originalprice() const;
  inline void set_originalprice(::google::protobuf::int32 value);

  // optional int32 nowprice = 8;
  inline bool has_nowprice() const;
  inline void clear_nowprice();
  static const int kNowpriceFieldNumber = 8;
  inline ::google::protobuf::int32 nowprice() const;
  inline void set_nowprice(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NewGift)
 private:
  inline void set_has_payid();
  inline void clear_has_payid();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_multiple();
  inline void clear_has_multiple();
  inline void set_has_member();
  inline void clear_has_member();
  inline void set_has_memberday();
  inline void clear_has_memberday();
  inline void set_has_actualvalue();
  inline void clear_has_actualvalue();
  inline void set_has_originalprice();
  inline void clear_has_originalprice();
  inline void set_has_nowprice();
  inline void clear_has_nowprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* payid_;
  ::google::protobuf::int64 gold_;
  ::std::string* multiple_;
  ::google::protobuf::int32 member_;
  ::google::protobuf::int32 memberday_;
  ::google::protobuf::int32 actualvalue_;
  ::google::protobuf::int32 originalprice_;
  ::google::protobuf::int32 nowprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static NewGift* default_instance_;
};
// -------------------------------------------------------------------

class Lantern : public ::google::protobuf::Message {
 public:
  Lantern();
  virtual ~Lantern();

  Lantern(const Lantern& from);

  inline Lantern& operator=(const Lantern& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lantern& default_instance();

  void Swap(Lantern* other);

  // implements Message ----------------------------------------------

  Lantern* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lantern& from);
  void MergeFrom(const Lantern& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string payID = 1;
  inline bool has_payid() const;
  inline void clear_payid();
  static const int kPayIDFieldNumber = 1;
  inline const ::std::string& payid() const;
  inline void set_payid(const ::std::string& value);
  inline void set_payid(const char* value);
  inline void set_payid(const char* value, size_t size);
  inline ::std::string* mutable_payid();
  inline ::std::string* release_payid();
  inline void set_allocated_payid(::std::string* payid);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional string multiple = 3;
  inline bool has_multiple() const;
  inline void clear_multiple();
  static const int kMultipleFieldNumber = 3;
  inline const ::std::string& multiple() const;
  inline void set_multiple(const ::std::string& value);
  inline void set_multiple(const char* value);
  inline void set_multiple(const char* value, size_t size);
  inline ::std::string* mutable_multiple();
  inline ::std::string* release_multiple();
  inline void set_allocated_multiple(::std::string* multiple);

  // optional int32 member = 4;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 4;
  inline ::google::protobuf::int32 member() const;
  inline void set_member(::google::protobuf::int32 value);

  // optional int32 memberday = 5;
  inline bool has_memberday() const;
  inline void clear_memberday();
  static const int kMemberdayFieldNumber = 5;
  inline ::google::protobuf::int32 memberday() const;
  inline void set_memberday(::google::protobuf::int32 value);

  // optional int32 actualvalue = 6;
  inline bool has_actualvalue() const;
  inline void clear_actualvalue();
  static const int kActualvalueFieldNumber = 6;
  inline ::google::protobuf::int32 actualvalue() const;
  inline void set_actualvalue(::google::protobuf::int32 value);

  // optional int32 originalprice = 7;
  inline bool has_originalprice() const;
  inline void clear_originalprice();
  static const int kOriginalpriceFieldNumber = 7;
  inline ::google::protobuf::int32 originalprice() const;
  inline void set_originalprice(::google::protobuf::int32 value);

  // optional int32 nowprice = 8;
  inline bool has_nowprice() const;
  inline void clear_nowprice();
  static const int kNowpriceFieldNumber = 8;
  inline ::google::protobuf::int32 nowprice() const;
  inline void set_nowprice(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Lantern)
 private:
  inline void set_has_payid();
  inline void clear_has_payid();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_multiple();
  inline void clear_has_multiple();
  inline void set_has_member();
  inline void clear_has_member();
  inline void set_has_memberday();
  inline void clear_has_memberday();
  inline void set_has_actualvalue();
  inline void clear_has_actualvalue();
  inline void set_has_originalprice();
  inline void clear_has_originalprice();
  inline void set_has_nowprice();
  inline void clear_has_nowprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* payid_;
  ::google::protobuf::int64 gold_;
  ::std::string* multiple_;
  ::google::protobuf::int32 member_;
  ::google::protobuf::int32 memberday_;
  ::google::protobuf::int32 actualvalue_;
  ::google::protobuf::int32 originalprice_;
  ::google::protobuf::int32 nowprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static Lantern* default_instance_;
};
// -------------------------------------------------------------------

class MonthlyCard : public ::google::protobuf::Message {
 public:
  MonthlyCard();
  virtual ~MonthlyCard();

  MonthlyCard(const MonthlyCard& from);

  inline MonthlyCard& operator=(const MonthlyCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonthlyCard& default_instance();

  void Swap(MonthlyCard* other);

  // implements Message ----------------------------------------------

  MonthlyCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonthlyCard& from);
  void MergeFrom(const MonthlyCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 days = 1;
  inline bool has_days() const;
  inline void clear_days();
  static const int kDaysFieldNumber = 1;
  inline ::google::protobuf::int32 days() const;
  inline void set_days(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 hasGetted = 3;
  inline bool has_hasgetted() const;
  inline void clear_hasgetted();
  static const int kHasGettedFieldNumber = 3;
  inline ::google::protobuf::int32 hasgetted() const;
  inline void set_hasgetted(::google::protobuf::int32 value);

  // optional string deadLine = 4;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadLineFieldNumber = 4;
  inline const ::std::string& deadline() const;
  inline void set_deadline(const ::std::string& value);
  inline void set_deadline(const char* value);
  inline void set_deadline(const char* value, size_t size);
  inline ::std::string* mutable_deadline();
  inline ::std::string* release_deadline();
  inline void set_allocated_deadline(::std::string* deadline);

  // @@protoc_insertion_point(class_scope:MonthlyCard)
 private:
  inline void set_has_days();
  inline void clear_has_days();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_hasgetted();
  inline void clear_has_hasgetted();
  inline void set_has_deadline();
  inline void clear_has_deadline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 days_;
  ::google::protobuf::int32 status_;
  ::std::string* deadline_;
  ::google::protobuf::int32 hasgetted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static MonthlyCard* default_instance_;
};
// -------------------------------------------------------------------

class NovicePack : public ::google::protobuf::Message {
 public:
  NovicePack();
  virtual ~NovicePack();

  NovicePack(const NovicePack& from);

  inline NovicePack& operator=(const NovicePack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NovicePack& default_instance();

  void Swap(NovicePack* other);

  // implements Message ----------------------------------------------

  NovicePack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NovicePack& from);
  void MergeFrom(const NovicePack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 daynum = 1;
  inline bool has_daynum() const;
  inline void clear_daynum();
  static const int kDaynumFieldNumber = 1;
  inline ::google::protobuf::int32 daynum() const;
  inline void set_daynum(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional double money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline double money() const;
  inline void set_money(double value);

  // @@protoc_insertion_point(class_scope:NovicePack)
 private:
  inline void set_has_daynum();
  inline void clear_has_daynum();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 daynum_;
  ::google::protobuf::int32 status_;
  double money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static NovicePack* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_NewDayRefresh : public ::google::protobuf::Message {
 public:
  CMD_GP_NewDayRefresh();
  virtual ~CMD_GP_NewDayRefresh();

  CMD_GP_NewDayRefresh(const CMD_GP_NewDayRefresh& from);

  inline CMD_GP_NewDayRefresh& operator=(const CMD_GP_NewDayRefresh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_NewDayRefresh& default_instance();

  void Swap(CMD_GP_NewDayRefresh* other);

  // implements Message ----------------------------------------------

  CMD_GP_NewDayRefresh* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_NewDayRefresh& from);
  void MergeFrom(const CMD_GP_NewDayRefresh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GiftBag giftBag = 1;
  inline bool has_giftbag() const;
  inline void clear_giftbag();
  static const int kGiftBagFieldNumber = 1;
  inline const ::GiftBag& giftbag() const;
  inline ::GiftBag* mutable_giftbag();
  inline ::GiftBag* release_giftbag();
  inline void set_allocated_giftbag(::GiftBag* giftbag);

  // optional .Hall hall = 2;
  inline bool has_hall() const;
  inline void clear_hall();
  static const int kHallFieldNumber = 2;
  inline const ::Hall& hall() const;
  inline ::Hall* mutable_hall();
  inline ::Hall* release_hall();
  inline void set_allocated_hall(::Hall* hall);

  // optional .Relief relief = 3;
  inline bool has_relief() const;
  inline void clear_relief();
  static const int kReliefFieldNumber = 3;
  inline const ::Relief& relief() const;
  inline ::Relief* mutable_relief();
  inline ::Relief* release_relief();
  inline void set_allocated_relief(::Relief* relief);

  // optional string todayHasSigned = 4;
  inline bool has_todayhassigned() const;
  inline void clear_todayhassigned();
  static const int kTodayHasSignedFieldNumber = 4;
  inline const ::std::string& todayhassigned() const;
  inline void set_todayhassigned(const ::std::string& value);
  inline void set_todayhassigned(const char* value);
  inline void set_todayhassigned(const char* value, size_t size);
  inline ::std::string* mutable_todayhassigned();
  inline ::std::string* release_todayhassigned();
  inline void set_allocated_todayhassigned(::std::string* todayhassigned);

  // optional int32 aStatus = 5;
  inline bool has_astatus() const;
  inline void clear_astatus();
  static const int kAStatusFieldNumber = 5;
  inline ::google::protobuf::int32 astatus() const;
  inline void set_astatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_NewDayRefresh)
 private:
  inline void set_has_giftbag();
  inline void clear_has_giftbag();
  inline void set_has_hall();
  inline void clear_has_hall();
  inline void set_has_relief();
  inline void clear_has_relief();
  inline void set_has_todayhassigned();
  inline void clear_has_todayhassigned();
  inline void set_has_astatus();
  inline void clear_has_astatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GiftBag* giftbag_;
  ::Hall* hall_;
  ::Relief* relief_;
  ::std::string* todayhassigned_;
  ::google::protobuf::int32 astatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_NewDayRefresh* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_LogonSuccess_CMD_GP_UserInfo : public ::google::protobuf::Message {
 public:
  CMD_GP_LogonSuccess_CMD_GP_UserInfo();
  virtual ~CMD_GP_LogonSuccess_CMD_GP_UserInfo();

  CMD_GP_LogonSuccess_CMD_GP_UserInfo(const CMD_GP_LogonSuccess_CMD_GP_UserInfo& from);

  inline CMD_GP_LogonSuccess_CMD_GP_UserInfo& operator=(const CMD_GP_LogonSuccess_CMD_GP_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_LogonSuccess_CMD_GP_UserInfo& default_instance();

  void Swap(CMD_GP_LogonSuccess_CMD_GP_UserInfo* other);

  // implements Message ----------------------------------------------

  CMD_GP_LogonSuccess_CMD_GP_UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_LogonSuccess_CMD_GP_UserInfo& from);
  void MergeFrom(const CMD_GP_LogonSuccess_CMD_GP_UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GiftBag giftBag = 1;
  inline bool has_giftbag() const;
  inline void clear_giftbag();
  static const int kGiftBagFieldNumber = 1;
  inline const ::GiftBag& giftbag() const;
  inline ::GiftBag* mutable_giftbag();
  inline ::GiftBag* release_giftbag();
  inline void set_allocated_giftbag(::GiftBag* giftbag);

  // repeated .ActivityConfig activityConfig = 2;
  inline int activityconfig_size() const;
  inline void clear_activityconfig();
  static const int kActivityConfigFieldNumber = 2;
  inline const ::ActivityConfig& activityconfig(int index) const;
  inline ::ActivityConfig* mutable_activityconfig(int index);
  inline ::ActivityConfig* add_activityconfig();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityConfig >&
      activityconfig() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityConfig >*
      mutable_activityconfig();

  // optional string rechargeCaseMoney = 3;
  inline bool has_rechargecasemoney() const;
  inline void clear_rechargecasemoney();
  static const int kRechargeCaseMoneyFieldNumber = 3;
  inline const ::std::string& rechargecasemoney() const;
  inline void set_rechargecasemoney(const ::std::string& value);
  inline void set_rechargecasemoney(const char* value);
  inline void set_rechargecasemoney(const char* value, size_t size);
  inline ::std::string* mutable_rechargecasemoney();
  inline ::std::string* release_rechargecasemoney();
  inline void set_allocated_rechargecasemoney(::std::string* rechargecasemoney);

  // optional .MemberInfo memberInfo = 4;
  inline bool has_memberinfo() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 4;
  inline const ::MemberInfo& memberinfo() const;
  inline ::MemberInfo* mutable_memberinfo();
  inline ::MemberInfo* release_memberinfo();
  inline void set_allocated_memberinfo(::MemberInfo* memberinfo);

  // optional .RechargeCaseBag rechargeCaseBag = 5;
  inline bool has_rechargecasebag() const;
  inline void clear_rechargecasebag();
  static const int kRechargeCaseBagFieldNumber = 5;
  inline const ::RechargeCaseBag& rechargecasebag() const;
  inline ::RechargeCaseBag* mutable_rechargecasebag();
  inline ::RechargeCaseBag* release_rechargecasebag();
  inline void set_allocated_rechargecasebag(::RechargeCaseBag* rechargecasebag);

  // optional .Secure secure = 6;
  inline bool has_secure() const;
  inline void clear_secure();
  static const int kSecureFieldNumber = 6;
  inline const ::Secure& secure() const;
  inline ::Secure* mutable_secure();
  inline ::Secure* release_secure();
  inline void set_allocated_secure(::Secure* secure);

  // optional .Novice novice = 7;
  inline bool has_novice() const;
  inline void clear_novice();
  static const int kNoviceFieldNumber = 7;
  inline const ::Novice& novice() const;
  inline ::Novice* mutable_novice();
  inline ::Novice* release_novice();
  inline void set_allocated_novice(::Novice* novice);

  // optional .Hall hall = 8;
  inline bool has_hall() const;
  inline void clear_hall();
  static const int kHallFieldNumber = 8;
  inline const ::Hall& hall() const;
  inline ::Hall* mutable_hall();
  inline ::Hall* release_hall();
  inline void set_allocated_hall(::Hall* hall);

  // optional int32 aStatus = 9;
  inline bool has_astatus() const;
  inline void clear_astatus();
  static const int kAStatusFieldNumber = 9;
  inline ::google::protobuf::int32 astatus() const;
  inline void set_astatus(::google::protobuf::int32 value);

  // optional int32 continuousDaysSigned = 10;
  inline bool has_continuousdayssigned() const;
  inline void clear_continuousdayssigned();
  static const int kContinuousDaysSignedFieldNumber = 10;
  inline ::google::protobuf::int32 continuousdayssigned() const;
  inline void set_continuousdayssigned(::google::protobuf::int32 value);

  // optional string teaRoomName = 11;
  inline bool has_tearoomname() const;
  inline void clear_tearoomname();
  static const int kTeaRoomNameFieldNumber = 11;
  inline const ::std::string& tearoomname() const;
  inline void set_tearoomname(const ::std::string& value);
  inline void set_tearoomname(const char* value);
  inline void set_tearoomname(const char* value, size_t size);
  inline ::std::string* mutable_tearoomname();
  inline ::std::string* release_tearoomname();
  inline void set_allocated_tearoomname(::std::string* tearoomname);

  // optional .Relief relief = 12;
  inline bool has_relief() const;
  inline void clear_relief();
  static const int kReliefFieldNumber = 12;
  inline const ::Relief& relief() const;
  inline ::Relief* mutable_relief();
  inline ::Relief* release_relief();
  inline void set_allocated_relief(::Relief* relief);

  // optional .NewGiftBag newGiftBag = 13;
  inline bool has_newgiftbag() const;
  inline void clear_newgiftbag();
  static const int kNewGiftBagFieldNumber = 13;
  inline const ::NewGiftBag& newgiftbag() const;
  inline ::NewGiftBag* mutable_newgiftbag();
  inline ::NewGiftBag* release_newgiftbag();
  inline void set_allocated_newgiftbag(::NewGiftBag* newgiftbag);

  // optional string teaRoomQR = 14;
  inline bool has_tearoomqr() const;
  inline void clear_tearoomqr();
  static const int kTeaRoomQRFieldNumber = 14;
  inline const ::std::string& tearoomqr() const;
  inline void set_tearoomqr(const ::std::string& value);
  inline void set_tearoomqr(const char* value);
  inline void set_tearoomqr(const char* value, size_t size);
  inline ::std::string* mutable_tearoomqr();
  inline ::std::string* release_tearoomqr();
  inline void set_allocated_tearoomqr(::std::string* tearoomqr);

  // optional string todayHasSigned = 15;
  inline bool has_todayhassigned() const;
  inline void clear_todayhassigned();
  static const int kTodayHasSignedFieldNumber = 15;
  inline const ::std::string& todayhassigned() const;
  inline void set_todayhassigned(const ::std::string& value);
  inline void set_todayhassigned(const char* value);
  inline void set_todayhassigned(const char* value, size_t size);
  inline ::std::string* mutable_todayhassigned();
  inline ::std::string* release_todayhassigned();
  inline void set_allocated_todayhassigned(::std::string* todayhassigned);

  // optional .Activity activity = 16;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 16;
  inline const ::Activity& activity() const;
  inline ::Activity* mutable_activity();
  inline ::Activity* release_activity();
  inline void set_allocated_activity(::Activity* activity);

  // optional .MonthlyCard monthlyCard = 17;
  inline bool has_monthlycard() const;
  inline void clear_monthlycard();
  static const int kMonthlyCardFieldNumber = 17;
  inline const ::MonthlyCard& monthlycard() const;
  inline ::MonthlyCard* mutable_monthlycard();
  inline ::MonthlyCard* release_monthlycard();
  inline void set_allocated_monthlycard(::MonthlyCard* monthlycard);

  // optional .HomeConfig homeConfig = 18;
  inline bool has_homeconfig() const;
  inline void clear_homeconfig();
  static const int kHomeConfigFieldNumber = 18;
  inline const ::HomeConfig& homeconfig() const;
  inline ::HomeConfig* mutable_homeconfig();
  inline ::HomeConfig* release_homeconfig();
  inline void set_allocated_homeconfig(::HomeConfig* homeconfig);

  // repeated .NovicePack novicePack = 19;
  inline int novicepack_size() const;
  inline void clear_novicepack();
  static const int kNovicePackFieldNumber = 19;
  inline const ::NovicePack& novicepack(int index) const;
  inline ::NovicePack* mutable_novicepack(int index);
  inline ::NovicePack* add_novicepack();
  inline const ::google::protobuf::RepeatedPtrField< ::NovicePack >&
      novicepack() const;
  inline ::google::protobuf::RepeatedPtrField< ::NovicePack >*
      mutable_novicepack();

  // optional int32 NewSkin = 20;
  inline bool has_newskin() const;
  inline void clear_newskin();
  static const int kNewSkinFieldNumber = 20;
  inline ::google::protobuf::int32 newskin() const;
  inline void set_newskin(::google::protobuf::int32 value);

  // optional string dwNewPlayerTime = 21;
  inline bool has_dwnewplayertime() const;
  inline void clear_dwnewplayertime();
  static const int kDwNewPlayerTimeFieldNumber = 21;
  inline const ::std::string& dwnewplayertime() const;
  inline void set_dwnewplayertime(const ::std::string& value);
  inline void set_dwnewplayertime(const char* value);
  inline void set_dwnewplayertime(const char* value, size_t size);
  inline ::std::string* mutable_dwnewplayertime();
  inline ::std::string* release_dwnewplayertime();
  inline void set_allocated_dwnewplayertime(::std::string* dwnewplayertime);

  // optional bool isOpenMiniGame = 22;
  inline bool has_isopenminigame() const;
  inline void clear_isopenminigame();
  static const int kIsOpenMiniGameFieldNumber = 22;
  inline bool isopenminigame() const;
  inline void set_isopenminigame(bool value);

  // optional .LanternBag lanternBag = 23;
  inline bool has_lanternbag() const;
  inline void clear_lanternbag();
  static const int kLanternBagFieldNumber = 23;
  inline const ::LanternBag& lanternbag() const;
  inline ::LanternBag* mutable_lanternbag();
  inline ::LanternBag* release_lanternbag();
  inline void set_allocated_lanternbag(::LanternBag* lanternbag);

  // @@protoc_insertion_point(class_scope:CMD_GP_LogonSuccess.CMD_GP_UserInfo)
 private:
  inline void set_has_giftbag();
  inline void clear_has_giftbag();
  inline void set_has_rechargecasemoney();
  inline void clear_has_rechargecasemoney();
  inline void set_has_memberinfo();
  inline void clear_has_memberinfo();
  inline void set_has_rechargecasebag();
  inline void clear_has_rechargecasebag();
  inline void set_has_secure();
  inline void clear_has_secure();
  inline void set_has_novice();
  inline void clear_has_novice();
  inline void set_has_hall();
  inline void clear_has_hall();
  inline void set_has_astatus();
  inline void clear_has_astatus();
  inline void set_has_continuousdayssigned();
  inline void clear_has_continuousdayssigned();
  inline void set_has_tearoomname();
  inline void clear_has_tearoomname();
  inline void set_has_relief();
  inline void clear_has_relief();
  inline void set_has_newgiftbag();
  inline void clear_has_newgiftbag();
  inline void set_has_tearoomqr();
  inline void clear_has_tearoomqr();
  inline void set_has_todayhassigned();
  inline void clear_has_todayhassigned();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_monthlycard();
  inline void clear_has_monthlycard();
  inline void set_has_homeconfig();
  inline void clear_has_homeconfig();
  inline void set_has_newskin();
  inline void clear_has_newskin();
  inline void set_has_dwnewplayertime();
  inline void clear_has_dwnewplayertime();
  inline void set_has_isopenminigame();
  inline void clear_has_isopenminigame();
  inline void set_has_lanternbag();
  inline void clear_has_lanternbag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GiftBag* giftbag_;
  ::google::protobuf::RepeatedPtrField< ::ActivityConfig > activityconfig_;
  ::std::string* rechargecasemoney_;
  ::MemberInfo* memberinfo_;
  ::RechargeCaseBag* rechargecasebag_;
  ::Secure* secure_;
  ::Novice* novice_;
  ::Hall* hall_;
  ::google::protobuf::int32 astatus_;
  ::google::protobuf::int32 continuousdayssigned_;
  ::std::string* tearoomname_;
  ::Relief* relief_;
  ::NewGiftBag* newgiftbag_;
  ::std::string* tearoomqr_;
  ::std::string* todayhassigned_;
  ::Activity* activity_;
  ::MonthlyCard* monthlycard_;
  ::HomeConfig* homeconfig_;
  ::google::protobuf::RepeatedPtrField< ::NovicePack > novicepack_;
  ::std::string* dwnewplayertime_;
  ::google::protobuf::int32 newskin_;
  bool isopenminigame_;
  ::LanternBag* lanternbag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_LogonSuccess_CMD_GP_UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_LogonSuccess : public ::google::protobuf::Message {
 public:
  CMD_GP_LogonSuccess();
  virtual ~CMD_GP_LogonSuccess();

  CMD_GP_LogonSuccess(const CMD_GP_LogonSuccess& from);

  inline CMD_GP_LogonSuccess& operator=(const CMD_GP_LogonSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_LogonSuccess& default_instance();

  void Swap(CMD_GP_LogonSuccess* other);

  // implements Message ----------------------------------------------

  CMD_GP_LogonSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_LogonSuccess& from);
  void MergeFrom(const CMD_GP_LogonSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMD_GP_LogonSuccess_CMD_GP_UserInfo CMD_GP_UserInfo;

  // accessors -------------------------------------------------------

  // required int32 wFaceID = 1;
  inline bool has_wfaceid() const;
  inline void clear_wfaceid();
  static const int kWFaceIDFieldNumber = 1;
  inline ::google::protobuf::int32 wfaceid() const;
  inline void set_wfaceid(::google::protobuf::int32 value);

  // required int32 dwUserID = 2;
  inline bool has_dwuserid() const;
  inline void clear_dwuserid();
  static const int kDwUserIDFieldNumber = 2;
  inline ::google::protobuf::int32 dwuserid() const;
  inline void set_dwuserid(::google::protobuf::int32 value);

  // required int32 dwGameID = 3;
  inline bool has_dwgameid() const;
  inline void clear_dwgameid();
  static const int kDwGameIDFieldNumber = 3;
  inline ::google::protobuf::int32 dwgameid() const;
  inline void set_dwgameid(::google::protobuf::int32 value);

  // required int32 dwCustomID = 4;
  inline bool has_dwcustomid() const;
  inline void clear_dwcustomid();
  static const int kDwCustomIDFieldNumber = 4;
  inline ::google::protobuf::int32 dwcustomid() const;
  inline void set_dwcustomid(::google::protobuf::int32 value);

  // required int32 dwUserMedal = 5;
  inline bool has_dwusermedal() const;
  inline void clear_dwusermedal();
  static const int kDwUserMedalFieldNumber = 5;
  inline ::google::protobuf::int32 dwusermedal() const;
  inline void set_dwusermedal(::google::protobuf::int32 value);

  // required int32 dwExperience = 6;
  inline bool has_dwexperience() const;
  inline void clear_dwexperience();
  static const int kDwExperienceFieldNumber = 6;
  inline ::google::protobuf::int32 dwexperience() const;
  inline void set_dwexperience(::google::protobuf::int32 value);

  // required int32 dwLoveLiness = 7;
  inline bool has_dwloveliness() const;
  inline void clear_dwloveliness();
  static const int kDwLoveLinessFieldNumber = 7;
  inline ::google::protobuf::int32 dwloveliness() const;
  inline void set_dwloveliness(::google::protobuf::int32 value);

  // required int32 lTicket = 8;
  inline bool has_lticket() const;
  inline void clear_lticket();
  static const int kLTicketFieldNumber = 8;
  inline ::google::protobuf::int32 lticket() const;
  inline void set_lticket(::google::protobuf::int32 value);

  // required int32 dwSpreaderID = 9;
  inline bool has_dwspreaderid() const;
  inline void clear_dwspreaderid();
  static const int kDwSpreaderIDFieldNumber = 9;
  inline ::google::protobuf::int32 dwspreaderid() const;
  inline void set_dwspreaderid(::google::protobuf::int32 value);

  // required int64 lUserScore = 10;
  inline bool has_luserscore() const;
  inline void clear_luserscore();
  static const int kLUserScoreFieldNumber = 10;
  inline ::google::protobuf::int64 luserscore() const;
  inline void set_luserscore(::google::protobuf::int64 value);

  // required int64 lUserInsure = 11;
  inline bool has_luserinsure() const;
  inline void clear_luserinsure();
  static const int kLUserInsureFieldNumber = 11;
  inline ::google::protobuf::int64 luserinsure() const;
  inline void set_luserinsure(::google::protobuf::int64 value);

  // required int32 cbGender = 12;
  inline bool has_cbgender() const;
  inline void clear_cbgender();
  static const int kCbGenderFieldNumber = 12;
  inline ::google::protobuf::int32 cbgender() const;
  inline void set_cbgender(::google::protobuf::int32 value);

  // optional int32 cbMoorMachine = 13;
  inline bool has_cbmoormachine() const;
  inline void clear_cbmoormachine();
  static const int kCbMoorMachineFieldNumber = 13;
  inline ::google::protobuf::int32 cbmoormachine() const;
  inline void set_cbmoormachine(::google::protobuf::int32 value);

  // required string szAccounts = 14;
  inline bool has_szaccounts() const;
  inline void clear_szaccounts();
  static const int kSzAccountsFieldNumber = 14;
  inline const ::std::string& szaccounts() const;
  inline void set_szaccounts(const ::std::string& value);
  inline void set_szaccounts(const char* value);
  inline void set_szaccounts(const char* value, size_t size);
  inline ::std::string* mutable_szaccounts();
  inline ::std::string* release_szaccounts();
  inline void set_allocated_szaccounts(::std::string* szaccounts);

  // required string szNickName = 15;
  inline bool has_sznickname() const;
  inline void clear_sznickname();
  static const int kSzNickNameFieldNumber = 15;
  inline const ::std::string& sznickname() const;
  inline void set_sznickname(const ::std::string& value);
  inline void set_sznickname(const char* value);
  inline void set_sznickname(const char* value, size_t size);
  inline ::std::string* mutable_sznickname();
  inline ::std::string* release_sznickname();
  inline void set_allocated_sznickname(::std::string* sznickname);

  // required int32 wInSpreaderID = 16;
  inline bool has_winspreaderid() const;
  inline void clear_winspreaderid();
  static const int kWInSpreaderIDFieldNumber = 16;
  inline ::google::protobuf::int32 winspreaderid() const;
  inline void set_winspreaderid(::google::protobuf::int32 value);

  // required int32 cbMemberOrder = 17;
  inline bool has_cbmemberorder() const;
  inline void clear_cbmemberorder();
  static const int kCbMemberOrderFieldNumber = 17;
  inline ::google::protobuf::int32 cbmemberorder() const;
  inline void set_cbmemberorder(::google::protobuf::int32 value);

  // optional string szUnderWrite = 18;
  inline bool has_szunderwrite() const;
  inline void clear_szunderwrite();
  static const int kSzUnderWriteFieldNumber = 18;
  inline const ::std::string& szunderwrite() const;
  inline void set_szunderwrite(const ::std::string& value);
  inline void set_szunderwrite(const char* value);
  inline void set_szunderwrite(const char* value, size_t size);
  inline ::std::string* mutable_szunderwrite();
  inline ::std::string* release_szunderwrite();
  inline void set_allocated_szunderwrite(::std::string* szunderwrite);

  // optional string dwPwd = 19;
  inline bool has_dwpwd() const;
  inline void clear_dwpwd();
  static const int kDwPwdFieldNumber = 19;
  inline const ::std::string& dwpwd() const;
  inline void set_dwpwd(const ::std::string& value);
  inline void set_dwpwd(const char* value);
  inline void set_dwpwd(const char* value, size_t size);
  inline ::std::string* mutable_dwpwd();
  inline ::std::string* release_dwpwd();
  inline void set_allocated_dwpwd(::std::string* dwpwd);

  // optional .CMD_GP_LogonSuccess.CMD_GP_UserInfo userInfo = 20;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 20;
  inline const ::CMD_GP_LogonSuccess_CMD_GP_UserInfo& userinfo() const;
  inline ::CMD_GP_LogonSuccess_CMD_GP_UserInfo* mutable_userinfo();
  inline ::CMD_GP_LogonSuccess_CMD_GP_UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::CMD_GP_LogonSuccess_CMD_GP_UserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:CMD_GP_LogonSuccess)
 private:
  inline void set_has_wfaceid();
  inline void clear_has_wfaceid();
  inline void set_has_dwuserid();
  inline void clear_has_dwuserid();
  inline void set_has_dwgameid();
  inline void clear_has_dwgameid();
  inline void set_has_dwcustomid();
  inline void clear_has_dwcustomid();
  inline void set_has_dwusermedal();
  inline void clear_has_dwusermedal();
  inline void set_has_dwexperience();
  inline void clear_has_dwexperience();
  inline void set_has_dwloveliness();
  inline void clear_has_dwloveliness();
  inline void set_has_lticket();
  inline void clear_has_lticket();
  inline void set_has_dwspreaderid();
  inline void clear_has_dwspreaderid();
  inline void set_has_luserscore();
  inline void clear_has_luserscore();
  inline void set_has_luserinsure();
  inline void clear_has_luserinsure();
  inline void set_has_cbgender();
  inline void clear_has_cbgender();
  inline void set_has_cbmoormachine();
  inline void clear_has_cbmoormachine();
  inline void set_has_szaccounts();
  inline void clear_has_szaccounts();
  inline void set_has_sznickname();
  inline void clear_has_sznickname();
  inline void set_has_winspreaderid();
  inline void clear_has_winspreaderid();
  inline void set_has_cbmemberorder();
  inline void clear_has_cbmemberorder();
  inline void set_has_szunderwrite();
  inline void clear_has_szunderwrite();
  inline void set_has_dwpwd();
  inline void clear_has_dwpwd();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wfaceid_;
  ::google::protobuf::int32 dwuserid_;
  ::google::protobuf::int32 dwgameid_;
  ::google::protobuf::int32 dwcustomid_;
  ::google::protobuf::int32 dwusermedal_;
  ::google::protobuf::int32 dwexperience_;
  ::google::protobuf::int32 dwloveliness_;
  ::google::protobuf::int32 lticket_;
  ::google::protobuf::int64 luserscore_;
  ::google::protobuf::int32 dwspreaderid_;
  ::google::protobuf::int32 cbgender_;
  ::google::protobuf::int64 luserinsure_;
  ::std::string* szaccounts_;
  ::google::protobuf::int32 cbmoormachine_;
  ::google::protobuf::int32 winspreaderid_;
  ::std::string* sznickname_;
  ::std::string* szunderwrite_;
  ::std::string* dwpwd_;
  ::CMD_GP_LogonSuccess_CMD_GP_UserInfo* userinfo_;
  ::google::protobuf::int32 cbmemberorder_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_LogonSuccess* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_LogonFinish : public ::google::protobuf::Message {
 public:
  CMD_GP_LogonFinish();
  virtual ~CMD_GP_LogonFinish();

  CMD_GP_LogonFinish(const CMD_GP_LogonFinish& from);

  inline CMD_GP_LogonFinish& operator=(const CMD_GP_LogonFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_LogonFinish& default_instance();

  void Swap(CMD_GP_LogonFinish* other);

  // implements Message ----------------------------------------------

  CMD_GP_LogonFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_LogonFinish& from);
  void MergeFrom(const CMD_GP_LogonFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wKindID = 1;
  inline bool has_wkindid() const;
  inline void clear_wkindid();
  static const int kWKindIDFieldNumber = 1;
  inline ::google::protobuf::int32 wkindid() const;
  inline void set_wkindid(::google::protobuf::int32 value);

  // required int32 wServerID = 2;
  inline bool has_wserverid() const;
  inline void clear_wserverid();
  static const int kWServerIDFieldNumber = 2;
  inline ::google::protobuf::int32 wserverid() const;
  inline void set_wserverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_LogonFinish)
 private:
  inline void set_has_wkindid();
  inline void clear_has_wkindid();
  inline void set_has_wserverid();
  inline void clear_has_wserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wkindid_;
  ::google::protobuf::int32 wserverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_LogonFinish* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GameServer_GameServer : public ::google::protobuf::Message {
 public:
  CMD_GP_GameServer_GameServer();
  virtual ~CMD_GP_GameServer_GameServer();

  CMD_GP_GameServer_GameServer(const CMD_GP_GameServer_GameServer& from);

  inline CMD_GP_GameServer_GameServer& operator=(const CMD_GP_GameServer_GameServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GameServer_GameServer& default_instance();

  void Swap(CMD_GP_GameServer_GameServer* other);

  // implements Message ----------------------------------------------

  CMD_GP_GameServer_GameServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GameServer_GameServer& from);
  void MergeFrom(const CMD_GP_GameServer_GameServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wKindID = 1;
  inline bool has_wkindid() const;
  inline void clear_wkindid();
  static const int kWKindIDFieldNumber = 1;
  inline ::google::protobuf::int32 wkindid() const;
  inline void set_wkindid(::google::protobuf::int32 value);

  // required int32 wNodeID = 2;
  inline bool has_wnodeid() const;
  inline void clear_wnodeid();
  static const int kWNodeIDFieldNumber = 2;
  inline ::google::protobuf::int32 wnodeid() const;
  inline void set_wnodeid(::google::protobuf::int32 value);

  // required int32 wSortID = 3;
  inline bool has_wsortid() const;
  inline void clear_wsortid();
  static const int kWSortIDFieldNumber = 3;
  inline ::google::protobuf::int32 wsortid() const;
  inline void set_wsortid(::google::protobuf::int32 value);

  // required int32 wServerID = 4;
  inline bool has_wserverid() const;
  inline void clear_wserverid();
  static const int kWServerIDFieldNumber = 4;
  inline ::google::protobuf::int32 wserverid() const;
  inline void set_wserverid(::google::protobuf::int32 value);

  // required int32 wServerPort = 5;
  inline bool has_wserverport() const;
  inline void clear_wserverport();
  static const int kWServerPortFieldNumber = 5;
  inline ::google::protobuf::int32 wserverport() const;
  inline void set_wserverport(::google::protobuf::int32 value);

  // required int32 dwOnLineCount = 6;
  inline bool has_dwonlinecount() const;
  inline void clear_dwonlinecount();
  static const int kDwOnLineCountFieldNumber = 6;
  inline ::google::protobuf::int32 dwonlinecount() const;
  inline void set_dwonlinecount(::google::protobuf::int32 value);

  // required int32 dwFullCount = 7;
  inline bool has_dwfullcount() const;
  inline void clear_dwfullcount();
  static const int kDwFullCountFieldNumber = 7;
  inline ::google::protobuf::int32 dwfullcount() const;
  inline void set_dwfullcount(::google::protobuf::int32 value);

  // required int32 wServerType = 8;
  inline bool has_wservertype() const;
  inline void clear_wservertype();
  static const int kWServerTypeFieldNumber = 8;
  inline ::google::protobuf::int32 wservertype() const;
  inline void set_wservertype(::google::protobuf::int32 value);

  // required string szServerAddr = 9;
  inline bool has_szserveraddr() const;
  inline void clear_szserveraddr();
  static const int kSzServerAddrFieldNumber = 9;
  inline const ::std::string& szserveraddr() const;
  inline void set_szserveraddr(const ::std::string& value);
  inline void set_szserveraddr(const char* value);
  inline void set_szserveraddr(const char* value, size_t size);
  inline ::std::string* mutable_szserveraddr();
  inline ::std::string* release_szserveraddr();
  inline void set_allocated_szserveraddr(::std::string* szserveraddr);

  // required string szServerName = 10;
  inline bool has_szservername() const;
  inline void clear_szservername();
  static const int kSzServerNameFieldNumber = 10;
  inline const ::std::string& szservername() const;
  inline void set_szservername(const ::std::string& value);
  inline void set_szservername(const char* value);
  inline void set_szservername(const char* value, size_t size);
  inline ::std::string* mutable_szservername();
  inline ::std::string* release_szservername();
  inline void set_allocated_szservername(::std::string* szservername);

  // required int64 lMinEnterScore = 11;
  inline bool has_lminenterscore() const;
  inline void clear_lminenterscore();
  static const int kLMinEnterScoreFieldNumber = 11;
  inline ::google::protobuf::int64 lminenterscore() const;
  inline void set_lminenterscore(::google::protobuf::int64 value);

  // required int64 lMaxEnterScore = 12;
  inline bool has_lmaxenterscore() const;
  inline void clear_lmaxenterscore();
  static const int kLMaxEnterScoreFieldNumber = 12;
  inline ::google::protobuf::int64 lmaxenterscore() const;
  inline void set_lmaxenterscore(::google::protobuf::int64 value);

  // required int32 wServerKind = 13;
  inline bool has_wserverkind() const;
  inline void clear_wserverkind();
  static const int kWServerKindFieldNumber = 13;
  inline ::google::protobuf::int32 wserverkind() const;
  inline void set_wserverkind(::google::protobuf::int32 value);

  // required int32 wServerLevel = 14;
  inline bool has_wserverlevel() const;
  inline void clear_wserverlevel();
  static const int kWServerLevelFieldNumber = 14;
  inline ::google::protobuf::int32 wserverlevel() const;
  inline void set_wserverlevel(::google::protobuf::int32 value);

  // required int64 lCellScore = 15;
  inline bool has_lcellscore() const;
  inline void clear_lcellscore();
  static const int kLCellScoreFieldNumber = 15;
  inline ::google::protobuf::int64 lcellscore() const;
  inline void set_lcellscore(::google::protobuf::int64 value);

  // required int64 lEnterScore = 16;
  inline bool has_lenterscore() const;
  inline void clear_lenterscore();
  static const int kLEnterScoreFieldNumber = 16;
  inline ::google::protobuf::int64 lenterscore() const;
  inline void set_lenterscore(::google::protobuf::int64 value);

  // required int32 cbEnterMember = 17;
  inline bool has_cbentermember() const;
  inline void clear_cbentermember();
  static const int kCbEnterMemberFieldNumber = 17;
  inline ::google::protobuf::int32 cbentermember() const;
  inline void set_cbentermember(::google::protobuf::int32 value);

  // required int32 dwServerRule = 18;
  inline bool has_dwserverrule() const;
  inline void clear_dwserverrule();
  static const int kDwServerRuleFieldNumber = 18;
  inline ::google::protobuf::int32 dwserverrule() const;
  inline void set_dwserverrule(::google::protobuf::int32 value);

  // required int32 dwSurportType = 19;
  inline bool has_dwsurporttype() const;
  inline void clear_dwsurporttype();
  static const int kDwSurportTypeFieldNumber = 19;
  inline ::google::protobuf::int32 dwsurporttype() const;
  inline void set_dwsurporttype(::google::protobuf::int32 value);

  // required int32 wTableCount = 20;
  inline bool has_wtablecount() const;
  inline void clear_wtablecount();
  static const int kWTableCountFieldNumber = 20;
  inline ::google::protobuf::int32 wtablecount() const;
  inline void set_wtablecount(::google::protobuf::int32 value);

  // required int32 isChargeRoom = 21;
  inline bool has_ischargeroom() const;
  inline void clear_ischargeroom();
  static const int kIsChargeRoomFieldNumber = 21;
  inline ::google::protobuf::int32 ischargeroom() const;
  inline void set_ischargeroom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GameServer.GameServer)
 private:
  inline void set_has_wkindid();
  inline void clear_has_wkindid();
  inline void set_has_wnodeid();
  inline void clear_has_wnodeid();
  inline void set_has_wsortid();
  inline void clear_has_wsortid();
  inline void set_has_wserverid();
  inline void clear_has_wserverid();
  inline void set_has_wserverport();
  inline void clear_has_wserverport();
  inline void set_has_dwonlinecount();
  inline void clear_has_dwonlinecount();
  inline void set_has_dwfullcount();
  inline void clear_has_dwfullcount();
  inline void set_has_wservertype();
  inline void clear_has_wservertype();
  inline void set_has_szserveraddr();
  inline void clear_has_szserveraddr();
  inline void set_has_szservername();
  inline void clear_has_szservername();
  inline void set_has_lminenterscore();
  inline void clear_has_lminenterscore();
  inline void set_has_lmaxenterscore();
  inline void clear_has_lmaxenterscore();
  inline void set_has_wserverkind();
  inline void clear_has_wserverkind();
  inline void set_has_wserverlevel();
  inline void clear_has_wserverlevel();
  inline void set_has_lcellscore();
  inline void clear_has_lcellscore();
  inline void set_has_lenterscore();
  inline void clear_has_lenterscore();
  inline void set_has_cbentermember();
  inline void clear_has_cbentermember();
  inline void set_has_dwserverrule();
  inline void clear_has_dwserverrule();
  inline void set_has_dwsurporttype();
  inline void clear_has_dwsurporttype();
  inline void set_has_wtablecount();
  inline void clear_has_wtablecount();
  inline void set_has_ischargeroom();
  inline void clear_has_ischargeroom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wkindid_;
  ::google::protobuf::int32 wnodeid_;
  ::google::protobuf::int32 wsortid_;
  ::google::protobuf::int32 wserverid_;
  ::google::protobuf::int32 wserverport_;
  ::google::protobuf::int32 dwonlinecount_;
  ::google::protobuf::int32 dwfullcount_;
  ::google::protobuf::int32 wservertype_;
  ::std::string* szserveraddr_;
  ::std::string* szservername_;
  ::google::protobuf::int64 lminenterscore_;
  ::google::protobuf::int64 lmaxenterscore_;
  ::google::protobuf::int32 wserverkind_;
  ::google::protobuf::int32 wserverlevel_;
  ::google::protobuf::int64 lcellscore_;
  ::google::protobuf::int64 lenterscore_;
  ::google::protobuf::int32 cbentermember_;
  ::google::protobuf::int32 dwserverrule_;
  ::google::protobuf::int32 dwsurporttype_;
  ::google::protobuf::int32 wtablecount_;
  ::google::protobuf::int32 ischargeroom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GameServer_GameServer* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GameServer : public ::google::protobuf::Message {
 public:
  CMD_GP_GameServer();
  virtual ~CMD_GP_GameServer();

  CMD_GP_GameServer(const CMD_GP_GameServer& from);

  inline CMD_GP_GameServer& operator=(const CMD_GP_GameServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GameServer& default_instance();

  void Swap(CMD_GP_GameServer* other);

  // implements Message ----------------------------------------------

  CMD_GP_GameServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GameServer& from);
  void MergeFrom(const CMD_GP_GameServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMD_GP_GameServer_GameServer GameServer;

  // accessors -------------------------------------------------------

  // repeated .CMD_GP_GameServer.GameServer gameserver = 1;
  inline int gameserver_size() const;
  inline void clear_gameserver();
  static const int kGameserverFieldNumber = 1;
  inline const ::CMD_GP_GameServer_GameServer& gameserver(int index) const;
  inline ::CMD_GP_GameServer_GameServer* mutable_gameserver(int index);
  inline ::CMD_GP_GameServer_GameServer* add_gameserver();
  inline const ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameServer_GameServer >&
      gameserver() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameServer_GameServer >*
      mutable_gameserver();

  // @@protoc_insertion_point(class_scope:CMD_GP_GameServer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameServer_GameServer > gameserver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GameServer* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GameKind_GameKind : public ::google::protobuf::Message {
 public:
  CMD_GP_GameKind_GameKind();
  virtual ~CMD_GP_GameKind_GameKind();

  CMD_GP_GameKind_GameKind(const CMD_GP_GameKind_GameKind& from);

  inline CMD_GP_GameKind_GameKind& operator=(const CMD_GP_GameKind_GameKind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GameKind_GameKind& default_instance();

  void Swap(CMD_GP_GameKind_GameKind* other);

  // implements Message ----------------------------------------------

  CMD_GP_GameKind_GameKind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GameKind_GameKind& from);
  void MergeFrom(const CMD_GP_GameKind_GameKind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 wTypeID = 1;
  inline bool has_wtypeid() const;
  inline void clear_wtypeid();
  static const int kWTypeIDFieldNumber = 1;
  inline ::google::protobuf::int32 wtypeid() const;
  inline void set_wtypeid(::google::protobuf::int32 value);

  // required int32 wJoinID = 2;
  inline bool has_wjoinid() const;
  inline void clear_wjoinid();
  static const int kWJoinIDFieldNumber = 2;
  inline ::google::protobuf::int32 wjoinid() const;
  inline void set_wjoinid(::google::protobuf::int32 value);

  // required int32 wSortID = 3;
  inline bool has_wsortid() const;
  inline void clear_wsortid();
  static const int kWSortIDFieldNumber = 3;
  inline ::google::protobuf::int32 wsortid() const;
  inline void set_wsortid(::google::protobuf::int32 value);

  // required int32 wKindID = 4;
  inline bool has_wkindid() const;
  inline void clear_wkindid();
  static const int kWKindIDFieldNumber = 4;
  inline ::google::protobuf::int32 wkindid() const;
  inline void set_wkindid(::google::protobuf::int32 value);

  // required int32 wGameID = 5;
  inline bool has_wgameid() const;
  inline void clear_wgameid();
  static const int kWGameIDFieldNumber = 5;
  inline ::google::protobuf::int32 wgameid() const;
  inline void set_wgameid(::google::protobuf::int32 value);

  // required int32 dwOnLineCount = 6;
  inline bool has_dwonlinecount() const;
  inline void clear_dwonlinecount();
  static const int kDwOnLineCountFieldNumber = 6;
  inline ::google::protobuf::int32 dwonlinecount() const;
  inline void set_dwonlinecount(::google::protobuf::int32 value);

  // required int32 dwFullCount = 7;
  inline bool has_dwfullcount() const;
  inline void clear_dwfullcount();
  static const int kDwFullCountFieldNumber = 7;
  inline ::google::protobuf::int32 dwfullcount() const;
  inline void set_dwfullcount(::google::protobuf::int32 value);

  // required string szKindName = 8;
  inline bool has_szkindname() const;
  inline void clear_szkindname();
  static const int kSzKindNameFieldNumber = 8;
  inline const ::std::string& szkindname() const;
  inline void set_szkindname(const ::std::string& value);
  inline void set_szkindname(const char* value);
  inline void set_szkindname(const char* value, size_t size);
  inline ::std::string* mutable_szkindname();
  inline ::std::string* release_szkindname();
  inline void set_allocated_szkindname(::std::string* szkindname);

  // required string szProcessName = 9;
  inline bool has_szprocessname() const;
  inline void clear_szprocessname();
  static const int kSzProcessNameFieldNumber = 9;
  inline const ::std::string& szprocessname() const;
  inline void set_szprocessname(const ::std::string& value);
  inline void set_szprocessname(const char* value);
  inline void set_szprocessname(const char* value, size_t size);
  inline ::std::string* mutable_szprocessname();
  inline ::std::string* release_szprocessname();
  inline void set_allocated_szprocessname(::std::string* szprocessname);

  // @@protoc_insertion_point(class_scope:CMD_GP_GameKind.GameKind)
 private:
  inline void set_has_wtypeid();
  inline void clear_has_wtypeid();
  inline void set_has_wjoinid();
  inline void clear_has_wjoinid();
  inline void set_has_wsortid();
  inline void clear_has_wsortid();
  inline void set_has_wkindid();
  inline void clear_has_wkindid();
  inline void set_has_wgameid();
  inline void clear_has_wgameid();
  inline void set_has_dwonlinecount();
  inline void clear_has_dwonlinecount();
  inline void set_has_dwfullcount();
  inline void clear_has_dwfullcount();
  inline void set_has_szkindname();
  inline void clear_has_szkindname();
  inline void set_has_szprocessname();
  inline void clear_has_szprocessname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wtypeid_;
  ::google::protobuf::int32 wjoinid_;
  ::google::protobuf::int32 wsortid_;
  ::google::protobuf::int32 wkindid_;
  ::google::protobuf::int32 wgameid_;
  ::google::protobuf::int32 dwonlinecount_;
  ::std::string* szkindname_;
  ::std::string* szprocessname_;
  ::google::protobuf::int32 dwfullcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GameKind_GameKind* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GameKind : public ::google::protobuf::Message {
 public:
  CMD_GP_GameKind();
  virtual ~CMD_GP_GameKind();

  CMD_GP_GameKind(const CMD_GP_GameKind& from);

  inline CMD_GP_GameKind& operator=(const CMD_GP_GameKind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GameKind& default_instance();

  void Swap(CMD_GP_GameKind* other);

  // implements Message ----------------------------------------------

  CMD_GP_GameKind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GameKind& from);
  void MergeFrom(const CMD_GP_GameKind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMD_GP_GameKind_GameKind GameKind;

  // accessors -------------------------------------------------------

  // repeated .CMD_GP_GameKind.GameKind gamekind = 1;
  inline int gamekind_size() const;
  inline void clear_gamekind();
  static const int kGamekindFieldNumber = 1;
  inline const ::CMD_GP_GameKind_GameKind& gamekind(int index) const;
  inline ::CMD_GP_GameKind_GameKind* mutable_gamekind(int index);
  inline ::CMD_GP_GameKind_GameKind* add_gamekind();
  inline const ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameKind_GameKind >&
      gamekind() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameKind_GameKind >*
      mutable_gamekind();

  // @@protoc_insertion_point(class_scope:CMD_GP_GameKind)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameKind_GameKind > gamekind_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GameKind* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GiftDetail_GiftDetail : public ::google::protobuf::Message {
 public:
  CMD_GP_GiftDetail_GiftDetail();
  virtual ~CMD_GP_GiftDetail_GiftDetail();

  CMD_GP_GiftDetail_GiftDetail(const CMD_GP_GiftDetail_GiftDetail& from);

  inline CMD_GP_GiftDetail_GiftDetail& operator=(const CMD_GP_GiftDetail_GiftDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GiftDetail_GiftDetail& default_instance();

  void Swap(CMD_GP_GiftDetail_GiftDetail* other);

  // implements Message ----------------------------------------------

  CMD_GP_GiftDetail_GiftDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GiftDetail_GiftDetail& from);
  void MergeFrom(const CMD_GP_GiftDetail_GiftDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_GiftDetail.GiftDetail)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GiftDetail_GiftDetail* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GiftDetail : public ::google::protobuf::Message {
 public:
  CMD_GP_GiftDetail();
  virtual ~CMD_GP_GiftDetail();

  CMD_GP_GiftDetail(const CMD_GP_GiftDetail& from);

  inline CMD_GP_GiftDetail& operator=(const CMD_GP_GiftDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GiftDetail& default_instance();

  void Swap(CMD_GP_GiftDetail* other);

  // implements Message ----------------------------------------------

  CMD_GP_GiftDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GiftDetail& from);
  void MergeFrom(const CMD_GP_GiftDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMD_GP_GiftDetail_GiftDetail GiftDetail;

  // accessors -------------------------------------------------------

  // repeated .CMD_GP_GiftDetail.GiftDetail giftDetail = 1;
  inline int giftdetail_size() const;
  inline void clear_giftdetail();
  static const int kGiftDetailFieldNumber = 1;
  inline const ::CMD_GP_GiftDetail_GiftDetail& giftdetail(int index) const;
  inline ::CMD_GP_GiftDetail_GiftDetail* mutable_giftdetail(int index);
  inline ::CMD_GP_GiftDetail_GiftDetail* add_giftdetail();
  inline const ::google::protobuf::RepeatedPtrField< ::CMD_GP_GiftDetail_GiftDetail >&
      giftdetail() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMD_GP_GiftDetail_GiftDetail >*
      mutable_giftdetail();

  // @@protoc_insertion_point(class_scope:CMD_GP_GiftDetail)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMD_GP_GiftDetail_GiftDetail > giftdetail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GiftDetail* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_LanternGiftDetail_LanternGiftDetail : public ::google::protobuf::Message {
 public:
  CMD_GP_LanternGiftDetail_LanternGiftDetail();
  virtual ~CMD_GP_LanternGiftDetail_LanternGiftDetail();

  CMD_GP_LanternGiftDetail_LanternGiftDetail(const CMD_GP_LanternGiftDetail_LanternGiftDetail& from);

  inline CMD_GP_LanternGiftDetail_LanternGiftDetail& operator=(const CMD_GP_LanternGiftDetail_LanternGiftDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_LanternGiftDetail_LanternGiftDetail& default_instance();

  void Swap(CMD_GP_LanternGiftDetail_LanternGiftDetail* other);

  // implements Message ----------------------------------------------

  CMD_GP_LanternGiftDetail_LanternGiftDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_LanternGiftDetail_LanternGiftDetail& from);
  void MergeFrom(const CMD_GP_LanternGiftDetail_LanternGiftDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_LanternGiftDetail.LanternGiftDetail)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_LanternGiftDetail_LanternGiftDetail* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_LanternGiftDetail : public ::google::protobuf::Message {
 public:
  CMD_GP_LanternGiftDetail();
  virtual ~CMD_GP_LanternGiftDetail();

  CMD_GP_LanternGiftDetail(const CMD_GP_LanternGiftDetail& from);

  inline CMD_GP_LanternGiftDetail& operator=(const CMD_GP_LanternGiftDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_LanternGiftDetail& default_instance();

  void Swap(CMD_GP_LanternGiftDetail* other);

  // implements Message ----------------------------------------------

  CMD_GP_LanternGiftDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_LanternGiftDetail& from);
  void MergeFrom(const CMD_GP_LanternGiftDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMD_GP_LanternGiftDetail_LanternGiftDetail LanternGiftDetail;

  // accessors -------------------------------------------------------

  // repeated .CMD_GP_LanternGiftDetail.LanternGiftDetail lanterngiftDetail = 1;
  inline int lanterngiftdetail_size() const;
  inline void clear_lanterngiftdetail();
  static const int kLanterngiftDetailFieldNumber = 1;
  inline const ::CMD_GP_LanternGiftDetail_LanternGiftDetail& lanterngiftdetail(int index) const;
  inline ::CMD_GP_LanternGiftDetail_LanternGiftDetail* mutable_lanterngiftdetail(int index);
  inline ::CMD_GP_LanternGiftDetail_LanternGiftDetail* add_lanterngiftdetail();
  inline const ::google::protobuf::RepeatedPtrField< ::CMD_GP_LanternGiftDetail_LanternGiftDetail >&
      lanterngiftdetail() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMD_GP_LanternGiftDetail_LanternGiftDetail >*
      mutable_lanterngiftdetail();

  // @@protoc_insertion_point(class_scope:CMD_GP_LanternGiftDetail)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMD_GP_LanternGiftDetail_LanternGiftDetail > lanterngiftdetail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_LanternGiftDetail* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_ChangeAccount : public ::google::protobuf::Message {
 public:
  CMD_GP_ChangeAccount();
  virtual ~CMD_GP_ChangeAccount();

  CMD_GP_ChangeAccount(const CMD_GP_ChangeAccount& from);

  inline CMD_GP_ChangeAccount& operator=(const CMD_GP_ChangeAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_ChangeAccount& default_instance();

  void Swap(CMD_GP_ChangeAccount* other);

  // implements Message ----------------------------------------------

  CMD_GP_ChangeAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_ChangeAccount& from);
  void MergeFrom(const CMD_GP_ChangeAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:CMD_GP_ChangeAccount)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_ChangeAccount* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_TreasureChange : public ::google::protobuf::Message {
 public:
  CMD_GP_TreasureChange();
  virtual ~CMD_GP_TreasureChange();

  CMD_GP_TreasureChange(const CMD_GP_TreasureChange& from);

  inline CMD_GP_TreasureChange& operator=(const CMD_GP_TreasureChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_TreasureChange& default_instance();

  void Swap(CMD_GP_TreasureChange* other);

  // implements Message ----------------------------------------------

  CMD_GP_TreasureChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_TreasureChange& from);
  void MergeFrom(const CMD_GP_TreasureChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int32 memberType = 2;
  inline bool has_membertype() const;
  inline void clear_membertype();
  static const int kMemberTypeFieldNumber = 2;
  inline ::google::protobuf::int32 membertype() const;
  inline void set_membertype(::google::protobuf::int32 value);

  // optional string memberInfo = 3;
  inline bool has_memberinfo() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 3;
  inline const ::std::string& memberinfo() const;
  inline void set_memberinfo(const ::std::string& value);
  inline void set_memberinfo(const char* value);
  inline void set_memberinfo(const char* value, size_t size);
  inline ::std::string* mutable_memberinfo();
  inline ::std::string* release_memberinfo();
  inline void set_allocated_memberinfo(::std::string* memberinfo);

  // optional int32 loveliness = 4;
  inline bool has_loveliness() const;
  inline void clear_loveliness();
  static const int kLovelinessFieldNumber = 4;
  inline ::google::protobuf::int32 loveliness() const;
  inline void set_loveliness(::google::protobuf::int32 value);

  // optional int32 ticket = 5;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 5;
  inline ::google::protobuf::int32 ticket() const;
  inline void set_ticket(::google::protobuf::int32 value);

  // optional int32 newGiftCharge = 6;
  inline bool has_newgiftcharge() const;
  inline void clear_newgiftcharge();
  static const int kNewGiftChargeFieldNumber = 6;
  inline ::google::protobuf::int32 newgiftcharge() const;
  inline void set_newgiftcharge(::google::protobuf::int32 value);

  // optional int32 luckDraw = 7;
  inline bool has_luckdraw() const;
  inline void clear_luckdraw();
  static const int kLuckDrawFieldNumber = 7;
  inline ::google::protobuf::int32 luckdraw() const;
  inline void set_luckdraw(::google::protobuf::int32 value);

  // optional .MonthlyCard monthlyCard = 8;
  inline bool has_monthlycard() const;
  inline void clear_monthlycard();
  static const int kMonthlyCardFieldNumber = 8;
  inline const ::MonthlyCard& monthlycard() const;
  inline ::MonthlyCard* mutable_monthlycard();
  inline ::MonthlyCard* release_monthlycard();
  inline void set_allocated_monthlycard(::MonthlyCard* monthlycard);

  // optional int32 rechargeID = 9;
  inline bool has_rechargeid() const;
  inline void clear_rechargeid();
  static const int kRechargeIDFieldNumber = 9;
  inline ::google::protobuf::int32 rechargeid() const;
  inline void set_rechargeid(::google::protobuf::int32 value);

  // optional int32 rechargeType = 10;
  inline bool has_rechargetype() const;
  inline void clear_rechargetype();
  static const int kRechargeTypeFieldNumber = 10;
  inline ::google::protobuf::int32 rechargetype() const;
  inline void set_rechargetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMD_GP_TreasureChange)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_membertype();
  inline void clear_has_membertype();
  inline void set_has_memberinfo();
  inline void clear_has_memberinfo();
  inline void set_has_loveliness();
  inline void clear_has_loveliness();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_newgiftcharge();
  inline void clear_has_newgiftcharge();
  inline void set_has_luckdraw();
  inline void clear_has_luckdraw();
  inline void set_has_monthlycard();
  inline void clear_has_monthlycard();
  inline void set_has_rechargeid();
  inline void clear_has_rechargeid();
  inline void set_has_rechargetype();
  inline void clear_has_rechargetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;
  ::std::string* memberinfo_;
  ::google::protobuf::int32 membertype_;
  ::google::protobuf::int32 loveliness_;
  ::google::protobuf::int32 ticket_;
  ::google::protobuf::int32 newgiftcharge_;
  ::MonthlyCard* monthlycard_;
  ::google::protobuf::int32 luckdraw_;
  ::google::protobuf::int32 rechargeid_;
  ::google::protobuf::int32 rechargetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_TreasureChange* default_instance_;
};
// -------------------------------------------------------------------

class SUB_GP_RANK_GoldRank : public ::google::protobuf::Message {
 public:
  SUB_GP_RANK_GoldRank();
  virtual ~SUB_GP_RANK_GoldRank();

  SUB_GP_RANK_GoldRank(const SUB_GP_RANK_GoldRank& from);

  inline SUB_GP_RANK_GoldRank& operator=(const SUB_GP_RANK_GoldRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUB_GP_RANK_GoldRank& default_instance();

  void Swap(SUB_GP_RANK_GoldRank* other);

  // implements Message ----------------------------------------------

  SUB_GP_RANK_GoldRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUB_GP_RANK_GoldRank& from);
  void MergeFrom(const SUB_GP_RANK_GoldRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ranking = 1;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 1;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // required int32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 memberorder = 3;
  inline bool has_memberorder() const;
  inline void clear_memberorder();
  static const int kMemberorderFieldNumber = 3;
  inline ::google::protobuf::int32 memberorder() const;
  inline void set_memberorder(::google::protobuf::int32 value);

  // required string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int64 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SUB_GP_RANK.GoldRank)
 private:
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_memberorder();
  inline void clear_has_memberorder();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 gameid_;
  ::std::string* nickname_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int32 memberorder_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static SUB_GP_RANK_GoldRank* default_instance_;
};
// -------------------------------------------------------------------

class SUB_GP_RANK : public ::google::protobuf::Message {
 public:
  SUB_GP_RANK();
  virtual ~SUB_GP_RANK();

  SUB_GP_RANK(const SUB_GP_RANK& from);

  inline SUB_GP_RANK& operator=(const SUB_GP_RANK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUB_GP_RANK& default_instance();

  void Swap(SUB_GP_RANK* other);

  // implements Message ----------------------------------------------

  SUB_GP_RANK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUB_GP_RANK& from);
  void MergeFrom(const SUB_GP_RANK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SUB_GP_RANK_GoldRank GoldRank;

  // accessors -------------------------------------------------------

  // repeated .SUB_GP_RANK.GoldRank goldRank = 1;
  inline int goldrank_size() const;
  inline void clear_goldrank();
  static const int kGoldRankFieldNumber = 1;
  inline const ::SUB_GP_RANK_GoldRank& goldrank(int index) const;
  inline ::SUB_GP_RANK_GoldRank* mutable_goldrank(int index);
  inline ::SUB_GP_RANK_GoldRank* add_goldrank();
  inline const ::google::protobuf::RepeatedPtrField< ::SUB_GP_RANK_GoldRank >&
      goldrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::SUB_GP_RANK_GoldRank >*
      mutable_goldrank();

  // required int32 selfRank = 2;
  inline bool has_selfrank() const;
  inline void clear_selfrank();
  static const int kSelfRankFieldNumber = 2;
  inline ::google::protobuf::int32 selfrank() const;
  inline void set_selfrank(::google::protobuf::int32 value);

  // optional int32 showRank = 3;
  inline bool has_showrank() const;
  inline void clear_showrank();
  static const int kShowRankFieldNumber = 3;
  inline ::google::protobuf::int32 showrank() const;
  inline void set_showrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SUB_GP_RANK)
 private:
  inline void set_has_selfrank();
  inline void clear_has_selfrank();
  inline void set_has_showrank();
  inline void clear_has_showrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SUB_GP_RANK_GoldRank > goldrank_;
  ::google::protobuf::int32 selfrank_;
  ::google::protobuf::int32 showrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static SUB_GP_RANK* default_instance_;
};
// -------------------------------------------------------------------

class SUB_GP_FISHRANK_FishRank : public ::google::protobuf::Message {
 public:
  SUB_GP_FISHRANK_FishRank();
  virtual ~SUB_GP_FISHRANK_FishRank();

  SUB_GP_FISHRANK_FishRank(const SUB_GP_FISHRANK_FishRank& from);

  inline SUB_GP_FISHRANK_FishRank& operator=(const SUB_GP_FISHRANK_FishRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUB_GP_FISHRANK_FishRank& default_instance();

  void Swap(SUB_GP_FISHRANK_FishRank* other);

  // implements Message ----------------------------------------------

  SUB_GP_FISHRANK_FishRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUB_GP_FISHRANK_FishRank& from);
  void MergeFrom(const SUB_GP_FISHRANK_FishRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // required int32 GameID = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 2;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 MemberOrder = 3;
  inline bool has_memberorder() const;
  inline void clear_memberorder();
  static const int kMemberOrderFieldNumber = 3;
  inline ::google::protobuf::int32 memberorder() const;
  inline void set_memberorder(::google::protobuf::int32 value);

  // required string NickName = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 CatchedFishNum = 5;
  inline bool has_catchedfishnum() const;
  inline void clear_catchedfishnum();
  static const int kCatchedFishNumFieldNumber = 5;
  inline ::google::protobuf::int32 catchedfishnum() const;
  inline void set_catchedfishnum(::google::protobuf::int32 value);

  // required string UpdateTime = 6;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 6;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const char* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  inline void set_allocated_updatetime(::std::string* updatetime);

  // @@protoc_insertion_point(class_scope:SUB_GP_FISHRANK.FishRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_memberorder();
  inline void clear_has_memberorder();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_catchedfishnum();
  inline void clear_has_catchedfishnum();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 gameid_;
  ::std::string* nickname_;
  ::google::protobuf::int32 memberorder_;
  ::google::protobuf::int32 catchedfishnum_;
  ::std::string* updatetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static SUB_GP_FISHRANK_FishRank* default_instance_;
};
// -------------------------------------------------------------------

class SUB_GP_FISHRANK : public ::google::protobuf::Message {
 public:
  SUB_GP_FISHRANK();
  virtual ~SUB_GP_FISHRANK();

  SUB_GP_FISHRANK(const SUB_GP_FISHRANK& from);

  inline SUB_GP_FISHRANK& operator=(const SUB_GP_FISHRANK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUB_GP_FISHRANK& default_instance();

  void Swap(SUB_GP_FISHRANK* other);

  // implements Message ----------------------------------------------

  SUB_GP_FISHRANK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUB_GP_FISHRANK& from);
  void MergeFrom(const SUB_GP_FISHRANK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SUB_GP_FISHRANK_FishRank FishRank;

  // accessors -------------------------------------------------------

  // repeated .SUB_GP_FISHRANK.FishRank fishRank = 1;
  inline int fishrank_size() const;
  inline void clear_fishrank();
  static const int kFishRankFieldNumber = 1;
  inline const ::SUB_GP_FISHRANK_FishRank& fishrank(int index) const;
  inline ::SUB_GP_FISHRANK_FishRank* mutable_fishrank(int index);
  inline ::SUB_GP_FISHRANK_FishRank* add_fishrank();
  inline const ::google::protobuf::RepeatedPtrField< ::SUB_GP_FISHRANK_FishRank >&
      fishrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::SUB_GP_FISHRANK_FishRank >*
      mutable_fishrank();

  // required int32 selfRank = 2;
  inline bool has_selfrank() const;
  inline void clear_selfrank();
  static const int kSelfRankFieldNumber = 2;
  inline ::google::protobuf::int32 selfrank() const;
  inline void set_selfrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SUB_GP_FISHRANK)
 private:
  inline void set_has_selfrank();
  inline void clear_has_selfrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SUB_GP_FISHRANK_FishRank > fishrank_;
  ::google::protobuf::int32 selfrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static SUB_GP_FISHRANK* default_instance_;
};
// -------------------------------------------------------------------

class SUB_GP_NEWPLAYGIFTFLAG : public ::google::protobuf::Message {
 public:
  SUB_GP_NEWPLAYGIFTFLAG();
  virtual ~SUB_GP_NEWPLAYGIFTFLAG();

  SUB_GP_NEWPLAYGIFTFLAG(const SUB_GP_NEWPLAYGIFTFLAG& from);

  inline SUB_GP_NEWPLAYGIFTFLAG& operator=(const SUB_GP_NEWPLAYGIFTFLAG& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUB_GP_NEWPLAYGIFTFLAG& default_instance();

  void Swap(SUB_GP_NEWPLAYGIFTFLAG* other);

  // implements Message ----------------------------------------------

  SUB_GP_NEWPLAYGIFTFLAG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUB_GP_NEWPLAYGIFTFLAG& from);
  void MergeFrom(const SUB_GP_NEWPLAYGIFTFLAG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:SUB_GP_NEWPLAYGIFTFLAG)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static SUB_GP_NEWPLAYGIFTFLAG* default_instance_;
};
// -------------------------------------------------------------------

class SUB_GP_AllModelsSwitch_AllModelsSwitch : public ::google::protobuf::Message {
 public:
  SUB_GP_AllModelsSwitch_AllModelsSwitch();
  virtual ~SUB_GP_AllModelsSwitch_AllModelsSwitch();

  SUB_GP_AllModelsSwitch_AllModelsSwitch(const SUB_GP_AllModelsSwitch_AllModelsSwitch& from);

  inline SUB_GP_AllModelsSwitch_AllModelsSwitch& operator=(const SUB_GP_AllModelsSwitch_AllModelsSwitch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUB_GP_AllModelsSwitch_AllModelsSwitch& default_instance();

  void Swap(SUB_GP_AllModelsSwitch_AllModelsSwitch* other);

  // implements Message ----------------------------------------------

  SUB_GP_AllModelsSwitch_AllModelsSwitch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUB_GP_AllModelsSwitch_AllModelsSwitch& from);
  void MergeFrom(const SUB_GP_AllModelsSwitch_AllModelsSwitch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ModelID = 1;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 1;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required int32 IsShow = 2;
  inline bool has_isshow() const;
  inline void clear_isshow();
  static const int kIsShowFieldNumber = 2;
  inline ::google::protobuf::int32 isshow() const;
  inline void set_isshow(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SUB_GP_AllModelsSwitch.AllModelsSwitch)
 private:
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_isshow();
  inline void clear_has_isshow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 modelid_;
  ::google::protobuf::int32 isshow_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static SUB_GP_AllModelsSwitch_AllModelsSwitch* default_instance_;
};
// -------------------------------------------------------------------

class SUB_GP_AllModelsSwitch : public ::google::protobuf::Message {
 public:
  SUB_GP_AllModelsSwitch();
  virtual ~SUB_GP_AllModelsSwitch();

  SUB_GP_AllModelsSwitch(const SUB_GP_AllModelsSwitch& from);

  inline SUB_GP_AllModelsSwitch& operator=(const SUB_GP_AllModelsSwitch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUB_GP_AllModelsSwitch& default_instance();

  void Swap(SUB_GP_AllModelsSwitch* other);

  // implements Message ----------------------------------------------

  SUB_GP_AllModelsSwitch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUB_GP_AllModelsSwitch& from);
  void MergeFrom(const SUB_GP_AllModelsSwitch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SUB_GP_AllModelsSwitch_AllModelsSwitch AllModelsSwitch;

  // accessors -------------------------------------------------------

  // repeated .SUB_GP_AllModelsSwitch.AllModelsSwitch allModelsSwitch = 1;
  inline int allmodelsswitch_size() const;
  inline void clear_allmodelsswitch();
  static const int kAllModelsSwitchFieldNumber = 1;
  inline const ::SUB_GP_AllModelsSwitch_AllModelsSwitch& allmodelsswitch(int index) const;
  inline ::SUB_GP_AllModelsSwitch_AllModelsSwitch* mutable_allmodelsswitch(int index);
  inline ::SUB_GP_AllModelsSwitch_AllModelsSwitch* add_allmodelsswitch();
  inline const ::google::protobuf::RepeatedPtrField< ::SUB_GP_AllModelsSwitch_AllModelsSwitch >&
      allmodelsswitch() const;
  inline ::google::protobuf::RepeatedPtrField< ::SUB_GP_AllModelsSwitch_AllModelsSwitch >*
      mutable_allmodelsswitch();

  // @@protoc_insertion_point(class_scope:SUB_GP_AllModelsSwitch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SUB_GP_AllModelsSwitch_AllModelsSwitch > allmodelsswitch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static SUB_GP_AllModelsSwitch* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_SignIn : public ::google::protobuf::Message {
 public:
  CMD_GP_SignIn();
  virtual ~CMD_GP_SignIn();

  CMD_GP_SignIn(const CMD_GP_SignIn& from);

  inline CMD_GP_SignIn& operator=(const CMD_GP_SignIn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_SignIn& default_instance();

  void Swap(CMD_GP_SignIn* other);

  // implements Message ----------------------------------------------

  CMD_GP_SignIn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_SignIn& from);
  void MergeFrom(const CMD_GP_SignIn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline const ::std::string& flag() const;
  inline void set_flag(const ::std::string& value);
  inline void set_flag(const char* value);
  inline void set_flag(const char* value, size_t size);
  inline ::std::string* mutable_flag();
  inline ::std::string* release_flag();
  inline void set_allocated_flag(::std::string* flag);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional string gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline const ::std::string& gold() const;
  inline void set_gold(const ::std::string& value);
  inline void set_gold(const char* value);
  inline void set_gold(const char* value, size_t size);
  inline ::std::string* mutable_gold();
  inline ::std::string* release_gold();
  inline void set_allocated_gold(::std::string* gold);

  // @@protoc_insertion_point(class_scope:CMD_GP_SignIn)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* flag_;
  ::std::string* msg_;
  ::std::string* gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_SignIn* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetHeadUrl : public ::google::protobuf::Message {
 public:
  CMD_GP_GetHeadUrl();
  virtual ~CMD_GP_GetHeadUrl();

  CMD_GP_GetHeadUrl(const CMD_GP_GetHeadUrl& from);

  inline CMD_GP_GetHeadUrl& operator=(const CMD_GP_GetHeadUrl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetHeadUrl& default_instance();

  void Swap(CMD_GP_GetHeadUrl* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetHeadUrl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetHeadUrl& from);
  void MergeFrom(const CMD_GP_GetHeadUrl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline const ::std::string& flag() const;
  inline void set_flag(const ::std::string& value);
  inline void set_flag(const char* value);
  inline void set_flag(const char* value, size_t size);
  inline ::std::string* mutable_flag();
  inline ::std::string* release_flag();
  inline void set_allocated_flag(::std::string* flag);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetHeadUrl)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetHeadUrl* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetNoviceCard : public ::google::protobuf::Message {
 public:
  CMD_GP_GetNoviceCard();
  virtual ~CMD_GP_GetNoviceCard();

  CMD_GP_GetNoviceCard(const CMD_GP_GetNoviceCard& from);

  inline CMD_GP_GetNoviceCard& operator=(const CMD_GP_GetNoviceCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetNoviceCard& default_instance();

  void Swap(CMD_GP_GetNoviceCard* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetNoviceCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetNoviceCard& from);
  void MergeFrom(const CMD_GP_GetNoviceCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required string Code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string Quota = 3;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 3;
  inline const ::std::string& quota() const;
  inline void set_quota(const ::std::string& value);
  inline void set_quota(const char* value);
  inline void set_quota(const char* value, size_t size);
  inline ::std::string* mutable_quota();
  inline ::std::string* release_quota();
  inline void set_allocated_quota(::std::string* quota);

  // optional string DurationTerm = 4;
  inline bool has_durationterm() const;
  inline void clear_durationterm();
  static const int kDurationTermFieldNumber = 4;
  inline const ::std::string& durationterm() const;
  inline void set_durationterm(const ::std::string& value);
  inline void set_durationterm(const char* value);
  inline void set_durationterm(const char* value, size_t size);
  inline ::std::string* mutable_durationterm();
  inline ::std::string* release_durationterm();
  inline void set_allocated_durationterm(::std::string* durationterm);

  // optional string CardDay = 5;
  inline bool has_cardday() const;
  inline void clear_cardday();
  static const int kCardDayFieldNumber = 5;
  inline const ::std::string& cardday() const;
  inline void set_cardday(const ::std::string& value);
  inline void set_cardday(const char* value);
  inline void set_cardday(const char* value, size_t size);
  inline ::std::string* mutable_cardday();
  inline ::std::string* release_cardday();
  inline void set_allocated_cardday(::std::string* cardday);

  // optional string CardState = 6;
  inline bool has_cardstate() const;
  inline void clear_cardstate();
  static const int kCardStateFieldNumber = 6;
  inline const ::std::string& cardstate() const;
  inline void set_cardstate(const ::std::string& value);
  inline void set_cardstate(const char* value);
  inline void set_cardstate(const char* value, size_t size);
  inline ::std::string* mutable_cardstate();
  inline ::std::string* release_cardstate();
  inline void set_allocated_cardstate(::std::string* cardstate);

  // optional string Denomination = 7;
  inline bool has_denomination() const;
  inline void clear_denomination();
  static const int kDenominationFieldNumber = 7;
  inline const ::std::string& denomination() const;
  inline void set_denomination(const ::std::string& value);
  inline void set_denomination(const char* value);
  inline void set_denomination(const char* value, size_t size);
  inline ::std::string* mutable_denomination();
  inline ::std::string* release_denomination();
  inline void set_allocated_denomination(::std::string* denomination);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetNoviceCard)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_durationterm();
  inline void clear_has_durationterm();
  inline void set_has_cardday();
  inline void clear_has_cardday();
  inline void set_has_cardstate();
  inline void clear_has_cardstate();
  inline void set_has_denomination();
  inline void clear_has_denomination();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::std::string* code_;
  ::std::string* quota_;
  ::std::string* durationterm_;
  ::std::string* cardday_;
  ::std::string* cardstate_;
  ::std::string* denomination_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetNoviceCard* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetActivityCard : public ::google::protobuf::Message {
 public:
  CMD_GP_GetActivityCard();
  virtual ~CMD_GP_GetActivityCard();

  CMD_GP_GetActivityCard(const CMD_GP_GetActivityCard& from);

  inline CMD_GP_GetActivityCard& operator=(const CMD_GP_GetActivityCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetActivityCard& default_instance();

  void Swap(CMD_GP_GetActivityCard* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetActivityCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetActivityCard& from);
  void MergeFrom(const CMD_GP_GetActivityCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required string Code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string Score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline const ::std::string& score() const;
  inline void set_score(const ::std::string& value);
  inline void set_score(const char* value);
  inline void set_score(const char* value, size_t size);
  inline ::std::string* mutable_score();
  inline ::std::string* release_score();
  inline void set_allocated_score(::std::string* score);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetActivityCard)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::std::string* code_;
  ::std::string* score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetActivityCard* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetReliefMoney : public ::google::protobuf::Message {
 public:
  CMD_GP_GetReliefMoney();
  virtual ~CMD_GP_GetReliefMoney();

  CMD_GP_GetReliefMoney(const CMD_GP_GetReliefMoney& from);

  inline CMD_GP_GetReliefMoney& operator=(const CMD_GP_GetReliefMoney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetReliefMoney& default_instance();

  void Swap(CMD_GP_GetReliefMoney* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetReliefMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetReliefMoney& from);
  void MergeFrom(const CMD_GP_GetReliefMoney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required string Code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string Score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline const ::std::string& score() const;
  inline void set_score(const ::std::string& value);
  inline void set_score(const char* value);
  inline void set_score(const char* value, size_t size);
  inline ::std::string* mutable_score();
  inline ::std::string* release_score();
  inline void set_allocated_score(::std::string* score);

  // optional string CountDown = 4;
  inline bool has_countdown() const;
  inline void clear_countdown();
  static const int kCountDownFieldNumber = 4;
  inline const ::std::string& countdown() const;
  inline void set_countdown(const ::std::string& value);
  inline void set_countdown(const char* value);
  inline void set_countdown(const char* value, size_t size);
  inline ::std::string* mutable_countdown();
  inline ::std::string* release_countdown();
  inline void set_allocated_countdown(::std::string* countdown);

  // optional string ReliefNum = 5;
  inline bool has_reliefnum() const;
  inline void clear_reliefnum();
  static const int kReliefNumFieldNumber = 5;
  inline const ::std::string& reliefnum() const;
  inline void set_reliefnum(const ::std::string& value);
  inline void set_reliefnum(const char* value);
  inline void set_reliefnum(const char* value, size_t size);
  inline ::std::string* mutable_reliefnum();
  inline ::std::string* release_reliefnum();
  inline void set_allocated_reliefnum(::std::string* reliefnum);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetReliefMoney)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_countdown();
  inline void clear_has_countdown();
  inline void set_has_reliefnum();
  inline void clear_has_reliefnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::std::string* code_;
  ::std::string* score_;
  ::std::string* countdown_;
  ::std::string* reliefnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetReliefMoney* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetPayPhone : public ::google::protobuf::Message {
 public:
  CMD_GP_GetPayPhone();
  virtual ~CMD_GP_GetPayPhone();

  CMD_GP_GetPayPhone(const CMD_GP_GetPayPhone& from);

  inline CMD_GP_GetPayPhone& operator=(const CMD_GP_GetPayPhone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetPayPhone& default_instance();

  void Swap(CMD_GP_GetPayPhone* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetPayPhone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetPayPhone& from);
  void MergeFrom(const CMD_GP_GetPayPhone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required string Code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string Award = 3;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 3;
  inline const ::std::string& award() const;
  inline void set_award(const ::std::string& value);
  inline void set_award(const char* value);
  inline void set_award(const char* value, size_t size);
  inline ::std::string* mutable_award();
  inline ::std::string* release_award();
  inline void set_allocated_award(::std::string* award);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetPayPhone)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_award();
  inline void clear_has_award();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::std::string* code_;
  ::std::string* award_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetPayPhone* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetAwardGold : public ::google::protobuf::Message {
 public:
  CMD_GP_GetAwardGold();
  virtual ~CMD_GP_GetAwardGold();

  CMD_GP_GetAwardGold(const CMD_GP_GetAwardGold& from);

  inline CMD_GP_GetAwardGold& operator=(const CMD_GP_GetAwardGold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetAwardGold& default_instance();

  void Swap(CMD_GP_GetAwardGold* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetAwardGold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetAwardGold& from);
  void MergeFrom(const CMD_GP_GetAwardGold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required string Code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string Award = 3;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 3;
  inline const ::std::string& award() const;
  inline void set_award(const ::std::string& value);
  inline void set_award(const char* value);
  inline void set_award(const char* value, size_t size);
  inline ::std::string* mutable_award();
  inline ::std::string* release_award();
  inline void set_allocated_award(::std::string* award);

  // optional string Gold = 4;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline const ::std::string& gold() const;
  inline void set_gold(const ::std::string& value);
  inline void set_gold(const char* value);
  inline void set_gold(const char* value, size_t size);
  inline ::std::string* mutable_gold();
  inline ::std::string* release_gold();
  inline void set_allocated_gold(::std::string* gold);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetAwardGold)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::std::string* code_;
  ::std::string* award_;
  ::std::string* gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetAwardGold* default_instance_;
};
// -------------------------------------------------------------------

class SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult : public ::google::protobuf::Message {
 public:
  SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult();
  virtual ~SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult();

  SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult(const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& from);

  inline SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& operator=(const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& default_instance();

  void Swap(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* other);

  // implements Message ----------------------------------------------

  SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& from);
  void MergeFrom(const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string Desc1 = 2;
  inline bool has_desc1() const;
  inline void clear_desc1();
  static const int kDesc1FieldNumber = 2;
  inline const ::std::string& desc1() const;
  inline void set_desc1(const ::std::string& value);
  inline void set_desc1(const char* value);
  inline void set_desc1(const char* value, size_t size);
  inline ::std::string* mutable_desc1();
  inline ::std::string* release_desc1();
  inline void set_allocated_desc1(::std::string* desc1);

  // required string Desc2 = 3;
  inline bool has_desc2() const;
  inline void clear_desc2();
  static const int kDesc2FieldNumber = 3;
  inline const ::std::string& desc2() const;
  inline void set_desc2(const ::std::string& value);
  inline void set_desc2(const char* value);
  inline void set_desc2(const char* value, size_t size);
  inline ::std::string* mutable_desc2();
  inline ::std::string* release_desc2();
  inline void set_allocated_desc2(::std::string* desc2);

  // required string Desc3 = 4;
  inline bool has_desc3() const;
  inline void clear_desc3();
  static const int kDesc3FieldNumber = 4;
  inline const ::std::string& desc3() const;
  inline void set_desc3(const ::std::string& value);
  inline void set_desc3(const char* value);
  inline void set_desc3(const char* value, size_t size);
  inline ::std::string* mutable_desc3();
  inline ::std::string* release_desc3();
  inline void set_allocated_desc3(::std::string* desc3);

  // required int32 Desc4 = 5;
  inline bool has_desc4() const;
  inline void clear_desc4();
  static const int kDesc4FieldNumber = 5;
  inline ::google::protobuf::int32 desc4() const;
  inline void set_desc4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SUB_GP_GetRechargeRecord.CMD_GP_RechargeRecordResult)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_desc1();
  inline void clear_has_desc1();
  inline void set_has_desc2();
  inline void clear_has_desc2();
  inline void set_has_desc3();
  inline void clear_has_desc3();
  inline void set_has_desc4();
  inline void clear_has_desc4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* desc1_;
  ::std::string* desc2_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 desc4_;
  ::std::string* desc3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* default_instance_;
};
// -------------------------------------------------------------------

class SUB_GP_GetRechargeRecord : public ::google::protobuf::Message {
 public:
  SUB_GP_GetRechargeRecord();
  virtual ~SUB_GP_GetRechargeRecord();

  SUB_GP_GetRechargeRecord(const SUB_GP_GetRechargeRecord& from);

  inline SUB_GP_GetRechargeRecord& operator=(const SUB_GP_GetRechargeRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUB_GP_GetRechargeRecord& default_instance();

  void Swap(SUB_GP_GetRechargeRecord* other);

  // implements Message ----------------------------------------------

  SUB_GP_GetRechargeRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUB_GP_GetRechargeRecord& from);
  void MergeFrom(const SUB_GP_GetRechargeRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult CMD_GP_RechargeRecordResult;

  // accessors -------------------------------------------------------

  // repeated .SUB_GP_GetRechargeRecord.CMD_GP_RechargeRecordResult rechargeRecordResult = 1;
  inline int rechargerecordresult_size() const;
  inline void clear_rechargerecordresult();
  static const int kRechargeRecordResultFieldNumber = 1;
  inline const ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& rechargerecordresult(int index) const;
  inline ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* mutable_rechargerecordresult(int index);
  inline ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* add_rechargerecordresult();
  inline const ::google::protobuf::RepeatedPtrField< ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult >&
      rechargerecordresult() const;
  inline ::google::protobuf::RepeatedPtrField< ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult >*
      mutable_rechargerecordresult();

  // @@protoc_insertion_point(class_scope:SUB_GP_GetRechargeRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult > rechargerecordresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static SUB_GP_GetRechargeRecord* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetMonthlyCardScore : public ::google::protobuf::Message {
 public:
  CMD_GP_GetMonthlyCardScore();
  virtual ~CMD_GP_GetMonthlyCardScore();

  CMD_GP_GetMonthlyCardScore(const CMD_GP_GetMonthlyCardScore& from);

  inline CMD_GP_GetMonthlyCardScore& operator=(const CMD_GP_GetMonthlyCardScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetMonthlyCardScore& default_instance();

  void Swap(CMD_GP_GetMonthlyCardScore* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetMonthlyCardScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetMonthlyCardScore& from);
  void MergeFrom(const CMD_GP_GetMonthlyCardScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline const ::std::string& flag() const;
  inline void set_flag(const ::std::string& value);
  inline void set_flag(const char* value);
  inline void set_flag(const char* value, size_t size);
  inline ::std::string* mutable_flag();
  inline ::std::string* release_flag();
  inline void set_allocated_flag(::std::string* flag);

  // optional string Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline const ::std::string& score() const;
  inline void set_score(const ::std::string& value);
  inline void set_score(const char* value);
  inline void set_score(const char* value, size_t size);
  inline ::std::string* mutable_score();
  inline ::std::string* release_score();
  inline void set_allocated_score(::std::string* score);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetMonthlyCardScore)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* flag_;
  ::std::string* score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetMonthlyCardScore* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_SendPhoneSms : public ::google::protobuf::Message {
 public:
  CMD_GP_SendPhoneSms();
  virtual ~CMD_GP_SendPhoneSms();

  CMD_GP_SendPhoneSms(const CMD_GP_SendPhoneSms& from);

  inline CMD_GP_SendPhoneSms& operator=(const CMD_GP_SendPhoneSms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_SendPhoneSms& default_instance();

  void Swap(CMD_GP_SendPhoneSms* other);

  // implements Message ----------------------------------------------

  CMD_GP_SendPhoneSms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_SendPhoneSms& from);
  void MergeFrom(const CMD_GP_SendPhoneSms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string MsgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline const ::std::string& msgid() const;
  inline void set_msgid(const ::std::string& value);
  inline void set_msgid(const char* value);
  inline void set_msgid(const char* value, size_t size);
  inline ::std::string* mutable_msgid();
  inline ::std::string* release_msgid();
  inline void set_allocated_msgid(::std::string* msgid);

  // required string Msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:CMD_GP_SendPhoneSms)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgid_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_SendPhoneSms* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_PhoneBanding : public ::google::protobuf::Message {
 public:
  CMD_GP_PhoneBanding();
  virtual ~CMD_GP_PhoneBanding();

  CMD_GP_PhoneBanding(const CMD_GP_PhoneBanding& from);

  inline CMD_GP_PhoneBanding& operator=(const CMD_GP_PhoneBanding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_PhoneBanding& default_instance();

  void Swap(CMD_GP_PhoneBanding* other);

  // implements Message ----------------------------------------------

  CMD_GP_PhoneBanding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_PhoneBanding& from);
  void MergeFrom(const CMD_GP_PhoneBanding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline const ::std::string& success() const;
  inline void set_success(const ::std::string& value);
  inline void set_success(const char* value);
  inline void set_success(const char* value, size_t size);
  inline ::std::string* mutable_success();
  inline ::std::string* release_success();
  inline void set_allocated_success(::std::string* success);

  // required string Msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:CMD_GP_PhoneBanding)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* success_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_PhoneBanding* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_ResetSafePwd : public ::google::protobuf::Message {
 public:
  CMD_GP_ResetSafePwd();
  virtual ~CMD_GP_ResetSafePwd();

  CMD_GP_ResetSafePwd(const CMD_GP_ResetSafePwd& from);

  inline CMD_GP_ResetSafePwd& operator=(const CMD_GP_ResetSafePwd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_ResetSafePwd& default_instance();

  void Swap(CMD_GP_ResetSafePwd* other);

  // implements Message ----------------------------------------------

  CMD_GP_ResetSafePwd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_ResetSafePwd& from);
  void MergeFrom(const CMD_GP_ResetSafePwd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline const ::std::string& success() const;
  inline void set_success(const ::std::string& value);
  inline void set_success(const char* value);
  inline void set_success(const char* value, size_t size);
  inline ::std::string* mutable_success();
  inline ::std::string* release_success();
  inline void set_allocated_success(::std::string* success);

  // required string Msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:CMD_GP_ResetSafePwd)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* success_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_ResetSafePwd* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_RealNameAuthentication : public ::google::protobuf::Message {
 public:
  CMD_GP_RealNameAuthentication();
  virtual ~CMD_GP_RealNameAuthentication();

  CMD_GP_RealNameAuthentication(const CMD_GP_RealNameAuthentication& from);

  inline CMD_GP_RealNameAuthentication& operator=(const CMD_GP_RealNameAuthentication& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_RealNameAuthentication& default_instance();

  void Swap(CMD_GP_RealNameAuthentication* other);

  // implements Message ----------------------------------------------

  CMD_GP_RealNameAuthentication* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_RealNameAuthentication& from);
  void MergeFrom(const CMD_GP_RealNameAuthentication& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline const ::std::string& success() const;
  inline void set_success(const ::std::string& value);
  inline void set_success(const char* value);
  inline void set_success(const char* value, size_t size);
  inline ::std::string* mutable_success();
  inline ::std::string* release_success();
  inline void set_allocated_success(::std::string* success);

  // required string Msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:CMD_GP_RealNameAuthentication)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* success_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_RealNameAuthentication* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetNickName : public ::google::protobuf::Message {
 public:
  CMD_GP_GetNickName();
  virtual ~CMD_GP_GetNickName();

  CMD_GP_GetNickName(const CMD_GP_GetNickName& from);

  inline CMD_GP_GetNickName& operator=(const CMD_GP_GetNickName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetNickName& default_instance();

  void Swap(CMD_GP_GetNickName* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetNickName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetNickName& from);
  void MergeFrom(const CMD_GP_GetNickName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string NickName = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetNickName)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetNickName* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_LuckDraw : public ::google::protobuf::Message {
 public:
  CMD_GP_LuckDraw();
  virtual ~CMD_GP_LuckDraw();

  CMD_GP_LuckDraw(const CMD_GP_LuckDraw& from);

  inline CMD_GP_LuckDraw& operator=(const CMD_GP_LuckDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_LuckDraw& default_instance();

  void Swap(CMD_GP_LuckDraw* other);

  // implements Message ----------------------------------------------

  CMD_GP_LuckDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_LuckDraw& from);
  void MergeFrom(const CMD_GP_LuckDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string prize = 2;
  inline bool has_prize() const;
  inline void clear_prize();
  static const int kPrizeFieldNumber = 2;
  inline const ::std::string& prize() const;
  inline void set_prize(const ::std::string& value);
  inline void set_prize(const char* value);
  inline void set_prize(const char* value, size_t size);
  inline ::std::string* mutable_prize();
  inline ::std::string* release_prize();
  inline void set_allocated_prize(::std::string* prize);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:CMD_GP_LuckDraw)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_prize();
  inline void clear_has_prize();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::std::string* prize_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_LuckDraw* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_ReceiveNovicePack : public ::google::protobuf::Message {
 public:
  CMD_GP_ReceiveNovicePack();
  virtual ~CMD_GP_ReceiveNovicePack();

  CMD_GP_ReceiveNovicePack(const CMD_GP_ReceiveNovicePack& from);

  inline CMD_GP_ReceiveNovicePack& operator=(const CMD_GP_ReceiveNovicePack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_ReceiveNovicePack& default_instance();

  void Swap(CMD_GP_ReceiveNovicePack* other);

  // implements Message ----------------------------------------------

  CMD_GP_ReceiveNovicePack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_ReceiveNovicePack& from);
  void MergeFrom(const CMD_GP_ReceiveNovicePack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional string mount = 3;
  inline bool has_mount() const;
  inline void clear_mount();
  static const int kMountFieldNumber = 3;
  inline const ::std::string& mount() const;
  inline void set_mount(const ::std::string& value);
  inline void set_mount(const char* value);
  inline void set_mount(const char* value, size_t size);
  inline ::std::string* mutable_mount();
  inline ::std::string* release_mount();
  inline void set_allocated_mount(::std::string* mount);

  // optional string totalAmount = 4;
  inline bool has_totalamount() const;
  inline void clear_totalamount();
  static const int kTotalAmountFieldNumber = 4;
  inline const ::std::string& totalamount() const;
  inline void set_totalamount(const ::std::string& value);
  inline void set_totalamount(const char* value);
  inline void set_totalamount(const char* value, size_t size);
  inline ::std::string* mutable_totalamount();
  inline ::std::string* release_totalamount();
  inline void set_allocated_totalamount(::std::string* totalamount);

  // @@protoc_insertion_point(class_scope:CMD_GP_ReceiveNovicePack)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_mount();
  inline void clear_has_mount();
  inline void set_has_totalamount();
  inline void clear_has_totalamount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::std::string* msg_;
  ::std::string* mount_;
  ::std::string* totalamount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_ReceiveNovicePack* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_GetRechargeCaseBag : public ::google::protobuf::Message {
 public:
  CMD_GP_GetRechargeCaseBag();
  virtual ~CMD_GP_GetRechargeCaseBag();

  CMD_GP_GetRechargeCaseBag(const CMD_GP_GetRechargeCaseBag& from);

  inline CMD_GP_GetRechargeCaseBag& operator=(const CMD_GP_GetRechargeCaseBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_GetRechargeCaseBag& default_instance();

  void Swap(CMD_GP_GetRechargeCaseBag* other);

  // implements Message ----------------------------------------------

  CMD_GP_GetRechargeCaseBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_GetRechargeCaseBag& from);
  void MergeFrom(const CMD_GP_GetRechargeCaseBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:CMD_GP_GetRechargeCaseBag)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_GetRechargeCaseBag* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GP_BoxConversion : public ::google::protobuf::Message {
 public:
  CMD_GP_BoxConversion();
  virtual ~CMD_GP_BoxConversion();

  CMD_GP_BoxConversion(const CMD_GP_BoxConversion& from);

  inline CMD_GP_BoxConversion& operator=(const CMD_GP_BoxConversion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMD_GP_BoxConversion& default_instance();

  void Swap(CMD_GP_BoxConversion* other);

  // implements Message ----------------------------------------------

  CMD_GP_BoxConversion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMD_GP_BoxConversion& from);
  void MergeFrom(const CMD_GP_BoxConversion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:CMD_GP_BoxConversion)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_GP_BoxConversion* default_instance_;
};
// ===================================================================


// ===================================================================

// CMD_GR_S_PropertySuccess

// optional int32 cbRequestArea = 1;
inline bool CMD_GR_S_PropertySuccess::has_cbrequestarea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_S_PropertySuccess::set_has_cbrequestarea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_S_PropertySuccess::clear_has_cbrequestarea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_S_PropertySuccess::clear_cbrequestarea() {
  cbrequestarea_ = 0;
  clear_has_cbrequestarea();
}
inline ::google::protobuf::int32 CMD_GR_S_PropertySuccess::cbrequestarea() const {
  return cbrequestarea_;
}
inline void CMD_GR_S_PropertySuccess::set_cbrequestarea(::google::protobuf::int32 value) {
  set_has_cbrequestarea();
  cbrequestarea_ = value;
}

// optional int32 wItemCount = 2;
inline bool CMD_GR_S_PropertySuccess::has_witemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_S_PropertySuccess::set_has_witemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_S_PropertySuccess::clear_has_witemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_S_PropertySuccess::clear_witemcount() {
  witemcount_ = 0;
  clear_has_witemcount();
}
inline ::google::protobuf::int32 CMD_GR_S_PropertySuccess::witemcount() const {
  return witemcount_;
}
inline void CMD_GR_S_PropertySuccess::set_witemcount(::google::protobuf::int32 value) {
  set_has_witemcount();
  witemcount_ = value;
}

// optional int32 wPropertyIndex = 3;
inline bool CMD_GR_S_PropertySuccess::has_wpropertyindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GR_S_PropertySuccess::set_has_wpropertyindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GR_S_PropertySuccess::clear_has_wpropertyindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GR_S_PropertySuccess::clear_wpropertyindex() {
  wpropertyindex_ = 0;
  clear_has_wpropertyindex();
}
inline ::google::protobuf::int32 CMD_GR_S_PropertySuccess::wpropertyindex() const {
  return wpropertyindex_;
}
inline void CMD_GR_S_PropertySuccess::set_wpropertyindex(::google::protobuf::int32 value) {
  set_has_wpropertyindex();
  wpropertyindex_ = value;
}

// required int32 dwSourceUserID = 4;
inline bool CMD_GR_S_PropertySuccess::has_dwsourceuserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GR_S_PropertySuccess::set_has_dwsourceuserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GR_S_PropertySuccess::clear_has_dwsourceuserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GR_S_PropertySuccess::clear_dwsourceuserid() {
  dwsourceuserid_ = 0;
  clear_has_dwsourceuserid();
}
inline ::google::protobuf::int32 CMD_GR_S_PropertySuccess::dwsourceuserid() const {
  return dwsourceuserid_;
}
inline void CMD_GR_S_PropertySuccess::set_dwsourceuserid(::google::protobuf::int32 value) {
  set_has_dwsourceuserid();
  dwsourceuserid_ = value;
}

// required int32 dwTargetUserID = 5;
inline bool CMD_GR_S_PropertySuccess::has_dwtargetuserid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GR_S_PropertySuccess::set_has_dwtargetuserid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GR_S_PropertySuccess::clear_has_dwtargetuserid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GR_S_PropertySuccess::clear_dwtargetuserid() {
  dwtargetuserid_ = 0;
  clear_has_dwtargetuserid();
}
inline ::google::protobuf::int32 CMD_GR_S_PropertySuccess::dwtargetuserid() const {
  return dwtargetuserid_;
}
inline void CMD_GR_S_PropertySuccess::set_dwtargetuserid(::google::protobuf::int32 value) {
  set_has_dwtargetuserid();
  dwtargetuserid_ = value;
}

// optional int32 dwLoveLess = 6;
inline bool CMD_GR_S_PropertySuccess::has_dwloveless() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GR_S_PropertySuccess::set_has_dwloveless() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GR_S_PropertySuccess::clear_has_dwloveless() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GR_S_PropertySuccess::clear_dwloveless() {
  dwloveless_ = 0;
  clear_has_dwloveless();
}
inline ::google::protobuf::int32 CMD_GR_S_PropertySuccess::dwloveless() const {
  return dwloveless_;
}
inline void CMD_GR_S_PropertySuccess::set_dwloveless(::google::protobuf::int32 value) {
  set_has_dwloveless();
  dwloveless_ = value;
}

// optional string szTargetNickName = 7;
inline bool CMD_GR_S_PropertySuccess::has_sztargetnickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GR_S_PropertySuccess::set_has_sztargetnickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GR_S_PropertySuccess::clear_has_sztargetnickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GR_S_PropertySuccess::clear_sztargetnickname() {
  if (sztargetnickname_ != &::google::protobuf::internal::kEmptyString) {
    sztargetnickname_->clear();
  }
  clear_has_sztargetnickname();
}
inline const ::std::string& CMD_GR_S_PropertySuccess::sztargetnickname() const {
  return *sztargetnickname_;
}
inline void CMD_GR_S_PropertySuccess::set_sztargetnickname(const ::std::string& value) {
  set_has_sztargetnickname();
  if (sztargetnickname_ == &::google::protobuf::internal::kEmptyString) {
    sztargetnickname_ = new ::std::string;
  }
  sztargetnickname_->assign(value);
}
inline void CMD_GR_S_PropertySuccess::set_sztargetnickname(const char* value) {
  set_has_sztargetnickname();
  if (sztargetnickname_ == &::google::protobuf::internal::kEmptyString) {
    sztargetnickname_ = new ::std::string;
  }
  sztargetnickname_->assign(value);
}
inline void CMD_GR_S_PropertySuccess::set_sztargetnickname(const char* value, size_t size) {
  set_has_sztargetnickname();
  if (sztargetnickname_ == &::google::protobuf::internal::kEmptyString) {
    sztargetnickname_ = new ::std::string;
  }
  sztargetnickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GR_S_PropertySuccess::mutable_sztargetnickname() {
  set_has_sztargetnickname();
  if (sztargetnickname_ == &::google::protobuf::internal::kEmptyString) {
    sztargetnickname_ = new ::std::string;
  }
  return sztargetnickname_;
}
inline ::std::string* CMD_GR_S_PropertySuccess::release_sztargetnickname() {
  clear_has_sztargetnickname();
  if (sztargetnickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sztargetnickname_;
    sztargetnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GR_S_PropertySuccess::set_allocated_sztargetnickname(::std::string* sztargetnickname) {
  if (sztargetnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sztargetnickname_;
  }
  if (sztargetnickname) {
    set_has_sztargetnickname();
    sztargetnickname_ = sztargetnickname;
  } else {
    clear_has_sztargetnickname();
    sztargetnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResultFailure

// optional int32 wRequestArea = 1;
inline bool ResultFailure::has_wrequestarea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultFailure::set_has_wrequestarea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultFailure::clear_has_wrequestarea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultFailure::clear_wrequestarea() {
  wrequestarea_ = 0;
  clear_has_wrequestarea();
}
inline ::google::protobuf::int32 ResultFailure::wrequestarea() const {
  return wrequestarea_;
}
inline void ResultFailure::set_wrequestarea(::google::protobuf::int32 value) {
  set_has_wrequestarea();
  wrequestarea_ = value;
}

// required int32 lErrorCode = 2;
inline bool ResultFailure::has_lerrorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResultFailure::set_has_lerrorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResultFailure::clear_has_lerrorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResultFailure::clear_lerrorcode() {
  lerrorcode_ = 0;
  clear_has_lerrorcode();
}
inline ::google::protobuf::int32 ResultFailure::lerrorcode() const {
  return lerrorcode_;
}
inline void ResultFailure::set_lerrorcode(::google::protobuf::int32 value) {
  set_has_lerrorcode();
  lerrorcode_ = value;
}

// required string szDescribeString = 3;
inline bool ResultFailure::has_szdescribestring() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResultFailure::set_has_szdescribestring() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResultFailure::clear_has_szdescribestring() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResultFailure::clear_szdescribestring() {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    szdescribestring_->clear();
  }
  clear_has_szdescribestring();
}
inline const ::std::string& ResultFailure::szdescribestring() const {
  return *szdescribestring_;
}
inline void ResultFailure::set_szdescribestring(const ::std::string& value) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(value);
}
inline void ResultFailure::set_szdescribestring(const char* value) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(value);
}
inline void ResultFailure::set_szdescribestring(const char* value, size_t size) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResultFailure::mutable_szdescribestring() {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  return szdescribestring_;
}
inline ::std::string* ResultFailure::release_szdescribestring() {
  clear_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szdescribestring_;
    szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResultFailure::set_allocated_szdescribestring(::std::string* szdescribestring) {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    delete szdescribestring_;
  }
  if (szdescribestring) {
    set_has_szdescribestring();
    szdescribestring_ = szdescribestring;
  } else {
    clear_has_szdescribestring();
    szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_UserInsureSuccess

// required int32 dwUserID = 1;
inline bool CMD_GP_UserInsureSuccess::has_dwuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_UserInsureSuccess::set_has_dwuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_UserInsureSuccess::clear_has_dwuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_UserInsureSuccess::clear_dwuserid() {
  dwuserid_ = 0;
  clear_has_dwuserid();
}
inline ::google::protobuf::int32 CMD_GP_UserInsureSuccess::dwuserid() const {
  return dwuserid_;
}
inline void CMD_GP_UserInsureSuccess::set_dwuserid(::google::protobuf::int32 value) {
  set_has_dwuserid();
  dwuserid_ = value;
}

// required int64 lUserScore = 2;
inline bool CMD_GP_UserInsureSuccess::has_luserscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_UserInsureSuccess::set_has_luserscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_UserInsureSuccess::clear_has_luserscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_UserInsureSuccess::clear_luserscore() {
  luserscore_ = GOOGLE_LONGLONG(0);
  clear_has_luserscore();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureSuccess::luserscore() const {
  return luserscore_;
}
inline void CMD_GP_UserInsureSuccess::set_luserscore(::google::protobuf::int64 value) {
  set_has_luserscore();
  luserscore_ = value;
}

// required int64 lUserInsure = 3;
inline bool CMD_GP_UserInsureSuccess::has_luserinsure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_UserInsureSuccess::set_has_luserinsure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_UserInsureSuccess::clear_has_luserinsure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_UserInsureSuccess::clear_luserinsure() {
  luserinsure_ = GOOGLE_LONGLONG(0);
  clear_has_luserinsure();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureSuccess::luserinsure() const {
  return luserinsure_;
}
inline void CMD_GP_UserInsureSuccess::set_luserinsure(::google::protobuf::int64 value) {
  set_has_luserinsure();
  luserinsure_ = value;
}

// required string szDescribeString = 4;
inline bool CMD_GP_UserInsureSuccess::has_szdescribestring() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_UserInsureSuccess::set_has_szdescribestring() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_UserInsureSuccess::clear_has_szdescribestring() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_UserInsureSuccess::clear_szdescribestring() {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    szdescribestring_->clear();
  }
  clear_has_szdescribestring();
}
inline const ::std::string& CMD_GP_UserInsureSuccess::szdescribestring() const {
  return *szdescribestring_;
}
inline void CMD_GP_UserInsureSuccess::set_szdescribestring(const ::std::string& value) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(value);
}
inline void CMD_GP_UserInsureSuccess::set_szdescribestring(const char* value) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(value);
}
inline void CMD_GP_UserInsureSuccess::set_szdescribestring(const char* value, size_t size) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_UserInsureSuccess::mutable_szdescribestring() {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  return szdescribestring_;
}
inline ::std::string* CMD_GP_UserInsureSuccess::release_szdescribestring() {
  clear_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szdescribestring_;
    szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_UserInsureSuccess::set_allocated_szdescribestring(::std::string* szdescribestring) {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    delete szdescribestring_;
  }
  if (szdescribestring) {
    set_has_szdescribestring();
    szdescribestring_ = szdescribestring;
  } else {
    clear_has_szdescribestring();
    szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_UserInsureInfo

// required int32 wRevenueTake = 1;
inline bool CMD_GP_UserInsureInfo::has_wrevenuetake() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_wrevenuetake() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_UserInsureInfo::clear_has_wrevenuetake() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_UserInsureInfo::clear_wrevenuetake() {
  wrevenuetake_ = 0;
  clear_has_wrevenuetake();
}
inline ::google::protobuf::int32 CMD_GP_UserInsureInfo::wrevenuetake() const {
  return wrevenuetake_;
}
inline void CMD_GP_UserInsureInfo::set_wrevenuetake(::google::protobuf::int32 value) {
  set_has_wrevenuetake();
  wrevenuetake_ = value;
}

// required int32 wRevenueTransfer = 2;
inline bool CMD_GP_UserInsureInfo::has_wrevenuetransfer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_wrevenuetransfer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_UserInsureInfo::clear_has_wrevenuetransfer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_UserInsureInfo::clear_wrevenuetransfer() {
  wrevenuetransfer_ = 0;
  clear_has_wrevenuetransfer();
}
inline ::google::protobuf::int32 CMD_GP_UserInsureInfo::wrevenuetransfer() const {
  return wrevenuetransfer_;
}
inline void CMD_GP_UserInsureInfo::set_wrevenuetransfer(::google::protobuf::int32 value) {
  set_has_wrevenuetransfer();
  wrevenuetransfer_ = value;
}

// required int32 wServerID = 3;
inline bool CMD_GP_UserInsureInfo::has_wserverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_wserverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_UserInsureInfo::clear_has_wserverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_UserInsureInfo::clear_wserverid() {
  wserverid_ = 0;
  clear_has_wserverid();
}
inline ::google::protobuf::int32 CMD_GP_UserInsureInfo::wserverid() const {
  return wserverid_;
}
inline void CMD_GP_UserInsureInfo::set_wserverid(::google::protobuf::int32 value) {
  set_has_wserverid();
  wserverid_ = value;
}

// required int32 wMemberOrder = 4;
inline bool CMD_GP_UserInsureInfo::has_wmemberorder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_wmemberorder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_UserInsureInfo::clear_has_wmemberorder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_UserInsureInfo::clear_wmemberorder() {
  wmemberorder_ = 0;
  clear_has_wmemberorder();
}
inline ::google::protobuf::int32 CMD_GP_UserInsureInfo::wmemberorder() const {
  return wmemberorder_;
}
inline void CMD_GP_UserInsureInfo::set_wmemberorder(::google::protobuf::int32 value) {
  set_has_wmemberorder();
  wmemberorder_ = value;
}

// required int64 lUserScore = 5;
inline bool CMD_GP_UserInsureInfo::has_luserscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_luserscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_UserInsureInfo::clear_has_luserscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_UserInsureInfo::clear_luserscore() {
  luserscore_ = GOOGLE_LONGLONG(0);
  clear_has_luserscore();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureInfo::luserscore() const {
  return luserscore_;
}
inline void CMD_GP_UserInsureInfo::set_luserscore(::google::protobuf::int64 value) {
  set_has_luserscore();
  luserscore_ = value;
}

// required int64 lUserInsure = 6;
inline bool CMD_GP_UserInsureInfo::has_luserinsure() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_luserinsure() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GP_UserInsureInfo::clear_has_luserinsure() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GP_UserInsureInfo::clear_luserinsure() {
  luserinsure_ = GOOGLE_LONGLONG(0);
  clear_has_luserinsure();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureInfo::luserinsure() const {
  return luserinsure_;
}
inline void CMD_GP_UserInsureInfo::set_luserinsure(::google::protobuf::int64 value) {
  set_has_luserinsure();
  luserinsure_ = value;
}

// required int64 lTransferPrerequisite = 7;
inline bool CMD_GP_UserInsureInfo::has_ltransferprerequisite() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_ltransferprerequisite() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GP_UserInsureInfo::clear_has_ltransferprerequisite() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GP_UserInsureInfo::clear_ltransferprerequisite() {
  ltransferprerequisite_ = GOOGLE_LONGLONG(0);
  clear_has_ltransferprerequisite();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureInfo::ltransferprerequisite() const {
  return ltransferprerequisite_;
}
inline void CMD_GP_UserInsureInfo::set_ltransferprerequisite(::google::protobuf::int64 value) {
  set_has_ltransferprerequisite();
  ltransferprerequisite_ = value;
}

// required int64 lLoveNess = 8;
inline bool CMD_GP_UserInsureInfo::has_lloveness() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_lloveness() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_GP_UserInsureInfo::clear_has_lloveness() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_GP_UserInsureInfo::clear_lloveness() {
  lloveness_ = GOOGLE_LONGLONG(0);
  clear_has_lloveness();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureInfo::lloveness() const {
  return lloveness_;
}
inline void CMD_GP_UserInsureInfo::set_lloveness(::google::protobuf::int64 value) {
  set_has_lloveness();
  lloveness_ = value;
}

// required int64 MeiliDuihuanRatio = 9;
inline bool CMD_GP_UserInsureInfo::has_meiliduihuanratio() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_meiliduihuanratio() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_GP_UserInsureInfo::clear_has_meiliduihuanratio() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_GP_UserInsureInfo::clear_meiliduihuanratio() {
  meiliduihuanratio_ = GOOGLE_LONGLONG(0);
  clear_has_meiliduihuanratio();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureInfo::meiliduihuanratio() const {
  return meiliduihuanratio_;
}
inline void CMD_GP_UserInsureInfo::set_meiliduihuanratio(::google::protobuf::int64 value) {
  set_has_meiliduihuanratio();
  meiliduihuanratio_ = value;
}

// required int64 MeiliDuihuanMax = 10;
inline bool CMD_GP_UserInsureInfo::has_meiliduihuanmax() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_meiliduihuanmax() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_GP_UserInsureInfo::clear_has_meiliduihuanmax() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_GP_UserInsureInfo::clear_meiliduihuanmax() {
  meiliduihuanmax_ = GOOGLE_LONGLONG(0);
  clear_has_meiliduihuanmax();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureInfo::meiliduihuanmax() const {
  return meiliduihuanmax_;
}
inline void CMD_GP_UserInsureInfo::set_meiliduihuanmax(::google::protobuf::int64 value) {
  set_has_meiliduihuanmax();
  meiliduihuanmax_ = value;
}

// required int64 MeiliDuihuanDailyCount = 11;
inline bool CMD_GP_UserInsureInfo::has_meiliduihuandailycount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_meiliduihuandailycount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMD_GP_UserInsureInfo::clear_has_meiliduihuandailycount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMD_GP_UserInsureInfo::clear_meiliduihuandailycount() {
  meiliduihuandailycount_ = GOOGLE_LONGLONG(0);
  clear_has_meiliduihuandailycount();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureInfo::meiliduihuandailycount() const {
  return meiliduihuandailycount_;
}
inline void CMD_GP_UserInsureInfo::set_meiliduihuandailycount(::google::protobuf::int64 value) {
  set_has_meiliduihuandailycount();
  meiliduihuandailycount_ = value;
}

// required int64 DailyDuihuanCount = 12;
inline bool CMD_GP_UserInsureInfo::has_dailyduihuancount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMD_GP_UserInsureInfo::set_has_dailyduihuancount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMD_GP_UserInsureInfo::clear_has_dailyduihuancount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMD_GP_UserInsureInfo::clear_dailyduihuancount() {
  dailyduihuancount_ = GOOGLE_LONGLONG(0);
  clear_has_dailyduihuancount();
}
inline ::google::protobuf::int64 CMD_GP_UserInsureInfo::dailyduihuancount() const {
  return dailyduihuancount_;
}
inline void CMD_GP_UserInsureInfo::set_dailyduihuancount(::google::protobuf::int64 value) {
  set_has_dailyduihuancount();
  dailyduihuancount_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_OperateSuccess

// required int32 lResultCode = 1;
inline bool CMD_GP_OperateSuccess::has_lresultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_OperateSuccess::set_has_lresultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_OperateSuccess::clear_has_lresultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_OperateSuccess::clear_lresultcode() {
  lresultcode_ = 0;
  clear_has_lresultcode();
}
inline ::google::protobuf::int32 CMD_GP_OperateSuccess::lresultcode() const {
  return lresultcode_;
}
inline void CMD_GP_OperateSuccess::set_lresultcode(::google::protobuf::int32 value) {
  set_has_lresultcode();
  lresultcode_ = value;
}

// required string szDescribeString = 2;
inline bool CMD_GP_OperateSuccess::has_szdescribestring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_OperateSuccess::set_has_szdescribestring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_OperateSuccess::clear_has_szdescribestring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_OperateSuccess::clear_szdescribestring() {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    szdescribestring_->clear();
  }
  clear_has_szdescribestring();
}
inline const ::std::string& CMD_GP_OperateSuccess::szdescribestring() const {
  return *szdescribestring_;
}
inline void CMD_GP_OperateSuccess::set_szdescribestring(const ::std::string& value) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(value);
}
inline void CMD_GP_OperateSuccess::set_szdescribestring(const char* value) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(value);
}
inline void CMD_GP_OperateSuccess::set_szdescribestring(const char* value, size_t size) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_OperateSuccess::mutable_szdescribestring() {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  return szdescribestring_;
}
inline ::std::string* CMD_GP_OperateSuccess::release_szdescribestring() {
  clear_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szdescribestring_;
    szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_OperateSuccess::set_allocated_szdescribestring(::std::string* szdescribestring) {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    delete szdescribestring_;
  }
  if (szdescribestring) {
    set_has_szdescribestring();
    szdescribestring_ = szdescribestring;
  } else {
    clear_has_szdescribestring();
    szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_MeiliDuihuanSuccess

// required int32 dwUserID = 1;
inline bool CMD_GP_MeiliDuihuanSuccess::has_dwuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_MeiliDuihuanSuccess::set_has_dwuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_MeiliDuihuanSuccess::clear_has_dwuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_MeiliDuihuanSuccess::clear_dwuserid() {
  dwuserid_ = 0;
  clear_has_dwuserid();
}
inline ::google::protobuf::int32 CMD_GP_MeiliDuihuanSuccess::dwuserid() const {
  return dwuserid_;
}
inline void CMD_GP_MeiliDuihuanSuccess::set_dwuserid(::google::protobuf::int32 value) {
  set_has_dwuserid();
  dwuserid_ = value;
}

// required int64 lUserScore = 2;
inline bool CMD_GP_MeiliDuihuanSuccess::has_luserscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_MeiliDuihuanSuccess::set_has_luserscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_MeiliDuihuanSuccess::clear_has_luserscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_MeiliDuihuanSuccess::clear_luserscore() {
  luserscore_ = GOOGLE_LONGLONG(0);
  clear_has_luserscore();
}
inline ::google::protobuf::int64 CMD_GP_MeiliDuihuanSuccess::luserscore() const {
  return luserscore_;
}
inline void CMD_GP_MeiliDuihuanSuccess::set_luserscore(::google::protobuf::int64 value) {
  set_has_luserscore();
  luserscore_ = value;
}

// required int64 lUserLoveness = 3;
inline bool CMD_GP_MeiliDuihuanSuccess::has_luserloveness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_MeiliDuihuanSuccess::set_has_luserloveness() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_MeiliDuihuanSuccess::clear_has_luserloveness() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_MeiliDuihuanSuccess::clear_luserloveness() {
  luserloveness_ = GOOGLE_LONGLONG(0);
  clear_has_luserloveness();
}
inline ::google::protobuf::int64 CMD_GP_MeiliDuihuanSuccess::luserloveness() const {
  return luserloveness_;
}
inline void CMD_GP_MeiliDuihuanSuccess::set_luserloveness(::google::protobuf::int64 value) {
  set_has_luserloveness();
  luserloveness_ = value;
}

// required string szDescribeString = 4;
inline bool CMD_GP_MeiliDuihuanSuccess::has_szdescribestring() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_MeiliDuihuanSuccess::set_has_szdescribestring() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_MeiliDuihuanSuccess::clear_has_szdescribestring() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_MeiliDuihuanSuccess::clear_szdescribestring() {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    szdescribestring_->clear();
  }
  clear_has_szdescribestring();
}
inline const ::std::string& CMD_GP_MeiliDuihuanSuccess::szdescribestring() const {
  return *szdescribestring_;
}
inline void CMD_GP_MeiliDuihuanSuccess::set_szdescribestring(const ::std::string& value) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(value);
}
inline void CMD_GP_MeiliDuihuanSuccess::set_szdescribestring(const char* value) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(value);
}
inline void CMD_GP_MeiliDuihuanSuccess::set_szdescribestring(const char* value, size_t size) {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  szdescribestring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_MeiliDuihuanSuccess::mutable_szdescribestring() {
  set_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    szdescribestring_ = new ::std::string;
  }
  return szdescribestring_;
}
inline ::std::string* CMD_GP_MeiliDuihuanSuccess::release_szdescribestring() {
  clear_has_szdescribestring();
  if (szdescribestring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szdescribestring_;
    szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_MeiliDuihuanSuccess::set_allocated_szdescribestring(::std::string* szdescribestring) {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    delete szdescribestring_;
  }
  if (szdescribestring) {
    set_has_szdescribestring();
    szdescribestring_ = szdescribestring;
  } else {
    clear_has_szdescribestring();
    szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GiftBag

// optional int32 giftBag1 = 1;
inline bool GiftBag::has_giftbag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiftBag::set_has_giftbag1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiftBag::clear_has_giftbag1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiftBag::clear_giftbag1() {
  giftbag1_ = 0;
  clear_has_giftbag1();
}
inline ::google::protobuf::int32 GiftBag::giftbag1() const {
  return giftbag1_;
}
inline void GiftBag::set_giftbag1(::google::protobuf::int32 value) {
  set_has_giftbag1();
  giftbag1_ = value;
}

// optional int32 giftBag2 = 2;
inline bool GiftBag::has_giftbag2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiftBag::set_has_giftbag2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiftBag::clear_has_giftbag2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiftBag::clear_giftbag2() {
  giftbag2_ = 0;
  clear_has_giftbag2();
}
inline ::google::protobuf::int32 GiftBag::giftbag2() const {
  return giftbag2_;
}
inline void GiftBag::set_giftbag2(::google::protobuf::int32 value) {
  set_has_giftbag2();
  giftbag2_ = value;
}

// optional int32 giftBag3 = 3;
inline bool GiftBag::has_giftbag3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiftBag::set_has_giftbag3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiftBag::clear_has_giftbag3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiftBag::clear_giftbag3() {
  giftbag3_ = 0;
  clear_has_giftbag3();
}
inline ::google::protobuf::int32 GiftBag::giftbag3() const {
  return giftbag3_;
}
inline void GiftBag::set_giftbag3(::google::protobuf::int32 value) {
  set_has_giftbag3();
  giftbag3_ = value;
}

// optional int32 giftBag4 = 4;
inline bool GiftBag::has_giftbag4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GiftBag::set_has_giftbag4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GiftBag::clear_has_giftbag4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GiftBag::clear_giftbag4() {
  giftbag4_ = 0;
  clear_has_giftbag4();
}
inline ::google::protobuf::int32 GiftBag::giftbag4() const {
  return giftbag4_;
}
inline void GiftBag::set_giftbag4(::google::protobuf::int32 value) {
  set_has_giftbag4();
  giftbag4_ = value;
}

// -------------------------------------------------------------------

// ActivityConfig

// optional string activityName = 1;
inline bool ActivityConfig::has_activityname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityConfig::set_has_activityname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityConfig::clear_has_activityname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityConfig::clear_activityname() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    activityname_->clear();
  }
  clear_has_activityname();
}
inline const ::std::string& ActivityConfig::activityname() const {
  return *activityname_;
}
inline void ActivityConfig::set_activityname(const ::std::string& value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void ActivityConfig::set_activityname(const char* value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void ActivityConfig::set_activityname(const char* value, size_t size) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityConfig::mutable_activityname() {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  return activityname_;
}
inline ::std::string* ActivityConfig::release_activityname() {
  clear_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activityname_;
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityConfig::set_allocated_activityname(::std::string* activityname) {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (activityname) {
    set_has_activityname();
    activityname_ = activityname;
  } else {
    clear_has_activityname();
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 activityid = 2;
inline bool ActivityConfig::has_activityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityConfig::set_has_activityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityConfig::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityConfig::clear_activityid() {
  activityid_ = 0;
  clear_has_activityid();
}
inline ::google::protobuf::int32 ActivityConfig::activityid() const {
  return activityid_;
}
inline void ActivityConfig::set_activityid(::google::protobuf::int32 value) {
  set_has_activityid();
  activityid_ = value;
}

// optional string startTime = 3;
inline bool ActivityConfig::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityConfig::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityConfig::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityConfig::clear_starttime() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    starttime_->clear();
  }
  clear_has_starttime();
}
inline const ::std::string& ActivityConfig::starttime() const {
  return *starttime_;
}
inline void ActivityConfig::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void ActivityConfig::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void ActivityConfig::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityConfig::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  return starttime_;
}
inline ::std::string* ActivityConfig::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityConfig::set_allocated_starttime(::std::string* starttime) {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (starttime) {
    set_has_starttime();
    starttime_ = starttime;
  } else {
    clear_has_starttime();
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string endTime = 4;
inline bool ActivityConfig::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityConfig::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityConfig::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityConfig::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& ActivityConfig::endtime() const {
  return *endtime_;
}
inline void ActivityConfig::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void ActivityConfig::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void ActivityConfig::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityConfig::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  return endtime_;
}
inline ::std::string* ActivityConfig::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityConfig::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Activity

// optional int32 status = 1;
inline bool Activity::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Activity::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Activity::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Activity::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Activity::status() const {
  return status_;
}
inline void Activity::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string startTime = 2;
inline bool Activity::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Activity::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Activity::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Activity::clear_starttime() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    starttime_->clear();
  }
  clear_has_starttime();
}
inline const ::std::string& Activity::starttime() const {
  return *starttime_;
}
inline void Activity::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void Activity::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void Activity::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Activity::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  return starttime_;
}
inline ::std::string* Activity::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Activity::set_allocated_starttime(::std::string* starttime) {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (starttime) {
    set_has_starttime();
    starttime_ = starttime;
  } else {
    clear_has_starttime();
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string endTime = 3;
inline bool Activity::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Activity::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Activity::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Activity::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& Activity::endtime() const {
  return *endtime_;
}
inline void Activity::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void Activity::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void Activity::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Activity::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  return endtime_;
}
inline ::std::string* Activity::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Activity::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string reward = 4;
inline bool Activity::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Activity::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Activity::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Activity::clear_reward() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& Activity::reward() const {
  return *reward_;
}
inline void Activity::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void Activity::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void Activity::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Activity::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  return reward_;
}
inline ::std::string* Activity::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Activity::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MemberInfo

// optional string memberSwitchDate = 1;
inline bool MemberInfo::has_memberswitchdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberInfo::set_has_memberswitchdate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberInfo::clear_has_memberswitchdate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberInfo::clear_memberswitchdate() {
  if (memberswitchdate_ != &::google::protobuf::internal::kEmptyString) {
    memberswitchdate_->clear();
  }
  clear_has_memberswitchdate();
}
inline const ::std::string& MemberInfo::memberswitchdate() const {
  return *memberswitchdate_;
}
inline void MemberInfo::set_memberswitchdate(const ::std::string& value) {
  set_has_memberswitchdate();
  if (memberswitchdate_ == &::google::protobuf::internal::kEmptyString) {
    memberswitchdate_ = new ::std::string;
  }
  memberswitchdate_->assign(value);
}
inline void MemberInfo::set_memberswitchdate(const char* value) {
  set_has_memberswitchdate();
  if (memberswitchdate_ == &::google::protobuf::internal::kEmptyString) {
    memberswitchdate_ = new ::std::string;
  }
  memberswitchdate_->assign(value);
}
inline void MemberInfo::set_memberswitchdate(const char* value, size_t size) {
  set_has_memberswitchdate();
  if (memberswitchdate_ == &::google::protobuf::internal::kEmptyString) {
    memberswitchdate_ = new ::std::string;
  }
  memberswitchdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MemberInfo::mutable_memberswitchdate() {
  set_has_memberswitchdate();
  if (memberswitchdate_ == &::google::protobuf::internal::kEmptyString) {
    memberswitchdate_ = new ::std::string;
  }
  return memberswitchdate_;
}
inline ::std::string* MemberInfo::release_memberswitchdate() {
  clear_has_memberswitchdate();
  if (memberswitchdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = memberswitchdate_;
    memberswitchdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MemberInfo::set_allocated_memberswitchdate(::std::string* memberswitchdate) {
  if (memberswitchdate_ != &::google::protobuf::internal::kEmptyString) {
    delete memberswitchdate_;
  }
  if (memberswitchdate) {
    set_has_memberswitchdate();
    memberswitchdate_ = memberswitchdate;
  } else {
    clear_has_memberswitchdate();
    memberswitchdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 memberOrder = 2;
inline bool MemberInfo::has_memberorder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberInfo::set_has_memberorder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberInfo::clear_has_memberorder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberInfo::clear_memberorder() {
  memberorder_ = 0;
  clear_has_memberorder();
}
inline ::google::protobuf::int32 MemberInfo::memberorder() const {
  return memberorder_;
}
inline void MemberInfo::set_memberorder(::google::protobuf::int32 value) {
  set_has_memberorder();
  memberorder_ = value;
}

// optional int32 memberDays = 3;
inline bool MemberInfo::has_memberdays() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemberInfo::set_has_memberdays() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemberInfo::clear_has_memberdays() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemberInfo::clear_memberdays() {
  memberdays_ = 0;
  clear_has_memberdays();
}
inline ::google::protobuf::int32 MemberInfo::memberdays() const {
  return memberdays_;
}
inline void MemberInfo::set_memberdays(::google::protobuf::int32 value) {
  set_has_memberdays();
  memberdays_ = value;
}

// -------------------------------------------------------------------

// RechargeCaseBag

// optional int32 rechargeCaseBag1 = 1;
inline bool RechargeCaseBag::has_rechargecasebag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeCaseBag::set_has_rechargecasebag1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeCaseBag::clear_has_rechargecasebag1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeCaseBag::clear_rechargecasebag1() {
  rechargecasebag1_ = 0;
  clear_has_rechargecasebag1();
}
inline ::google::protobuf::int32 RechargeCaseBag::rechargecasebag1() const {
  return rechargecasebag1_;
}
inline void RechargeCaseBag::set_rechargecasebag1(::google::protobuf::int32 value) {
  set_has_rechargecasebag1();
  rechargecasebag1_ = value;
}

// optional int32 rechargeCaseBag2 = 2;
inline bool RechargeCaseBag::has_rechargecasebag2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeCaseBag::set_has_rechargecasebag2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeCaseBag::clear_has_rechargecasebag2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeCaseBag::clear_rechargecasebag2() {
  rechargecasebag2_ = 0;
  clear_has_rechargecasebag2();
}
inline ::google::protobuf::int32 RechargeCaseBag::rechargecasebag2() const {
  return rechargecasebag2_;
}
inline void RechargeCaseBag::set_rechargecasebag2(::google::protobuf::int32 value) {
  set_has_rechargecasebag2();
  rechargecasebag2_ = value;
}

// optional int32 rechargeCaseBag3 = 3;
inline bool RechargeCaseBag::has_rechargecasebag3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RechargeCaseBag::set_has_rechargecasebag3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RechargeCaseBag::clear_has_rechargecasebag3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RechargeCaseBag::clear_rechargecasebag3() {
  rechargecasebag3_ = 0;
  clear_has_rechargecasebag3();
}
inline ::google::protobuf::int32 RechargeCaseBag::rechargecasebag3() const {
  return rechargecasebag3_;
}
inline void RechargeCaseBag::set_rechargecasebag3(::google::protobuf::int32 value) {
  set_has_rechargecasebag3();
  rechargecasebag3_ = value;
}

// optional int32 rechargeCaseBag4 = 4;
inline bool RechargeCaseBag::has_rechargecasebag4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RechargeCaseBag::set_has_rechargecasebag4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RechargeCaseBag::clear_has_rechargecasebag4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RechargeCaseBag::clear_rechargecasebag4() {
  rechargecasebag4_ = 0;
  clear_has_rechargecasebag4();
}
inline ::google::protobuf::int32 RechargeCaseBag::rechargecasebag4() const {
  return rechargecasebag4_;
}
inline void RechargeCaseBag::set_rechargecasebag4(::google::protobuf::int32 value) {
  set_has_rechargecasebag4();
  rechargecasebag4_ = value;
}

// optional int32 rechargeCaseBag5 = 5;
inline bool RechargeCaseBag::has_rechargecasebag5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RechargeCaseBag::set_has_rechargecasebag5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RechargeCaseBag::clear_has_rechargecasebag5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RechargeCaseBag::clear_rechargecasebag5() {
  rechargecasebag5_ = 0;
  clear_has_rechargecasebag5();
}
inline ::google::protobuf::int32 RechargeCaseBag::rechargecasebag5() const {
  return rechargecasebag5_;
}
inline void RechargeCaseBag::set_rechargecasebag5(::google::protobuf::int32 value) {
  set_has_rechargecasebag5();
  rechargecasebag5_ = value;
}

// optional int32 rechargeCaseBag6 = 6;
inline bool RechargeCaseBag::has_rechargecasebag6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RechargeCaseBag::set_has_rechargecasebag6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RechargeCaseBag::clear_has_rechargecasebag6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RechargeCaseBag::clear_rechargecasebag6() {
  rechargecasebag6_ = 0;
  clear_has_rechargecasebag6();
}
inline ::google::protobuf::int32 RechargeCaseBag::rechargecasebag6() const {
  return rechargecasebag6_;
}
inline void RechargeCaseBag::set_rechargecasebag6(::google::protobuf::int32 value) {
  set_has_rechargecasebag6();
  rechargecasebag6_ = value;
}

// optional int32 rechargeCaseBag7 = 7;
inline bool RechargeCaseBag::has_rechargecasebag7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RechargeCaseBag::set_has_rechargecasebag7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RechargeCaseBag::clear_has_rechargecasebag7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RechargeCaseBag::clear_rechargecasebag7() {
  rechargecasebag7_ = 0;
  clear_has_rechargecasebag7();
}
inline ::google::protobuf::int32 RechargeCaseBag::rechargecasebag7() const {
  return rechargecasebag7_;
}
inline void RechargeCaseBag::set_rechargecasebag7(::google::protobuf::int32 value) {
  set_has_rechargecasebag7();
  rechargecasebag7_ = value;
}

// -------------------------------------------------------------------

// Secure

// optional string compellation = 1;
inline bool Secure::has_compellation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Secure::set_has_compellation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Secure::clear_has_compellation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Secure::clear_compellation() {
  if (compellation_ != &::google::protobuf::internal::kEmptyString) {
    compellation_->clear();
  }
  clear_has_compellation();
}
inline const ::std::string& Secure::compellation() const {
  return *compellation_;
}
inline void Secure::set_compellation(const ::std::string& value) {
  set_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    compellation_ = new ::std::string;
  }
  compellation_->assign(value);
}
inline void Secure::set_compellation(const char* value) {
  set_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    compellation_ = new ::std::string;
  }
  compellation_->assign(value);
}
inline void Secure::set_compellation(const char* value, size_t size) {
  set_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    compellation_ = new ::std::string;
  }
  compellation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Secure::mutable_compellation() {
  set_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    compellation_ = new ::std::string;
  }
  return compellation_;
}
inline ::std::string* Secure::release_compellation() {
  clear_has_compellation();
  if (compellation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = compellation_;
    compellation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Secure::set_allocated_compellation(::std::string* compellation) {
  if (compellation_ != &::google::protobuf::internal::kEmptyString) {
    delete compellation_;
  }
  if (compellation) {
    set_has_compellation();
    compellation_ = compellation;
  } else {
    clear_has_compellation();
    compellation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string passPortID = 2;
inline bool Secure::has_passportid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Secure::set_has_passportid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Secure::clear_has_passportid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Secure::clear_passportid() {
  if (passportid_ != &::google::protobuf::internal::kEmptyString) {
    passportid_->clear();
  }
  clear_has_passportid();
}
inline const ::std::string& Secure::passportid() const {
  return *passportid_;
}
inline void Secure::set_passportid(const ::std::string& value) {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  passportid_->assign(value);
}
inline void Secure::set_passportid(const char* value) {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  passportid_->assign(value);
}
inline void Secure::set_passportid(const char* value, size_t size) {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  passportid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Secure::mutable_passportid() {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  return passportid_;
}
inline ::std::string* Secure::release_passportid() {
  clear_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passportid_;
    passportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Secure::set_allocated_passportid(::std::string* passportid) {
  if (passportid_ != &::google::protobuf::internal::kEmptyString) {
    delete passportid_;
  }
  if (passportid) {
    set_has_passportid();
    passportid_ = passportid;
  } else {
    clear_has_passportid();
    passportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isSecure = 3;
inline bool Secure::has_issecure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Secure::set_has_issecure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Secure::clear_has_issecure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Secure::clear_issecure() {
  issecure_ = 0;
  clear_has_issecure();
}
inline ::google::protobuf::int32 Secure::issecure() const {
  return issecure_;
}
inline void Secure::set_issecure(::google::protobuf::int32 value) {
  set_has_issecure();
  issecure_ = value;
}

// optional string verificationPhone = 4;
inline bool Secure::has_verificationphone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Secure::set_has_verificationphone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Secure::clear_has_verificationphone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Secure::clear_verificationphone() {
  if (verificationphone_ != &::google::protobuf::internal::kEmptyString) {
    verificationphone_->clear();
  }
  clear_has_verificationphone();
}
inline const ::std::string& Secure::verificationphone() const {
  return *verificationphone_;
}
inline void Secure::set_verificationphone(const ::std::string& value) {
  set_has_verificationphone();
  if (verificationphone_ == &::google::protobuf::internal::kEmptyString) {
    verificationphone_ = new ::std::string;
  }
  verificationphone_->assign(value);
}
inline void Secure::set_verificationphone(const char* value) {
  set_has_verificationphone();
  if (verificationphone_ == &::google::protobuf::internal::kEmptyString) {
    verificationphone_ = new ::std::string;
  }
  verificationphone_->assign(value);
}
inline void Secure::set_verificationphone(const char* value, size_t size) {
  set_has_verificationphone();
  if (verificationphone_ == &::google::protobuf::internal::kEmptyString) {
    verificationphone_ = new ::std::string;
  }
  verificationphone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Secure::mutable_verificationphone() {
  set_has_verificationphone();
  if (verificationphone_ == &::google::protobuf::internal::kEmptyString) {
    verificationphone_ = new ::std::string;
  }
  return verificationphone_;
}
inline ::std::string* Secure::release_verificationphone() {
  clear_has_verificationphone();
  if (verificationphone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = verificationphone_;
    verificationphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Secure::set_allocated_verificationphone(::std::string* verificationphone) {
  if (verificationphone_ != &::google::protobuf::internal::kEmptyString) {
    delete verificationphone_;
  }
  if (verificationphone) {
    set_has_verificationphone();
    verificationphone_ = verificationphone;
  } else {
    clear_has_verificationphone();
    verificationphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Novice

// optional string noviceCard = 1;
inline bool Novice::has_novicecard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Novice::set_has_novicecard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Novice::clear_has_novicecard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Novice::clear_novicecard() {
  if (novicecard_ != &::google::protobuf::internal::kEmptyString) {
    novicecard_->clear();
  }
  clear_has_novicecard();
}
inline const ::std::string& Novice::novicecard() const {
  return *novicecard_;
}
inline void Novice::set_novicecard(const ::std::string& value) {
  set_has_novicecard();
  if (novicecard_ == &::google::protobuf::internal::kEmptyString) {
    novicecard_ = new ::std::string;
  }
  novicecard_->assign(value);
}
inline void Novice::set_novicecard(const char* value) {
  set_has_novicecard();
  if (novicecard_ == &::google::protobuf::internal::kEmptyString) {
    novicecard_ = new ::std::string;
  }
  novicecard_->assign(value);
}
inline void Novice::set_novicecard(const char* value, size_t size) {
  set_has_novicecard();
  if (novicecard_ == &::google::protobuf::internal::kEmptyString) {
    novicecard_ = new ::std::string;
  }
  novicecard_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Novice::mutable_novicecard() {
  set_has_novicecard();
  if (novicecard_ == &::google::protobuf::internal::kEmptyString) {
    novicecard_ = new ::std::string;
  }
  return novicecard_;
}
inline ::std::string* Novice::release_novicecard() {
  clear_has_novicecard();
  if (novicecard_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = novicecard_;
    novicecard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Novice::set_allocated_novicecard(::std::string* novicecard) {
  if (novicecard_ != &::google::protobuf::internal::kEmptyString) {
    delete novicecard_;
  }
  if (novicecard) {
    set_has_novicecard();
    novicecard_ = novicecard;
  } else {
    clear_has_novicecard();
    novicecard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string quota = 2;
inline bool Novice::has_quota() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Novice::set_has_quota() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Novice::clear_has_quota() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Novice::clear_quota() {
  if (quota_ != &::google::protobuf::internal::kEmptyString) {
    quota_->clear();
  }
  clear_has_quota();
}
inline const ::std::string& Novice::quota() const {
  return *quota_;
}
inline void Novice::set_quota(const ::std::string& value) {
  set_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    quota_ = new ::std::string;
  }
  quota_->assign(value);
}
inline void Novice::set_quota(const char* value) {
  set_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    quota_ = new ::std::string;
  }
  quota_->assign(value);
}
inline void Novice::set_quota(const char* value, size_t size) {
  set_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    quota_ = new ::std::string;
  }
  quota_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Novice::mutable_quota() {
  set_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    quota_ = new ::std::string;
  }
  return quota_;
}
inline ::std::string* Novice::release_quota() {
  clear_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = quota_;
    quota_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Novice::set_allocated_quota(::std::string* quota) {
  if (quota_ != &::google::protobuf::internal::kEmptyString) {
    delete quota_;
  }
  if (quota) {
    set_has_quota();
    quota_ = quota;
  } else {
    clear_has_quota();
    quota_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string durationTerm = 3;
inline bool Novice::has_durationterm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Novice::set_has_durationterm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Novice::clear_has_durationterm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Novice::clear_durationterm() {
  if (durationterm_ != &::google::protobuf::internal::kEmptyString) {
    durationterm_->clear();
  }
  clear_has_durationterm();
}
inline const ::std::string& Novice::durationterm() const {
  return *durationterm_;
}
inline void Novice::set_durationterm(const ::std::string& value) {
  set_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    durationterm_ = new ::std::string;
  }
  durationterm_->assign(value);
}
inline void Novice::set_durationterm(const char* value) {
  set_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    durationterm_ = new ::std::string;
  }
  durationterm_->assign(value);
}
inline void Novice::set_durationterm(const char* value, size_t size) {
  set_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    durationterm_ = new ::std::string;
  }
  durationterm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Novice::mutable_durationterm() {
  set_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    durationterm_ = new ::std::string;
  }
  return durationterm_;
}
inline ::std::string* Novice::release_durationterm() {
  clear_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = durationterm_;
    durationterm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Novice::set_allocated_durationterm(::std::string* durationterm) {
  if (durationterm_ != &::google::protobuf::internal::kEmptyString) {
    delete durationterm_;
  }
  if (durationterm) {
    set_has_durationterm();
    durationterm_ = durationterm;
  } else {
    clear_has_durationterm();
    durationterm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 cardDay = 4;
inline bool Novice::has_cardday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Novice::set_has_cardday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Novice::clear_has_cardday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Novice::clear_cardday() {
  cardday_ = 0;
  clear_has_cardday();
}
inline ::google::protobuf::int32 Novice::cardday() const {
  return cardday_;
}
inline void Novice::set_cardday(::google::protobuf::int32 value) {
  set_has_cardday();
  cardday_ = value;
}

// optional int32 cardState = 5;
inline bool Novice::has_cardstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Novice::set_has_cardstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Novice::clear_has_cardstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Novice::clear_cardstate() {
  cardstate_ = 0;
  clear_has_cardstate();
}
inline ::google::protobuf::int32 Novice::cardstate() const {
  return cardstate_;
}
inline void Novice::set_cardstate(::google::protobuf::int32 value) {
  set_has_cardstate();
  cardstate_ = value;
}

// -------------------------------------------------------------------

// Hall

// optional int32 type1 = 1;
inline bool Hall::has_type1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hall::set_has_type1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hall::clear_has_type1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hall::clear_type1() {
  type1_ = 0;
  clear_has_type1();
}
inline ::google::protobuf::int32 Hall::type1() const {
  return type1_;
}
inline void Hall::set_type1(::google::protobuf::int32 value) {
  set_has_type1();
  type1_ = value;
}

// optional int32 type2 = 2;
inline bool Hall::has_type2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hall::set_has_type2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hall::clear_has_type2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hall::clear_type2() {
  type2_ = 0;
  clear_has_type2();
}
inline ::google::protobuf::int32 Hall::type2() const {
  return type2_;
}
inline void Hall::set_type2(::google::protobuf::int32 value) {
  set_has_type2();
  type2_ = value;
}

// -------------------------------------------------------------------

// Relief

// optional int32 reliefNum = 1;
inline bool Relief::has_reliefnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Relief::set_has_reliefnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Relief::clear_has_reliefnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Relief::clear_reliefnum() {
  reliefnum_ = 0;
  clear_has_reliefnum();
}
inline ::google::protobuf::int32 Relief::reliefnum() const {
  return reliefnum_;
}
inline void Relief::set_reliefnum(::google::protobuf::int32 value) {
  set_has_reliefnum();
  reliefnum_ = value;
}

// optional int32 countDown = 2;
inline bool Relief::has_countdown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Relief::set_has_countdown() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Relief::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Relief::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
inline ::google::protobuf::int32 Relief::countdown() const {
  return countdown_;
}
inline void Relief::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
}

// optional int32 conditions = 3;
inline bool Relief::has_conditions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Relief::set_has_conditions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Relief::clear_has_conditions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Relief::clear_conditions() {
  conditions_ = 0;
  clear_has_conditions();
}
inline ::google::protobuf::int32 Relief::conditions() const {
  return conditions_;
}
inline void Relief::set_conditions(::google::protobuf::int32 value) {
  set_has_conditions();
  conditions_ = value;
}

// -------------------------------------------------------------------

// NewGiftBag

// optional int32 newGiftBag1 = 1;
inline bool NewGiftBag::has_newgiftbag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewGiftBag::set_has_newgiftbag1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewGiftBag::clear_has_newgiftbag1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewGiftBag::clear_newgiftbag1() {
  newgiftbag1_ = 0;
  clear_has_newgiftbag1();
}
inline ::google::protobuf::int32 NewGiftBag::newgiftbag1() const {
  return newgiftbag1_;
}
inline void NewGiftBag::set_newgiftbag1(::google::protobuf::int32 value) {
  set_has_newgiftbag1();
  newgiftbag1_ = value;
}

// optional int32 newGiftBag2 = 2;
inline bool NewGiftBag::has_newgiftbag2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewGiftBag::set_has_newgiftbag2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewGiftBag::clear_has_newgiftbag2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewGiftBag::clear_newgiftbag2() {
  newgiftbag2_ = 0;
  clear_has_newgiftbag2();
}
inline ::google::protobuf::int32 NewGiftBag::newgiftbag2() const {
  return newgiftbag2_;
}
inline void NewGiftBag::set_newgiftbag2(::google::protobuf::int32 value) {
  set_has_newgiftbag2();
  newgiftbag2_ = value;
}

// optional int32 newGiftBag3 = 3;
inline bool NewGiftBag::has_newgiftbag3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewGiftBag::set_has_newgiftbag3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewGiftBag::clear_has_newgiftbag3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewGiftBag::clear_newgiftbag3() {
  newgiftbag3_ = 0;
  clear_has_newgiftbag3();
}
inline ::google::protobuf::int32 NewGiftBag::newgiftbag3() const {
  return newgiftbag3_;
}
inline void NewGiftBag::set_newgiftbag3(::google::protobuf::int32 value) {
  set_has_newgiftbag3();
  newgiftbag3_ = value;
}

// optional int32 newGiftBag4 = 4;
inline bool NewGiftBag::has_newgiftbag4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewGiftBag::set_has_newgiftbag4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewGiftBag::clear_has_newgiftbag4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewGiftBag::clear_newgiftbag4() {
  newgiftbag4_ = 0;
  clear_has_newgiftbag4();
}
inline ::google::protobuf::int32 NewGiftBag::newgiftbag4() const {
  return newgiftbag4_;
}
inline void NewGiftBag::set_newgiftbag4(::google::protobuf::int32 value) {
  set_has_newgiftbag4();
  newgiftbag4_ = value;
}

// -------------------------------------------------------------------

// LanternBag

// optional int32 lanternBag1 = 1;
inline bool LanternBag::has_lanternbag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanternBag::set_has_lanternbag1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanternBag::clear_has_lanternbag1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanternBag::clear_lanternbag1() {
  lanternbag1_ = 0;
  clear_has_lanternbag1();
}
inline ::google::protobuf::int32 LanternBag::lanternbag1() const {
  return lanternbag1_;
}
inline void LanternBag::set_lanternbag1(::google::protobuf::int32 value) {
  set_has_lanternbag1();
  lanternbag1_ = value;
}

// optional int32 lanternBag2 = 2;
inline bool LanternBag::has_lanternbag2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanternBag::set_has_lanternbag2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanternBag::clear_has_lanternbag2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanternBag::clear_lanternbag2() {
  lanternbag2_ = 0;
  clear_has_lanternbag2();
}
inline ::google::protobuf::int32 LanternBag::lanternbag2() const {
  return lanternbag2_;
}
inline void LanternBag::set_lanternbag2(::google::protobuf::int32 value) {
  set_has_lanternbag2();
  lanternbag2_ = value;
}

// optional int32 lanternBag3 = 3;
inline bool LanternBag::has_lanternbag3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LanternBag::set_has_lanternbag3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LanternBag::clear_has_lanternbag3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LanternBag::clear_lanternbag3() {
  lanternbag3_ = 0;
  clear_has_lanternbag3();
}
inline ::google::protobuf::int32 LanternBag::lanternbag3() const {
  return lanternbag3_;
}
inline void LanternBag::set_lanternbag3(::google::protobuf::int32 value) {
  set_has_lanternbag3();
  lanternbag3_ = value;
}

// optional int32 lanternBag4 = 4;
inline bool LanternBag::has_lanternbag4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LanternBag::set_has_lanternbag4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LanternBag::clear_has_lanternbag4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LanternBag::clear_lanternbag4() {
  lanternbag4_ = 0;
  clear_has_lanternbag4();
}
inline ::google::protobuf::int32 LanternBag::lanternbag4() const {
  return lanternbag4_;
}
inline void LanternBag::set_lanternbag4(::google::protobuf::int32 value) {
  set_has_lanternbag4();
  lanternbag4_ = value;
}

// -------------------------------------------------------------------

// HomeConfig

// repeated .FunctionalConfig functionalConfig = 1;
inline int HomeConfig::functionalconfig_size() const {
  return functionalconfig_.size();
}
inline void HomeConfig::clear_functionalconfig() {
  functionalconfig_.Clear();
}
inline const ::FunctionalConfig& HomeConfig::functionalconfig(int index) const {
  return functionalconfig_.Get(index);
}
inline ::FunctionalConfig* HomeConfig::mutable_functionalconfig(int index) {
  return functionalconfig_.Mutable(index);
}
inline ::FunctionalConfig* HomeConfig::add_functionalconfig() {
  return functionalconfig_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FunctionalConfig >&
HomeConfig::functionalconfig() const {
  return functionalconfig_;
}
inline ::google::protobuf::RepeatedPtrField< ::FunctionalConfig >*
HomeConfig::mutable_functionalconfig() {
  return &functionalconfig_;
}

// optional .LuckDraw luckDraw = 2;
inline bool HomeConfig::has_luckdraw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HomeConfig::set_has_luckdraw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HomeConfig::clear_has_luckdraw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HomeConfig::clear_luckdraw() {
  if (luckdraw_ != NULL) luckdraw_->::LuckDraw::Clear();
  clear_has_luckdraw();
}
inline const ::LuckDraw& HomeConfig::luckdraw() const {
  return luckdraw_ != NULL ? *luckdraw_ : *default_instance_->luckdraw_;
}
inline ::LuckDraw* HomeConfig::mutable_luckdraw() {
  set_has_luckdraw();
  if (luckdraw_ == NULL) luckdraw_ = new ::LuckDraw;
  return luckdraw_;
}
inline ::LuckDraw* HomeConfig::release_luckdraw() {
  clear_has_luckdraw();
  ::LuckDraw* temp = luckdraw_;
  luckdraw_ = NULL;
  return temp;
}
inline void HomeConfig::set_allocated_luckdraw(::LuckDraw* luckdraw) {
  delete luckdraw_;
  luckdraw_ = luckdraw;
  if (luckdraw) {
    set_has_luckdraw();
  } else {
    clear_has_luckdraw();
  }
}

// repeated .RechargeCase rechargeCase = 3;
inline int HomeConfig::rechargecase_size() const {
  return rechargecase_.size();
}
inline void HomeConfig::clear_rechargecase() {
  rechargecase_.Clear();
}
inline const ::RechargeCase& HomeConfig::rechargecase(int index) const {
  return rechargecase_.Get(index);
}
inline ::RechargeCase* HomeConfig::mutable_rechargecase(int index) {
  return rechargecase_.Mutable(index);
}
inline ::RechargeCase* HomeConfig::add_rechargecase() {
  return rechargecase_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RechargeCase >&
HomeConfig::rechargecase() const {
  return rechargecase_;
}
inline ::google::protobuf::RepeatedPtrField< ::RechargeCase >*
HomeConfig::mutable_rechargecase() {
  return &rechargecase_;
}

// optional string sign = 4;
inline bool HomeConfig::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HomeConfig::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HomeConfig::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HomeConfig::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& HomeConfig::sign() const {
  return *sign_;
}
inline void HomeConfig::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void HomeConfig::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void HomeConfig::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HomeConfig::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* HomeConfig::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HomeConfig::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .BoxDate boxDate = 5;
inline int HomeConfig::boxdate_size() const {
  return boxdate_.size();
}
inline void HomeConfig::clear_boxdate() {
  boxdate_.Clear();
}
inline const ::BoxDate& HomeConfig::boxdate(int index) const {
  return boxdate_.Get(index);
}
inline ::BoxDate* HomeConfig::mutable_boxdate(int index) {
  return boxdate_.Mutable(index);
}
inline ::BoxDate* HomeConfig::add_boxdate() {
  return boxdate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BoxDate >&
HomeConfig::boxdate() const {
  return boxdate_;
}
inline ::google::protobuf::RepeatedPtrField< ::BoxDate >*
HomeConfig::mutable_boxdate() {
  return &boxdate_;
}

// optional string relief = 6;
inline bool HomeConfig::has_relief() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HomeConfig::set_has_relief() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HomeConfig::clear_has_relief() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HomeConfig::clear_relief() {
  if (relief_ != &::google::protobuf::internal::kEmptyString) {
    relief_->clear();
  }
  clear_has_relief();
}
inline const ::std::string& HomeConfig::relief() const {
  return *relief_;
}
inline void HomeConfig::set_relief(const ::std::string& value) {
  set_has_relief();
  if (relief_ == &::google::protobuf::internal::kEmptyString) {
    relief_ = new ::std::string;
  }
  relief_->assign(value);
}
inline void HomeConfig::set_relief(const char* value) {
  set_has_relief();
  if (relief_ == &::google::protobuf::internal::kEmptyString) {
    relief_ = new ::std::string;
  }
  relief_->assign(value);
}
inline void HomeConfig::set_relief(const char* value, size_t size) {
  set_has_relief();
  if (relief_ == &::google::protobuf::internal::kEmptyString) {
    relief_ = new ::std::string;
  }
  relief_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HomeConfig::mutable_relief() {
  set_has_relief();
  if (relief_ == &::google::protobuf::internal::kEmptyString) {
    relief_ = new ::std::string;
  }
  return relief_;
}
inline ::std::string* HomeConfig::release_relief() {
  clear_has_relief();
  if (relief_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relief_;
    relief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HomeConfig::set_allocated_relief(::std::string* relief) {
  if (relief_ != &::google::protobuf::internal::kEmptyString) {
    delete relief_;
  }
  if (relief) {
    set_has_relief();
    relief_ = relief;
  } else {
    clear_has_relief();
    relief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string share = 7;
inline bool HomeConfig::has_share() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HomeConfig::set_has_share() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HomeConfig::clear_has_share() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HomeConfig::clear_share() {
  if (share_ != &::google::protobuf::internal::kEmptyString) {
    share_->clear();
  }
  clear_has_share();
}
inline const ::std::string& HomeConfig::share() const {
  return *share_;
}
inline void HomeConfig::set_share(const ::std::string& value) {
  set_has_share();
  if (share_ == &::google::protobuf::internal::kEmptyString) {
    share_ = new ::std::string;
  }
  share_->assign(value);
}
inline void HomeConfig::set_share(const char* value) {
  set_has_share();
  if (share_ == &::google::protobuf::internal::kEmptyString) {
    share_ = new ::std::string;
  }
  share_->assign(value);
}
inline void HomeConfig::set_share(const char* value, size_t size) {
  set_has_share();
  if (share_ == &::google::protobuf::internal::kEmptyString) {
    share_ = new ::std::string;
  }
  share_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HomeConfig::mutable_share() {
  set_has_share();
  if (share_ == &::google::protobuf::internal::kEmptyString) {
    share_ = new ::std::string;
  }
  return share_;
}
inline ::std::string* HomeConfig::release_share() {
  clear_has_share();
  if (share_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = share_;
    share_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HomeConfig::set_allocated_share(::std::string* share) {
  if (share_ != &::google::protobuf::internal::kEmptyString) {
    delete share_;
  }
  if (share) {
    set_has_share();
    share_ = share;
  } else {
    clear_has_share();
    share_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .BoxConfig boxConfig = 8;
inline int HomeConfig::boxconfig_size() const {
  return boxconfig_.size();
}
inline void HomeConfig::clear_boxconfig() {
  boxconfig_.Clear();
}
inline const ::BoxConfig& HomeConfig::boxconfig(int index) const {
  return boxconfig_.Get(index);
}
inline ::BoxConfig* HomeConfig::mutable_boxconfig(int index) {
  return boxconfig_.Mutable(index);
}
inline ::BoxConfig* HomeConfig::add_boxconfig() {
  return boxconfig_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BoxConfig >&
HomeConfig::boxconfig() const {
  return boxconfig_;
}
inline ::google::protobuf::RepeatedPtrField< ::BoxConfig >*
HomeConfig::mutable_boxconfig() {
  return &boxconfig_;
}

// repeated .RechargeConfig rechargeConfig = 9;
inline int HomeConfig::rechargeconfig_size() const {
  return rechargeconfig_.size();
}
inline void HomeConfig::clear_rechargeconfig() {
  rechargeconfig_.Clear();
}
inline const ::RechargeConfig& HomeConfig::rechargeconfig(int index) const {
  return rechargeconfig_.Get(index);
}
inline ::RechargeConfig* HomeConfig::mutable_rechargeconfig(int index) {
  return rechargeconfig_.Mutable(index);
}
inline ::RechargeConfig* HomeConfig::add_rechargeconfig() {
  return rechargeconfig_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RechargeConfig >&
HomeConfig::rechargeconfig() const {
  return rechargeconfig_;
}
inline ::google::protobuf::RepeatedPtrField< ::RechargeConfig >*
HomeConfig::mutable_rechargeconfig() {
  return &rechargeconfig_;
}

// repeated .NewGift newGift = 10;
inline int HomeConfig::newgift_size() const {
  return newgift_.size();
}
inline void HomeConfig::clear_newgift() {
  newgift_.Clear();
}
inline const ::NewGift& HomeConfig::newgift(int index) const {
  return newgift_.Get(index);
}
inline ::NewGift* HomeConfig::mutable_newgift(int index) {
  return newgift_.Mutable(index);
}
inline ::NewGift* HomeConfig::add_newgift() {
  return newgift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewGift >&
HomeConfig::newgift() const {
  return newgift_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewGift >*
HomeConfig::mutable_newgift() {
  return &newgift_;
}

// repeated .Lantern lantern = 11;
inline int HomeConfig::lantern_size() const {
  return lantern_.size();
}
inline void HomeConfig::clear_lantern() {
  lantern_.Clear();
}
inline const ::Lantern& HomeConfig::lantern(int index) const {
  return lantern_.Get(index);
}
inline ::Lantern* HomeConfig::mutable_lantern(int index) {
  return lantern_.Mutable(index);
}
inline ::Lantern* HomeConfig::add_lantern() {
  return lantern_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Lantern >&
HomeConfig::lantern() const {
  return lantern_;
}
inline ::google::protobuf::RepeatedPtrField< ::Lantern >*
HomeConfig::mutable_lantern() {
  return &lantern_;
}

// -------------------------------------------------------------------

// FunctionalConfig

// optional string key = 1;
inline bool FunctionalConfig::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionalConfig::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionalConfig::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionalConfig::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& FunctionalConfig::key() const {
  return *key_;
}
inline void FunctionalConfig::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FunctionalConfig::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FunctionalConfig::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunctionalConfig::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* FunctionalConfig::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunctionalConfig::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 2;
inline bool FunctionalConfig::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunctionalConfig::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunctionalConfig::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunctionalConfig::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& FunctionalConfig::value() const {
  return *value_;
}
inline void FunctionalConfig::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void FunctionalConfig::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void FunctionalConfig::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunctionalConfig::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* FunctionalConfig::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunctionalConfig::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FunctionalConfig1

// optional int32 bank = 1;
inline bool FunctionalConfig1::has_bank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionalConfig1::set_has_bank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionalConfig1::clear_has_bank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionalConfig1::clear_bank() {
  bank_ = 0;
  clear_has_bank();
}
inline ::google::protobuf::int32 FunctionalConfig1::bank() const {
  return bank_;
}
inline void FunctionalConfig1::set_bank(::google::protobuf::int32 value) {
  set_has_bank();
  bank_ = value;
}

// optional int32 actCard = 2;
inline bool FunctionalConfig1::has_actcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunctionalConfig1::set_has_actcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunctionalConfig1::clear_has_actcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunctionalConfig1::clear_actcard() {
  actcard_ = 0;
  clear_has_actcard();
}
inline ::google::protobuf::int32 FunctionalConfig1::actcard() const {
  return actcard_;
}
inline void FunctionalConfig1::set_actcard(::google::protobuf::int32 value) {
  set_has_actcard();
  actcard_ = value;
}

// optional int32 ReliefMoney = 3;
inline bool FunctionalConfig1::has_reliefmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FunctionalConfig1::set_has_reliefmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FunctionalConfig1::clear_has_reliefmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FunctionalConfig1::clear_reliefmoney() {
  reliefmoney_ = 0;
  clear_has_reliefmoney();
}
inline ::google::protobuf::int32 FunctionalConfig1::reliefmoney() const {
  return reliefmoney_;
}
inline void FunctionalConfig1::set_reliefmoney(::google::protobuf::int32 value) {
  set_has_reliefmoney();
  reliefmoney_ = value;
}

// optional int32 Activity = 4;
inline bool FunctionalConfig1::has_activity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FunctionalConfig1::set_has_activity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FunctionalConfig1::clear_has_activity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FunctionalConfig1::clear_activity() {
  activity_ = 0;
  clear_has_activity();
}
inline ::google::protobuf::int32 FunctionalConfig1::activity() const {
  return activity_;
}
inline void FunctionalConfig1::set_activity(::google::protobuf::int32 value) {
  set_has_activity();
  activity_ = value;
}

// optional int32 MonCard = 5;
inline bool FunctionalConfig1::has_moncard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FunctionalConfig1::set_has_moncard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FunctionalConfig1::clear_has_moncard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FunctionalConfig1::clear_moncard() {
  moncard_ = 0;
  clear_has_moncard();
}
inline ::google::protobuf::int32 FunctionalConfig1::moncard() const {
  return moncard_;
}
inline void FunctionalConfig1::set_moncard(::google::protobuf::int32 value) {
  set_has_moncard();
  moncard_ = value;
}

// optional int32 DailyGift = 6;
inline bool FunctionalConfig1::has_dailygift() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FunctionalConfig1::set_has_dailygift() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FunctionalConfig1::clear_has_dailygift() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FunctionalConfig1::clear_dailygift() {
  dailygift_ = 0;
  clear_has_dailygift();
}
inline ::google::protobuf::int32 FunctionalConfig1::dailygift() const {
  return dailygift_;
}
inline void FunctionalConfig1::set_dailygift(::google::protobuf::int32 value) {
  set_has_dailygift();
  dailygift_ = value;
}

// optional int32 RankList = 7;
inline bool FunctionalConfig1::has_ranklist() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FunctionalConfig1::set_has_ranklist() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FunctionalConfig1::clear_has_ranklist() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FunctionalConfig1::clear_ranklist() {
  ranklist_ = 0;
  clear_has_ranklist();
}
inline ::google::protobuf::int32 FunctionalConfig1::ranklist() const {
  return ranklist_;
}
inline void FunctionalConfig1::set_ranklist(::google::protobuf::int32 value) {
  set_has_ranklist();
  ranklist_ = value;
}

// optional int32 NewCard = 8;
inline bool FunctionalConfig1::has_newcard() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FunctionalConfig1::set_has_newcard() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FunctionalConfig1::clear_has_newcard() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FunctionalConfig1::clear_newcard() {
  newcard_ = 0;
  clear_has_newcard();
}
inline ::google::protobuf::int32 FunctionalConfig1::newcard() const {
  return newcard_;
}
inline void FunctionalConfig1::set_newcard(::google::protobuf::int32 value) {
  set_has_newcard();
  newcard_ = value;
}

// optional int32 GivePresent = 9;
inline bool FunctionalConfig1::has_givepresent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FunctionalConfig1::set_has_givepresent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FunctionalConfig1::clear_has_givepresent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FunctionalConfig1::clear_givepresent() {
  givepresent_ = 0;
  clear_has_givepresent();
}
inline ::google::protobuf::int32 FunctionalConfig1::givepresent() const {
  return givepresent_;
}
inline void FunctionalConfig1::set_givepresent(::google::protobuf::int32 value) {
  set_has_givepresent();
  givepresent_ = value;
}

// optional int32 isAudit = 10;
inline bool FunctionalConfig1::has_isaudit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FunctionalConfig1::set_has_isaudit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FunctionalConfig1::clear_has_isaudit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FunctionalConfig1::clear_isaudit() {
  isaudit_ = 0;
  clear_has_isaudit();
}
inline ::google::protobuf::int32 FunctionalConfig1::isaudit() const {
  return isaudit_;
}
inline void FunctionalConfig1::set_isaudit(::google::protobuf::int32 value) {
  set_has_isaudit();
  isaudit_ = value;
}

// optional int32 isH5Pay = 11;
inline bool FunctionalConfig1::has_ish5pay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FunctionalConfig1::set_has_ish5pay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FunctionalConfig1::clear_has_ish5pay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FunctionalConfig1::clear_ish5pay() {
  ish5pay_ = 0;
  clear_has_ish5pay();
}
inline ::google::protobuf::int32 FunctionalConfig1::ish5pay() const {
  return ish5pay_;
}
inline void FunctionalConfig1::set_ish5pay(::google::protobuf::int32 value) {
  set_has_ish5pay();
  ish5pay_ = value;
}

// optional int32 HorseLamp = 12;
inline bool FunctionalConfig1::has_horselamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FunctionalConfig1::set_has_horselamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FunctionalConfig1::clear_has_horselamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FunctionalConfig1::clear_horselamp() {
  horselamp_ = 0;
  clear_has_horselamp();
}
inline ::google::protobuf::int32 FunctionalConfig1::horselamp() const {
  return horselamp_;
}
inline void FunctionalConfig1::set_horselamp(::google::protobuf::int32 value) {
  set_has_horselamp();
  horselamp_ = value;
}

// optional int32 Extension = 13;
inline bool FunctionalConfig1::has_extension() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FunctionalConfig1::set_has_extension() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FunctionalConfig1::clear_has_extension() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FunctionalConfig1::clear_extension() {
  extension_ = 0;
  clear_has_extension();
}
inline ::google::protobuf::int32 FunctionalConfig1::extension() const {
  return extension_;
}
inline void FunctionalConfig1::set_extension(::google::protobuf::int32 value) {
  set_has_extension();
  extension_ = value;
}

// optional string RunContent = 14;
inline bool FunctionalConfig1::has_runcontent() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FunctionalConfig1::set_has_runcontent() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FunctionalConfig1::clear_has_runcontent() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FunctionalConfig1::clear_runcontent() {
  if (runcontent_ != &::google::protobuf::internal::kEmptyString) {
    runcontent_->clear();
  }
  clear_has_runcontent();
}
inline const ::std::string& FunctionalConfig1::runcontent() const {
  return *runcontent_;
}
inline void FunctionalConfig1::set_runcontent(const ::std::string& value) {
  set_has_runcontent();
  if (runcontent_ == &::google::protobuf::internal::kEmptyString) {
    runcontent_ = new ::std::string;
  }
  runcontent_->assign(value);
}
inline void FunctionalConfig1::set_runcontent(const char* value) {
  set_has_runcontent();
  if (runcontent_ == &::google::protobuf::internal::kEmptyString) {
    runcontent_ = new ::std::string;
  }
  runcontent_->assign(value);
}
inline void FunctionalConfig1::set_runcontent(const char* value, size_t size) {
  set_has_runcontent();
  if (runcontent_ == &::google::protobuf::internal::kEmptyString) {
    runcontent_ = new ::std::string;
  }
  runcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunctionalConfig1::mutable_runcontent() {
  set_has_runcontent();
  if (runcontent_ == &::google::protobuf::internal::kEmptyString) {
    runcontent_ = new ::std::string;
  }
  return runcontent_;
}
inline ::std::string* FunctionalConfig1::release_runcontent() {
  clear_has_runcontent();
  if (runcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = runcontent_;
    runcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunctionalConfig1::set_allocated_runcontent(::std::string* runcontent) {
  if (runcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete runcontent_;
  }
  if (runcontent) {
    set_has_runcontent();
    runcontent_ = runcontent;
  } else {
    clear_has_runcontent();
    runcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ReliefMoneyShare = 15;
inline bool FunctionalConfig1::has_reliefmoneyshare() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FunctionalConfig1::set_has_reliefmoneyshare() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FunctionalConfig1::clear_has_reliefmoneyshare() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FunctionalConfig1::clear_reliefmoneyshare() {
  reliefmoneyshare_ = 0;
  clear_has_reliefmoneyshare();
}
inline ::google::protobuf::int32 FunctionalConfig1::reliefmoneyshare() const {
  return reliefmoneyshare_;
}
inline void FunctionalConfig1::set_reliefmoneyshare(::google::protobuf::int32 value) {
  set_has_reliefmoneyshare();
  reliefmoneyshare_ = value;
}

// optional int32 Register = 16;
inline bool FunctionalConfig1::has_register_() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FunctionalConfig1::set_has_register_() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FunctionalConfig1::clear_has_register_() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FunctionalConfig1::clear_register_() {
  register__ = 0;
  clear_has_register_();
}
inline ::google::protobuf::int32 FunctionalConfig1::register_() const {
  return register__;
}
inline void FunctionalConfig1::set_register_(::google::protobuf::int32 value) {
  set_has_register_();
  register__ = value;
}

// optional int32 PersonalCenter = 17;
inline bool FunctionalConfig1::has_personalcenter() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FunctionalConfig1::set_has_personalcenter() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FunctionalConfig1::clear_has_personalcenter() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FunctionalConfig1::clear_personalcenter() {
  personalcenter_ = 0;
  clear_has_personalcenter();
}
inline ::google::protobuf::int32 FunctionalConfig1::personalcenter() const {
  return personalcenter_;
}
inline void FunctionalConfig1::set_personalcenter(::google::protobuf::int32 value) {
  set_has_personalcenter();
  personalcenter_ = value;
}

// optional int32 ExchangeCenter = 18;
inline bool FunctionalConfig1::has_exchangecenter() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FunctionalConfig1::set_has_exchangecenter() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FunctionalConfig1::clear_has_exchangecenter() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FunctionalConfig1::clear_exchangecenter() {
  exchangecenter_ = 0;
  clear_has_exchangecenter();
}
inline ::google::protobuf::int32 FunctionalConfig1::exchangecenter() const {
  return exchangecenter_;
}
inline void FunctionalConfig1::set_exchangecenter(::google::protobuf::int32 value) {
  set_has_exchangecenter();
  exchangecenter_ = value;
}

// optional int32 Sign = 19;
inline bool FunctionalConfig1::has_sign() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FunctionalConfig1::set_has_sign() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FunctionalConfig1::clear_has_sign() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FunctionalConfig1::clear_sign() {
  sign_ = 0;
  clear_has_sign();
}
inline ::google::protobuf::int32 FunctionalConfig1::sign() const {
  return sign_;
}
inline void FunctionalConfig1::set_sign(::google::protobuf::int32 value) {
  set_has_sign();
  sign_ = value;
}

// optional int32 BindPhone = 20;
inline bool FunctionalConfig1::has_bindphone() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FunctionalConfig1::set_has_bindphone() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FunctionalConfig1::clear_has_bindphone() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FunctionalConfig1::clear_bindphone() {
  bindphone_ = 0;
  clear_has_bindphone();
}
inline ::google::protobuf::int32 FunctionalConfig1::bindphone() const {
  return bindphone_;
}
inline void FunctionalConfig1::set_bindphone(::google::protobuf::int32 value) {
  set_has_bindphone();
  bindphone_ = value;
}

// optional string ShCirFriends = 21;
inline bool FunctionalConfig1::has_shcirfriends() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FunctionalConfig1::set_has_shcirfriends() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FunctionalConfig1::clear_has_shcirfriends() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FunctionalConfig1::clear_shcirfriends() {
  if (shcirfriends_ != &::google::protobuf::internal::kEmptyString) {
    shcirfriends_->clear();
  }
  clear_has_shcirfriends();
}
inline const ::std::string& FunctionalConfig1::shcirfriends() const {
  return *shcirfriends_;
}
inline void FunctionalConfig1::set_shcirfriends(const ::std::string& value) {
  set_has_shcirfriends();
  if (shcirfriends_ == &::google::protobuf::internal::kEmptyString) {
    shcirfriends_ = new ::std::string;
  }
  shcirfriends_->assign(value);
}
inline void FunctionalConfig1::set_shcirfriends(const char* value) {
  set_has_shcirfriends();
  if (shcirfriends_ == &::google::protobuf::internal::kEmptyString) {
    shcirfriends_ = new ::std::string;
  }
  shcirfriends_->assign(value);
}
inline void FunctionalConfig1::set_shcirfriends(const char* value, size_t size) {
  set_has_shcirfriends();
  if (shcirfriends_ == &::google::protobuf::internal::kEmptyString) {
    shcirfriends_ = new ::std::string;
  }
  shcirfriends_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunctionalConfig1::mutable_shcirfriends() {
  set_has_shcirfriends();
  if (shcirfriends_ == &::google::protobuf::internal::kEmptyString) {
    shcirfriends_ = new ::std::string;
  }
  return shcirfriends_;
}
inline ::std::string* FunctionalConfig1::release_shcirfriends() {
  clear_has_shcirfriends();
  if (shcirfriends_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shcirfriends_;
    shcirfriends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunctionalConfig1::set_allocated_shcirfriends(::std::string* shcirfriends) {
  if (shcirfriends_ != &::google::protobuf::internal::kEmptyString) {
    delete shcirfriends_;
  }
  if (shcirfriends) {
    set_has_shcirfriends();
    shcirfriends_ = shcirfriends;
  } else {
    clear_has_shcirfriends();
    shcirfriends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ShoppingMall = 22;
inline bool FunctionalConfig1::has_shoppingmall() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FunctionalConfig1::set_has_shoppingmall() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FunctionalConfig1::clear_has_shoppingmall() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FunctionalConfig1::clear_shoppingmall() {
  shoppingmall_ = 0;
  clear_has_shoppingmall();
}
inline ::google::protobuf::int32 FunctionalConfig1::shoppingmall() const {
  return shoppingmall_;
}
inline void FunctionalConfig1::set_shoppingmall(::google::protobuf::int32 value) {
  set_has_shoppingmall();
  shoppingmall_ = value;
}

// optional int32 SetUp = 23;
inline bool FunctionalConfig1::has_setup() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void FunctionalConfig1::set_has_setup() {
  _has_bits_[0] |= 0x00400000u;
}
inline void FunctionalConfig1::clear_has_setup() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void FunctionalConfig1::clear_setup() {
  setup_ = 0;
  clear_has_setup();
}
inline ::google::protobuf::int32 FunctionalConfig1::setup() const {
  return setup_;
}
inline void FunctionalConfig1::set_setup(::google::protobuf::int32 value) {
  set_has_setup();
  setup_ = value;
}

// optional int32 Share = 24;
inline bool FunctionalConfig1::has_share() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void FunctionalConfig1::set_has_share() {
  _has_bits_[0] |= 0x00800000u;
}
inline void FunctionalConfig1::clear_has_share() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void FunctionalConfig1::clear_share() {
  share_ = 0;
  clear_has_share();
}
inline ::google::protobuf::int32 FunctionalConfig1::share() const {
  return share_;
}
inline void FunctionalConfig1::set_share(::google::protobuf::int32 value) {
  set_has_share();
  share_ = value;
}

// optional int32 ShFriends = 25;
inline bool FunctionalConfig1::has_shfriends() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void FunctionalConfig1::set_has_shfriends() {
  _has_bits_[0] |= 0x01000000u;
}
inline void FunctionalConfig1::clear_has_shfriends() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void FunctionalConfig1::clear_shfriends() {
  shfriends_ = 0;
  clear_has_shfriends();
}
inline ::google::protobuf::int32 FunctionalConfig1::shfriends() const {
  return shfriends_;
}
inline void FunctionalConfig1::set_shfriends(::google::protobuf::int32 value) {
  set_has_shfriends();
  shfriends_ = value;
}

// optional int32 NewGift = 26;
inline bool FunctionalConfig1::has_newgift() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void FunctionalConfig1::set_has_newgift() {
  _has_bits_[0] |= 0x02000000u;
}
inline void FunctionalConfig1::clear_has_newgift() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void FunctionalConfig1::clear_newgift() {
  newgift_ = 0;
  clear_has_newgift();
}
inline ::google::protobuf::int32 FunctionalConfig1::newgift() const {
  return newgift_;
}
inline void FunctionalConfig1::set_newgift(::google::protobuf::int32 value) {
  set_has_newgift();
  newgift_ = value;
}

// -------------------------------------------------------------------

// LuckDraw

// optional string activityTime = 1;
inline bool LuckDraw::has_activitytime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuckDraw::set_has_activitytime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuckDraw::clear_has_activitytime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuckDraw::clear_activitytime() {
  if (activitytime_ != &::google::protobuf::internal::kEmptyString) {
    activitytime_->clear();
  }
  clear_has_activitytime();
}
inline const ::std::string& LuckDraw::activitytime() const {
  return *activitytime_;
}
inline void LuckDraw::set_activitytime(const ::std::string& value) {
  set_has_activitytime();
  if (activitytime_ == &::google::protobuf::internal::kEmptyString) {
    activitytime_ = new ::std::string;
  }
  activitytime_->assign(value);
}
inline void LuckDraw::set_activitytime(const char* value) {
  set_has_activitytime();
  if (activitytime_ == &::google::protobuf::internal::kEmptyString) {
    activitytime_ = new ::std::string;
  }
  activitytime_->assign(value);
}
inline void LuckDraw::set_activitytime(const char* value, size_t size) {
  set_has_activitytime();
  if (activitytime_ == &::google::protobuf::internal::kEmptyString) {
    activitytime_ = new ::std::string;
  }
  activitytime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LuckDraw::mutable_activitytime() {
  set_has_activitytime();
  if (activitytime_ == &::google::protobuf::internal::kEmptyString) {
    activitytime_ = new ::std::string;
  }
  return activitytime_;
}
inline ::std::string* LuckDraw::release_activitytime() {
  clear_has_activitytime();
  if (activitytime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activitytime_;
    activitytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LuckDraw::set_allocated_activitytime(::std::string* activitytime) {
  if (activitytime_ != &::google::protobuf::internal::kEmptyString) {
    delete activitytime_;
  }
  if (activitytime) {
    set_has_activitytime();
    activitytime_ = activitytime;
  } else {
    clear_has_activitytime();
    activitytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string luchDrawAmount = 2;
inline bool LuckDraw::has_luchdrawamount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuckDraw::set_has_luchdrawamount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuckDraw::clear_has_luchdrawamount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuckDraw::clear_luchdrawamount() {
  if (luchdrawamount_ != &::google::protobuf::internal::kEmptyString) {
    luchdrawamount_->clear();
  }
  clear_has_luchdrawamount();
}
inline const ::std::string& LuckDraw::luchdrawamount() const {
  return *luchdrawamount_;
}
inline void LuckDraw::set_luchdrawamount(const ::std::string& value) {
  set_has_luchdrawamount();
  if (luchdrawamount_ == &::google::protobuf::internal::kEmptyString) {
    luchdrawamount_ = new ::std::string;
  }
  luchdrawamount_->assign(value);
}
inline void LuckDraw::set_luchdrawamount(const char* value) {
  set_has_luchdrawamount();
  if (luchdrawamount_ == &::google::protobuf::internal::kEmptyString) {
    luchdrawamount_ = new ::std::string;
  }
  luchdrawamount_->assign(value);
}
inline void LuckDraw::set_luchdrawamount(const char* value, size_t size) {
  set_has_luchdrawamount();
  if (luchdrawamount_ == &::google::protobuf::internal::kEmptyString) {
    luchdrawamount_ = new ::std::string;
  }
  luchdrawamount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LuckDraw::mutable_luchdrawamount() {
  set_has_luchdrawamount();
  if (luchdrawamount_ == &::google::protobuf::internal::kEmptyString) {
    luchdrawamount_ = new ::std::string;
  }
  return luchdrawamount_;
}
inline ::std::string* LuckDraw::release_luchdrawamount() {
  clear_has_luchdrawamount();
  if (luchdrawamount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = luchdrawamount_;
    luchdrawamount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LuckDraw::set_allocated_luchdrawamount(::std::string* luchdrawamount) {
  if (luchdrawamount_ != &::google::protobuf::internal::kEmptyString) {
    delete luchdrawamount_;
  }
  if (luchdrawamount) {
    set_has_luchdrawamount();
    luchdrawamount_ = luchdrawamount;
  } else {
    clear_has_luchdrawamount();
    luchdrawamount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 luchDrawNum = 3;
inline bool LuckDraw::has_luchdrawnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LuckDraw::set_has_luchdrawnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LuckDraw::clear_has_luchdrawnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LuckDraw::clear_luchdrawnum() {
  luchdrawnum_ = 0;
  clear_has_luchdrawnum();
}
inline ::google::protobuf::int32 LuckDraw::luchdrawnum() const {
  return luchdrawnum_;
}
inline void LuckDraw::set_luchdrawnum(::google::protobuf::int32 value) {
  set_has_luchdrawnum();
  luchdrawnum_ = value;
}

// -------------------------------------------------------------------

// RechargeCase

// optional int32 price = 1;
inline bool RechargeCase::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeCase::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeCase::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeCase::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 RechargeCase::price() const {
  return price_;
}
inline void RechargeCase::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 casegradeid = 2;
inline bool RechargeCase::has_casegradeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeCase::set_has_casegradeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeCase::clear_has_casegradeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeCase::clear_casegradeid() {
  casegradeid_ = 0;
  clear_has_casegradeid();
}
inline ::google::protobuf::int32 RechargeCase::casegradeid() const {
  return casegradeid_;
}
inline void RechargeCase::set_casegradeid(::google::protobuf::int32 value) {
  set_has_casegradeid();
  casegradeid_ = value;
}

// optional int32 score = 3;
inline bool RechargeCase::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RechargeCase::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RechargeCase::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RechargeCase::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 RechargeCase::score() const {
  return score_;
}
inline void RechargeCase::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 mid = 4;
inline bool RechargeCase::has_mid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RechargeCase::set_has_mid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RechargeCase::clear_has_mid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RechargeCase::clear_mid() {
  mid_ = 0;
  clear_has_mid();
}
inline ::google::protobuf::int32 RechargeCase::mid() const {
  return mid_;
}
inline void RechargeCase::set_mid(::google::protobuf::int32 value) {
  set_has_mid();
  mid_ = value;
}

// optional int32 membershipperiod = 5;
inline bool RechargeCase::has_membershipperiod() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RechargeCase::set_has_membershipperiod() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RechargeCase::clear_has_membershipperiod() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RechargeCase::clear_membershipperiod() {
  membershipperiod_ = 0;
  clear_has_membershipperiod();
}
inline ::google::protobuf::int32 RechargeCase::membershipperiod() const {
  return membershipperiod_;
}
inline void RechargeCase::set_membershipperiod(::google::protobuf::int32 value) {
  set_has_membershipperiod();
  membershipperiod_ = value;
}

// -------------------------------------------------------------------

// BoxDate

// optional int32 key = 1;
inline bool BoxDate::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoxDate::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoxDate::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoxDate::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 BoxDate::key() const {
  return key_;
}
inline void BoxDate::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// repeated .BoxDateInfo boxDateInfo = 2;
inline int BoxDate::boxdateinfo_size() const {
  return boxdateinfo_.size();
}
inline void BoxDate::clear_boxdateinfo() {
  boxdateinfo_.Clear();
}
inline const ::BoxDateInfo& BoxDate::boxdateinfo(int index) const {
  return boxdateinfo_.Get(index);
}
inline ::BoxDateInfo* BoxDate::mutable_boxdateinfo(int index) {
  return boxdateinfo_.Mutable(index);
}
inline ::BoxDateInfo* BoxDate::add_boxdateinfo() {
  return boxdateinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BoxDateInfo >&
BoxDate::boxdateinfo() const {
  return boxdateinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::BoxDateInfo >*
BoxDate::mutable_boxdateinfo() {
  return &boxdateinfo_;
}

// -------------------------------------------------------------------

// BoxDateInfo

// optional int32 goodsType = 1;
inline bool BoxDateInfo::has_goodstype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoxDateInfo::set_has_goodstype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoxDateInfo::clear_has_goodstype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoxDateInfo::clear_goodstype() {
  goodstype_ = 0;
  clear_has_goodstype();
}
inline ::google::protobuf::int32 BoxDateInfo::goodstype() const {
  return goodstype_;
}
inline void BoxDateInfo::set_goodstype(::google::protobuf::int32 value) {
  set_has_goodstype();
  goodstype_ = value;
}

// optional int32 goodsValue = 2;
inline bool BoxDateInfo::has_goodsvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoxDateInfo::set_has_goodsvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoxDateInfo::clear_has_goodsvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoxDateInfo::clear_goodsvalue() {
  goodsvalue_ = 0;
  clear_has_goodsvalue();
}
inline ::google::protobuf::int32 BoxDateInfo::goodsvalue() const {
  return goodsvalue_;
}
inline void BoxDateInfo::set_goodsvalue(::google::protobuf::int32 value) {
  set_has_goodsvalue();
  goodsvalue_ = value;
}

// -------------------------------------------------------------------

// BoxConfig

// optional int32 boxID = 1;
inline bool BoxConfig::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoxConfig::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoxConfig::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoxConfig::clear_boxid() {
  boxid_ = 0;
  clear_has_boxid();
}
inline ::google::protobuf::int32 BoxConfig::boxid() const {
  return boxid_;
}
inline void BoxConfig::set_boxid(::google::protobuf::int32 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int32 boxType = 2;
inline bool BoxConfig::has_boxtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoxConfig::set_has_boxtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoxConfig::clear_has_boxtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoxConfig::clear_boxtype() {
  boxtype_ = 0;
  clear_has_boxtype();
}
inline ::google::protobuf::int32 BoxConfig::boxtype() const {
  return boxtype_;
}
inline void BoxConfig::set_boxtype(::google::protobuf::int32 value) {
  set_has_boxtype();
  boxtype_ = value;
}

// optional int32 boxValue = 3;
inline bool BoxConfig::has_boxvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoxConfig::set_has_boxvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoxConfig::clear_has_boxvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoxConfig::clear_boxvalue() {
  boxvalue_ = 0;
  clear_has_boxvalue();
}
inline ::google::protobuf::int32 BoxConfig::boxvalue() const {
  return boxvalue_;
}
inline void BoxConfig::set_boxvalue(::google::protobuf::int32 value) {
  set_has_boxvalue();
  boxvalue_ = value;
}

// -------------------------------------------------------------------

// RechargeConfig

// optional string payID = 1;
inline bool RechargeConfig::has_payid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeConfig::set_has_payid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeConfig::clear_has_payid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeConfig::clear_payid() {
  if (payid_ != &::google::protobuf::internal::kEmptyString) {
    payid_->clear();
  }
  clear_has_payid();
}
inline const ::std::string& RechargeConfig::payid() const {
  return *payid_;
}
inline void RechargeConfig::set_payid(const ::std::string& value) {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  payid_->assign(value);
}
inline void RechargeConfig::set_payid(const char* value) {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  payid_->assign(value);
}
inline void RechargeConfig::set_payid(const char* value, size_t size) {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  payid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RechargeConfig::mutable_payid() {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  return payid_;
}
inline ::std::string* RechargeConfig::release_payid() {
  clear_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payid_;
    payid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RechargeConfig::set_allocated_payid(::std::string* payid) {
  if (payid_ != &::google::protobuf::internal::kEmptyString) {
    delete payid_;
  }
  if (payid) {
    set_has_payid();
    payid_ = payid;
  } else {
    clear_has_payid();
    payid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 2;
inline bool RechargeConfig::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeConfig::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeConfig::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeConfig::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& RechargeConfig::value() const {
  return *value_;
}
inline void RechargeConfig::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void RechargeConfig::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void RechargeConfig::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RechargeConfig::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* RechargeConfig::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RechargeConfig::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NewGift

// optional string payID = 1;
inline bool NewGift::has_payid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewGift::set_has_payid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewGift::clear_has_payid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewGift::clear_payid() {
  if (payid_ != &::google::protobuf::internal::kEmptyString) {
    payid_->clear();
  }
  clear_has_payid();
}
inline const ::std::string& NewGift::payid() const {
  return *payid_;
}
inline void NewGift::set_payid(const ::std::string& value) {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  payid_->assign(value);
}
inline void NewGift::set_payid(const char* value) {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  payid_->assign(value);
}
inline void NewGift::set_payid(const char* value, size_t size) {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  payid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewGift::mutable_payid() {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  return payid_;
}
inline ::std::string* NewGift::release_payid() {
  clear_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payid_;
    payid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewGift::set_allocated_payid(::std::string* payid) {
  if (payid_ != &::google::protobuf::internal::kEmptyString) {
    delete payid_;
  }
  if (payid) {
    set_has_payid();
    payid_ = payid;
  } else {
    clear_has_payid();
    payid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 gold = 2;
inline bool NewGift::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewGift::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewGift::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewGift::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 NewGift::gold() const {
  return gold_;
}
inline void NewGift::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional string multiple = 3;
inline bool NewGift::has_multiple() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewGift::set_has_multiple() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewGift::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewGift::clear_multiple() {
  if (multiple_ != &::google::protobuf::internal::kEmptyString) {
    multiple_->clear();
  }
  clear_has_multiple();
}
inline const ::std::string& NewGift::multiple() const {
  return *multiple_;
}
inline void NewGift::set_multiple(const ::std::string& value) {
  set_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    multiple_ = new ::std::string;
  }
  multiple_->assign(value);
}
inline void NewGift::set_multiple(const char* value) {
  set_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    multiple_ = new ::std::string;
  }
  multiple_->assign(value);
}
inline void NewGift::set_multiple(const char* value, size_t size) {
  set_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    multiple_ = new ::std::string;
  }
  multiple_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewGift::mutable_multiple() {
  set_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    multiple_ = new ::std::string;
  }
  return multiple_;
}
inline ::std::string* NewGift::release_multiple() {
  clear_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = multiple_;
    multiple_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewGift::set_allocated_multiple(::std::string* multiple) {
  if (multiple_ != &::google::protobuf::internal::kEmptyString) {
    delete multiple_;
  }
  if (multiple) {
    set_has_multiple();
    multiple_ = multiple;
  } else {
    clear_has_multiple();
    multiple_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 member = 4;
inline bool NewGift::has_member() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewGift::set_has_member() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewGift::clear_has_member() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewGift::clear_member() {
  member_ = 0;
  clear_has_member();
}
inline ::google::protobuf::int32 NewGift::member() const {
  return member_;
}
inline void NewGift::set_member(::google::protobuf::int32 value) {
  set_has_member();
  member_ = value;
}

// optional int32 memberday = 5;
inline bool NewGift::has_memberday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewGift::set_has_memberday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewGift::clear_has_memberday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewGift::clear_memberday() {
  memberday_ = 0;
  clear_has_memberday();
}
inline ::google::protobuf::int32 NewGift::memberday() const {
  return memberday_;
}
inline void NewGift::set_memberday(::google::protobuf::int32 value) {
  set_has_memberday();
  memberday_ = value;
}

// optional int32 actualvalue = 6;
inline bool NewGift::has_actualvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewGift::set_has_actualvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewGift::clear_has_actualvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewGift::clear_actualvalue() {
  actualvalue_ = 0;
  clear_has_actualvalue();
}
inline ::google::protobuf::int32 NewGift::actualvalue() const {
  return actualvalue_;
}
inline void NewGift::set_actualvalue(::google::protobuf::int32 value) {
  set_has_actualvalue();
  actualvalue_ = value;
}

// optional int32 originalprice = 7;
inline bool NewGift::has_originalprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewGift::set_has_originalprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewGift::clear_has_originalprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewGift::clear_originalprice() {
  originalprice_ = 0;
  clear_has_originalprice();
}
inline ::google::protobuf::int32 NewGift::originalprice() const {
  return originalprice_;
}
inline void NewGift::set_originalprice(::google::protobuf::int32 value) {
  set_has_originalprice();
  originalprice_ = value;
}

// optional int32 nowprice = 8;
inline bool NewGift::has_nowprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NewGift::set_has_nowprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NewGift::clear_has_nowprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NewGift::clear_nowprice() {
  nowprice_ = 0;
  clear_has_nowprice();
}
inline ::google::protobuf::int32 NewGift::nowprice() const {
  return nowprice_;
}
inline void NewGift::set_nowprice(::google::protobuf::int32 value) {
  set_has_nowprice();
  nowprice_ = value;
}

// -------------------------------------------------------------------

// Lantern

// optional string payID = 1;
inline bool Lantern::has_payid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lantern::set_has_payid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lantern::clear_has_payid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lantern::clear_payid() {
  if (payid_ != &::google::protobuf::internal::kEmptyString) {
    payid_->clear();
  }
  clear_has_payid();
}
inline const ::std::string& Lantern::payid() const {
  return *payid_;
}
inline void Lantern::set_payid(const ::std::string& value) {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  payid_->assign(value);
}
inline void Lantern::set_payid(const char* value) {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  payid_->assign(value);
}
inline void Lantern::set_payid(const char* value, size_t size) {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  payid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Lantern::mutable_payid() {
  set_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    payid_ = new ::std::string;
  }
  return payid_;
}
inline ::std::string* Lantern::release_payid() {
  clear_has_payid();
  if (payid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payid_;
    payid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Lantern::set_allocated_payid(::std::string* payid) {
  if (payid_ != &::google::protobuf::internal::kEmptyString) {
    delete payid_;
  }
  if (payid) {
    set_has_payid();
    payid_ = payid;
  } else {
    clear_has_payid();
    payid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 gold = 2;
inline bool Lantern::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lantern::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lantern::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lantern::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 Lantern::gold() const {
  return gold_;
}
inline void Lantern::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional string multiple = 3;
inline bool Lantern::has_multiple() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lantern::set_has_multiple() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lantern::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lantern::clear_multiple() {
  if (multiple_ != &::google::protobuf::internal::kEmptyString) {
    multiple_->clear();
  }
  clear_has_multiple();
}
inline const ::std::string& Lantern::multiple() const {
  return *multiple_;
}
inline void Lantern::set_multiple(const ::std::string& value) {
  set_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    multiple_ = new ::std::string;
  }
  multiple_->assign(value);
}
inline void Lantern::set_multiple(const char* value) {
  set_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    multiple_ = new ::std::string;
  }
  multiple_->assign(value);
}
inline void Lantern::set_multiple(const char* value, size_t size) {
  set_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    multiple_ = new ::std::string;
  }
  multiple_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Lantern::mutable_multiple() {
  set_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    multiple_ = new ::std::string;
  }
  return multiple_;
}
inline ::std::string* Lantern::release_multiple() {
  clear_has_multiple();
  if (multiple_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = multiple_;
    multiple_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Lantern::set_allocated_multiple(::std::string* multiple) {
  if (multiple_ != &::google::protobuf::internal::kEmptyString) {
    delete multiple_;
  }
  if (multiple) {
    set_has_multiple();
    multiple_ = multiple;
  } else {
    clear_has_multiple();
    multiple_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 member = 4;
inline bool Lantern::has_member() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lantern::set_has_member() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lantern::clear_has_member() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lantern::clear_member() {
  member_ = 0;
  clear_has_member();
}
inline ::google::protobuf::int32 Lantern::member() const {
  return member_;
}
inline void Lantern::set_member(::google::protobuf::int32 value) {
  set_has_member();
  member_ = value;
}

// optional int32 memberday = 5;
inline bool Lantern::has_memberday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lantern::set_has_memberday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lantern::clear_has_memberday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lantern::clear_memberday() {
  memberday_ = 0;
  clear_has_memberday();
}
inline ::google::protobuf::int32 Lantern::memberday() const {
  return memberday_;
}
inline void Lantern::set_memberday(::google::protobuf::int32 value) {
  set_has_memberday();
  memberday_ = value;
}

// optional int32 actualvalue = 6;
inline bool Lantern::has_actualvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lantern::set_has_actualvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lantern::clear_has_actualvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lantern::clear_actualvalue() {
  actualvalue_ = 0;
  clear_has_actualvalue();
}
inline ::google::protobuf::int32 Lantern::actualvalue() const {
  return actualvalue_;
}
inline void Lantern::set_actualvalue(::google::protobuf::int32 value) {
  set_has_actualvalue();
  actualvalue_ = value;
}

// optional int32 originalprice = 7;
inline bool Lantern::has_originalprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lantern::set_has_originalprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lantern::clear_has_originalprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lantern::clear_originalprice() {
  originalprice_ = 0;
  clear_has_originalprice();
}
inline ::google::protobuf::int32 Lantern::originalprice() const {
  return originalprice_;
}
inline void Lantern::set_originalprice(::google::protobuf::int32 value) {
  set_has_originalprice();
  originalprice_ = value;
}

// optional int32 nowprice = 8;
inline bool Lantern::has_nowprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lantern::set_has_nowprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lantern::clear_has_nowprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lantern::clear_nowprice() {
  nowprice_ = 0;
  clear_has_nowprice();
}
inline ::google::protobuf::int32 Lantern::nowprice() const {
  return nowprice_;
}
inline void Lantern::set_nowprice(::google::protobuf::int32 value) {
  set_has_nowprice();
  nowprice_ = value;
}

// -------------------------------------------------------------------

// MonthlyCard

// optional int32 days = 1;
inline bool MonthlyCard::has_days() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonthlyCard::set_has_days() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonthlyCard::clear_has_days() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonthlyCard::clear_days() {
  days_ = 0;
  clear_has_days();
}
inline ::google::protobuf::int32 MonthlyCard::days() const {
  return days_;
}
inline void MonthlyCard::set_days(::google::protobuf::int32 value) {
  set_has_days();
  days_ = value;
}

// optional int32 status = 2;
inline bool MonthlyCard::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonthlyCard::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonthlyCard::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonthlyCard::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 MonthlyCard::status() const {
  return status_;
}
inline void MonthlyCard::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 hasGetted = 3;
inline bool MonthlyCard::has_hasgetted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonthlyCard::set_has_hasgetted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonthlyCard::clear_has_hasgetted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonthlyCard::clear_hasgetted() {
  hasgetted_ = 0;
  clear_has_hasgetted();
}
inline ::google::protobuf::int32 MonthlyCard::hasgetted() const {
  return hasgetted_;
}
inline void MonthlyCard::set_hasgetted(::google::protobuf::int32 value) {
  set_has_hasgetted();
  hasgetted_ = value;
}

// optional string deadLine = 4;
inline bool MonthlyCard::has_deadline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonthlyCard::set_has_deadline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonthlyCard::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonthlyCard::clear_deadline() {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    deadline_->clear();
  }
  clear_has_deadline();
}
inline const ::std::string& MonthlyCard::deadline() const {
  return *deadline_;
}
inline void MonthlyCard::set_deadline(const ::std::string& value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void MonthlyCard::set_deadline(const char* value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void MonthlyCard::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MonthlyCard::mutable_deadline() {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  return deadline_;
}
inline ::std::string* MonthlyCard::release_deadline() {
  clear_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deadline_;
    deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MonthlyCard::set_allocated_deadline(::std::string* deadline) {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    delete deadline_;
  }
  if (deadline) {
    set_has_deadline();
    deadline_ = deadline;
  } else {
    clear_has_deadline();
    deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NovicePack

// optional int32 daynum = 1;
inline bool NovicePack::has_daynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NovicePack::set_has_daynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NovicePack::clear_has_daynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NovicePack::clear_daynum() {
  daynum_ = 0;
  clear_has_daynum();
}
inline ::google::protobuf::int32 NovicePack::daynum() const {
  return daynum_;
}
inline void NovicePack::set_daynum(::google::protobuf::int32 value) {
  set_has_daynum();
  daynum_ = value;
}

// optional int32 status = 2;
inline bool NovicePack::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NovicePack::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NovicePack::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NovicePack::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 NovicePack::status() const {
  return status_;
}
inline void NovicePack::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional double money = 3;
inline bool NovicePack::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NovicePack::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NovicePack::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NovicePack::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline double NovicePack::money() const {
  return money_;
}
inline void NovicePack::set_money(double value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_NewDayRefresh

// optional .GiftBag giftBag = 1;
inline bool CMD_GP_NewDayRefresh::has_giftbag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_NewDayRefresh::set_has_giftbag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_NewDayRefresh::clear_has_giftbag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_NewDayRefresh::clear_giftbag() {
  if (giftbag_ != NULL) giftbag_->::GiftBag::Clear();
  clear_has_giftbag();
}
inline const ::GiftBag& CMD_GP_NewDayRefresh::giftbag() const {
  return giftbag_ != NULL ? *giftbag_ : *default_instance_->giftbag_;
}
inline ::GiftBag* CMD_GP_NewDayRefresh::mutable_giftbag() {
  set_has_giftbag();
  if (giftbag_ == NULL) giftbag_ = new ::GiftBag;
  return giftbag_;
}
inline ::GiftBag* CMD_GP_NewDayRefresh::release_giftbag() {
  clear_has_giftbag();
  ::GiftBag* temp = giftbag_;
  giftbag_ = NULL;
  return temp;
}
inline void CMD_GP_NewDayRefresh::set_allocated_giftbag(::GiftBag* giftbag) {
  delete giftbag_;
  giftbag_ = giftbag;
  if (giftbag) {
    set_has_giftbag();
  } else {
    clear_has_giftbag();
  }
}

// optional .Hall hall = 2;
inline bool CMD_GP_NewDayRefresh::has_hall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_NewDayRefresh::set_has_hall() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_NewDayRefresh::clear_has_hall() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_NewDayRefresh::clear_hall() {
  if (hall_ != NULL) hall_->::Hall::Clear();
  clear_has_hall();
}
inline const ::Hall& CMD_GP_NewDayRefresh::hall() const {
  return hall_ != NULL ? *hall_ : *default_instance_->hall_;
}
inline ::Hall* CMD_GP_NewDayRefresh::mutable_hall() {
  set_has_hall();
  if (hall_ == NULL) hall_ = new ::Hall;
  return hall_;
}
inline ::Hall* CMD_GP_NewDayRefresh::release_hall() {
  clear_has_hall();
  ::Hall* temp = hall_;
  hall_ = NULL;
  return temp;
}
inline void CMD_GP_NewDayRefresh::set_allocated_hall(::Hall* hall) {
  delete hall_;
  hall_ = hall;
  if (hall) {
    set_has_hall();
  } else {
    clear_has_hall();
  }
}

// optional .Relief relief = 3;
inline bool CMD_GP_NewDayRefresh::has_relief() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_NewDayRefresh::set_has_relief() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_NewDayRefresh::clear_has_relief() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_NewDayRefresh::clear_relief() {
  if (relief_ != NULL) relief_->::Relief::Clear();
  clear_has_relief();
}
inline const ::Relief& CMD_GP_NewDayRefresh::relief() const {
  return relief_ != NULL ? *relief_ : *default_instance_->relief_;
}
inline ::Relief* CMD_GP_NewDayRefresh::mutable_relief() {
  set_has_relief();
  if (relief_ == NULL) relief_ = new ::Relief;
  return relief_;
}
inline ::Relief* CMD_GP_NewDayRefresh::release_relief() {
  clear_has_relief();
  ::Relief* temp = relief_;
  relief_ = NULL;
  return temp;
}
inline void CMD_GP_NewDayRefresh::set_allocated_relief(::Relief* relief) {
  delete relief_;
  relief_ = relief;
  if (relief) {
    set_has_relief();
  } else {
    clear_has_relief();
  }
}

// optional string todayHasSigned = 4;
inline bool CMD_GP_NewDayRefresh::has_todayhassigned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_NewDayRefresh::set_has_todayhassigned() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_NewDayRefresh::clear_has_todayhassigned() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_NewDayRefresh::clear_todayhassigned() {
  if (todayhassigned_ != &::google::protobuf::internal::kEmptyString) {
    todayhassigned_->clear();
  }
  clear_has_todayhassigned();
}
inline const ::std::string& CMD_GP_NewDayRefresh::todayhassigned() const {
  return *todayhassigned_;
}
inline void CMD_GP_NewDayRefresh::set_todayhassigned(const ::std::string& value) {
  set_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    todayhassigned_ = new ::std::string;
  }
  todayhassigned_->assign(value);
}
inline void CMD_GP_NewDayRefresh::set_todayhassigned(const char* value) {
  set_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    todayhassigned_ = new ::std::string;
  }
  todayhassigned_->assign(value);
}
inline void CMD_GP_NewDayRefresh::set_todayhassigned(const char* value, size_t size) {
  set_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    todayhassigned_ = new ::std::string;
  }
  todayhassigned_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_NewDayRefresh::mutable_todayhassigned() {
  set_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    todayhassigned_ = new ::std::string;
  }
  return todayhassigned_;
}
inline ::std::string* CMD_GP_NewDayRefresh::release_todayhassigned() {
  clear_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = todayhassigned_;
    todayhassigned_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_NewDayRefresh::set_allocated_todayhassigned(::std::string* todayhassigned) {
  if (todayhassigned_ != &::google::protobuf::internal::kEmptyString) {
    delete todayhassigned_;
  }
  if (todayhassigned) {
    set_has_todayhassigned();
    todayhassigned_ = todayhassigned;
  } else {
    clear_has_todayhassigned();
    todayhassigned_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 aStatus = 5;
inline bool CMD_GP_NewDayRefresh::has_astatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_NewDayRefresh::set_has_astatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_NewDayRefresh::clear_has_astatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_NewDayRefresh::clear_astatus() {
  astatus_ = 0;
  clear_has_astatus();
}
inline ::google::protobuf::int32 CMD_GP_NewDayRefresh::astatus() const {
  return astatus_;
}
inline void CMD_GP_NewDayRefresh::set_astatus(::google::protobuf::int32 value) {
  set_has_astatus();
  astatus_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_LogonSuccess_CMD_GP_UserInfo

// required .GiftBag giftBag = 1;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_giftbag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_giftbag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_giftbag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_giftbag() {
  if (giftbag_ != NULL) giftbag_->::GiftBag::Clear();
  clear_has_giftbag();
}
inline const ::GiftBag& CMD_GP_LogonSuccess_CMD_GP_UserInfo::giftbag() const {
  return giftbag_ != NULL ? *giftbag_ : *default_instance_->giftbag_;
}
inline ::GiftBag* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_giftbag() {
  set_has_giftbag();
  if (giftbag_ == NULL) giftbag_ = new ::GiftBag;
  return giftbag_;
}
inline ::GiftBag* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_giftbag() {
  clear_has_giftbag();
  ::GiftBag* temp = giftbag_;
  giftbag_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_giftbag(::GiftBag* giftbag) {
  delete giftbag_;
  giftbag_ = giftbag;
  if (giftbag) {
    set_has_giftbag();
  } else {
    clear_has_giftbag();
  }
}

// repeated .ActivityConfig activityConfig = 2;
inline int CMD_GP_LogonSuccess_CMD_GP_UserInfo::activityconfig_size() const {
  return activityconfig_.size();
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_activityconfig() {
  activityconfig_.Clear();
}
inline const ::ActivityConfig& CMD_GP_LogonSuccess_CMD_GP_UserInfo::activityconfig(int index) const {
  return activityconfig_.Get(index);
}
inline ::ActivityConfig* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_activityconfig(int index) {
  return activityconfig_.Mutable(index);
}
inline ::ActivityConfig* CMD_GP_LogonSuccess_CMD_GP_UserInfo::add_activityconfig() {
  return activityconfig_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityConfig >&
CMD_GP_LogonSuccess_CMD_GP_UserInfo::activityconfig() const {
  return activityconfig_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityConfig >*
CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_activityconfig() {
  return &activityconfig_;
}

// optional string rechargeCaseMoney = 3;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_rechargecasemoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_rechargecasemoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_rechargecasemoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_rechargecasemoney() {
  if (rechargecasemoney_ != &::google::protobuf::internal::kEmptyString) {
    rechargecasemoney_->clear();
  }
  clear_has_rechargecasemoney();
}
inline const ::std::string& CMD_GP_LogonSuccess_CMD_GP_UserInfo::rechargecasemoney() const {
  return *rechargecasemoney_;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_rechargecasemoney(const ::std::string& value) {
  set_has_rechargecasemoney();
  if (rechargecasemoney_ == &::google::protobuf::internal::kEmptyString) {
    rechargecasemoney_ = new ::std::string;
  }
  rechargecasemoney_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_rechargecasemoney(const char* value) {
  set_has_rechargecasemoney();
  if (rechargecasemoney_ == &::google::protobuf::internal::kEmptyString) {
    rechargecasemoney_ = new ::std::string;
  }
  rechargecasemoney_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_rechargecasemoney(const char* value, size_t size) {
  set_has_rechargecasemoney();
  if (rechargecasemoney_ == &::google::protobuf::internal::kEmptyString) {
    rechargecasemoney_ = new ::std::string;
  }
  rechargecasemoney_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_rechargecasemoney() {
  set_has_rechargecasemoney();
  if (rechargecasemoney_ == &::google::protobuf::internal::kEmptyString) {
    rechargecasemoney_ = new ::std::string;
  }
  return rechargecasemoney_;
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_rechargecasemoney() {
  clear_has_rechargecasemoney();
  if (rechargecasemoney_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rechargecasemoney_;
    rechargecasemoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_rechargecasemoney(::std::string* rechargecasemoney) {
  if (rechargecasemoney_ != &::google::protobuf::internal::kEmptyString) {
    delete rechargecasemoney_;
  }
  if (rechargecasemoney) {
    set_has_rechargecasemoney();
    rechargecasemoney_ = rechargecasemoney;
  } else {
    clear_has_rechargecasemoney();
    rechargecasemoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .MemberInfo memberInfo = 4;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_memberinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_memberinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_memberinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_memberinfo() {
  if (memberinfo_ != NULL) memberinfo_->::MemberInfo::Clear();
  clear_has_memberinfo();
}
inline const ::MemberInfo& CMD_GP_LogonSuccess_CMD_GP_UserInfo::memberinfo() const {
  return memberinfo_ != NULL ? *memberinfo_ : *default_instance_->memberinfo_;
}
inline ::MemberInfo* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_memberinfo() {
  set_has_memberinfo();
  if (memberinfo_ == NULL) memberinfo_ = new ::MemberInfo;
  return memberinfo_;
}
inline ::MemberInfo* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_memberinfo() {
  clear_has_memberinfo();
  ::MemberInfo* temp = memberinfo_;
  memberinfo_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_memberinfo(::MemberInfo* memberinfo) {
  delete memberinfo_;
  memberinfo_ = memberinfo;
  if (memberinfo) {
    set_has_memberinfo();
  } else {
    clear_has_memberinfo();
  }
}

// optional .RechargeCaseBag rechargeCaseBag = 5;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_rechargecasebag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_rechargecasebag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_rechargecasebag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_rechargecasebag() {
  if (rechargecasebag_ != NULL) rechargecasebag_->::RechargeCaseBag::Clear();
  clear_has_rechargecasebag();
}
inline const ::RechargeCaseBag& CMD_GP_LogonSuccess_CMD_GP_UserInfo::rechargecasebag() const {
  return rechargecasebag_ != NULL ? *rechargecasebag_ : *default_instance_->rechargecasebag_;
}
inline ::RechargeCaseBag* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_rechargecasebag() {
  set_has_rechargecasebag();
  if (rechargecasebag_ == NULL) rechargecasebag_ = new ::RechargeCaseBag;
  return rechargecasebag_;
}
inline ::RechargeCaseBag* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_rechargecasebag() {
  clear_has_rechargecasebag();
  ::RechargeCaseBag* temp = rechargecasebag_;
  rechargecasebag_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_rechargecasebag(::RechargeCaseBag* rechargecasebag) {
  delete rechargecasebag_;
  rechargecasebag_ = rechargecasebag;
  if (rechargecasebag) {
    set_has_rechargecasebag();
  } else {
    clear_has_rechargecasebag();
  }
}

// optional .Secure secure = 6;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_secure() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_secure() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_secure() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_secure() {
  if (secure_ != NULL) secure_->::Secure::Clear();
  clear_has_secure();
}
inline const ::Secure& CMD_GP_LogonSuccess_CMD_GP_UserInfo::secure() const {
  return secure_ != NULL ? *secure_ : *default_instance_->secure_;
}
inline ::Secure* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_secure() {
  set_has_secure();
  if (secure_ == NULL) secure_ = new ::Secure;
  return secure_;
}
inline ::Secure* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_secure() {
  clear_has_secure();
  ::Secure* temp = secure_;
  secure_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_secure(::Secure* secure) {
  delete secure_;
  secure_ = secure;
  if (secure) {
    set_has_secure();
  } else {
    clear_has_secure();
  }
}

// optional .Novice novice = 7;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_novice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_novice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_novice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_novice() {
  if (novice_ != NULL) novice_->::Novice::Clear();
  clear_has_novice();
}
inline const ::Novice& CMD_GP_LogonSuccess_CMD_GP_UserInfo::novice() const {
  return novice_ != NULL ? *novice_ : *default_instance_->novice_;
}
inline ::Novice* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_novice() {
  set_has_novice();
  if (novice_ == NULL) novice_ = new ::Novice;
  return novice_;
}
inline ::Novice* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_novice() {
  clear_has_novice();
  ::Novice* temp = novice_;
  novice_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_novice(::Novice* novice) {
  delete novice_;
  novice_ = novice;
  if (novice) {
    set_has_novice();
  } else {
    clear_has_novice();
  }
}

// optional .Hall hall = 8;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_hall() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_hall() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_hall() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_hall() {
  if (hall_ != NULL) hall_->::Hall::Clear();
  clear_has_hall();
}
inline const ::Hall& CMD_GP_LogonSuccess_CMD_GP_UserInfo::hall() const {
  return hall_ != NULL ? *hall_ : *default_instance_->hall_;
}
inline ::Hall* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_hall() {
  set_has_hall();
  if (hall_ == NULL) hall_ = new ::Hall;
  return hall_;
}
inline ::Hall* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_hall() {
  clear_has_hall();
  ::Hall* temp = hall_;
  hall_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_hall(::Hall* hall) {
  delete hall_;
  hall_ = hall;
  if (hall) {
    set_has_hall();
  } else {
    clear_has_hall();
  }
}

// optional int32 aStatus = 9;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_astatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_astatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_astatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_astatus() {
  astatus_ = 0;
  clear_has_astatus();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess_CMD_GP_UserInfo::astatus() const {
  return astatus_;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_astatus(::google::protobuf::int32 value) {
  set_has_astatus();
  astatus_ = value;
}

// optional int32 continuousDaysSigned = 10;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_continuousdayssigned() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_continuousdayssigned() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_continuousdayssigned() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_continuousdayssigned() {
  continuousdayssigned_ = 0;
  clear_has_continuousdayssigned();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess_CMD_GP_UserInfo::continuousdayssigned() const {
  return continuousdayssigned_;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_continuousdayssigned(::google::protobuf::int32 value) {
  set_has_continuousdayssigned();
  continuousdayssigned_ = value;
}

// optional string teaRoomName = 11;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_tearoomname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_tearoomname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_tearoomname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_tearoomname() {
  if (tearoomname_ != &::google::protobuf::internal::kEmptyString) {
    tearoomname_->clear();
  }
  clear_has_tearoomname();
}
inline const ::std::string& CMD_GP_LogonSuccess_CMD_GP_UserInfo::tearoomname() const {
  return *tearoomname_;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_tearoomname(const ::std::string& value) {
  set_has_tearoomname();
  if (tearoomname_ == &::google::protobuf::internal::kEmptyString) {
    tearoomname_ = new ::std::string;
  }
  tearoomname_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_tearoomname(const char* value) {
  set_has_tearoomname();
  if (tearoomname_ == &::google::protobuf::internal::kEmptyString) {
    tearoomname_ = new ::std::string;
  }
  tearoomname_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_tearoomname(const char* value, size_t size) {
  set_has_tearoomname();
  if (tearoomname_ == &::google::protobuf::internal::kEmptyString) {
    tearoomname_ = new ::std::string;
  }
  tearoomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_tearoomname() {
  set_has_tearoomname();
  if (tearoomname_ == &::google::protobuf::internal::kEmptyString) {
    tearoomname_ = new ::std::string;
  }
  return tearoomname_;
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_tearoomname() {
  clear_has_tearoomname();
  if (tearoomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tearoomname_;
    tearoomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_tearoomname(::std::string* tearoomname) {
  if (tearoomname_ != &::google::protobuf::internal::kEmptyString) {
    delete tearoomname_;
  }
  if (tearoomname) {
    set_has_tearoomname();
    tearoomname_ = tearoomname;
  } else {
    clear_has_tearoomname();
    tearoomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Relief relief = 12;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_relief() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_relief() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_relief() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_relief() {
  if (relief_ != NULL) relief_->::Relief::Clear();
  clear_has_relief();
}
inline const ::Relief& CMD_GP_LogonSuccess_CMD_GP_UserInfo::relief() const {
  return relief_ != NULL ? *relief_ : *default_instance_->relief_;
}
inline ::Relief* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_relief() {
  set_has_relief();
  if (relief_ == NULL) relief_ = new ::Relief;
  return relief_;
}
inline ::Relief* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_relief() {
  clear_has_relief();
  ::Relief* temp = relief_;
  relief_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_relief(::Relief* relief) {
  delete relief_;
  relief_ = relief;
  if (relief) {
    set_has_relief();
  } else {
    clear_has_relief();
  }
}

// optional .NewGiftBag newGiftBag = 13;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_newgiftbag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_newgiftbag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_newgiftbag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_newgiftbag() {
  if (newgiftbag_ != NULL) newgiftbag_->::NewGiftBag::Clear();
  clear_has_newgiftbag();
}
inline const ::NewGiftBag& CMD_GP_LogonSuccess_CMD_GP_UserInfo::newgiftbag() const {
  return newgiftbag_ != NULL ? *newgiftbag_ : *default_instance_->newgiftbag_;
}
inline ::NewGiftBag* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_newgiftbag() {
  set_has_newgiftbag();
  if (newgiftbag_ == NULL) newgiftbag_ = new ::NewGiftBag;
  return newgiftbag_;
}
inline ::NewGiftBag* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_newgiftbag() {
  clear_has_newgiftbag();
  ::NewGiftBag* temp = newgiftbag_;
  newgiftbag_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_newgiftbag(::NewGiftBag* newgiftbag) {
  delete newgiftbag_;
  newgiftbag_ = newgiftbag;
  if (newgiftbag) {
    set_has_newgiftbag();
  } else {
    clear_has_newgiftbag();
  }
}

// optional string teaRoomQR = 14;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_tearoomqr() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_tearoomqr() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_tearoomqr() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_tearoomqr() {
  if (tearoomqr_ != &::google::protobuf::internal::kEmptyString) {
    tearoomqr_->clear();
  }
  clear_has_tearoomqr();
}
inline const ::std::string& CMD_GP_LogonSuccess_CMD_GP_UserInfo::tearoomqr() const {
  return *tearoomqr_;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_tearoomqr(const ::std::string& value) {
  set_has_tearoomqr();
  if (tearoomqr_ == &::google::protobuf::internal::kEmptyString) {
    tearoomqr_ = new ::std::string;
  }
  tearoomqr_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_tearoomqr(const char* value) {
  set_has_tearoomqr();
  if (tearoomqr_ == &::google::protobuf::internal::kEmptyString) {
    tearoomqr_ = new ::std::string;
  }
  tearoomqr_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_tearoomqr(const char* value, size_t size) {
  set_has_tearoomqr();
  if (tearoomqr_ == &::google::protobuf::internal::kEmptyString) {
    tearoomqr_ = new ::std::string;
  }
  tearoomqr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_tearoomqr() {
  set_has_tearoomqr();
  if (tearoomqr_ == &::google::protobuf::internal::kEmptyString) {
    tearoomqr_ = new ::std::string;
  }
  return tearoomqr_;
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_tearoomqr() {
  clear_has_tearoomqr();
  if (tearoomqr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tearoomqr_;
    tearoomqr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_tearoomqr(::std::string* tearoomqr) {
  if (tearoomqr_ != &::google::protobuf::internal::kEmptyString) {
    delete tearoomqr_;
  }
  if (tearoomqr) {
    set_has_tearoomqr();
    tearoomqr_ = tearoomqr;
  } else {
    clear_has_tearoomqr();
    tearoomqr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string todayHasSigned = 15;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_todayhassigned() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_todayhassigned() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_todayhassigned() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_todayhassigned() {
  if (todayhassigned_ != &::google::protobuf::internal::kEmptyString) {
    todayhassigned_->clear();
  }
  clear_has_todayhassigned();
}
inline const ::std::string& CMD_GP_LogonSuccess_CMD_GP_UserInfo::todayhassigned() const {
  return *todayhassigned_;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_todayhassigned(const ::std::string& value) {
  set_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    todayhassigned_ = new ::std::string;
  }
  todayhassigned_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_todayhassigned(const char* value) {
  set_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    todayhassigned_ = new ::std::string;
  }
  todayhassigned_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_todayhassigned(const char* value, size_t size) {
  set_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    todayhassigned_ = new ::std::string;
  }
  todayhassigned_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_todayhassigned() {
  set_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    todayhassigned_ = new ::std::string;
  }
  return todayhassigned_;
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_todayhassigned() {
  clear_has_todayhassigned();
  if (todayhassigned_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = todayhassigned_;
    todayhassigned_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_todayhassigned(::std::string* todayhassigned) {
  if (todayhassigned_ != &::google::protobuf::internal::kEmptyString) {
    delete todayhassigned_;
  }
  if (todayhassigned) {
    set_has_todayhassigned();
    todayhassigned_ = todayhassigned;
  } else {
    clear_has_todayhassigned();
    todayhassigned_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Activity activity = 16;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_activity() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_activity() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_activity() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_activity() {
  if (activity_ != NULL) activity_->::Activity::Clear();
  clear_has_activity();
}
inline const ::Activity& CMD_GP_LogonSuccess_CMD_GP_UserInfo::activity() const {
  return activity_ != NULL ? *activity_ : *default_instance_->activity_;
}
inline ::Activity* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_activity() {
  set_has_activity();
  if (activity_ == NULL) activity_ = new ::Activity;
  return activity_;
}
inline ::Activity* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_activity() {
  clear_has_activity();
  ::Activity* temp = activity_;
  activity_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_activity(::Activity* activity) {
  delete activity_;
  activity_ = activity;
  if (activity) {
    set_has_activity();
  } else {
    clear_has_activity();
  }
}

// optional .MonthlyCard monthlyCard = 17;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_monthlycard() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_monthlycard() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_monthlycard() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_monthlycard() {
  if (monthlycard_ != NULL) monthlycard_->::MonthlyCard::Clear();
  clear_has_monthlycard();
}
inline const ::MonthlyCard& CMD_GP_LogonSuccess_CMD_GP_UserInfo::monthlycard() const {
  return monthlycard_ != NULL ? *monthlycard_ : *default_instance_->monthlycard_;
}
inline ::MonthlyCard* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_monthlycard() {
  set_has_monthlycard();
  if (monthlycard_ == NULL) monthlycard_ = new ::MonthlyCard;
  return monthlycard_;
}
inline ::MonthlyCard* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_monthlycard() {
  clear_has_monthlycard();
  ::MonthlyCard* temp = monthlycard_;
  monthlycard_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_monthlycard(::MonthlyCard* monthlycard) {
  delete monthlycard_;
  monthlycard_ = monthlycard;
  if (monthlycard) {
    set_has_monthlycard();
  } else {
    clear_has_monthlycard();
  }
}

// optional .HomeConfig homeConfig = 18;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_homeconfig() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_homeconfig() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_homeconfig() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_homeconfig() {
  if (homeconfig_ != NULL) homeconfig_->::HomeConfig::Clear();
  clear_has_homeconfig();
}
inline const ::HomeConfig& CMD_GP_LogonSuccess_CMD_GP_UserInfo::homeconfig() const {
  return homeconfig_ != NULL ? *homeconfig_ : *default_instance_->homeconfig_;
}
inline ::HomeConfig* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_homeconfig() {
  set_has_homeconfig();
  if (homeconfig_ == NULL) homeconfig_ = new ::HomeConfig;
  return homeconfig_;
}
inline ::HomeConfig* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_homeconfig() {
  clear_has_homeconfig();
  ::HomeConfig* temp = homeconfig_;
  homeconfig_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_homeconfig(::HomeConfig* homeconfig) {
  delete homeconfig_;
  homeconfig_ = homeconfig;
  if (homeconfig) {
    set_has_homeconfig();
  } else {
    clear_has_homeconfig();
  }
}

// repeated .NovicePack novicePack = 19;
inline int CMD_GP_LogonSuccess_CMD_GP_UserInfo::novicepack_size() const {
  return novicepack_.size();
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_novicepack() {
  novicepack_.Clear();
}
inline const ::NovicePack& CMD_GP_LogonSuccess_CMD_GP_UserInfo::novicepack(int index) const {
  return novicepack_.Get(index);
}
inline ::NovicePack* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_novicepack(int index) {
  return novicepack_.Mutable(index);
}
inline ::NovicePack* CMD_GP_LogonSuccess_CMD_GP_UserInfo::add_novicepack() {
  return novicepack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NovicePack >&
CMD_GP_LogonSuccess_CMD_GP_UserInfo::novicepack() const {
  return novicepack_;
}
inline ::google::protobuf::RepeatedPtrField< ::NovicePack >*
CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_novicepack() {
  return &novicepack_;
}

// optional int32 NewSkin = 20;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_newskin() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_newskin() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_newskin() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_newskin() {
  newskin_ = 0;
  clear_has_newskin();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess_CMD_GP_UserInfo::newskin() const {
  return newskin_;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_newskin(::google::protobuf::int32 value) {
  set_has_newskin();
  newskin_ = value;
}

// optional string dwNewPlayerTime = 21;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_dwnewplayertime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_dwnewplayertime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_dwnewplayertime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_dwnewplayertime() {
  if (dwnewplayertime_ != &::google::protobuf::internal::kEmptyString) {
    dwnewplayertime_->clear();
  }
  clear_has_dwnewplayertime();
}
inline const ::std::string& CMD_GP_LogonSuccess_CMD_GP_UserInfo::dwnewplayertime() const {
  return *dwnewplayertime_;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_dwnewplayertime(const ::std::string& value) {
  set_has_dwnewplayertime();
  if (dwnewplayertime_ == &::google::protobuf::internal::kEmptyString) {
    dwnewplayertime_ = new ::std::string;
  }
  dwnewplayertime_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_dwnewplayertime(const char* value) {
  set_has_dwnewplayertime();
  if (dwnewplayertime_ == &::google::protobuf::internal::kEmptyString) {
    dwnewplayertime_ = new ::std::string;
  }
  dwnewplayertime_->assign(value);
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_dwnewplayertime(const char* value, size_t size) {
  set_has_dwnewplayertime();
  if (dwnewplayertime_ == &::google::protobuf::internal::kEmptyString) {
    dwnewplayertime_ = new ::std::string;
  }
  dwnewplayertime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_dwnewplayertime() {
  set_has_dwnewplayertime();
  if (dwnewplayertime_ == &::google::protobuf::internal::kEmptyString) {
    dwnewplayertime_ = new ::std::string;
  }
  return dwnewplayertime_;
}
inline ::std::string* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_dwnewplayertime() {
  clear_has_dwnewplayertime();
  if (dwnewplayertime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dwnewplayertime_;
    dwnewplayertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_dwnewplayertime(::std::string* dwnewplayertime) {
  if (dwnewplayertime_ != &::google::protobuf::internal::kEmptyString) {
    delete dwnewplayertime_;
  }
  if (dwnewplayertime) {
    set_has_dwnewplayertime();
    dwnewplayertime_ = dwnewplayertime;
  } else {
    clear_has_dwnewplayertime();
    dwnewplayertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isOpenMiniGame = 22;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_isopenminigame() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_isopenminigame() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_isopenminigame() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_isopenminigame() {
  isopenminigame_ = false;
  clear_has_isopenminigame();
}
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::isopenminigame() const {
  return isopenminigame_;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_isopenminigame(bool value) {
  set_has_isopenminigame();
  isopenminigame_ = value;
}

// optional .LanternBag lanternBag = 23;
inline bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::has_lanternbag() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_has_lanternbag() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_has_lanternbag() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::clear_lanternbag() {
  if (lanternbag_ != NULL) lanternbag_->::LanternBag::Clear();
  clear_has_lanternbag();
}
inline const ::LanternBag& CMD_GP_LogonSuccess_CMD_GP_UserInfo::lanternbag() const {
  return lanternbag_ != NULL ? *lanternbag_ : *default_instance_->lanternbag_;
}
inline ::LanternBag* CMD_GP_LogonSuccess_CMD_GP_UserInfo::mutable_lanternbag() {
  set_has_lanternbag();
  if (lanternbag_ == NULL) lanternbag_ = new ::LanternBag;
  return lanternbag_;
}
inline ::LanternBag* CMD_GP_LogonSuccess_CMD_GP_UserInfo::release_lanternbag() {
  clear_has_lanternbag();
  ::LanternBag* temp = lanternbag_;
  lanternbag_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess_CMD_GP_UserInfo::set_allocated_lanternbag(::LanternBag* lanternbag) {
  delete lanternbag_;
  lanternbag_ = lanternbag;
  if (lanternbag) {
    set_has_lanternbag();
  } else {
    clear_has_lanternbag();
  }
}

// -------------------------------------------------------------------

// CMD_GP_LogonSuccess

// required int32 wFaceID = 1;
inline bool CMD_GP_LogonSuccess::has_wfaceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_wfaceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_LogonSuccess::clear_has_wfaceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_LogonSuccess::clear_wfaceid() {
  wfaceid_ = 0;
  clear_has_wfaceid();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::wfaceid() const {
  return wfaceid_;
}
inline void CMD_GP_LogonSuccess::set_wfaceid(::google::protobuf::int32 value) {
  set_has_wfaceid();
  wfaceid_ = value;
}

// required int32 dwUserID = 2;
inline bool CMD_GP_LogonSuccess::has_dwuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_dwuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_LogonSuccess::clear_has_dwuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_LogonSuccess::clear_dwuserid() {
  dwuserid_ = 0;
  clear_has_dwuserid();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::dwuserid() const {
  return dwuserid_;
}
inline void CMD_GP_LogonSuccess::set_dwuserid(::google::protobuf::int32 value) {
  set_has_dwuserid();
  dwuserid_ = value;
}

// required int32 dwGameID = 3;
inline bool CMD_GP_LogonSuccess::has_dwgameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_dwgameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_LogonSuccess::clear_has_dwgameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_LogonSuccess::clear_dwgameid() {
  dwgameid_ = 0;
  clear_has_dwgameid();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::dwgameid() const {
  return dwgameid_;
}
inline void CMD_GP_LogonSuccess::set_dwgameid(::google::protobuf::int32 value) {
  set_has_dwgameid();
  dwgameid_ = value;
}

// required int32 dwCustomID = 4;
inline bool CMD_GP_LogonSuccess::has_dwcustomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_dwcustomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_LogonSuccess::clear_has_dwcustomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_LogonSuccess::clear_dwcustomid() {
  dwcustomid_ = 0;
  clear_has_dwcustomid();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::dwcustomid() const {
  return dwcustomid_;
}
inline void CMD_GP_LogonSuccess::set_dwcustomid(::google::protobuf::int32 value) {
  set_has_dwcustomid();
  dwcustomid_ = value;
}

// required int32 dwUserMedal = 5;
inline bool CMD_GP_LogonSuccess::has_dwusermedal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_dwusermedal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_LogonSuccess::clear_has_dwusermedal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_LogonSuccess::clear_dwusermedal() {
  dwusermedal_ = 0;
  clear_has_dwusermedal();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::dwusermedal() const {
  return dwusermedal_;
}
inline void CMD_GP_LogonSuccess::set_dwusermedal(::google::protobuf::int32 value) {
  set_has_dwusermedal();
  dwusermedal_ = value;
}

// required int32 dwExperience = 6;
inline bool CMD_GP_LogonSuccess::has_dwexperience() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_dwexperience() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GP_LogonSuccess::clear_has_dwexperience() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GP_LogonSuccess::clear_dwexperience() {
  dwexperience_ = 0;
  clear_has_dwexperience();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::dwexperience() const {
  return dwexperience_;
}
inline void CMD_GP_LogonSuccess::set_dwexperience(::google::protobuf::int32 value) {
  set_has_dwexperience();
  dwexperience_ = value;
}

// required int32 dwLoveLiness = 7;
inline bool CMD_GP_LogonSuccess::has_dwloveliness() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_dwloveliness() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GP_LogonSuccess::clear_has_dwloveliness() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GP_LogonSuccess::clear_dwloveliness() {
  dwloveliness_ = 0;
  clear_has_dwloveliness();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::dwloveliness() const {
  return dwloveliness_;
}
inline void CMD_GP_LogonSuccess::set_dwloveliness(::google::protobuf::int32 value) {
  set_has_dwloveliness();
  dwloveliness_ = value;
}

// required int32 lTicket = 8;
inline bool CMD_GP_LogonSuccess::has_lticket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_lticket() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_GP_LogonSuccess::clear_has_lticket() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_GP_LogonSuccess::clear_lticket() {
  lticket_ = 0;
  clear_has_lticket();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::lticket() const {
  return lticket_;
}
inline void CMD_GP_LogonSuccess::set_lticket(::google::protobuf::int32 value) {
  set_has_lticket();
  lticket_ = value;
}

// required int32 dwSpreaderID = 9;
inline bool CMD_GP_LogonSuccess::has_dwspreaderid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_dwspreaderid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_GP_LogonSuccess::clear_has_dwspreaderid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_GP_LogonSuccess::clear_dwspreaderid() {
  dwspreaderid_ = 0;
  clear_has_dwspreaderid();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::dwspreaderid() const {
  return dwspreaderid_;
}
inline void CMD_GP_LogonSuccess::set_dwspreaderid(::google::protobuf::int32 value) {
  set_has_dwspreaderid();
  dwspreaderid_ = value;
}

// required int64 lUserScore = 10;
inline bool CMD_GP_LogonSuccess::has_luserscore() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_luserscore() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_GP_LogonSuccess::clear_has_luserscore() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_GP_LogonSuccess::clear_luserscore() {
  luserscore_ = GOOGLE_LONGLONG(0);
  clear_has_luserscore();
}
inline ::google::protobuf::int64 CMD_GP_LogonSuccess::luserscore() const {
  return luserscore_;
}
inline void CMD_GP_LogonSuccess::set_luserscore(::google::protobuf::int64 value) {
  set_has_luserscore();
  luserscore_ = value;
}

// required int64 lUserInsure = 11;
inline bool CMD_GP_LogonSuccess::has_luserinsure() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_luserinsure() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMD_GP_LogonSuccess::clear_has_luserinsure() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMD_GP_LogonSuccess::clear_luserinsure() {
  luserinsure_ = GOOGLE_LONGLONG(0);
  clear_has_luserinsure();
}
inline ::google::protobuf::int64 CMD_GP_LogonSuccess::luserinsure() const {
  return luserinsure_;
}
inline void CMD_GP_LogonSuccess::set_luserinsure(::google::protobuf::int64 value) {
  set_has_luserinsure();
  luserinsure_ = value;
}

// required int32 cbGender = 12;
inline bool CMD_GP_LogonSuccess::has_cbgender() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_cbgender() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMD_GP_LogonSuccess::clear_has_cbgender() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMD_GP_LogonSuccess::clear_cbgender() {
  cbgender_ = 0;
  clear_has_cbgender();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::cbgender() const {
  return cbgender_;
}
inline void CMD_GP_LogonSuccess::set_cbgender(::google::protobuf::int32 value) {
  set_has_cbgender();
  cbgender_ = value;
}

// optional int32 cbMoorMachine = 13;
inline bool CMD_GP_LogonSuccess::has_cbmoormachine() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_cbmoormachine() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMD_GP_LogonSuccess::clear_has_cbmoormachine() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMD_GP_LogonSuccess::clear_cbmoormachine() {
  cbmoormachine_ = 0;
  clear_has_cbmoormachine();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::cbmoormachine() const {
  return cbmoormachine_;
}
inline void CMD_GP_LogonSuccess::set_cbmoormachine(::google::protobuf::int32 value) {
  set_has_cbmoormachine();
  cbmoormachine_ = value;
}

// required string szAccounts = 14;
inline bool CMD_GP_LogonSuccess::has_szaccounts() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_szaccounts() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMD_GP_LogonSuccess::clear_has_szaccounts() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMD_GP_LogonSuccess::clear_szaccounts() {
  if (szaccounts_ != &::google::protobuf::internal::kEmptyString) {
    szaccounts_->clear();
  }
  clear_has_szaccounts();
}
inline const ::std::string& CMD_GP_LogonSuccess::szaccounts() const {
  return *szaccounts_;
}
inline void CMD_GP_LogonSuccess::set_szaccounts(const ::std::string& value) {
  set_has_szaccounts();
  if (szaccounts_ == &::google::protobuf::internal::kEmptyString) {
    szaccounts_ = new ::std::string;
  }
  szaccounts_->assign(value);
}
inline void CMD_GP_LogonSuccess::set_szaccounts(const char* value) {
  set_has_szaccounts();
  if (szaccounts_ == &::google::protobuf::internal::kEmptyString) {
    szaccounts_ = new ::std::string;
  }
  szaccounts_->assign(value);
}
inline void CMD_GP_LogonSuccess::set_szaccounts(const char* value, size_t size) {
  set_has_szaccounts();
  if (szaccounts_ == &::google::protobuf::internal::kEmptyString) {
    szaccounts_ = new ::std::string;
  }
  szaccounts_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonSuccess::mutable_szaccounts() {
  set_has_szaccounts();
  if (szaccounts_ == &::google::protobuf::internal::kEmptyString) {
    szaccounts_ = new ::std::string;
  }
  return szaccounts_;
}
inline ::std::string* CMD_GP_LogonSuccess::release_szaccounts() {
  clear_has_szaccounts();
  if (szaccounts_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szaccounts_;
    szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonSuccess::set_allocated_szaccounts(::std::string* szaccounts) {
  if (szaccounts_ != &::google::protobuf::internal::kEmptyString) {
    delete szaccounts_;
  }
  if (szaccounts) {
    set_has_szaccounts();
    szaccounts_ = szaccounts;
  } else {
    clear_has_szaccounts();
    szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string szNickName = 15;
inline bool CMD_GP_LogonSuccess::has_sznickname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_sznickname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMD_GP_LogonSuccess::clear_has_sznickname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMD_GP_LogonSuccess::clear_sznickname() {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    sznickname_->clear();
  }
  clear_has_sznickname();
}
inline const ::std::string& CMD_GP_LogonSuccess::sznickname() const {
  return *sznickname_;
}
inline void CMD_GP_LogonSuccess::set_sznickname(const ::std::string& value) {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  sznickname_->assign(value);
}
inline void CMD_GP_LogonSuccess::set_sznickname(const char* value) {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  sznickname_->assign(value);
}
inline void CMD_GP_LogonSuccess::set_sznickname(const char* value, size_t size) {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  sznickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonSuccess::mutable_sznickname() {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  return sznickname_;
}
inline ::std::string* CMD_GP_LogonSuccess::release_sznickname() {
  clear_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sznickname_;
    sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonSuccess::set_allocated_sznickname(::std::string* sznickname) {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sznickname_;
  }
  if (sznickname) {
    set_has_sznickname();
    sznickname_ = sznickname;
  } else {
    clear_has_sznickname();
    sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 wInSpreaderID = 16;
inline bool CMD_GP_LogonSuccess::has_winspreaderid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_winspreaderid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMD_GP_LogonSuccess::clear_has_winspreaderid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMD_GP_LogonSuccess::clear_winspreaderid() {
  winspreaderid_ = 0;
  clear_has_winspreaderid();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::winspreaderid() const {
  return winspreaderid_;
}
inline void CMD_GP_LogonSuccess::set_winspreaderid(::google::protobuf::int32 value) {
  set_has_winspreaderid();
  winspreaderid_ = value;
}

// required int32 cbMemberOrder = 17;
inline bool CMD_GP_LogonSuccess::has_cbmemberorder() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_cbmemberorder() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMD_GP_LogonSuccess::clear_has_cbmemberorder() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMD_GP_LogonSuccess::clear_cbmemberorder() {
  cbmemberorder_ = 0;
  clear_has_cbmemberorder();
}
inline ::google::protobuf::int32 CMD_GP_LogonSuccess::cbmemberorder() const {
  return cbmemberorder_;
}
inline void CMD_GP_LogonSuccess::set_cbmemberorder(::google::protobuf::int32 value) {
  set_has_cbmemberorder();
  cbmemberorder_ = value;
}

// optional string szUnderWrite = 18;
inline bool CMD_GP_LogonSuccess::has_szunderwrite() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_szunderwrite() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMD_GP_LogonSuccess::clear_has_szunderwrite() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMD_GP_LogonSuccess::clear_szunderwrite() {
  if (szunderwrite_ != &::google::protobuf::internal::kEmptyString) {
    szunderwrite_->clear();
  }
  clear_has_szunderwrite();
}
inline const ::std::string& CMD_GP_LogonSuccess::szunderwrite() const {
  return *szunderwrite_;
}
inline void CMD_GP_LogonSuccess::set_szunderwrite(const ::std::string& value) {
  set_has_szunderwrite();
  if (szunderwrite_ == &::google::protobuf::internal::kEmptyString) {
    szunderwrite_ = new ::std::string;
  }
  szunderwrite_->assign(value);
}
inline void CMD_GP_LogonSuccess::set_szunderwrite(const char* value) {
  set_has_szunderwrite();
  if (szunderwrite_ == &::google::protobuf::internal::kEmptyString) {
    szunderwrite_ = new ::std::string;
  }
  szunderwrite_->assign(value);
}
inline void CMD_GP_LogonSuccess::set_szunderwrite(const char* value, size_t size) {
  set_has_szunderwrite();
  if (szunderwrite_ == &::google::protobuf::internal::kEmptyString) {
    szunderwrite_ = new ::std::string;
  }
  szunderwrite_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonSuccess::mutable_szunderwrite() {
  set_has_szunderwrite();
  if (szunderwrite_ == &::google::protobuf::internal::kEmptyString) {
    szunderwrite_ = new ::std::string;
  }
  return szunderwrite_;
}
inline ::std::string* CMD_GP_LogonSuccess::release_szunderwrite() {
  clear_has_szunderwrite();
  if (szunderwrite_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szunderwrite_;
    szunderwrite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonSuccess::set_allocated_szunderwrite(::std::string* szunderwrite) {
  if (szunderwrite_ != &::google::protobuf::internal::kEmptyString) {
    delete szunderwrite_;
  }
  if (szunderwrite) {
    set_has_szunderwrite();
    szunderwrite_ = szunderwrite;
  } else {
    clear_has_szunderwrite();
    szunderwrite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dwPwd = 19;
inline bool CMD_GP_LogonSuccess::has_dwpwd() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_dwpwd() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMD_GP_LogonSuccess::clear_has_dwpwd() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMD_GP_LogonSuccess::clear_dwpwd() {
  if (dwpwd_ != &::google::protobuf::internal::kEmptyString) {
    dwpwd_->clear();
  }
  clear_has_dwpwd();
}
inline const ::std::string& CMD_GP_LogonSuccess::dwpwd() const {
  return *dwpwd_;
}
inline void CMD_GP_LogonSuccess::set_dwpwd(const ::std::string& value) {
  set_has_dwpwd();
  if (dwpwd_ == &::google::protobuf::internal::kEmptyString) {
    dwpwd_ = new ::std::string;
  }
  dwpwd_->assign(value);
}
inline void CMD_GP_LogonSuccess::set_dwpwd(const char* value) {
  set_has_dwpwd();
  if (dwpwd_ == &::google::protobuf::internal::kEmptyString) {
    dwpwd_ = new ::std::string;
  }
  dwpwd_->assign(value);
}
inline void CMD_GP_LogonSuccess::set_dwpwd(const char* value, size_t size) {
  set_has_dwpwd();
  if (dwpwd_ == &::google::protobuf::internal::kEmptyString) {
    dwpwd_ = new ::std::string;
  }
  dwpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LogonSuccess::mutable_dwpwd() {
  set_has_dwpwd();
  if (dwpwd_ == &::google::protobuf::internal::kEmptyString) {
    dwpwd_ = new ::std::string;
  }
  return dwpwd_;
}
inline ::std::string* CMD_GP_LogonSuccess::release_dwpwd() {
  clear_has_dwpwd();
  if (dwpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dwpwd_;
    dwpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LogonSuccess::set_allocated_dwpwd(::std::string* dwpwd) {
  if (dwpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete dwpwd_;
  }
  if (dwpwd) {
    set_has_dwpwd();
    dwpwd_ = dwpwd;
  } else {
    clear_has_dwpwd();
    dwpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CMD_GP_LogonSuccess.CMD_GP_UserInfo userInfo = 20;
inline bool CMD_GP_LogonSuccess::has_userinfo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMD_GP_LogonSuccess::set_has_userinfo() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMD_GP_LogonSuccess::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMD_GP_LogonSuccess::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::CMD_GP_LogonSuccess_CMD_GP_UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::CMD_GP_LogonSuccess_CMD_GP_UserInfo& CMD_GP_LogonSuccess::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::CMD_GP_LogonSuccess_CMD_GP_UserInfo* CMD_GP_LogonSuccess::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::CMD_GP_LogonSuccess_CMD_GP_UserInfo;
  return userinfo_;
}
inline ::CMD_GP_LogonSuccess_CMD_GP_UserInfo* CMD_GP_LogonSuccess::release_userinfo() {
  clear_has_userinfo();
  ::CMD_GP_LogonSuccess_CMD_GP_UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void CMD_GP_LogonSuccess::set_allocated_userinfo(::CMD_GP_LogonSuccess_CMD_GP_UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// -------------------------------------------------------------------

// CMD_GP_LogonFinish

// required int32 wKindID = 1;
inline bool CMD_GP_LogonFinish::has_wkindid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_LogonFinish::set_has_wkindid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_LogonFinish::clear_has_wkindid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_LogonFinish::clear_wkindid() {
  wkindid_ = 0;
  clear_has_wkindid();
}
inline ::google::protobuf::int32 CMD_GP_LogonFinish::wkindid() const {
  return wkindid_;
}
inline void CMD_GP_LogonFinish::set_wkindid(::google::protobuf::int32 value) {
  set_has_wkindid();
  wkindid_ = value;
}

// required int32 wServerID = 2;
inline bool CMD_GP_LogonFinish::has_wserverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_LogonFinish::set_has_wserverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_LogonFinish::clear_has_wserverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_LogonFinish::clear_wserverid() {
  wserverid_ = 0;
  clear_has_wserverid();
}
inline ::google::protobuf::int32 CMD_GP_LogonFinish::wserverid() const {
  return wserverid_;
}
inline void CMD_GP_LogonFinish::set_wserverid(::google::protobuf::int32 value) {
  set_has_wserverid();
  wserverid_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GameServer_GameServer

// required int32 wKindID = 1;
inline bool CMD_GP_GameServer_GameServer::has_wkindid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_wkindid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_wkindid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GameServer_GameServer::clear_wkindid() {
  wkindid_ = 0;
  clear_has_wkindid();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::wkindid() const {
  return wkindid_;
}
inline void CMD_GP_GameServer_GameServer::set_wkindid(::google::protobuf::int32 value) {
  set_has_wkindid();
  wkindid_ = value;
}

// required int32 wNodeID = 2;
inline bool CMD_GP_GameServer_GameServer::has_wnodeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_wnodeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_wnodeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GameServer_GameServer::clear_wnodeid() {
  wnodeid_ = 0;
  clear_has_wnodeid();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::wnodeid() const {
  return wnodeid_;
}
inline void CMD_GP_GameServer_GameServer::set_wnodeid(::google::protobuf::int32 value) {
  set_has_wnodeid();
  wnodeid_ = value;
}

// required int32 wSortID = 3;
inline bool CMD_GP_GameServer_GameServer::has_wsortid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_wsortid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_wsortid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GameServer_GameServer::clear_wsortid() {
  wsortid_ = 0;
  clear_has_wsortid();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::wsortid() const {
  return wsortid_;
}
inline void CMD_GP_GameServer_GameServer::set_wsortid(::google::protobuf::int32 value) {
  set_has_wsortid();
  wsortid_ = value;
}

// required int32 wServerID = 4;
inline bool CMD_GP_GameServer_GameServer::has_wserverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_wserverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_wserverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_GameServer_GameServer::clear_wserverid() {
  wserverid_ = 0;
  clear_has_wserverid();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::wserverid() const {
  return wserverid_;
}
inline void CMD_GP_GameServer_GameServer::set_wserverid(::google::protobuf::int32 value) {
  set_has_wserverid();
  wserverid_ = value;
}

// required int32 wServerPort = 5;
inline bool CMD_GP_GameServer_GameServer::has_wserverport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_wserverport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_wserverport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_GameServer_GameServer::clear_wserverport() {
  wserverport_ = 0;
  clear_has_wserverport();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::wserverport() const {
  return wserverport_;
}
inline void CMD_GP_GameServer_GameServer::set_wserverport(::google::protobuf::int32 value) {
  set_has_wserverport();
  wserverport_ = value;
}

// required int32 dwOnLineCount = 6;
inline bool CMD_GP_GameServer_GameServer::has_dwonlinecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_dwonlinecount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_dwonlinecount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GP_GameServer_GameServer::clear_dwonlinecount() {
  dwonlinecount_ = 0;
  clear_has_dwonlinecount();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::dwonlinecount() const {
  return dwonlinecount_;
}
inline void CMD_GP_GameServer_GameServer::set_dwonlinecount(::google::protobuf::int32 value) {
  set_has_dwonlinecount();
  dwonlinecount_ = value;
}

// required int32 dwFullCount = 7;
inline bool CMD_GP_GameServer_GameServer::has_dwfullcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_dwfullcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_dwfullcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GP_GameServer_GameServer::clear_dwfullcount() {
  dwfullcount_ = 0;
  clear_has_dwfullcount();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::dwfullcount() const {
  return dwfullcount_;
}
inline void CMD_GP_GameServer_GameServer::set_dwfullcount(::google::protobuf::int32 value) {
  set_has_dwfullcount();
  dwfullcount_ = value;
}

// required int32 wServerType = 8;
inline bool CMD_GP_GameServer_GameServer::has_wservertype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_wservertype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_wservertype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_GP_GameServer_GameServer::clear_wservertype() {
  wservertype_ = 0;
  clear_has_wservertype();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::wservertype() const {
  return wservertype_;
}
inline void CMD_GP_GameServer_GameServer::set_wservertype(::google::protobuf::int32 value) {
  set_has_wservertype();
  wservertype_ = value;
}

// required string szServerAddr = 9;
inline bool CMD_GP_GameServer_GameServer::has_szserveraddr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_szserveraddr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_szserveraddr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_GP_GameServer_GameServer::clear_szserveraddr() {
  if (szserveraddr_ != &::google::protobuf::internal::kEmptyString) {
    szserveraddr_->clear();
  }
  clear_has_szserveraddr();
}
inline const ::std::string& CMD_GP_GameServer_GameServer::szserveraddr() const {
  return *szserveraddr_;
}
inline void CMD_GP_GameServer_GameServer::set_szserveraddr(const ::std::string& value) {
  set_has_szserveraddr();
  if (szserveraddr_ == &::google::protobuf::internal::kEmptyString) {
    szserveraddr_ = new ::std::string;
  }
  szserveraddr_->assign(value);
}
inline void CMD_GP_GameServer_GameServer::set_szserveraddr(const char* value) {
  set_has_szserveraddr();
  if (szserveraddr_ == &::google::protobuf::internal::kEmptyString) {
    szserveraddr_ = new ::std::string;
  }
  szserveraddr_->assign(value);
}
inline void CMD_GP_GameServer_GameServer::set_szserveraddr(const char* value, size_t size) {
  set_has_szserveraddr();
  if (szserveraddr_ == &::google::protobuf::internal::kEmptyString) {
    szserveraddr_ = new ::std::string;
  }
  szserveraddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GameServer_GameServer::mutable_szserveraddr() {
  set_has_szserveraddr();
  if (szserveraddr_ == &::google::protobuf::internal::kEmptyString) {
    szserveraddr_ = new ::std::string;
  }
  return szserveraddr_;
}
inline ::std::string* CMD_GP_GameServer_GameServer::release_szserveraddr() {
  clear_has_szserveraddr();
  if (szserveraddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szserveraddr_;
    szserveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GameServer_GameServer::set_allocated_szserveraddr(::std::string* szserveraddr) {
  if (szserveraddr_ != &::google::protobuf::internal::kEmptyString) {
    delete szserveraddr_;
  }
  if (szserveraddr) {
    set_has_szserveraddr();
    szserveraddr_ = szserveraddr;
  } else {
    clear_has_szserveraddr();
    szserveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string szServerName = 10;
inline bool CMD_GP_GameServer_GameServer::has_szservername() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_szservername() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_szservername() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_GP_GameServer_GameServer::clear_szservername() {
  if (szservername_ != &::google::protobuf::internal::kEmptyString) {
    szservername_->clear();
  }
  clear_has_szservername();
}
inline const ::std::string& CMD_GP_GameServer_GameServer::szservername() const {
  return *szservername_;
}
inline void CMD_GP_GameServer_GameServer::set_szservername(const ::std::string& value) {
  set_has_szservername();
  if (szservername_ == &::google::protobuf::internal::kEmptyString) {
    szservername_ = new ::std::string;
  }
  szservername_->assign(value);
}
inline void CMD_GP_GameServer_GameServer::set_szservername(const char* value) {
  set_has_szservername();
  if (szservername_ == &::google::protobuf::internal::kEmptyString) {
    szservername_ = new ::std::string;
  }
  szservername_->assign(value);
}
inline void CMD_GP_GameServer_GameServer::set_szservername(const char* value, size_t size) {
  set_has_szservername();
  if (szservername_ == &::google::protobuf::internal::kEmptyString) {
    szservername_ = new ::std::string;
  }
  szservername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GameServer_GameServer::mutable_szservername() {
  set_has_szservername();
  if (szservername_ == &::google::protobuf::internal::kEmptyString) {
    szservername_ = new ::std::string;
  }
  return szservername_;
}
inline ::std::string* CMD_GP_GameServer_GameServer::release_szservername() {
  clear_has_szservername();
  if (szservername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szservername_;
    szservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GameServer_GameServer::set_allocated_szservername(::std::string* szservername) {
  if (szservername_ != &::google::protobuf::internal::kEmptyString) {
    delete szservername_;
  }
  if (szservername) {
    set_has_szservername();
    szservername_ = szservername;
  } else {
    clear_has_szservername();
    szservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 lMinEnterScore = 11;
inline bool CMD_GP_GameServer_GameServer::has_lminenterscore() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_lminenterscore() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_lminenterscore() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMD_GP_GameServer_GameServer::clear_lminenterscore() {
  lminenterscore_ = GOOGLE_LONGLONG(0);
  clear_has_lminenterscore();
}
inline ::google::protobuf::int64 CMD_GP_GameServer_GameServer::lminenterscore() const {
  return lminenterscore_;
}
inline void CMD_GP_GameServer_GameServer::set_lminenterscore(::google::protobuf::int64 value) {
  set_has_lminenterscore();
  lminenterscore_ = value;
}

// required int64 lMaxEnterScore = 12;
inline bool CMD_GP_GameServer_GameServer::has_lmaxenterscore() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_lmaxenterscore() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_lmaxenterscore() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMD_GP_GameServer_GameServer::clear_lmaxenterscore() {
  lmaxenterscore_ = GOOGLE_LONGLONG(0);
  clear_has_lmaxenterscore();
}
inline ::google::protobuf::int64 CMD_GP_GameServer_GameServer::lmaxenterscore() const {
  return lmaxenterscore_;
}
inline void CMD_GP_GameServer_GameServer::set_lmaxenterscore(::google::protobuf::int64 value) {
  set_has_lmaxenterscore();
  lmaxenterscore_ = value;
}

// required int32 wServerKind = 13;
inline bool CMD_GP_GameServer_GameServer::has_wserverkind() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_wserverkind() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_wserverkind() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMD_GP_GameServer_GameServer::clear_wserverkind() {
  wserverkind_ = 0;
  clear_has_wserverkind();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::wserverkind() const {
  return wserverkind_;
}
inline void CMD_GP_GameServer_GameServer::set_wserverkind(::google::protobuf::int32 value) {
  set_has_wserverkind();
  wserverkind_ = value;
}

// required int32 wServerLevel = 14;
inline bool CMD_GP_GameServer_GameServer::has_wserverlevel() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_wserverlevel() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_wserverlevel() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMD_GP_GameServer_GameServer::clear_wserverlevel() {
  wserverlevel_ = 0;
  clear_has_wserverlevel();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::wserverlevel() const {
  return wserverlevel_;
}
inline void CMD_GP_GameServer_GameServer::set_wserverlevel(::google::protobuf::int32 value) {
  set_has_wserverlevel();
  wserverlevel_ = value;
}

// required int64 lCellScore = 15;
inline bool CMD_GP_GameServer_GameServer::has_lcellscore() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_lcellscore() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_lcellscore() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMD_GP_GameServer_GameServer::clear_lcellscore() {
  lcellscore_ = GOOGLE_LONGLONG(0);
  clear_has_lcellscore();
}
inline ::google::protobuf::int64 CMD_GP_GameServer_GameServer::lcellscore() const {
  return lcellscore_;
}
inline void CMD_GP_GameServer_GameServer::set_lcellscore(::google::protobuf::int64 value) {
  set_has_lcellscore();
  lcellscore_ = value;
}

// required int64 lEnterScore = 16;
inline bool CMD_GP_GameServer_GameServer::has_lenterscore() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_lenterscore() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_lenterscore() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMD_GP_GameServer_GameServer::clear_lenterscore() {
  lenterscore_ = GOOGLE_LONGLONG(0);
  clear_has_lenterscore();
}
inline ::google::protobuf::int64 CMD_GP_GameServer_GameServer::lenterscore() const {
  return lenterscore_;
}
inline void CMD_GP_GameServer_GameServer::set_lenterscore(::google::protobuf::int64 value) {
  set_has_lenterscore();
  lenterscore_ = value;
}

// required int32 cbEnterMember = 17;
inline bool CMD_GP_GameServer_GameServer::has_cbentermember() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_cbentermember() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_cbentermember() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMD_GP_GameServer_GameServer::clear_cbentermember() {
  cbentermember_ = 0;
  clear_has_cbentermember();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::cbentermember() const {
  return cbentermember_;
}
inline void CMD_GP_GameServer_GameServer::set_cbentermember(::google::protobuf::int32 value) {
  set_has_cbentermember();
  cbentermember_ = value;
}

// required int32 dwServerRule = 18;
inline bool CMD_GP_GameServer_GameServer::has_dwserverrule() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_dwserverrule() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_dwserverrule() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMD_GP_GameServer_GameServer::clear_dwserverrule() {
  dwserverrule_ = 0;
  clear_has_dwserverrule();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::dwserverrule() const {
  return dwserverrule_;
}
inline void CMD_GP_GameServer_GameServer::set_dwserverrule(::google::protobuf::int32 value) {
  set_has_dwserverrule();
  dwserverrule_ = value;
}

// required int32 dwSurportType = 19;
inline bool CMD_GP_GameServer_GameServer::has_dwsurporttype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_dwsurporttype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_dwsurporttype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMD_GP_GameServer_GameServer::clear_dwsurporttype() {
  dwsurporttype_ = 0;
  clear_has_dwsurporttype();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::dwsurporttype() const {
  return dwsurporttype_;
}
inline void CMD_GP_GameServer_GameServer::set_dwsurporttype(::google::protobuf::int32 value) {
  set_has_dwsurporttype();
  dwsurporttype_ = value;
}

// required int32 wTableCount = 20;
inline bool CMD_GP_GameServer_GameServer::has_wtablecount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_wtablecount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_wtablecount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMD_GP_GameServer_GameServer::clear_wtablecount() {
  wtablecount_ = 0;
  clear_has_wtablecount();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::wtablecount() const {
  return wtablecount_;
}
inline void CMD_GP_GameServer_GameServer::set_wtablecount(::google::protobuf::int32 value) {
  set_has_wtablecount();
  wtablecount_ = value;
}

// required int32 isChargeRoom = 21;
inline bool CMD_GP_GameServer_GameServer::has_ischargeroom() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMD_GP_GameServer_GameServer::set_has_ischargeroom() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMD_GP_GameServer_GameServer::clear_has_ischargeroom() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMD_GP_GameServer_GameServer::clear_ischargeroom() {
  ischargeroom_ = 0;
  clear_has_ischargeroom();
}
inline ::google::protobuf::int32 CMD_GP_GameServer_GameServer::ischargeroom() const {
  return ischargeroom_;
}
inline void CMD_GP_GameServer_GameServer::set_ischargeroom(::google::protobuf::int32 value) {
  set_has_ischargeroom();
  ischargeroom_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GameServer

// repeated .CMD_GP_GameServer.GameServer gameserver = 1;
inline int CMD_GP_GameServer::gameserver_size() const {
  return gameserver_.size();
}
inline void CMD_GP_GameServer::clear_gameserver() {
  gameserver_.Clear();
}
inline const ::CMD_GP_GameServer_GameServer& CMD_GP_GameServer::gameserver(int index) const {
  return gameserver_.Get(index);
}
inline ::CMD_GP_GameServer_GameServer* CMD_GP_GameServer::mutable_gameserver(int index) {
  return gameserver_.Mutable(index);
}
inline ::CMD_GP_GameServer_GameServer* CMD_GP_GameServer::add_gameserver() {
  return gameserver_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameServer_GameServer >&
CMD_GP_GameServer::gameserver() const {
  return gameserver_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameServer_GameServer >*
CMD_GP_GameServer::mutable_gameserver() {
  return &gameserver_;
}

// -------------------------------------------------------------------

// CMD_GP_GameKind_GameKind

// required int32 wTypeID = 1;
inline bool CMD_GP_GameKind_GameKind::has_wtypeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GameKind_GameKind::set_has_wtypeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GameKind_GameKind::clear_has_wtypeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GameKind_GameKind::clear_wtypeid() {
  wtypeid_ = 0;
  clear_has_wtypeid();
}
inline ::google::protobuf::int32 CMD_GP_GameKind_GameKind::wtypeid() const {
  return wtypeid_;
}
inline void CMD_GP_GameKind_GameKind::set_wtypeid(::google::protobuf::int32 value) {
  set_has_wtypeid();
  wtypeid_ = value;
}

// required int32 wJoinID = 2;
inline bool CMD_GP_GameKind_GameKind::has_wjoinid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GameKind_GameKind::set_has_wjoinid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GameKind_GameKind::clear_has_wjoinid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GameKind_GameKind::clear_wjoinid() {
  wjoinid_ = 0;
  clear_has_wjoinid();
}
inline ::google::protobuf::int32 CMD_GP_GameKind_GameKind::wjoinid() const {
  return wjoinid_;
}
inline void CMD_GP_GameKind_GameKind::set_wjoinid(::google::protobuf::int32 value) {
  set_has_wjoinid();
  wjoinid_ = value;
}

// required int32 wSortID = 3;
inline bool CMD_GP_GameKind_GameKind::has_wsortid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GameKind_GameKind::set_has_wsortid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GameKind_GameKind::clear_has_wsortid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GameKind_GameKind::clear_wsortid() {
  wsortid_ = 0;
  clear_has_wsortid();
}
inline ::google::protobuf::int32 CMD_GP_GameKind_GameKind::wsortid() const {
  return wsortid_;
}
inline void CMD_GP_GameKind_GameKind::set_wsortid(::google::protobuf::int32 value) {
  set_has_wsortid();
  wsortid_ = value;
}

// required int32 wKindID = 4;
inline bool CMD_GP_GameKind_GameKind::has_wkindid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_GameKind_GameKind::set_has_wkindid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_GameKind_GameKind::clear_has_wkindid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_GameKind_GameKind::clear_wkindid() {
  wkindid_ = 0;
  clear_has_wkindid();
}
inline ::google::protobuf::int32 CMD_GP_GameKind_GameKind::wkindid() const {
  return wkindid_;
}
inline void CMD_GP_GameKind_GameKind::set_wkindid(::google::protobuf::int32 value) {
  set_has_wkindid();
  wkindid_ = value;
}

// required int32 wGameID = 5;
inline bool CMD_GP_GameKind_GameKind::has_wgameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_GameKind_GameKind::set_has_wgameid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_GameKind_GameKind::clear_has_wgameid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_GameKind_GameKind::clear_wgameid() {
  wgameid_ = 0;
  clear_has_wgameid();
}
inline ::google::protobuf::int32 CMD_GP_GameKind_GameKind::wgameid() const {
  return wgameid_;
}
inline void CMD_GP_GameKind_GameKind::set_wgameid(::google::protobuf::int32 value) {
  set_has_wgameid();
  wgameid_ = value;
}

// required int32 dwOnLineCount = 6;
inline bool CMD_GP_GameKind_GameKind::has_dwonlinecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GP_GameKind_GameKind::set_has_dwonlinecount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GP_GameKind_GameKind::clear_has_dwonlinecount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GP_GameKind_GameKind::clear_dwonlinecount() {
  dwonlinecount_ = 0;
  clear_has_dwonlinecount();
}
inline ::google::protobuf::int32 CMD_GP_GameKind_GameKind::dwonlinecount() const {
  return dwonlinecount_;
}
inline void CMD_GP_GameKind_GameKind::set_dwonlinecount(::google::protobuf::int32 value) {
  set_has_dwonlinecount();
  dwonlinecount_ = value;
}

// required int32 dwFullCount = 7;
inline bool CMD_GP_GameKind_GameKind::has_dwfullcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GP_GameKind_GameKind::set_has_dwfullcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GP_GameKind_GameKind::clear_has_dwfullcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GP_GameKind_GameKind::clear_dwfullcount() {
  dwfullcount_ = 0;
  clear_has_dwfullcount();
}
inline ::google::protobuf::int32 CMD_GP_GameKind_GameKind::dwfullcount() const {
  return dwfullcount_;
}
inline void CMD_GP_GameKind_GameKind::set_dwfullcount(::google::protobuf::int32 value) {
  set_has_dwfullcount();
  dwfullcount_ = value;
}

// required string szKindName = 8;
inline bool CMD_GP_GameKind_GameKind::has_szkindname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_GP_GameKind_GameKind::set_has_szkindname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_GP_GameKind_GameKind::clear_has_szkindname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_GP_GameKind_GameKind::clear_szkindname() {
  if (szkindname_ != &::google::protobuf::internal::kEmptyString) {
    szkindname_->clear();
  }
  clear_has_szkindname();
}
inline const ::std::string& CMD_GP_GameKind_GameKind::szkindname() const {
  return *szkindname_;
}
inline void CMD_GP_GameKind_GameKind::set_szkindname(const ::std::string& value) {
  set_has_szkindname();
  if (szkindname_ == &::google::protobuf::internal::kEmptyString) {
    szkindname_ = new ::std::string;
  }
  szkindname_->assign(value);
}
inline void CMD_GP_GameKind_GameKind::set_szkindname(const char* value) {
  set_has_szkindname();
  if (szkindname_ == &::google::protobuf::internal::kEmptyString) {
    szkindname_ = new ::std::string;
  }
  szkindname_->assign(value);
}
inline void CMD_GP_GameKind_GameKind::set_szkindname(const char* value, size_t size) {
  set_has_szkindname();
  if (szkindname_ == &::google::protobuf::internal::kEmptyString) {
    szkindname_ = new ::std::string;
  }
  szkindname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GameKind_GameKind::mutable_szkindname() {
  set_has_szkindname();
  if (szkindname_ == &::google::protobuf::internal::kEmptyString) {
    szkindname_ = new ::std::string;
  }
  return szkindname_;
}
inline ::std::string* CMD_GP_GameKind_GameKind::release_szkindname() {
  clear_has_szkindname();
  if (szkindname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szkindname_;
    szkindname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GameKind_GameKind::set_allocated_szkindname(::std::string* szkindname) {
  if (szkindname_ != &::google::protobuf::internal::kEmptyString) {
    delete szkindname_;
  }
  if (szkindname) {
    set_has_szkindname();
    szkindname_ = szkindname;
  } else {
    clear_has_szkindname();
    szkindname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string szProcessName = 9;
inline bool CMD_GP_GameKind_GameKind::has_szprocessname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_GP_GameKind_GameKind::set_has_szprocessname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_GP_GameKind_GameKind::clear_has_szprocessname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_GP_GameKind_GameKind::clear_szprocessname() {
  if (szprocessname_ != &::google::protobuf::internal::kEmptyString) {
    szprocessname_->clear();
  }
  clear_has_szprocessname();
}
inline const ::std::string& CMD_GP_GameKind_GameKind::szprocessname() const {
  return *szprocessname_;
}
inline void CMD_GP_GameKind_GameKind::set_szprocessname(const ::std::string& value) {
  set_has_szprocessname();
  if (szprocessname_ == &::google::protobuf::internal::kEmptyString) {
    szprocessname_ = new ::std::string;
  }
  szprocessname_->assign(value);
}
inline void CMD_GP_GameKind_GameKind::set_szprocessname(const char* value) {
  set_has_szprocessname();
  if (szprocessname_ == &::google::protobuf::internal::kEmptyString) {
    szprocessname_ = new ::std::string;
  }
  szprocessname_->assign(value);
}
inline void CMD_GP_GameKind_GameKind::set_szprocessname(const char* value, size_t size) {
  set_has_szprocessname();
  if (szprocessname_ == &::google::protobuf::internal::kEmptyString) {
    szprocessname_ = new ::std::string;
  }
  szprocessname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GameKind_GameKind::mutable_szprocessname() {
  set_has_szprocessname();
  if (szprocessname_ == &::google::protobuf::internal::kEmptyString) {
    szprocessname_ = new ::std::string;
  }
  return szprocessname_;
}
inline ::std::string* CMD_GP_GameKind_GameKind::release_szprocessname() {
  clear_has_szprocessname();
  if (szprocessname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szprocessname_;
    szprocessname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GameKind_GameKind::set_allocated_szprocessname(::std::string* szprocessname) {
  if (szprocessname_ != &::google::protobuf::internal::kEmptyString) {
    delete szprocessname_;
  }
  if (szprocessname) {
    set_has_szprocessname();
    szprocessname_ = szprocessname;
  } else {
    clear_has_szprocessname();
    szprocessname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GameKind

// repeated .CMD_GP_GameKind.GameKind gamekind = 1;
inline int CMD_GP_GameKind::gamekind_size() const {
  return gamekind_.size();
}
inline void CMD_GP_GameKind::clear_gamekind() {
  gamekind_.Clear();
}
inline const ::CMD_GP_GameKind_GameKind& CMD_GP_GameKind::gamekind(int index) const {
  return gamekind_.Get(index);
}
inline ::CMD_GP_GameKind_GameKind* CMD_GP_GameKind::mutable_gamekind(int index) {
  return gamekind_.Mutable(index);
}
inline ::CMD_GP_GameKind_GameKind* CMD_GP_GameKind::add_gamekind() {
  return gamekind_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameKind_GameKind >&
CMD_GP_GameKind::gamekind() const {
  return gamekind_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMD_GP_GameKind_GameKind >*
CMD_GP_GameKind::mutable_gamekind() {
  return &gamekind_;
}

// -------------------------------------------------------------------

// CMD_GP_GiftDetail_GiftDetail

// required int32 type = 1;
inline bool CMD_GP_GiftDetail_GiftDetail::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GiftDetail_GiftDetail::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GiftDetail_GiftDetail::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GiftDetail_GiftDetail::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CMD_GP_GiftDetail_GiftDetail::type() const {
  return type_;
}
inline void CMD_GP_GiftDetail_GiftDetail::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 num = 2;
inline bool CMD_GP_GiftDetail_GiftDetail::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GiftDetail_GiftDetail::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GiftDetail_GiftDetail::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GiftDetail_GiftDetail::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 CMD_GP_GiftDetail_GiftDetail::num() const {
  return num_;
}
inline void CMD_GP_GiftDetail_GiftDetail::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_GiftDetail

// repeated .CMD_GP_GiftDetail.GiftDetail giftDetail = 1;
inline int CMD_GP_GiftDetail::giftdetail_size() const {
  return giftdetail_.size();
}
inline void CMD_GP_GiftDetail::clear_giftdetail() {
  giftdetail_.Clear();
}
inline const ::CMD_GP_GiftDetail_GiftDetail& CMD_GP_GiftDetail::giftdetail(int index) const {
  return giftdetail_.Get(index);
}
inline ::CMD_GP_GiftDetail_GiftDetail* CMD_GP_GiftDetail::mutable_giftdetail(int index) {
  return giftdetail_.Mutable(index);
}
inline ::CMD_GP_GiftDetail_GiftDetail* CMD_GP_GiftDetail::add_giftdetail() {
  return giftdetail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMD_GP_GiftDetail_GiftDetail >&
CMD_GP_GiftDetail::giftdetail() const {
  return giftdetail_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMD_GP_GiftDetail_GiftDetail >*
CMD_GP_GiftDetail::mutable_giftdetail() {
  return &giftdetail_;
}

// -------------------------------------------------------------------

// CMD_GP_LanternGiftDetail_LanternGiftDetail

// required int32 type = 1;
inline bool CMD_GP_LanternGiftDetail_LanternGiftDetail::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_LanternGiftDetail_LanternGiftDetail::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_LanternGiftDetail_LanternGiftDetail::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_LanternGiftDetail_LanternGiftDetail::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CMD_GP_LanternGiftDetail_LanternGiftDetail::type() const {
  return type_;
}
inline void CMD_GP_LanternGiftDetail_LanternGiftDetail::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 num = 2;
inline bool CMD_GP_LanternGiftDetail_LanternGiftDetail::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_LanternGiftDetail_LanternGiftDetail::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_LanternGiftDetail_LanternGiftDetail::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_LanternGiftDetail_LanternGiftDetail::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 CMD_GP_LanternGiftDetail_LanternGiftDetail::num() const {
  return num_;
}
inline void CMD_GP_LanternGiftDetail_LanternGiftDetail::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// CMD_GP_LanternGiftDetail

// repeated .CMD_GP_LanternGiftDetail.LanternGiftDetail lanterngiftDetail = 1;
inline int CMD_GP_LanternGiftDetail::lanterngiftdetail_size() const {
  return lanterngiftdetail_.size();
}
inline void CMD_GP_LanternGiftDetail::clear_lanterngiftdetail() {
  lanterngiftdetail_.Clear();
}
inline const ::CMD_GP_LanternGiftDetail_LanternGiftDetail& CMD_GP_LanternGiftDetail::lanterngiftdetail(int index) const {
  return lanterngiftdetail_.Get(index);
}
inline ::CMD_GP_LanternGiftDetail_LanternGiftDetail* CMD_GP_LanternGiftDetail::mutable_lanterngiftdetail(int index) {
  return lanterngiftdetail_.Mutable(index);
}
inline ::CMD_GP_LanternGiftDetail_LanternGiftDetail* CMD_GP_LanternGiftDetail::add_lanterngiftdetail() {
  return lanterngiftdetail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMD_GP_LanternGiftDetail_LanternGiftDetail >&
CMD_GP_LanternGiftDetail::lanterngiftdetail() const {
  return lanterngiftdetail_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMD_GP_LanternGiftDetail_LanternGiftDetail >*
CMD_GP_LanternGiftDetail::mutable_lanterngiftdetail() {
  return &lanterngiftdetail_;
}

// -------------------------------------------------------------------

// CMD_GP_ChangeAccount

// required string msg = 1;
inline bool CMD_GP_ChangeAccount::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_ChangeAccount::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_ChangeAccount::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_ChangeAccount::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_ChangeAccount::msg() const {
  return *msg_;
}
inline void CMD_GP_ChangeAccount::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_ChangeAccount::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_ChangeAccount::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ChangeAccount::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_ChangeAccount::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ChangeAccount::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_TreasureChange

// optional int64 score = 1;
inline bool CMD_GP_TreasureChange::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_TreasureChange::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_TreasureChange::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 CMD_GP_TreasureChange::score() const {
  return score_;
}
inline void CMD_GP_TreasureChange::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional int32 memberType = 2;
inline bool CMD_GP_TreasureChange::has_membertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_membertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_TreasureChange::clear_has_membertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_TreasureChange::clear_membertype() {
  membertype_ = 0;
  clear_has_membertype();
}
inline ::google::protobuf::int32 CMD_GP_TreasureChange::membertype() const {
  return membertype_;
}
inline void CMD_GP_TreasureChange::set_membertype(::google::protobuf::int32 value) {
  set_has_membertype();
  membertype_ = value;
}

// optional string memberInfo = 3;
inline bool CMD_GP_TreasureChange::has_memberinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_memberinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_TreasureChange::clear_has_memberinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_TreasureChange::clear_memberinfo() {
  if (memberinfo_ != &::google::protobuf::internal::kEmptyString) {
    memberinfo_->clear();
  }
  clear_has_memberinfo();
}
inline const ::std::string& CMD_GP_TreasureChange::memberinfo() const {
  return *memberinfo_;
}
inline void CMD_GP_TreasureChange::set_memberinfo(const ::std::string& value) {
  set_has_memberinfo();
  if (memberinfo_ == &::google::protobuf::internal::kEmptyString) {
    memberinfo_ = new ::std::string;
  }
  memberinfo_->assign(value);
}
inline void CMD_GP_TreasureChange::set_memberinfo(const char* value) {
  set_has_memberinfo();
  if (memberinfo_ == &::google::protobuf::internal::kEmptyString) {
    memberinfo_ = new ::std::string;
  }
  memberinfo_->assign(value);
}
inline void CMD_GP_TreasureChange::set_memberinfo(const char* value, size_t size) {
  set_has_memberinfo();
  if (memberinfo_ == &::google::protobuf::internal::kEmptyString) {
    memberinfo_ = new ::std::string;
  }
  memberinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_TreasureChange::mutable_memberinfo() {
  set_has_memberinfo();
  if (memberinfo_ == &::google::protobuf::internal::kEmptyString) {
    memberinfo_ = new ::std::string;
  }
  return memberinfo_;
}
inline ::std::string* CMD_GP_TreasureChange::release_memberinfo() {
  clear_has_memberinfo();
  if (memberinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = memberinfo_;
    memberinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_TreasureChange::set_allocated_memberinfo(::std::string* memberinfo) {
  if (memberinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete memberinfo_;
  }
  if (memberinfo) {
    set_has_memberinfo();
    memberinfo_ = memberinfo;
  } else {
    clear_has_memberinfo();
    memberinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 loveliness = 4;
inline bool CMD_GP_TreasureChange::has_loveliness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_loveliness() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_TreasureChange::clear_has_loveliness() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_TreasureChange::clear_loveliness() {
  loveliness_ = 0;
  clear_has_loveliness();
}
inline ::google::protobuf::int32 CMD_GP_TreasureChange::loveliness() const {
  return loveliness_;
}
inline void CMD_GP_TreasureChange::set_loveliness(::google::protobuf::int32 value) {
  set_has_loveliness();
  loveliness_ = value;
}

// optional int32 ticket = 5;
inline bool CMD_GP_TreasureChange::has_ticket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_ticket() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_TreasureChange::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_TreasureChange::clear_ticket() {
  ticket_ = 0;
  clear_has_ticket();
}
inline ::google::protobuf::int32 CMD_GP_TreasureChange::ticket() const {
  return ticket_;
}
inline void CMD_GP_TreasureChange::set_ticket(::google::protobuf::int32 value) {
  set_has_ticket();
  ticket_ = value;
}

// optional int32 newGiftCharge = 6;
inline bool CMD_GP_TreasureChange::has_newgiftcharge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_newgiftcharge() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GP_TreasureChange::clear_has_newgiftcharge() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GP_TreasureChange::clear_newgiftcharge() {
  newgiftcharge_ = 0;
  clear_has_newgiftcharge();
}
inline ::google::protobuf::int32 CMD_GP_TreasureChange::newgiftcharge() const {
  return newgiftcharge_;
}
inline void CMD_GP_TreasureChange::set_newgiftcharge(::google::protobuf::int32 value) {
  set_has_newgiftcharge();
  newgiftcharge_ = value;
}

// optional int32 luckDraw = 7;
inline bool CMD_GP_TreasureChange::has_luckdraw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_luckdraw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GP_TreasureChange::clear_has_luckdraw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GP_TreasureChange::clear_luckdraw() {
  luckdraw_ = 0;
  clear_has_luckdraw();
}
inline ::google::protobuf::int32 CMD_GP_TreasureChange::luckdraw() const {
  return luckdraw_;
}
inline void CMD_GP_TreasureChange::set_luckdraw(::google::protobuf::int32 value) {
  set_has_luckdraw();
  luckdraw_ = value;
}

// optional .MonthlyCard monthlyCard = 8;
inline bool CMD_GP_TreasureChange::has_monthlycard() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_monthlycard() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_GP_TreasureChange::clear_has_monthlycard() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_GP_TreasureChange::clear_monthlycard() {
  if (monthlycard_ != NULL) monthlycard_->::MonthlyCard::Clear();
  clear_has_monthlycard();
}
inline const ::MonthlyCard& CMD_GP_TreasureChange::monthlycard() const {
  return monthlycard_ != NULL ? *monthlycard_ : *default_instance_->monthlycard_;
}
inline ::MonthlyCard* CMD_GP_TreasureChange::mutable_monthlycard() {
  set_has_monthlycard();
  if (monthlycard_ == NULL) monthlycard_ = new ::MonthlyCard;
  return monthlycard_;
}
inline ::MonthlyCard* CMD_GP_TreasureChange::release_monthlycard() {
  clear_has_monthlycard();
  ::MonthlyCard* temp = monthlycard_;
  monthlycard_ = NULL;
  return temp;
}
inline void CMD_GP_TreasureChange::set_allocated_monthlycard(::MonthlyCard* monthlycard) {
  delete monthlycard_;
  monthlycard_ = monthlycard;
  if (monthlycard) {
    set_has_monthlycard();
  } else {
    clear_has_monthlycard();
  }
}

// optional int32 rechargeID = 9;
inline bool CMD_GP_TreasureChange::has_rechargeid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_rechargeid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_GP_TreasureChange::clear_has_rechargeid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_GP_TreasureChange::clear_rechargeid() {
  rechargeid_ = 0;
  clear_has_rechargeid();
}
inline ::google::protobuf::int32 CMD_GP_TreasureChange::rechargeid() const {
  return rechargeid_;
}
inline void CMD_GP_TreasureChange::set_rechargeid(::google::protobuf::int32 value) {
  set_has_rechargeid();
  rechargeid_ = value;
}

// optional int32 rechargeType = 10;
inline bool CMD_GP_TreasureChange::has_rechargetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_GP_TreasureChange::set_has_rechargetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_GP_TreasureChange::clear_has_rechargetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_GP_TreasureChange::clear_rechargetype() {
  rechargetype_ = 0;
  clear_has_rechargetype();
}
inline ::google::protobuf::int32 CMD_GP_TreasureChange::rechargetype() const {
  return rechargetype_;
}
inline void CMD_GP_TreasureChange::set_rechargetype(::google::protobuf::int32 value) {
  set_has_rechargetype();
  rechargetype_ = value;
}

// -------------------------------------------------------------------

// SUB_GP_RANK_GoldRank

// required int32 ranking = 1;
inline bool SUB_GP_RANK_GoldRank::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SUB_GP_RANK_GoldRank::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SUB_GP_RANK_GoldRank::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SUB_GP_RANK_GoldRank::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 SUB_GP_RANK_GoldRank::ranking() const {
  return ranking_;
}
inline void SUB_GP_RANK_GoldRank::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// required int32 gameid = 2;
inline bool SUB_GP_RANK_GoldRank::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SUB_GP_RANK_GoldRank::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SUB_GP_RANK_GoldRank::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SUB_GP_RANK_GoldRank::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 SUB_GP_RANK_GoldRank::gameid() const {
  return gameid_;
}
inline void SUB_GP_RANK_GoldRank::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 memberorder = 3;
inline bool SUB_GP_RANK_GoldRank::has_memberorder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SUB_GP_RANK_GoldRank::set_has_memberorder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SUB_GP_RANK_GoldRank::clear_has_memberorder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SUB_GP_RANK_GoldRank::clear_memberorder() {
  memberorder_ = 0;
  clear_has_memberorder();
}
inline ::google::protobuf::int32 SUB_GP_RANK_GoldRank::memberorder() const {
  return memberorder_;
}
inline void SUB_GP_RANK_GoldRank::set_memberorder(::google::protobuf::int32 value) {
  set_has_memberorder();
  memberorder_ = value;
}

// required string nickname = 4;
inline bool SUB_GP_RANK_GoldRank::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SUB_GP_RANK_GoldRank::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SUB_GP_RANK_GoldRank::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SUB_GP_RANK_GoldRank::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& SUB_GP_RANK_GoldRank::nickname() const {
  return *nickname_;
}
inline void SUB_GP_RANK_GoldRank::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SUB_GP_RANK_GoldRank::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SUB_GP_RANK_GoldRank::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUB_GP_RANK_GoldRank::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* SUB_GP_RANK_GoldRank::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUB_GP_RANK_GoldRank::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 score = 5;
inline bool SUB_GP_RANK_GoldRank::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SUB_GP_RANK_GoldRank::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SUB_GP_RANK_GoldRank::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SUB_GP_RANK_GoldRank::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 SUB_GP_RANK_GoldRank::score() const {
  return score_;
}
inline void SUB_GP_RANK_GoldRank::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// SUB_GP_RANK

// repeated .SUB_GP_RANK.GoldRank goldRank = 1;
inline int SUB_GP_RANK::goldrank_size() const {
  return goldrank_.size();
}
inline void SUB_GP_RANK::clear_goldrank() {
  goldrank_.Clear();
}
inline const ::SUB_GP_RANK_GoldRank& SUB_GP_RANK::goldrank(int index) const {
  return goldrank_.Get(index);
}
inline ::SUB_GP_RANK_GoldRank* SUB_GP_RANK::mutable_goldrank(int index) {
  return goldrank_.Mutable(index);
}
inline ::SUB_GP_RANK_GoldRank* SUB_GP_RANK::add_goldrank() {
  return goldrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SUB_GP_RANK_GoldRank >&
SUB_GP_RANK::goldrank() const {
  return goldrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::SUB_GP_RANK_GoldRank >*
SUB_GP_RANK::mutable_goldrank() {
  return &goldrank_;
}

// required int32 selfRank = 2;
inline bool SUB_GP_RANK::has_selfrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SUB_GP_RANK::set_has_selfrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SUB_GP_RANK::clear_has_selfrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SUB_GP_RANK::clear_selfrank() {
  selfrank_ = 0;
  clear_has_selfrank();
}
inline ::google::protobuf::int32 SUB_GP_RANK::selfrank() const {
  return selfrank_;
}
inline void SUB_GP_RANK::set_selfrank(::google::protobuf::int32 value) {
  set_has_selfrank();
  selfrank_ = value;
}

// optional int32 showRank = 3;
inline bool SUB_GP_RANK::has_showrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SUB_GP_RANK::set_has_showrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SUB_GP_RANK::clear_has_showrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SUB_GP_RANK::clear_showrank() {
  showrank_ = 0;
  clear_has_showrank();
}
inline ::google::protobuf::int32 SUB_GP_RANK::showrank() const {
  return showrank_;
}
inline void SUB_GP_RANK::set_showrank(::google::protobuf::int32 value) {
  set_has_showrank();
  showrank_ = value;
}

// -------------------------------------------------------------------

// SUB_GP_FISHRANK_FishRank

// required int32 Rank = 1;
inline bool SUB_GP_FISHRANK_FishRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SUB_GP_FISHRANK_FishRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 SUB_GP_FISHRANK_FishRank::rank() const {
  return rank_;
}
inline void SUB_GP_FISHRANK_FishRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// required int32 GameID = 2;
inline bool SUB_GP_FISHRANK_FishRank::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SUB_GP_FISHRANK_FishRank::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 SUB_GP_FISHRANK_FishRank::gameid() const {
  return gameid_;
}
inline void SUB_GP_FISHRANK_FishRank::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 MemberOrder = 3;
inline bool SUB_GP_FISHRANK_FishRank::has_memberorder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SUB_GP_FISHRANK_FishRank::set_has_memberorder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_has_memberorder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_memberorder() {
  memberorder_ = 0;
  clear_has_memberorder();
}
inline ::google::protobuf::int32 SUB_GP_FISHRANK_FishRank::memberorder() const {
  return memberorder_;
}
inline void SUB_GP_FISHRANK_FishRank::set_memberorder(::google::protobuf::int32 value) {
  set_has_memberorder();
  memberorder_ = value;
}

// required string NickName = 4;
inline bool SUB_GP_FISHRANK_FishRank::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SUB_GP_FISHRANK_FishRank::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& SUB_GP_FISHRANK_FishRank::nickname() const {
  return *nickname_;
}
inline void SUB_GP_FISHRANK_FishRank::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SUB_GP_FISHRANK_FishRank::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SUB_GP_FISHRANK_FishRank::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUB_GP_FISHRANK_FishRank::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* SUB_GP_FISHRANK_FishRank::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUB_GP_FISHRANK_FishRank::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 CatchedFishNum = 5;
inline bool SUB_GP_FISHRANK_FishRank::has_catchedfishnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SUB_GP_FISHRANK_FishRank::set_has_catchedfishnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_has_catchedfishnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_catchedfishnum() {
  catchedfishnum_ = 0;
  clear_has_catchedfishnum();
}
inline ::google::protobuf::int32 SUB_GP_FISHRANK_FishRank::catchedfishnum() const {
  return catchedfishnum_;
}
inline void SUB_GP_FISHRANK_FishRank::set_catchedfishnum(::google::protobuf::int32 value) {
  set_has_catchedfishnum();
  catchedfishnum_ = value;
}

// required string UpdateTime = 6;
inline bool SUB_GP_FISHRANK_FishRank::has_updatetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SUB_GP_FISHRANK_FishRank::set_has_updatetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SUB_GP_FISHRANK_FishRank::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& SUB_GP_FISHRANK_FishRank::updatetime() const {
  return *updatetime_;
}
inline void SUB_GP_FISHRANK_FishRank::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void SUB_GP_FISHRANK_FishRank::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void SUB_GP_FISHRANK_FishRank::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUB_GP_FISHRANK_FishRank::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  return updatetime_;
}
inline ::std::string* SUB_GP_FISHRANK_FishRank::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUB_GP_FISHRANK_FishRank::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (updatetime) {
    set_has_updatetime();
    updatetime_ = updatetime;
  } else {
    clear_has_updatetime();
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SUB_GP_FISHRANK

// repeated .SUB_GP_FISHRANK.FishRank fishRank = 1;
inline int SUB_GP_FISHRANK::fishrank_size() const {
  return fishrank_.size();
}
inline void SUB_GP_FISHRANK::clear_fishrank() {
  fishrank_.Clear();
}
inline const ::SUB_GP_FISHRANK_FishRank& SUB_GP_FISHRANK::fishrank(int index) const {
  return fishrank_.Get(index);
}
inline ::SUB_GP_FISHRANK_FishRank* SUB_GP_FISHRANK::mutable_fishrank(int index) {
  return fishrank_.Mutable(index);
}
inline ::SUB_GP_FISHRANK_FishRank* SUB_GP_FISHRANK::add_fishrank() {
  return fishrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SUB_GP_FISHRANK_FishRank >&
SUB_GP_FISHRANK::fishrank() const {
  return fishrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::SUB_GP_FISHRANK_FishRank >*
SUB_GP_FISHRANK::mutable_fishrank() {
  return &fishrank_;
}

// required int32 selfRank = 2;
inline bool SUB_GP_FISHRANK::has_selfrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SUB_GP_FISHRANK::set_has_selfrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SUB_GP_FISHRANK::clear_has_selfrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SUB_GP_FISHRANK::clear_selfrank() {
  selfrank_ = 0;
  clear_has_selfrank();
}
inline ::google::protobuf::int32 SUB_GP_FISHRANK::selfrank() const {
  return selfrank_;
}
inline void SUB_GP_FISHRANK::set_selfrank(::google::protobuf::int32 value) {
  set_has_selfrank();
  selfrank_ = value;
}

// -------------------------------------------------------------------

// SUB_GP_NEWPLAYGIFTFLAG

// required int32 flag = 1;
inline bool SUB_GP_NEWPLAYGIFTFLAG::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SUB_GP_NEWPLAYGIFTFLAG::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SUB_GP_NEWPLAYGIFTFLAG::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SUB_GP_NEWPLAYGIFTFLAG::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 SUB_GP_NEWPLAYGIFTFLAG::flag() const {
  return flag_;
}
inline void SUB_GP_NEWPLAYGIFTFLAG::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required string msg = 2;
inline bool SUB_GP_NEWPLAYGIFTFLAG::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SUB_GP_NEWPLAYGIFTFLAG::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SUB_GP_NEWPLAYGIFTFLAG::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SUB_GP_NEWPLAYGIFTFLAG::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& SUB_GP_NEWPLAYGIFTFLAG::msg() const {
  return *msg_;
}
inline void SUB_GP_NEWPLAYGIFTFLAG::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SUB_GP_NEWPLAYGIFTFLAG::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void SUB_GP_NEWPLAYGIFTFLAG::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUB_GP_NEWPLAYGIFTFLAG::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* SUB_GP_NEWPLAYGIFTFLAG::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUB_GP_NEWPLAYGIFTFLAG::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SUB_GP_AllModelsSwitch_AllModelsSwitch

// required int32 ModelID = 1;
inline bool SUB_GP_AllModelsSwitch_AllModelsSwitch::has_modelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SUB_GP_AllModelsSwitch_AllModelsSwitch::set_has_modelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SUB_GP_AllModelsSwitch_AllModelsSwitch::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SUB_GP_AllModelsSwitch_AllModelsSwitch::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 SUB_GP_AllModelsSwitch_AllModelsSwitch::modelid() const {
  return modelid_;
}
inline void SUB_GP_AllModelsSwitch_AllModelsSwitch::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
}

// required int32 IsShow = 2;
inline bool SUB_GP_AllModelsSwitch_AllModelsSwitch::has_isshow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SUB_GP_AllModelsSwitch_AllModelsSwitch::set_has_isshow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SUB_GP_AllModelsSwitch_AllModelsSwitch::clear_has_isshow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SUB_GP_AllModelsSwitch_AllModelsSwitch::clear_isshow() {
  isshow_ = 0;
  clear_has_isshow();
}
inline ::google::protobuf::int32 SUB_GP_AllModelsSwitch_AllModelsSwitch::isshow() const {
  return isshow_;
}
inline void SUB_GP_AllModelsSwitch_AllModelsSwitch::set_isshow(::google::protobuf::int32 value) {
  set_has_isshow();
  isshow_ = value;
}

// -------------------------------------------------------------------

// SUB_GP_AllModelsSwitch

// repeated .SUB_GP_AllModelsSwitch.AllModelsSwitch allModelsSwitch = 1;
inline int SUB_GP_AllModelsSwitch::allmodelsswitch_size() const {
  return allmodelsswitch_.size();
}
inline void SUB_GP_AllModelsSwitch::clear_allmodelsswitch() {
  allmodelsswitch_.Clear();
}
inline const ::SUB_GP_AllModelsSwitch_AllModelsSwitch& SUB_GP_AllModelsSwitch::allmodelsswitch(int index) const {
  return allmodelsswitch_.Get(index);
}
inline ::SUB_GP_AllModelsSwitch_AllModelsSwitch* SUB_GP_AllModelsSwitch::mutable_allmodelsswitch(int index) {
  return allmodelsswitch_.Mutable(index);
}
inline ::SUB_GP_AllModelsSwitch_AllModelsSwitch* SUB_GP_AllModelsSwitch::add_allmodelsswitch() {
  return allmodelsswitch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SUB_GP_AllModelsSwitch_AllModelsSwitch >&
SUB_GP_AllModelsSwitch::allmodelsswitch() const {
  return allmodelsswitch_;
}
inline ::google::protobuf::RepeatedPtrField< ::SUB_GP_AllModelsSwitch_AllModelsSwitch >*
SUB_GP_AllModelsSwitch::mutable_allmodelsswitch() {
  return &allmodelsswitch_;
}

// -------------------------------------------------------------------

// CMD_GP_SignIn

// required string flag = 1;
inline bool CMD_GP_SignIn::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_SignIn::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_SignIn::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_SignIn::clear_flag() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    flag_->clear();
  }
  clear_has_flag();
}
inline const ::std::string& CMD_GP_SignIn::flag() const {
  return *flag_;
}
inline void CMD_GP_SignIn::set_flag(const ::std::string& value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void CMD_GP_SignIn::set_flag(const char* value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void CMD_GP_SignIn::set_flag(const char* value, size_t size) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_SignIn::mutable_flag() {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  return flag_;
}
inline ::std::string* CMD_GP_SignIn::release_flag() {
  clear_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_;
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_SignIn::set_allocated_flag(::std::string* flag) {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (flag) {
    set_has_flag();
    flag_ = flag;
  } else {
    clear_has_flag();
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 2;
inline bool CMD_GP_SignIn::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_SignIn::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_SignIn::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_SignIn::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_SignIn::msg() const {
  return *msg_;
}
inline void CMD_GP_SignIn::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_SignIn::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_SignIn::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_SignIn::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_SignIn::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_SignIn::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gold = 3;
inline bool CMD_GP_SignIn::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_SignIn::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_SignIn::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_SignIn::clear_gold() {
  if (gold_ != &::google::protobuf::internal::kEmptyString) {
    gold_->clear();
  }
  clear_has_gold();
}
inline const ::std::string& CMD_GP_SignIn::gold() const {
  return *gold_;
}
inline void CMD_GP_SignIn::set_gold(const ::std::string& value) {
  set_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    gold_ = new ::std::string;
  }
  gold_->assign(value);
}
inline void CMD_GP_SignIn::set_gold(const char* value) {
  set_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    gold_ = new ::std::string;
  }
  gold_->assign(value);
}
inline void CMD_GP_SignIn::set_gold(const char* value, size_t size) {
  set_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    gold_ = new ::std::string;
  }
  gold_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_SignIn::mutable_gold() {
  set_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    gold_ = new ::std::string;
  }
  return gold_;
}
inline ::std::string* CMD_GP_SignIn::release_gold() {
  clear_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gold_;
    gold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_SignIn::set_allocated_gold(::std::string* gold) {
  if (gold_ != &::google::protobuf::internal::kEmptyString) {
    delete gold_;
  }
  if (gold) {
    set_has_gold();
    gold_ = gold;
  } else {
    clear_has_gold();
    gold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetHeadUrl

// required string flag = 1;
inline bool CMD_GP_GetHeadUrl::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetHeadUrl::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetHeadUrl::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetHeadUrl::clear_flag() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    flag_->clear();
  }
  clear_has_flag();
}
inline const ::std::string& CMD_GP_GetHeadUrl::flag() const {
  return *flag_;
}
inline void CMD_GP_GetHeadUrl::set_flag(const ::std::string& value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void CMD_GP_GetHeadUrl::set_flag(const char* value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void CMD_GP_GetHeadUrl::set_flag(const char* value, size_t size) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetHeadUrl::mutable_flag() {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  return flag_;
}
inline ::std::string* CMD_GP_GetHeadUrl::release_flag() {
  clear_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_;
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetHeadUrl::set_allocated_flag(::std::string* flag) {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (flag) {
    set_has_flag();
    flag_ = flag;
  } else {
    clear_has_flag();
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetNoviceCard

// optional string Msg = 1;
inline bool CMD_GP_GetNoviceCard::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetNoviceCard::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetNoviceCard::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_GetNoviceCard::msg() const {
  return *msg_;
}
inline void CMD_GP_GetNoviceCard::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNoviceCard::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_GetNoviceCard::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNoviceCard::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Code = 2;
inline bool CMD_GP_GetNoviceCard::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetNoviceCard::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetNoviceCard::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMD_GP_GetNoviceCard::code() const {
  return *code_;
}
inline void CMD_GP_GetNoviceCard::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNoviceCard::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMD_GP_GetNoviceCard::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNoviceCard::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Quota = 3;
inline bool CMD_GP_GetNoviceCard::has_quota() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_quota() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GetNoviceCard::clear_has_quota() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GetNoviceCard::clear_quota() {
  if (quota_ != &::google::protobuf::internal::kEmptyString) {
    quota_->clear();
  }
  clear_has_quota();
}
inline const ::std::string& CMD_GP_GetNoviceCard::quota() const {
  return *quota_;
}
inline void CMD_GP_GetNoviceCard::set_quota(const ::std::string& value) {
  set_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    quota_ = new ::std::string;
  }
  quota_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_quota(const char* value) {
  set_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    quota_ = new ::std::string;
  }
  quota_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_quota(const char* value, size_t size) {
  set_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    quota_ = new ::std::string;
  }
  quota_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNoviceCard::mutable_quota() {
  set_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    quota_ = new ::std::string;
  }
  return quota_;
}
inline ::std::string* CMD_GP_GetNoviceCard::release_quota() {
  clear_has_quota();
  if (quota_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = quota_;
    quota_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNoviceCard::set_allocated_quota(::std::string* quota) {
  if (quota_ != &::google::protobuf::internal::kEmptyString) {
    delete quota_;
  }
  if (quota) {
    set_has_quota();
    quota_ = quota;
  } else {
    clear_has_quota();
    quota_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string DurationTerm = 4;
inline bool CMD_GP_GetNoviceCard::has_durationterm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_durationterm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_GetNoviceCard::clear_has_durationterm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_GetNoviceCard::clear_durationterm() {
  if (durationterm_ != &::google::protobuf::internal::kEmptyString) {
    durationterm_->clear();
  }
  clear_has_durationterm();
}
inline const ::std::string& CMD_GP_GetNoviceCard::durationterm() const {
  return *durationterm_;
}
inline void CMD_GP_GetNoviceCard::set_durationterm(const ::std::string& value) {
  set_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    durationterm_ = new ::std::string;
  }
  durationterm_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_durationterm(const char* value) {
  set_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    durationterm_ = new ::std::string;
  }
  durationterm_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_durationterm(const char* value, size_t size) {
  set_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    durationterm_ = new ::std::string;
  }
  durationterm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNoviceCard::mutable_durationterm() {
  set_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    durationterm_ = new ::std::string;
  }
  return durationterm_;
}
inline ::std::string* CMD_GP_GetNoviceCard::release_durationterm() {
  clear_has_durationterm();
  if (durationterm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = durationterm_;
    durationterm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNoviceCard::set_allocated_durationterm(::std::string* durationterm) {
  if (durationterm_ != &::google::protobuf::internal::kEmptyString) {
    delete durationterm_;
  }
  if (durationterm) {
    set_has_durationterm();
    durationterm_ = durationterm;
  } else {
    clear_has_durationterm();
    durationterm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string CardDay = 5;
inline bool CMD_GP_GetNoviceCard::has_cardday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_cardday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_GetNoviceCard::clear_has_cardday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_GetNoviceCard::clear_cardday() {
  if (cardday_ != &::google::protobuf::internal::kEmptyString) {
    cardday_->clear();
  }
  clear_has_cardday();
}
inline const ::std::string& CMD_GP_GetNoviceCard::cardday() const {
  return *cardday_;
}
inline void CMD_GP_GetNoviceCard::set_cardday(const ::std::string& value) {
  set_has_cardday();
  if (cardday_ == &::google::protobuf::internal::kEmptyString) {
    cardday_ = new ::std::string;
  }
  cardday_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_cardday(const char* value) {
  set_has_cardday();
  if (cardday_ == &::google::protobuf::internal::kEmptyString) {
    cardday_ = new ::std::string;
  }
  cardday_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_cardday(const char* value, size_t size) {
  set_has_cardday();
  if (cardday_ == &::google::protobuf::internal::kEmptyString) {
    cardday_ = new ::std::string;
  }
  cardday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNoviceCard::mutable_cardday() {
  set_has_cardday();
  if (cardday_ == &::google::protobuf::internal::kEmptyString) {
    cardday_ = new ::std::string;
  }
  return cardday_;
}
inline ::std::string* CMD_GP_GetNoviceCard::release_cardday() {
  clear_has_cardday();
  if (cardday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardday_;
    cardday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNoviceCard::set_allocated_cardday(::std::string* cardday) {
  if (cardday_ != &::google::protobuf::internal::kEmptyString) {
    delete cardday_;
  }
  if (cardday) {
    set_has_cardday();
    cardday_ = cardday;
  } else {
    clear_has_cardday();
    cardday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string CardState = 6;
inline bool CMD_GP_GetNoviceCard::has_cardstate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_cardstate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GP_GetNoviceCard::clear_has_cardstate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GP_GetNoviceCard::clear_cardstate() {
  if (cardstate_ != &::google::protobuf::internal::kEmptyString) {
    cardstate_->clear();
  }
  clear_has_cardstate();
}
inline const ::std::string& CMD_GP_GetNoviceCard::cardstate() const {
  return *cardstate_;
}
inline void CMD_GP_GetNoviceCard::set_cardstate(const ::std::string& value) {
  set_has_cardstate();
  if (cardstate_ == &::google::protobuf::internal::kEmptyString) {
    cardstate_ = new ::std::string;
  }
  cardstate_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_cardstate(const char* value) {
  set_has_cardstate();
  if (cardstate_ == &::google::protobuf::internal::kEmptyString) {
    cardstate_ = new ::std::string;
  }
  cardstate_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_cardstate(const char* value, size_t size) {
  set_has_cardstate();
  if (cardstate_ == &::google::protobuf::internal::kEmptyString) {
    cardstate_ = new ::std::string;
  }
  cardstate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNoviceCard::mutable_cardstate() {
  set_has_cardstate();
  if (cardstate_ == &::google::protobuf::internal::kEmptyString) {
    cardstate_ = new ::std::string;
  }
  return cardstate_;
}
inline ::std::string* CMD_GP_GetNoviceCard::release_cardstate() {
  clear_has_cardstate();
  if (cardstate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardstate_;
    cardstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNoviceCard::set_allocated_cardstate(::std::string* cardstate) {
  if (cardstate_ != &::google::protobuf::internal::kEmptyString) {
    delete cardstate_;
  }
  if (cardstate) {
    set_has_cardstate();
    cardstate_ = cardstate;
  } else {
    clear_has_cardstate();
    cardstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Denomination = 7;
inline bool CMD_GP_GetNoviceCard::has_denomination() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GP_GetNoviceCard::set_has_denomination() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GP_GetNoviceCard::clear_has_denomination() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GP_GetNoviceCard::clear_denomination() {
  if (denomination_ != &::google::protobuf::internal::kEmptyString) {
    denomination_->clear();
  }
  clear_has_denomination();
}
inline const ::std::string& CMD_GP_GetNoviceCard::denomination() const {
  return *denomination_;
}
inline void CMD_GP_GetNoviceCard::set_denomination(const ::std::string& value) {
  set_has_denomination();
  if (denomination_ == &::google::protobuf::internal::kEmptyString) {
    denomination_ = new ::std::string;
  }
  denomination_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_denomination(const char* value) {
  set_has_denomination();
  if (denomination_ == &::google::protobuf::internal::kEmptyString) {
    denomination_ = new ::std::string;
  }
  denomination_->assign(value);
}
inline void CMD_GP_GetNoviceCard::set_denomination(const char* value, size_t size) {
  set_has_denomination();
  if (denomination_ == &::google::protobuf::internal::kEmptyString) {
    denomination_ = new ::std::string;
  }
  denomination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNoviceCard::mutable_denomination() {
  set_has_denomination();
  if (denomination_ == &::google::protobuf::internal::kEmptyString) {
    denomination_ = new ::std::string;
  }
  return denomination_;
}
inline ::std::string* CMD_GP_GetNoviceCard::release_denomination() {
  clear_has_denomination();
  if (denomination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = denomination_;
    denomination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNoviceCard::set_allocated_denomination(::std::string* denomination) {
  if (denomination_ != &::google::protobuf::internal::kEmptyString) {
    delete denomination_;
  }
  if (denomination) {
    set_has_denomination();
    denomination_ = denomination;
  } else {
    clear_has_denomination();
    denomination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetActivityCard

// optional string Msg = 1;
inline bool CMD_GP_GetActivityCard::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetActivityCard::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetActivityCard::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetActivityCard::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_GetActivityCard::msg() const {
  return *msg_;
}
inline void CMD_GP_GetActivityCard::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetActivityCard::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_GetActivityCard::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetActivityCard::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Code = 2;
inline bool CMD_GP_GetActivityCard::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetActivityCard::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetActivityCard::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetActivityCard::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMD_GP_GetActivityCard::code() const {
  return *code_;
}
inline void CMD_GP_GetActivityCard::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetActivityCard::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMD_GP_GetActivityCard::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetActivityCard::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Score = 3;
inline bool CMD_GP_GetActivityCard::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GetActivityCard::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GetActivityCard::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GetActivityCard::clear_score() {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    score_->clear();
  }
  clear_has_score();
}
inline const ::std::string& CMD_GP_GetActivityCard::score() const {
  return *score_;
}
inline void CMD_GP_GetActivityCard::set_score(const ::std::string& value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_score(const char* value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(value);
}
inline void CMD_GP_GetActivityCard::set_score(const char* value, size_t size) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetActivityCard::mutable_score() {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  return score_;
}
inline ::std::string* CMD_GP_GetActivityCard::release_score() {
  clear_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = score_;
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetActivityCard::set_allocated_score(::std::string* score) {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (score) {
    set_has_score();
    score_ = score;
  } else {
    clear_has_score();
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetReliefMoney

// optional string Msg = 1;
inline bool CMD_GP_GetReliefMoney::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetReliefMoney::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetReliefMoney::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetReliefMoney::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_GetReliefMoney::msg() const {
  return *msg_;
}
inline void CMD_GP_GetReliefMoney::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetReliefMoney::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_GetReliefMoney::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetReliefMoney::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Code = 2;
inline bool CMD_GP_GetReliefMoney::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetReliefMoney::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetReliefMoney::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetReliefMoney::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMD_GP_GetReliefMoney::code() const {
  return *code_;
}
inline void CMD_GP_GetReliefMoney::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetReliefMoney::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMD_GP_GetReliefMoney::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetReliefMoney::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Score = 3;
inline bool CMD_GP_GetReliefMoney::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GetReliefMoney::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GetReliefMoney::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GetReliefMoney::clear_score() {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    score_->clear();
  }
  clear_has_score();
}
inline const ::std::string& CMD_GP_GetReliefMoney::score() const {
  return *score_;
}
inline void CMD_GP_GetReliefMoney::set_score(const ::std::string& value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_score(const char* value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_score(const char* value, size_t size) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetReliefMoney::mutable_score() {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  return score_;
}
inline ::std::string* CMD_GP_GetReliefMoney::release_score() {
  clear_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = score_;
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetReliefMoney::set_allocated_score(::std::string* score) {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (score) {
    set_has_score();
    score_ = score;
  } else {
    clear_has_score();
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string CountDown = 4;
inline bool CMD_GP_GetReliefMoney::has_countdown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_GetReliefMoney::set_has_countdown() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_GetReliefMoney::clear_has_countdown() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_GetReliefMoney::clear_countdown() {
  if (countdown_ != &::google::protobuf::internal::kEmptyString) {
    countdown_->clear();
  }
  clear_has_countdown();
}
inline const ::std::string& CMD_GP_GetReliefMoney::countdown() const {
  return *countdown_;
}
inline void CMD_GP_GetReliefMoney::set_countdown(const ::std::string& value) {
  set_has_countdown();
  if (countdown_ == &::google::protobuf::internal::kEmptyString) {
    countdown_ = new ::std::string;
  }
  countdown_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_countdown(const char* value) {
  set_has_countdown();
  if (countdown_ == &::google::protobuf::internal::kEmptyString) {
    countdown_ = new ::std::string;
  }
  countdown_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_countdown(const char* value, size_t size) {
  set_has_countdown();
  if (countdown_ == &::google::protobuf::internal::kEmptyString) {
    countdown_ = new ::std::string;
  }
  countdown_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetReliefMoney::mutable_countdown() {
  set_has_countdown();
  if (countdown_ == &::google::protobuf::internal::kEmptyString) {
    countdown_ = new ::std::string;
  }
  return countdown_;
}
inline ::std::string* CMD_GP_GetReliefMoney::release_countdown() {
  clear_has_countdown();
  if (countdown_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = countdown_;
    countdown_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetReliefMoney::set_allocated_countdown(::std::string* countdown) {
  if (countdown_ != &::google::protobuf::internal::kEmptyString) {
    delete countdown_;
  }
  if (countdown) {
    set_has_countdown();
    countdown_ = countdown;
  } else {
    clear_has_countdown();
    countdown_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ReliefNum = 5;
inline bool CMD_GP_GetReliefMoney::has_reliefnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GP_GetReliefMoney::set_has_reliefnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GP_GetReliefMoney::clear_has_reliefnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GP_GetReliefMoney::clear_reliefnum() {
  if (reliefnum_ != &::google::protobuf::internal::kEmptyString) {
    reliefnum_->clear();
  }
  clear_has_reliefnum();
}
inline const ::std::string& CMD_GP_GetReliefMoney::reliefnum() const {
  return *reliefnum_;
}
inline void CMD_GP_GetReliefMoney::set_reliefnum(const ::std::string& value) {
  set_has_reliefnum();
  if (reliefnum_ == &::google::protobuf::internal::kEmptyString) {
    reliefnum_ = new ::std::string;
  }
  reliefnum_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_reliefnum(const char* value) {
  set_has_reliefnum();
  if (reliefnum_ == &::google::protobuf::internal::kEmptyString) {
    reliefnum_ = new ::std::string;
  }
  reliefnum_->assign(value);
}
inline void CMD_GP_GetReliefMoney::set_reliefnum(const char* value, size_t size) {
  set_has_reliefnum();
  if (reliefnum_ == &::google::protobuf::internal::kEmptyString) {
    reliefnum_ = new ::std::string;
  }
  reliefnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetReliefMoney::mutable_reliefnum() {
  set_has_reliefnum();
  if (reliefnum_ == &::google::protobuf::internal::kEmptyString) {
    reliefnum_ = new ::std::string;
  }
  return reliefnum_;
}
inline ::std::string* CMD_GP_GetReliefMoney::release_reliefnum() {
  clear_has_reliefnum();
  if (reliefnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reliefnum_;
    reliefnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetReliefMoney::set_allocated_reliefnum(::std::string* reliefnum) {
  if (reliefnum_ != &::google::protobuf::internal::kEmptyString) {
    delete reliefnum_;
  }
  if (reliefnum) {
    set_has_reliefnum();
    reliefnum_ = reliefnum;
  } else {
    clear_has_reliefnum();
    reliefnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetPayPhone

// optional string Msg = 1;
inline bool CMD_GP_GetPayPhone::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetPayPhone::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetPayPhone::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetPayPhone::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_GetPayPhone::msg() const {
  return *msg_;
}
inline void CMD_GP_GetPayPhone::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetPayPhone::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetPayPhone::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetPayPhone::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_GetPayPhone::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetPayPhone::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Code = 2;
inline bool CMD_GP_GetPayPhone::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetPayPhone::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetPayPhone::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetPayPhone::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMD_GP_GetPayPhone::code() const {
  return *code_;
}
inline void CMD_GP_GetPayPhone::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetPayPhone::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetPayPhone::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetPayPhone::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMD_GP_GetPayPhone::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetPayPhone::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Award = 3;
inline bool CMD_GP_GetPayPhone::has_award() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GetPayPhone::set_has_award() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GetPayPhone::clear_has_award() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GetPayPhone::clear_award() {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    award_->clear();
  }
  clear_has_award();
}
inline const ::std::string& CMD_GP_GetPayPhone::award() const {
  return *award_;
}
inline void CMD_GP_GetPayPhone::set_award(const ::std::string& value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void CMD_GP_GetPayPhone::set_award(const char* value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void CMD_GP_GetPayPhone::set_award(const char* value, size_t size) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetPayPhone::mutable_award() {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  return award_;
}
inline ::std::string* CMD_GP_GetPayPhone::release_award() {
  clear_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = award_;
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetPayPhone::set_allocated_award(::std::string* award) {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (award) {
    set_has_award();
    award_ = award;
  } else {
    clear_has_award();
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetAwardGold

// required string Msg = 1;
inline bool CMD_GP_GetAwardGold::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetAwardGold::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetAwardGold::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetAwardGold::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_GetAwardGold::msg() const {
  return *msg_;
}
inline void CMD_GP_GetAwardGold::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetAwardGold::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetAwardGold::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetAwardGold::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_GetAwardGold::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetAwardGold::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Code = 2;
inline bool CMD_GP_GetAwardGold::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetAwardGold::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetAwardGold::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetAwardGold::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMD_GP_GetAwardGold::code() const {
  return *code_;
}
inline void CMD_GP_GetAwardGold::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetAwardGold::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetAwardGold::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetAwardGold::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMD_GP_GetAwardGold::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetAwardGold::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Award = 3;
inline bool CMD_GP_GetAwardGold::has_award() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_GetAwardGold::set_has_award() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_GetAwardGold::clear_has_award() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_GetAwardGold::clear_award() {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    award_->clear();
  }
  clear_has_award();
}
inline const ::std::string& CMD_GP_GetAwardGold::award() const {
  return *award_;
}
inline void CMD_GP_GetAwardGold::set_award(const ::std::string& value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void CMD_GP_GetAwardGold::set_award(const char* value) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(value);
}
inline void CMD_GP_GetAwardGold::set_award(const char* value, size_t size) {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  award_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetAwardGold::mutable_award() {
  set_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    award_ = new ::std::string;
  }
  return award_;
}
inline ::std::string* CMD_GP_GetAwardGold::release_award() {
  clear_has_award();
  if (award_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = award_;
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetAwardGold::set_allocated_award(::std::string* award) {
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (award) {
    set_has_award();
    award_ = award;
  } else {
    clear_has_award();
    award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Gold = 4;
inline bool CMD_GP_GetAwardGold::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_GetAwardGold::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_GetAwardGold::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_GetAwardGold::clear_gold() {
  if (gold_ != &::google::protobuf::internal::kEmptyString) {
    gold_->clear();
  }
  clear_has_gold();
}
inline const ::std::string& CMD_GP_GetAwardGold::gold() const {
  return *gold_;
}
inline void CMD_GP_GetAwardGold::set_gold(const ::std::string& value) {
  set_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    gold_ = new ::std::string;
  }
  gold_->assign(value);
}
inline void CMD_GP_GetAwardGold::set_gold(const char* value) {
  set_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    gold_ = new ::std::string;
  }
  gold_->assign(value);
}
inline void CMD_GP_GetAwardGold::set_gold(const char* value, size_t size) {
  set_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    gold_ = new ::std::string;
  }
  gold_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetAwardGold::mutable_gold() {
  set_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    gold_ = new ::std::string;
  }
  return gold_;
}
inline ::std::string* CMD_GP_GetAwardGold::release_gold() {
  clear_has_gold();
  if (gold_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gold_;
    gold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetAwardGold::set_allocated_gold(::std::string* gold) {
  if (gold_ != &::google::protobuf::internal::kEmptyString) {
    delete gold_;
  }
  if (gold) {
    set_has_gold();
    gold_ = gold;
  } else {
    clear_has_gold();
    gold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult

// required int32 Type = 1;
inline bool SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::type() const {
  return type_;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string Desc1 = 2;
inline bool SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::has_desc1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_has_desc1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_has_desc1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_desc1() {
  if (desc1_ != &::google::protobuf::internal::kEmptyString) {
    desc1_->clear();
  }
  clear_has_desc1();
}
inline const ::std::string& SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::desc1() const {
  return *desc1_;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc1(const ::std::string& value) {
  set_has_desc1();
  if (desc1_ == &::google::protobuf::internal::kEmptyString) {
    desc1_ = new ::std::string;
  }
  desc1_->assign(value);
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc1(const char* value) {
  set_has_desc1();
  if (desc1_ == &::google::protobuf::internal::kEmptyString) {
    desc1_ = new ::std::string;
  }
  desc1_->assign(value);
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc1(const char* value, size_t size) {
  set_has_desc1();
  if (desc1_ == &::google::protobuf::internal::kEmptyString) {
    desc1_ = new ::std::string;
  }
  desc1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::mutable_desc1() {
  set_has_desc1();
  if (desc1_ == &::google::protobuf::internal::kEmptyString) {
    desc1_ = new ::std::string;
  }
  return desc1_;
}
inline ::std::string* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::release_desc1() {
  clear_has_desc1();
  if (desc1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc1_;
    desc1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_allocated_desc1(::std::string* desc1) {
  if (desc1_ != &::google::protobuf::internal::kEmptyString) {
    delete desc1_;
  }
  if (desc1) {
    set_has_desc1();
    desc1_ = desc1;
  } else {
    clear_has_desc1();
    desc1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Desc2 = 3;
inline bool SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::has_desc2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_has_desc2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_has_desc2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_desc2() {
  if (desc2_ != &::google::protobuf::internal::kEmptyString) {
    desc2_->clear();
  }
  clear_has_desc2();
}
inline const ::std::string& SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::desc2() const {
  return *desc2_;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc2(const ::std::string& value) {
  set_has_desc2();
  if (desc2_ == &::google::protobuf::internal::kEmptyString) {
    desc2_ = new ::std::string;
  }
  desc2_->assign(value);
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc2(const char* value) {
  set_has_desc2();
  if (desc2_ == &::google::protobuf::internal::kEmptyString) {
    desc2_ = new ::std::string;
  }
  desc2_->assign(value);
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc2(const char* value, size_t size) {
  set_has_desc2();
  if (desc2_ == &::google::protobuf::internal::kEmptyString) {
    desc2_ = new ::std::string;
  }
  desc2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::mutable_desc2() {
  set_has_desc2();
  if (desc2_ == &::google::protobuf::internal::kEmptyString) {
    desc2_ = new ::std::string;
  }
  return desc2_;
}
inline ::std::string* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::release_desc2() {
  clear_has_desc2();
  if (desc2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc2_;
    desc2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_allocated_desc2(::std::string* desc2) {
  if (desc2_ != &::google::protobuf::internal::kEmptyString) {
    delete desc2_;
  }
  if (desc2) {
    set_has_desc2();
    desc2_ = desc2;
  } else {
    clear_has_desc2();
    desc2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Desc3 = 4;
inline bool SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::has_desc3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_has_desc3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_has_desc3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_desc3() {
  if (desc3_ != &::google::protobuf::internal::kEmptyString) {
    desc3_->clear();
  }
  clear_has_desc3();
}
inline const ::std::string& SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::desc3() const {
  return *desc3_;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc3(const ::std::string& value) {
  set_has_desc3();
  if (desc3_ == &::google::protobuf::internal::kEmptyString) {
    desc3_ = new ::std::string;
  }
  desc3_->assign(value);
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc3(const char* value) {
  set_has_desc3();
  if (desc3_ == &::google::protobuf::internal::kEmptyString) {
    desc3_ = new ::std::string;
  }
  desc3_->assign(value);
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc3(const char* value, size_t size) {
  set_has_desc3();
  if (desc3_ == &::google::protobuf::internal::kEmptyString) {
    desc3_ = new ::std::string;
  }
  desc3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::mutable_desc3() {
  set_has_desc3();
  if (desc3_ == &::google::protobuf::internal::kEmptyString) {
    desc3_ = new ::std::string;
  }
  return desc3_;
}
inline ::std::string* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::release_desc3() {
  clear_has_desc3();
  if (desc3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc3_;
    desc3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_allocated_desc3(::std::string* desc3) {
  if (desc3_ != &::google::protobuf::internal::kEmptyString) {
    delete desc3_;
  }
  if (desc3) {
    set_has_desc3();
    desc3_ = desc3;
  } else {
    clear_has_desc3();
    desc3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Desc4 = 5;
inline bool SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::has_desc4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_has_desc4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_has_desc4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::clear_desc4() {
  desc4_ = 0;
  clear_has_desc4();
}
inline ::google::protobuf::int32 SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::desc4() const {
  return desc4_;
}
inline void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::set_desc4(::google::protobuf::int32 value) {
  set_has_desc4();
  desc4_ = value;
}

// -------------------------------------------------------------------

// SUB_GP_GetRechargeRecord

// repeated .SUB_GP_GetRechargeRecord.CMD_GP_RechargeRecordResult rechargeRecordResult = 1;
inline int SUB_GP_GetRechargeRecord::rechargerecordresult_size() const {
  return rechargerecordresult_.size();
}
inline void SUB_GP_GetRechargeRecord::clear_rechargerecordresult() {
  rechargerecordresult_.Clear();
}
inline const ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& SUB_GP_GetRechargeRecord::rechargerecordresult(int index) const {
  return rechargerecordresult_.Get(index);
}
inline ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* SUB_GP_GetRechargeRecord::mutable_rechargerecordresult(int index) {
  return rechargerecordresult_.Mutable(index);
}
inline ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* SUB_GP_GetRechargeRecord::add_rechargerecordresult() {
  return rechargerecordresult_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult >&
SUB_GP_GetRechargeRecord::rechargerecordresult() const {
  return rechargerecordresult_;
}
inline ::google::protobuf::RepeatedPtrField< ::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult >*
SUB_GP_GetRechargeRecord::mutable_rechargerecordresult() {
  return &rechargerecordresult_;
}

// -------------------------------------------------------------------

// CMD_GP_GetMonthlyCardScore

// required string flag = 1;
inline bool CMD_GP_GetMonthlyCardScore::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetMonthlyCardScore::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetMonthlyCardScore::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetMonthlyCardScore::clear_flag() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    flag_->clear();
  }
  clear_has_flag();
}
inline const ::std::string& CMD_GP_GetMonthlyCardScore::flag() const {
  return *flag_;
}
inline void CMD_GP_GetMonthlyCardScore::set_flag(const ::std::string& value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void CMD_GP_GetMonthlyCardScore::set_flag(const char* value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void CMD_GP_GetMonthlyCardScore::set_flag(const char* value, size_t size) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetMonthlyCardScore::mutable_flag() {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  return flag_;
}
inline ::std::string* CMD_GP_GetMonthlyCardScore::release_flag() {
  clear_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_;
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetMonthlyCardScore::set_allocated_flag(::std::string* flag) {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (flag) {
    set_has_flag();
    flag_ = flag;
  } else {
    clear_has_flag();
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Score = 2;
inline bool CMD_GP_GetMonthlyCardScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetMonthlyCardScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetMonthlyCardScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetMonthlyCardScore::clear_score() {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    score_->clear();
  }
  clear_has_score();
}
inline const ::std::string& CMD_GP_GetMonthlyCardScore::score() const {
  return *score_;
}
inline void CMD_GP_GetMonthlyCardScore::set_score(const ::std::string& value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(value);
}
inline void CMD_GP_GetMonthlyCardScore::set_score(const char* value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(value);
}
inline void CMD_GP_GetMonthlyCardScore::set_score(const char* value, size_t size) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetMonthlyCardScore::mutable_score() {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  return score_;
}
inline ::std::string* CMD_GP_GetMonthlyCardScore::release_score() {
  clear_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = score_;
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetMonthlyCardScore::set_allocated_score(::std::string* score) {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (score) {
    set_has_score();
    score_ = score;
  } else {
    clear_has_score();
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_SendPhoneSms

// required string MsgID = 1;
inline bool CMD_GP_SendPhoneSms::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_SendPhoneSms::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_SendPhoneSms::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_SendPhoneSms::clear_msgid() {
  if (msgid_ != &::google::protobuf::internal::kEmptyString) {
    msgid_->clear();
  }
  clear_has_msgid();
}
inline const ::std::string& CMD_GP_SendPhoneSms::msgid() const {
  return *msgid_;
}
inline void CMD_GP_SendPhoneSms::set_msgid(const ::std::string& value) {
  set_has_msgid();
  if (msgid_ == &::google::protobuf::internal::kEmptyString) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void CMD_GP_SendPhoneSms::set_msgid(const char* value) {
  set_has_msgid();
  if (msgid_ == &::google::protobuf::internal::kEmptyString) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
}
inline void CMD_GP_SendPhoneSms::set_msgid(const char* value, size_t size) {
  set_has_msgid();
  if (msgid_ == &::google::protobuf::internal::kEmptyString) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_SendPhoneSms::mutable_msgid() {
  set_has_msgid();
  if (msgid_ == &::google::protobuf::internal::kEmptyString) {
    msgid_ = new ::std::string;
  }
  return msgid_;
}
inline ::std::string* CMD_GP_SendPhoneSms::release_msgid() {
  clear_has_msgid();
  if (msgid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgid_;
    msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_SendPhoneSms::set_allocated_msgid(::std::string* msgid) {
  if (msgid_ != &::google::protobuf::internal::kEmptyString) {
    delete msgid_;
  }
  if (msgid) {
    set_has_msgid();
    msgid_ = msgid;
  } else {
    clear_has_msgid();
    msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Msg = 2;
inline bool CMD_GP_SendPhoneSms::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_SendPhoneSms::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_SendPhoneSms::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_SendPhoneSms::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_SendPhoneSms::msg() const {
  return *msg_;
}
inline void CMD_GP_SendPhoneSms::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_SendPhoneSms::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_SendPhoneSms::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_SendPhoneSms::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_SendPhoneSms::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_SendPhoneSms::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_PhoneBanding

// required string Success = 1;
inline bool CMD_GP_PhoneBanding::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_PhoneBanding::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_PhoneBanding::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_PhoneBanding::clear_success() {
  if (success_ != &::google::protobuf::internal::kEmptyString) {
    success_->clear();
  }
  clear_has_success();
}
inline const ::std::string& CMD_GP_PhoneBanding::success() const {
  return *success_;
}
inline void CMD_GP_PhoneBanding::set_success(const ::std::string& value) {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  success_->assign(value);
}
inline void CMD_GP_PhoneBanding::set_success(const char* value) {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  success_->assign(value);
}
inline void CMD_GP_PhoneBanding::set_success(const char* value, size_t size) {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  success_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_PhoneBanding::mutable_success() {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  return success_;
}
inline ::std::string* CMD_GP_PhoneBanding::release_success() {
  clear_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = success_;
    success_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_PhoneBanding::set_allocated_success(::std::string* success) {
  if (success_ != &::google::protobuf::internal::kEmptyString) {
    delete success_;
  }
  if (success) {
    set_has_success();
    success_ = success;
  } else {
    clear_has_success();
    success_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Msg = 2;
inline bool CMD_GP_PhoneBanding::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_PhoneBanding::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_PhoneBanding::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_PhoneBanding::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_PhoneBanding::msg() const {
  return *msg_;
}
inline void CMD_GP_PhoneBanding::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_PhoneBanding::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_PhoneBanding::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_PhoneBanding::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_PhoneBanding::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_PhoneBanding::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_ResetSafePwd

// required string Success = 1;
inline bool CMD_GP_ResetSafePwd::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_ResetSafePwd::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_ResetSafePwd::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_ResetSafePwd::clear_success() {
  if (success_ != &::google::protobuf::internal::kEmptyString) {
    success_->clear();
  }
  clear_has_success();
}
inline const ::std::string& CMD_GP_ResetSafePwd::success() const {
  return *success_;
}
inline void CMD_GP_ResetSafePwd::set_success(const ::std::string& value) {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  success_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_success(const char* value) {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  success_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_success(const char* value, size_t size) {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  success_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ResetSafePwd::mutable_success() {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  return success_;
}
inline ::std::string* CMD_GP_ResetSafePwd::release_success() {
  clear_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = success_;
    success_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ResetSafePwd::set_allocated_success(::std::string* success) {
  if (success_ != &::google::protobuf::internal::kEmptyString) {
    delete success_;
  }
  if (success) {
    set_has_success();
    success_ = success;
  } else {
    clear_has_success();
    success_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Msg = 2;
inline bool CMD_GP_ResetSafePwd::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_ResetSafePwd::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_ResetSafePwd::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_ResetSafePwd::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_ResetSafePwd::msg() const {
  return *msg_;
}
inline void CMD_GP_ResetSafePwd::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_ResetSafePwd::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ResetSafePwd::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_ResetSafePwd::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ResetSafePwd::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_RealNameAuthentication

// required string Success = 1;
inline bool CMD_GP_RealNameAuthentication::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_RealNameAuthentication::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_RealNameAuthentication::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_RealNameAuthentication::clear_success() {
  if (success_ != &::google::protobuf::internal::kEmptyString) {
    success_->clear();
  }
  clear_has_success();
}
inline const ::std::string& CMD_GP_RealNameAuthentication::success() const {
  return *success_;
}
inline void CMD_GP_RealNameAuthentication::set_success(const ::std::string& value) {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  success_->assign(value);
}
inline void CMD_GP_RealNameAuthentication::set_success(const char* value) {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  success_->assign(value);
}
inline void CMD_GP_RealNameAuthentication::set_success(const char* value, size_t size) {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  success_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_RealNameAuthentication::mutable_success() {
  set_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    success_ = new ::std::string;
  }
  return success_;
}
inline ::std::string* CMD_GP_RealNameAuthentication::release_success() {
  clear_has_success();
  if (success_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = success_;
    success_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_RealNameAuthentication::set_allocated_success(::std::string* success) {
  if (success_ != &::google::protobuf::internal::kEmptyString) {
    delete success_;
  }
  if (success) {
    set_has_success();
    success_ = success;
  } else {
    clear_has_success();
    success_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Msg = 2;
inline bool CMD_GP_RealNameAuthentication::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_RealNameAuthentication::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_RealNameAuthentication::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_RealNameAuthentication::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_RealNameAuthentication::msg() const {
  return *msg_;
}
inline void CMD_GP_RealNameAuthentication::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_RealNameAuthentication::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_RealNameAuthentication::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_RealNameAuthentication::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_RealNameAuthentication::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_RealNameAuthentication::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetNickName

// required string NickName = 1;
inline bool CMD_GP_GetNickName::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetNickName::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetNickName::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetNickName::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CMD_GP_GetNickName::nickname() const {
  return *nickname_;
}
inline void CMD_GP_GetNickName::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMD_GP_GetNickName::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMD_GP_GetNickName::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetNickName::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CMD_GP_GetNickName::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetNickName::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_LuckDraw

// required string code = 1;
inline bool CMD_GP_LuckDraw::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_LuckDraw::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_LuckDraw::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_LuckDraw::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMD_GP_LuckDraw::code() const {
  return *code_;
}
inline void CMD_GP_LuckDraw::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_LuckDraw::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_LuckDraw::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LuckDraw::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMD_GP_LuckDraw::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LuckDraw::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string prize = 2;
inline bool CMD_GP_LuckDraw::has_prize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_LuckDraw::set_has_prize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_LuckDraw::clear_has_prize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_LuckDraw::clear_prize() {
  if (prize_ != &::google::protobuf::internal::kEmptyString) {
    prize_->clear();
  }
  clear_has_prize();
}
inline const ::std::string& CMD_GP_LuckDraw::prize() const {
  return *prize_;
}
inline void CMD_GP_LuckDraw::set_prize(const ::std::string& value) {
  set_has_prize();
  if (prize_ == &::google::protobuf::internal::kEmptyString) {
    prize_ = new ::std::string;
  }
  prize_->assign(value);
}
inline void CMD_GP_LuckDraw::set_prize(const char* value) {
  set_has_prize();
  if (prize_ == &::google::protobuf::internal::kEmptyString) {
    prize_ = new ::std::string;
  }
  prize_->assign(value);
}
inline void CMD_GP_LuckDraw::set_prize(const char* value, size_t size) {
  set_has_prize();
  if (prize_ == &::google::protobuf::internal::kEmptyString) {
    prize_ = new ::std::string;
  }
  prize_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LuckDraw::mutable_prize() {
  set_has_prize();
  if (prize_ == &::google::protobuf::internal::kEmptyString) {
    prize_ = new ::std::string;
  }
  return prize_;
}
inline ::std::string* CMD_GP_LuckDraw::release_prize() {
  clear_has_prize();
  if (prize_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prize_;
    prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LuckDraw::set_allocated_prize(::std::string* prize) {
  if (prize_ != &::google::protobuf::internal::kEmptyString) {
    delete prize_;
  }
  if (prize) {
    set_has_prize();
    prize_ = prize;
  } else {
    clear_has_prize();
    prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 3;
inline bool CMD_GP_LuckDraw::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_LuckDraw::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_LuckDraw::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_LuckDraw::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_LuckDraw::msg() const {
  return *msg_;
}
inline void CMD_GP_LuckDraw::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_LuckDraw::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_LuckDraw::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_LuckDraw::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_LuckDraw::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_LuckDraw::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_ReceiveNovicePack

// required string code = 1;
inline bool CMD_GP_ReceiveNovicePack::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_ReceiveNovicePack::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_ReceiveNovicePack::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_ReceiveNovicePack::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMD_GP_ReceiveNovicePack::code() const {
  return *code_;
}
inline void CMD_GP_ReceiveNovicePack::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_ReceiveNovicePack::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_ReceiveNovicePack::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ReceiveNovicePack::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMD_GP_ReceiveNovicePack::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ReceiveNovicePack::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 2;
inline bool CMD_GP_ReceiveNovicePack::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_ReceiveNovicePack::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_ReceiveNovicePack::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_ReceiveNovicePack::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_ReceiveNovicePack::msg() const {
  return *msg_;
}
inline void CMD_GP_ReceiveNovicePack::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_ReceiveNovicePack::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_ReceiveNovicePack::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ReceiveNovicePack::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_ReceiveNovicePack::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ReceiveNovicePack::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mount = 3;
inline bool CMD_GP_ReceiveNovicePack::has_mount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GP_ReceiveNovicePack::set_has_mount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GP_ReceiveNovicePack::clear_has_mount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GP_ReceiveNovicePack::clear_mount() {
  if (mount_ != &::google::protobuf::internal::kEmptyString) {
    mount_->clear();
  }
  clear_has_mount();
}
inline const ::std::string& CMD_GP_ReceiveNovicePack::mount() const {
  return *mount_;
}
inline void CMD_GP_ReceiveNovicePack::set_mount(const ::std::string& value) {
  set_has_mount();
  if (mount_ == &::google::protobuf::internal::kEmptyString) {
    mount_ = new ::std::string;
  }
  mount_->assign(value);
}
inline void CMD_GP_ReceiveNovicePack::set_mount(const char* value) {
  set_has_mount();
  if (mount_ == &::google::protobuf::internal::kEmptyString) {
    mount_ = new ::std::string;
  }
  mount_->assign(value);
}
inline void CMD_GP_ReceiveNovicePack::set_mount(const char* value, size_t size) {
  set_has_mount();
  if (mount_ == &::google::protobuf::internal::kEmptyString) {
    mount_ = new ::std::string;
  }
  mount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ReceiveNovicePack::mutable_mount() {
  set_has_mount();
  if (mount_ == &::google::protobuf::internal::kEmptyString) {
    mount_ = new ::std::string;
  }
  return mount_;
}
inline ::std::string* CMD_GP_ReceiveNovicePack::release_mount() {
  clear_has_mount();
  if (mount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mount_;
    mount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ReceiveNovicePack::set_allocated_mount(::std::string* mount) {
  if (mount_ != &::google::protobuf::internal::kEmptyString) {
    delete mount_;
  }
  if (mount) {
    set_has_mount();
    mount_ = mount;
  } else {
    clear_has_mount();
    mount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string totalAmount = 4;
inline bool CMD_GP_ReceiveNovicePack::has_totalamount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GP_ReceiveNovicePack::set_has_totalamount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GP_ReceiveNovicePack::clear_has_totalamount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GP_ReceiveNovicePack::clear_totalamount() {
  if (totalamount_ != &::google::protobuf::internal::kEmptyString) {
    totalamount_->clear();
  }
  clear_has_totalamount();
}
inline const ::std::string& CMD_GP_ReceiveNovicePack::totalamount() const {
  return *totalamount_;
}
inline void CMD_GP_ReceiveNovicePack::set_totalamount(const ::std::string& value) {
  set_has_totalamount();
  if (totalamount_ == &::google::protobuf::internal::kEmptyString) {
    totalamount_ = new ::std::string;
  }
  totalamount_->assign(value);
}
inline void CMD_GP_ReceiveNovicePack::set_totalamount(const char* value) {
  set_has_totalamount();
  if (totalamount_ == &::google::protobuf::internal::kEmptyString) {
    totalamount_ = new ::std::string;
  }
  totalamount_->assign(value);
}
inline void CMD_GP_ReceiveNovicePack::set_totalamount(const char* value, size_t size) {
  set_has_totalamount();
  if (totalamount_ == &::google::protobuf::internal::kEmptyString) {
    totalamount_ = new ::std::string;
  }
  totalamount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_ReceiveNovicePack::mutable_totalamount() {
  set_has_totalamount();
  if (totalamount_ == &::google::protobuf::internal::kEmptyString) {
    totalamount_ = new ::std::string;
  }
  return totalamount_;
}
inline ::std::string* CMD_GP_ReceiveNovicePack::release_totalamount() {
  clear_has_totalamount();
  if (totalamount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = totalamount_;
    totalamount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_ReceiveNovicePack::set_allocated_totalamount(::std::string* totalamount) {
  if (totalamount_ != &::google::protobuf::internal::kEmptyString) {
    delete totalamount_;
  }
  if (totalamount) {
    set_has_totalamount();
    totalamount_ = totalamount;
  } else {
    clear_has_totalamount();
    totalamount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_GetRechargeCaseBag

// required string code = 1;
inline bool CMD_GP_GetRechargeCaseBag::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_GetRechargeCaseBag::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_GetRechargeCaseBag::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_GetRechargeCaseBag::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMD_GP_GetRechargeCaseBag::code() const {
  return *code_;
}
inline void CMD_GP_GetRechargeCaseBag::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetRechargeCaseBag::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_GetRechargeCaseBag::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetRechargeCaseBag::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMD_GP_GetRechargeCaseBag::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetRechargeCaseBag::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 2;
inline bool CMD_GP_GetRechargeCaseBag::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_GetRechargeCaseBag::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_GetRechargeCaseBag::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_GetRechargeCaseBag::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_GetRechargeCaseBag::msg() const {
  return *msg_;
}
inline void CMD_GP_GetRechargeCaseBag::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetRechargeCaseBag::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_GetRechargeCaseBag::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_GetRechargeCaseBag::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_GetRechargeCaseBag::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_GetRechargeCaseBag::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GP_BoxConversion

// required string code = 1;
inline bool CMD_GP_BoxConversion::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GP_BoxConversion::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GP_BoxConversion::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GP_BoxConversion::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMD_GP_BoxConversion::code() const {
  return *code_;
}
inline void CMD_GP_BoxConversion::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_BoxConversion::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMD_GP_BoxConversion::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_BoxConversion::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMD_GP_BoxConversion::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_BoxConversion::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 2;
inline bool CMD_GP_BoxConversion::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GP_BoxConversion::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GP_BoxConversion::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GP_BoxConversion::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CMD_GP_BoxConversion::msg() const {
  return *msg_;
}
inline void CMD_GP_BoxConversion::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_BoxConversion::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CMD_GP_BoxConversion::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GP_BoxConversion::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CMD_GP_BoxConversion::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GP_BoxConversion::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WebSocket_2fwebsocket_5fs2c_2eproto__INCLUDED

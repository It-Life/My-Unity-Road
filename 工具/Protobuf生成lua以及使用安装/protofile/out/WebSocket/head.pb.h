// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WebSocket/head.proto

#ifndef PROTOBUF_WebSocket_2fhead_2eproto__INCLUDED
#define PROTOBUF_WebSocket_2fhead_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WebSocket_2fhead_2eproto();
void protobuf_AssignDesc_WebSocket_2fhead_2eproto();
void protobuf_ShutdownFile_WebSocket_2fhead_2eproto();

class Header;

// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CMDcbVersion = 1;
  inline bool has_cmdcbversion() const;
  inline void clear_cmdcbversion();
  static const int kCMDcbVersionFieldNumber = 1;
  inline ::google::protobuf::int32 cmdcbversion() const;
  inline void set_cmdcbversion(::google::protobuf::int32 value);

  // optional int32 CMDcbCheckCode = 2;
  inline bool has_cmdcbcheckcode() const;
  inline void clear_cmdcbcheckcode();
  static const int kCMDcbCheckCodeFieldNumber = 2;
  inline ::google::protobuf::int32 cmdcbcheckcode() const;
  inline void set_cmdcbcheckcode(::google::protobuf::int32 value);

  // optional int32 CMDwPacketSize = 3;
  inline bool has_cmdwpacketsize() const;
  inline void clear_cmdwpacketsize();
  static const int kCMDwPacketSizeFieldNumber = 3;
  inline ::google::protobuf::int32 cmdwpacketsize() const;
  inline void set_cmdwpacketsize(::google::protobuf::int32 value);

  // optional int32 TCPcbDataKind = 4;
  inline bool has_tcpcbdatakind() const;
  inline void clear_tcpcbdatakind();
  static const int kTCPcbDataKindFieldNumber = 4;
  inline ::google::protobuf::int32 tcpcbdatakind() const;
  inline void set_tcpcbdatakind(::google::protobuf::int32 value);

  // optional int32 TCPcbCheckCode = 5;
  inline bool has_tcpcbcheckcode() const;
  inline void clear_tcpcbcheckcode();
  static const int kTCPcbCheckCodeFieldNumber = 5;
  inline ::google::protobuf::int32 tcpcbcheckcode() const;
  inline void set_tcpcbcheckcode(::google::protobuf::int32 value);

  // optional int32 TCPwPacketSize = 6;
  inline bool has_tcpwpacketsize() const;
  inline void clear_tcpwpacketsize();
  static const int kTCPwPacketSizeFieldNumber = 6;
  inline ::google::protobuf::int32 tcpwpacketsize() const;
  inline void set_tcpwpacketsize(::google::protobuf::int32 value);

  // required int32 MainID = 7;
  inline bool has_mainid() const;
  inline void clear_mainid();
  static const int kMainIDFieldNumber = 7;
  inline ::google::protobuf::int32 mainid() const;
  inline void set_mainid(::google::protobuf::int32 value);

  // required int32 SubID = 8;
  inline bool has_subid() const;
  inline void clear_subid();
  static const int kSubIDFieldNumber = 8;
  inline ::google::protobuf::int32 subid() const;
  inline void set_subid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Header)
 private:
  inline void set_has_cmdcbversion();
  inline void clear_has_cmdcbversion();
  inline void set_has_cmdcbcheckcode();
  inline void clear_has_cmdcbcheckcode();
  inline void set_has_cmdwpacketsize();
  inline void clear_has_cmdwpacketsize();
  inline void set_has_tcpcbdatakind();
  inline void clear_has_tcpcbdatakind();
  inline void set_has_tcpcbcheckcode();
  inline void clear_has_tcpcbcheckcode();
  inline void set_has_tcpwpacketsize();
  inline void clear_has_tcpwpacketsize();
  inline void set_has_mainid();
  inline void clear_has_mainid();
  inline void set_has_subid();
  inline void clear_has_subid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cmdcbversion_;
  ::google::protobuf::int32 cmdcbcheckcode_;
  ::google::protobuf::int32 cmdwpacketsize_;
  ::google::protobuf::int32 tcpcbdatakind_;
  ::google::protobuf::int32 tcpcbcheckcode_;
  ::google::protobuf::int32 tcpwpacketsize_;
  ::google::protobuf::int32 mainid_;
  ::google::protobuf::int32 subid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_WebSocket_2fhead_2eproto();
  friend void protobuf_AssignDesc_WebSocket_2fhead_2eproto();
  friend void protobuf_ShutdownFile_WebSocket_2fhead_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// ===================================================================


// ===================================================================

// Header

// optional int32 CMDcbVersion = 1;
inline bool Header::has_cmdcbversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_cmdcbversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_cmdcbversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_cmdcbversion() {
  cmdcbversion_ = 0;
  clear_has_cmdcbversion();
}
inline ::google::protobuf::int32 Header::cmdcbversion() const {
  return cmdcbversion_;
}
inline void Header::set_cmdcbversion(::google::protobuf::int32 value) {
  set_has_cmdcbversion();
  cmdcbversion_ = value;
}

// optional int32 CMDcbCheckCode = 2;
inline bool Header::has_cmdcbcheckcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_cmdcbcheckcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_cmdcbcheckcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_cmdcbcheckcode() {
  cmdcbcheckcode_ = 0;
  clear_has_cmdcbcheckcode();
}
inline ::google::protobuf::int32 Header::cmdcbcheckcode() const {
  return cmdcbcheckcode_;
}
inline void Header::set_cmdcbcheckcode(::google::protobuf::int32 value) {
  set_has_cmdcbcheckcode();
  cmdcbcheckcode_ = value;
}

// optional int32 CMDwPacketSize = 3;
inline bool Header::has_cmdwpacketsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_cmdwpacketsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_cmdwpacketsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_cmdwpacketsize() {
  cmdwpacketsize_ = 0;
  clear_has_cmdwpacketsize();
}
inline ::google::protobuf::int32 Header::cmdwpacketsize() const {
  return cmdwpacketsize_;
}
inline void Header::set_cmdwpacketsize(::google::protobuf::int32 value) {
  set_has_cmdwpacketsize();
  cmdwpacketsize_ = value;
}

// optional int32 TCPcbDataKind = 4;
inline bool Header::has_tcpcbdatakind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_tcpcbdatakind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_tcpcbdatakind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_tcpcbdatakind() {
  tcpcbdatakind_ = 0;
  clear_has_tcpcbdatakind();
}
inline ::google::protobuf::int32 Header::tcpcbdatakind() const {
  return tcpcbdatakind_;
}
inline void Header::set_tcpcbdatakind(::google::protobuf::int32 value) {
  set_has_tcpcbdatakind();
  tcpcbdatakind_ = value;
}

// optional int32 TCPcbCheckCode = 5;
inline bool Header::has_tcpcbcheckcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_tcpcbcheckcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_tcpcbcheckcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_tcpcbcheckcode() {
  tcpcbcheckcode_ = 0;
  clear_has_tcpcbcheckcode();
}
inline ::google::protobuf::int32 Header::tcpcbcheckcode() const {
  return tcpcbcheckcode_;
}
inline void Header::set_tcpcbcheckcode(::google::protobuf::int32 value) {
  set_has_tcpcbcheckcode();
  tcpcbcheckcode_ = value;
}

// optional int32 TCPwPacketSize = 6;
inline bool Header::has_tcpwpacketsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Header::set_has_tcpwpacketsize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Header::clear_has_tcpwpacketsize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Header::clear_tcpwpacketsize() {
  tcpwpacketsize_ = 0;
  clear_has_tcpwpacketsize();
}
inline ::google::protobuf::int32 Header::tcpwpacketsize() const {
  return tcpwpacketsize_;
}
inline void Header::set_tcpwpacketsize(::google::protobuf::int32 value) {
  set_has_tcpwpacketsize();
  tcpwpacketsize_ = value;
}

// required int32 MainID = 7;
inline bool Header::has_mainid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Header::set_has_mainid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Header::clear_has_mainid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Header::clear_mainid() {
  mainid_ = 0;
  clear_has_mainid();
}
inline ::google::protobuf::int32 Header::mainid() const {
  return mainid_;
}
inline void Header::set_mainid(::google::protobuf::int32 value) {
  set_has_mainid();
  mainid_ = value;
}

// required int32 SubID = 8;
inline bool Header::has_subid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Header::set_has_subid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Header::clear_has_subid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Header::clear_subid() {
  subid_ = 0;
  clear_has_subid();
}
inline ::google::protobuf::int32 Header::subid() const {
  return subid_;
}
inline void Header::set_subid(::google::protobuf::int32 value) {
  set_has_subid();
  subid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WebSocket_2fhead_2eproto__INCLUDED

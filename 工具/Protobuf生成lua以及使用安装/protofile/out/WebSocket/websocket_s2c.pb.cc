// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WebSocket/websocket_s2c.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WebSocket/websocket_s2c.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMD_GR_S_PropertySuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GR_S_PropertySuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultFailure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultFailure_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_UserInsureSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_UserInsureSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_UserInsureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_UserInsureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_OperateSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_OperateSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_MeiliDuihuanSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_MeiliDuihuanSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiftBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiftBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeCaseBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeCaseBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Novice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Novice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hall_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relief_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relief_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewGiftBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewGiftBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* LanternBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LanternBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* HomeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HomeConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionalConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionalConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionalConfig1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionalConfig1_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeCase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeCase_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxDateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxDateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lantern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lantern_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonthlyCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonthlyCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* NovicePack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NovicePack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_NewDayRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_NewDayRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_LogonSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_LogonSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_LogonSuccess_CMD_GP_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_LogonSuccess_CMD_GP_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_LogonFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_LogonFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GameServer_GameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GameServer_GameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GameKind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GameKind_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GameKind_GameKind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GameKind_GameKind_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GiftDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GiftDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GiftDetail_GiftDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GiftDetail_GiftDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_LanternGiftDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_LanternGiftDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_LanternGiftDetail_LanternGiftDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_LanternGiftDetail_LanternGiftDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_ChangeAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_ChangeAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_TreasureChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_TreasureChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUB_GP_RANK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUB_GP_RANK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUB_GP_RANK_GoldRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUB_GP_RANK_GoldRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUB_GP_FISHRANK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUB_GP_FISHRANK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUB_GP_FISHRANK_FishRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUB_GP_FISHRANK_FishRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUB_GP_NEWPLAYGIFTFLAG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUB_GP_NEWPLAYGIFTFLAG_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUB_GP_AllModelsSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUB_GP_AllModelsSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUB_GP_AllModelsSwitch_AllModelsSwitch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUB_GP_AllModelsSwitch_AllModelsSwitch_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_SignIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_SignIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetHeadUrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetHeadUrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetNoviceCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetNoviceCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetActivityCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetActivityCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetReliefMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetReliefMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetPayPhone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetPayPhone_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetAwardGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetAwardGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUB_GP_GetRechargeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUB_GP_GetRechargeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetMonthlyCardScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetMonthlyCardScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_SendPhoneSms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_SendPhoneSms_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_PhoneBanding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_PhoneBanding_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_ResetSafePwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_ResetSafePwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_RealNameAuthentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_RealNameAuthentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetNickName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetNickName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_LuckDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_LuckDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_ReceiveNovicePack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_ReceiveNovicePack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_GetRechargeCaseBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_GetRechargeCaseBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GP_BoxConversion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GP_BoxConversion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto() {
  protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WebSocket/websocket_s2c.proto");
  GOOGLE_CHECK(file != NULL);
  CMD_GR_S_PropertySuccess_descriptor_ = file->message_type(0);
  static const int CMD_GR_S_PropertySuccess_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_S_PropertySuccess, cbrequestarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_S_PropertySuccess, witemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_S_PropertySuccess, wpropertyindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_S_PropertySuccess, dwsourceuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_S_PropertySuccess, dwtargetuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_S_PropertySuccess, dwloveless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_S_PropertySuccess, sztargetnickname_),
  };
  CMD_GR_S_PropertySuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GR_S_PropertySuccess_descriptor_,
      CMD_GR_S_PropertySuccess::default_instance_,
      CMD_GR_S_PropertySuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_S_PropertySuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GR_S_PropertySuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GR_S_PropertySuccess));
  ResultFailure_descriptor_ = file->message_type(1);
  static const int ResultFailure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFailure, wrequestarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFailure, lerrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFailure, szdescribestring_),
  };
  ResultFailure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultFailure_descriptor_,
      ResultFailure::default_instance_,
      ResultFailure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFailure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFailure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultFailure));
  CMD_GP_UserInsureSuccess_descriptor_ = file->message_type(2);
  static const int CMD_GP_UserInsureSuccess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureSuccess, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureSuccess, luserscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureSuccess, luserinsure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureSuccess, szdescribestring_),
  };
  CMD_GP_UserInsureSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_UserInsureSuccess_descriptor_,
      CMD_GP_UserInsureSuccess::default_instance_,
      CMD_GP_UserInsureSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_UserInsureSuccess));
  CMD_GP_UserInsureInfo_descriptor_ = file->message_type(3);
  static const int CMD_GP_UserInsureInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, wrevenuetake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, wrevenuetransfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, wserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, wmemberorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, luserscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, luserinsure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, ltransferprerequisite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, lloveness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, meiliduihuanratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, meiliduihuanmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, meiliduihuandailycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, dailyduihuancount_),
  };
  CMD_GP_UserInsureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_UserInsureInfo_descriptor_,
      CMD_GP_UserInsureInfo::default_instance_,
      CMD_GP_UserInsureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_UserInsureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_UserInsureInfo));
  CMD_GP_OperateSuccess_descriptor_ = file->message_type(4);
  static const int CMD_GP_OperateSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_OperateSuccess, lresultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_OperateSuccess, szdescribestring_),
  };
  CMD_GP_OperateSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_OperateSuccess_descriptor_,
      CMD_GP_OperateSuccess::default_instance_,
      CMD_GP_OperateSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_OperateSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_OperateSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_OperateSuccess));
  CMD_GP_MeiliDuihuanSuccess_descriptor_ = file->message_type(5);
  static const int CMD_GP_MeiliDuihuanSuccess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_MeiliDuihuanSuccess, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_MeiliDuihuanSuccess, luserscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_MeiliDuihuanSuccess, luserloveness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_MeiliDuihuanSuccess, szdescribestring_),
  };
  CMD_GP_MeiliDuihuanSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_MeiliDuihuanSuccess_descriptor_,
      CMD_GP_MeiliDuihuanSuccess::default_instance_,
      CMD_GP_MeiliDuihuanSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_MeiliDuihuanSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_MeiliDuihuanSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_MeiliDuihuanSuccess));
  GiftBag_descriptor_ = file->message_type(6);
  static const int GiftBag_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBag, giftbag1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBag, giftbag2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBag, giftbag3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBag, giftbag4_),
  };
  GiftBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiftBag_descriptor_,
      GiftBag::default_instance_,
      GiftBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiftBag));
  ActivityConfig_descriptor_ = file->message_type(7);
  static const int ActivityConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, activityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, endtime_),
  };
  ActivityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityConfig_descriptor_,
      ActivityConfig::default_instance_,
      ActivityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityConfig));
  Activity_descriptor_ = file->message_type(8);
  static const int Activity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, reward_),
  };
  Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_descriptor_,
      Activity::default_instance_,
      Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity));
  MemberInfo_descriptor_ = file->message_type(9);
  static const int MemberInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, memberswitchdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, memberorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, memberdays_),
  };
  MemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberInfo_descriptor_,
      MemberInfo::default_instance_,
      MemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberInfo));
  RechargeCaseBag_descriptor_ = file->message_type(10);
  static const int RechargeCaseBag_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCaseBag, rechargecasebag1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCaseBag, rechargecasebag2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCaseBag, rechargecasebag3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCaseBag, rechargecasebag4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCaseBag, rechargecasebag5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCaseBag, rechargecasebag6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCaseBag, rechargecasebag7_),
  };
  RechargeCaseBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeCaseBag_descriptor_,
      RechargeCaseBag::default_instance_,
      RechargeCaseBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCaseBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCaseBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeCaseBag));
  Secure_descriptor_ = file->message_type(11);
  static const int Secure_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secure, compellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secure, passportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secure, issecure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secure, verificationphone_),
  };
  Secure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Secure_descriptor_,
      Secure::default_instance_,
      Secure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Secure));
  Novice_descriptor_ = file->message_type(12);
  static const int Novice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Novice, novicecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Novice, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Novice, durationterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Novice, cardday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Novice, cardstate_),
  };
  Novice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Novice_descriptor_,
      Novice::default_instance_,
      Novice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Novice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Novice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Novice));
  Hall_descriptor_ = file->message_type(13);
  static const int Hall_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hall, type1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hall, type2_),
  };
  Hall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hall_descriptor_,
      Hall::default_instance_,
      Hall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hall));
  Relief_descriptor_ = file->message_type(14);
  static const int Relief_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relief, reliefnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relief, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relief, conditions_),
  };
  Relief_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Relief_descriptor_,
      Relief::default_instance_,
      Relief_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relief, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relief, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Relief));
  NewGiftBag_descriptor_ = file->message_type(15);
  static const int NewGiftBag_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGiftBag, newgiftbag1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGiftBag, newgiftbag2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGiftBag, newgiftbag3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGiftBag, newgiftbag4_),
  };
  NewGiftBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewGiftBag_descriptor_,
      NewGiftBag::default_instance_,
      NewGiftBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGiftBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGiftBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewGiftBag));
  LanternBag_descriptor_ = file->message_type(16);
  static const int LanternBag_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanternBag, lanternbag1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanternBag, lanternbag2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanternBag, lanternbag3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanternBag, lanternbag4_),
  };
  LanternBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LanternBag_descriptor_,
      LanternBag::default_instance_,
      LanternBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanternBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanternBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LanternBag));
  HomeConfig_descriptor_ = file->message_type(17);
  static const int HomeConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, functionalconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, luckdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, rechargecase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, boxdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, relief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, boxconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, rechargeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, newgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, lantern_),
  };
  HomeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HomeConfig_descriptor_,
      HomeConfig::default_instance_,
      HomeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HomeConfig));
  FunctionalConfig_descriptor_ = file->message_type(18);
  static const int FunctionalConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig, value_),
  };
  FunctionalConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionalConfig_descriptor_,
      FunctionalConfig::default_instance_,
      FunctionalConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionalConfig));
  FunctionalConfig1_descriptor_ = file->message_type(19);
  static const int FunctionalConfig1_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, bank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, actcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, reliefmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, moncard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, dailygift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, newcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, givepresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, isaudit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, ish5pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, horselamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, runcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, reliefmoneyshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, register__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, personalcenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, exchangecenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, bindphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, shcirfriends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, shoppingmall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, setup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, shfriends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, newgift_),
  };
  FunctionalConfig1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionalConfig1_descriptor_,
      FunctionalConfig1::default_instance_,
      FunctionalConfig1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionalConfig1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionalConfig1));
  LuckDraw_descriptor_ = file->message_type(20);
  static const int LuckDraw_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckDraw, activitytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckDraw, luchdrawamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckDraw, luchdrawnum_),
  };
  LuckDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckDraw_descriptor_,
      LuckDraw::default_instance_,
      LuckDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckDraw));
  RechargeCase_descriptor_ = file->message_type(21);
  static const int RechargeCase_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCase, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCase, casegradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCase, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCase, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCase, membershipperiod_),
  };
  RechargeCase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeCase_descriptor_,
      RechargeCase::default_instance_,
      RechargeCase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeCase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeCase));
  BoxDate_descriptor_ = file->message_type(22);
  static const int BoxDate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, boxdateinfo_),
  };
  BoxDate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxDate_descriptor_,
      BoxDate::default_instance_,
      BoxDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxDate));
  BoxDateInfo_descriptor_ = file->message_type(23);
  static const int BoxDateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDateInfo, goodstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDateInfo, goodsvalue_),
  };
  BoxDateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxDateInfo_descriptor_,
      BoxDateInfo::default_instance_,
      BoxDateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxDateInfo));
  BoxConfig_descriptor_ = file->message_type(24);
  static const int BoxConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxConfig, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxConfig, boxtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxConfig, boxvalue_),
  };
  BoxConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxConfig_descriptor_,
      BoxConfig::default_instance_,
      BoxConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxConfig));
  RechargeConfig_descriptor_ = file->message_type(25);
  static const int RechargeConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeConfig, payid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeConfig, value_),
  };
  RechargeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeConfig_descriptor_,
      RechargeConfig::default_instance_,
      RechargeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeConfig));
  NewGift_descriptor_ = file->message_type(26);
  static const int NewGift_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, payid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, memberday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, actualvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, originalprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, nowprice_),
  };
  NewGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewGift_descriptor_,
      NewGift::default_instance_,
      NewGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewGift));
  Lantern_descriptor_ = file->message_type(27);
  static const int Lantern_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, payid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, memberday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, actualvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, originalprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, nowprice_),
  };
  Lantern_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lantern_descriptor_,
      Lantern::default_instance_,
      Lantern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lantern, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lantern));
  MonthlyCard_descriptor_ = file->message_type(28);
  static const int MonthlyCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthlyCard, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthlyCard, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthlyCard, hasgetted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthlyCard, deadline_),
  };
  MonthlyCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonthlyCard_descriptor_,
      MonthlyCard::default_instance_,
      MonthlyCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthlyCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthlyCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonthlyCard));
  NovicePack_descriptor_ = file->message_type(29);
  static const int NovicePack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePack, daynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePack, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePack, money_),
  };
  NovicePack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NovicePack_descriptor_,
      NovicePack::default_instance_,
      NovicePack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NovicePack));
  CMD_GP_NewDayRefresh_descriptor_ = file->message_type(30);
  static const int CMD_GP_NewDayRefresh_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewDayRefresh, giftbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewDayRefresh, hall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewDayRefresh, relief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewDayRefresh, todayhassigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewDayRefresh, astatus_),
  };
  CMD_GP_NewDayRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_NewDayRefresh_descriptor_,
      CMD_GP_NewDayRefresh::default_instance_,
      CMD_GP_NewDayRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewDayRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_NewDayRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_NewDayRefresh));
  CMD_GP_LogonSuccess_descriptor_ = file->message_type(31);
  static const int CMD_GP_LogonSuccess_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, wfaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, dwgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, dwcustomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, dwusermedal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, dwexperience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, dwloveliness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, lticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, dwspreaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, luserscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, luserinsure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, cbgender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, cbmoormachine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, szaccounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, sznickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, winspreaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, cbmemberorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, szunderwrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, dwpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, userinfo_),
  };
  CMD_GP_LogonSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_LogonSuccess_descriptor_,
      CMD_GP_LogonSuccess::default_instance_,
      CMD_GP_LogonSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_LogonSuccess));
  CMD_GP_LogonSuccess_CMD_GP_UserInfo_descriptor_ = CMD_GP_LogonSuccess_descriptor_->nested_type(0);
  static const int CMD_GP_LogonSuccess_CMD_GP_UserInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, giftbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, activityconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, rechargecasemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, memberinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, rechargecasebag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, secure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, novice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, hall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, astatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, continuousdayssigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, tearoomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, relief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, newgiftbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, tearoomqr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, todayhassigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, monthlycard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, homeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, novicepack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, newskin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, dwnewplayertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, isopenminigame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, lanternbag_),
  };
  CMD_GP_LogonSuccess_CMD_GP_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_LogonSuccess_CMD_GP_UserInfo_descriptor_,
      CMD_GP_LogonSuccess_CMD_GP_UserInfo::default_instance_,
      CMD_GP_LogonSuccess_CMD_GP_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonSuccess_CMD_GP_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_LogonSuccess_CMD_GP_UserInfo));
  CMD_GP_LogonFinish_descriptor_ = file->message_type(32);
  static const int CMD_GP_LogonFinish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonFinish, wkindid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonFinish, wserverid_),
  };
  CMD_GP_LogonFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_LogonFinish_descriptor_,
      CMD_GP_LogonFinish::default_instance_,
      CMD_GP_LogonFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LogonFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_LogonFinish));
  CMD_GP_GameServer_descriptor_ = file->message_type(33);
  static const int CMD_GP_GameServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer, gameserver_),
  };
  CMD_GP_GameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GameServer_descriptor_,
      CMD_GP_GameServer::default_instance_,
      CMD_GP_GameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GameServer));
  CMD_GP_GameServer_GameServer_descriptor_ = CMD_GP_GameServer_descriptor_->nested_type(0);
  static const int CMD_GP_GameServer_GameServer_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, wkindid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, wnodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, wsortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, wserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, wserverport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, dwonlinecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, dwfullcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, wservertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, szserveraddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, szservername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, lminenterscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, lmaxenterscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, wserverkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, wserverlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, lcellscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, lenterscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, cbentermember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, dwserverrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, dwsurporttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, wtablecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, ischargeroom_),
  };
  CMD_GP_GameServer_GameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GameServer_GameServer_descriptor_,
      CMD_GP_GameServer_GameServer::default_instance_,
      CMD_GP_GameServer_GameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameServer_GameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GameServer_GameServer));
  CMD_GP_GameKind_descriptor_ = file->message_type(34);
  static const int CMD_GP_GameKind_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind, gamekind_),
  };
  CMD_GP_GameKind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GameKind_descriptor_,
      CMD_GP_GameKind::default_instance_,
      CMD_GP_GameKind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GameKind));
  CMD_GP_GameKind_GameKind_descriptor_ = CMD_GP_GameKind_descriptor_->nested_type(0);
  static const int CMD_GP_GameKind_GameKind_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, wtypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, wjoinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, wsortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, wkindid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, wgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, dwonlinecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, dwfullcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, szkindname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, szprocessname_),
  };
  CMD_GP_GameKind_GameKind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GameKind_GameKind_descriptor_,
      CMD_GP_GameKind_GameKind::default_instance_,
      CMD_GP_GameKind_GameKind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GameKind_GameKind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GameKind_GameKind));
  CMD_GP_GiftDetail_descriptor_ = file->message_type(35);
  static const int CMD_GP_GiftDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GiftDetail, giftdetail_),
  };
  CMD_GP_GiftDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GiftDetail_descriptor_,
      CMD_GP_GiftDetail::default_instance_,
      CMD_GP_GiftDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GiftDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GiftDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GiftDetail));
  CMD_GP_GiftDetail_GiftDetail_descriptor_ = CMD_GP_GiftDetail_descriptor_->nested_type(0);
  static const int CMD_GP_GiftDetail_GiftDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GiftDetail_GiftDetail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GiftDetail_GiftDetail, num_),
  };
  CMD_GP_GiftDetail_GiftDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GiftDetail_GiftDetail_descriptor_,
      CMD_GP_GiftDetail_GiftDetail::default_instance_,
      CMD_GP_GiftDetail_GiftDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GiftDetail_GiftDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GiftDetail_GiftDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GiftDetail_GiftDetail));
  CMD_GP_LanternGiftDetail_descriptor_ = file->message_type(36);
  static const int CMD_GP_LanternGiftDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LanternGiftDetail, lanterngiftdetail_),
  };
  CMD_GP_LanternGiftDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_LanternGiftDetail_descriptor_,
      CMD_GP_LanternGiftDetail::default_instance_,
      CMD_GP_LanternGiftDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LanternGiftDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LanternGiftDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_LanternGiftDetail));
  CMD_GP_LanternGiftDetail_LanternGiftDetail_descriptor_ = CMD_GP_LanternGiftDetail_descriptor_->nested_type(0);
  static const int CMD_GP_LanternGiftDetail_LanternGiftDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LanternGiftDetail_LanternGiftDetail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LanternGiftDetail_LanternGiftDetail, num_),
  };
  CMD_GP_LanternGiftDetail_LanternGiftDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_LanternGiftDetail_LanternGiftDetail_descriptor_,
      CMD_GP_LanternGiftDetail_LanternGiftDetail::default_instance_,
      CMD_GP_LanternGiftDetail_LanternGiftDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LanternGiftDetail_LanternGiftDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LanternGiftDetail_LanternGiftDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_LanternGiftDetail_LanternGiftDetail));
  CMD_GP_ChangeAccount_descriptor_ = file->message_type(37);
  static const int CMD_GP_ChangeAccount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ChangeAccount, msg_),
  };
  CMD_GP_ChangeAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_ChangeAccount_descriptor_,
      CMD_GP_ChangeAccount::default_instance_,
      CMD_GP_ChangeAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ChangeAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ChangeAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_ChangeAccount));
  CMD_GP_TreasureChange_descriptor_ = file->message_type(38);
  static const int CMD_GP_TreasureChange_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, membertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, memberinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, loveliness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, newgiftcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, luckdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, monthlycard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, rechargetype_),
  };
  CMD_GP_TreasureChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_TreasureChange_descriptor_,
      CMD_GP_TreasureChange::default_instance_,
      CMD_GP_TreasureChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_TreasureChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_TreasureChange));
  SUB_GP_RANK_descriptor_ = file->message_type(39);
  static const int SUB_GP_RANK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK, goldrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK, showrank_),
  };
  SUB_GP_RANK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUB_GP_RANK_descriptor_,
      SUB_GP_RANK::default_instance_,
      SUB_GP_RANK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUB_GP_RANK));
  SUB_GP_RANK_GoldRank_descriptor_ = SUB_GP_RANK_descriptor_->nested_type(0);
  static const int SUB_GP_RANK_GoldRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK_GoldRank, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK_GoldRank, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK_GoldRank, memberorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK_GoldRank, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK_GoldRank, score_),
  };
  SUB_GP_RANK_GoldRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUB_GP_RANK_GoldRank_descriptor_,
      SUB_GP_RANK_GoldRank::default_instance_,
      SUB_GP_RANK_GoldRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK_GoldRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_RANK_GoldRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUB_GP_RANK_GoldRank));
  SUB_GP_FISHRANK_descriptor_ = file->message_type(40);
  static const int SUB_GP_FISHRANK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK, fishrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK, selfrank_),
  };
  SUB_GP_FISHRANK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUB_GP_FISHRANK_descriptor_,
      SUB_GP_FISHRANK::default_instance_,
      SUB_GP_FISHRANK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUB_GP_FISHRANK));
  SUB_GP_FISHRANK_FishRank_descriptor_ = SUB_GP_FISHRANK_descriptor_->nested_type(0);
  static const int SUB_GP_FISHRANK_FishRank_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK_FishRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK_FishRank, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK_FishRank, memberorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK_FishRank, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK_FishRank, catchedfishnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK_FishRank, updatetime_),
  };
  SUB_GP_FISHRANK_FishRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUB_GP_FISHRANK_FishRank_descriptor_,
      SUB_GP_FISHRANK_FishRank::default_instance_,
      SUB_GP_FISHRANK_FishRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK_FishRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_FISHRANK_FishRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUB_GP_FISHRANK_FishRank));
  SUB_GP_NEWPLAYGIFTFLAG_descriptor_ = file->message_type(41);
  static const int SUB_GP_NEWPLAYGIFTFLAG_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_NEWPLAYGIFTFLAG, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_NEWPLAYGIFTFLAG, msg_),
  };
  SUB_GP_NEWPLAYGIFTFLAG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUB_GP_NEWPLAYGIFTFLAG_descriptor_,
      SUB_GP_NEWPLAYGIFTFLAG::default_instance_,
      SUB_GP_NEWPLAYGIFTFLAG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_NEWPLAYGIFTFLAG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_NEWPLAYGIFTFLAG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUB_GP_NEWPLAYGIFTFLAG));
  SUB_GP_AllModelsSwitch_descriptor_ = file->message_type(42);
  static const int SUB_GP_AllModelsSwitch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_AllModelsSwitch, allmodelsswitch_),
  };
  SUB_GP_AllModelsSwitch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUB_GP_AllModelsSwitch_descriptor_,
      SUB_GP_AllModelsSwitch::default_instance_,
      SUB_GP_AllModelsSwitch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_AllModelsSwitch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_AllModelsSwitch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUB_GP_AllModelsSwitch));
  SUB_GP_AllModelsSwitch_AllModelsSwitch_descriptor_ = SUB_GP_AllModelsSwitch_descriptor_->nested_type(0);
  static const int SUB_GP_AllModelsSwitch_AllModelsSwitch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_AllModelsSwitch_AllModelsSwitch, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_AllModelsSwitch_AllModelsSwitch, isshow_),
  };
  SUB_GP_AllModelsSwitch_AllModelsSwitch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUB_GP_AllModelsSwitch_AllModelsSwitch_descriptor_,
      SUB_GP_AllModelsSwitch_AllModelsSwitch::default_instance_,
      SUB_GP_AllModelsSwitch_AllModelsSwitch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_AllModelsSwitch_AllModelsSwitch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_AllModelsSwitch_AllModelsSwitch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUB_GP_AllModelsSwitch_AllModelsSwitch));
  CMD_GP_SignIn_descriptor_ = file->message_type(43);
  static const int CMD_GP_SignIn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SignIn, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SignIn, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SignIn, gold_),
  };
  CMD_GP_SignIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_SignIn_descriptor_,
      CMD_GP_SignIn::default_instance_,
      CMD_GP_SignIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SignIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SignIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_SignIn));
  CMD_GP_GetHeadUrl_descriptor_ = file->message_type(44);
  static const int CMD_GP_GetHeadUrl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetHeadUrl, flag_),
  };
  CMD_GP_GetHeadUrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetHeadUrl_descriptor_,
      CMD_GP_GetHeadUrl::default_instance_,
      CMD_GP_GetHeadUrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetHeadUrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetHeadUrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetHeadUrl));
  CMD_GP_GetNoviceCard_descriptor_ = file->message_type(45);
  static const int CMD_GP_GetNoviceCard_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, durationterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, cardday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, cardstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, denomination_),
  };
  CMD_GP_GetNoviceCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetNoviceCard_descriptor_,
      CMD_GP_GetNoviceCard::default_instance_,
      CMD_GP_GetNoviceCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNoviceCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetNoviceCard));
  CMD_GP_GetActivityCard_descriptor_ = file->message_type(46);
  static const int CMD_GP_GetActivityCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, score_),
  };
  CMD_GP_GetActivityCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetActivityCard_descriptor_,
      CMD_GP_GetActivityCard::default_instance_,
      CMD_GP_GetActivityCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetActivityCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetActivityCard));
  CMD_GP_GetReliefMoney_descriptor_ = file->message_type(47);
  static const int CMD_GP_GetReliefMoney_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, reliefnum_),
  };
  CMD_GP_GetReliefMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetReliefMoney_descriptor_,
      CMD_GP_GetReliefMoney::default_instance_,
      CMD_GP_GetReliefMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetReliefMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetReliefMoney));
  CMD_GP_GetPayPhone_descriptor_ = file->message_type(48);
  static const int CMD_GP_GetPayPhone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, award_),
  };
  CMD_GP_GetPayPhone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetPayPhone_descriptor_,
      CMD_GP_GetPayPhone::default_instance_,
      CMD_GP_GetPayPhone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetPayPhone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetPayPhone));
  CMD_GP_GetAwardGold_descriptor_ = file->message_type(49);
  static const int CMD_GP_GetAwardGold_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, gold_),
  };
  CMD_GP_GetAwardGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetAwardGold_descriptor_,
      CMD_GP_GetAwardGold::default_instance_,
      CMD_GP_GetAwardGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetAwardGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetAwardGold));
  SUB_GP_GetRechargeRecord_descriptor_ = file->message_type(50);
  static const int SUB_GP_GetRechargeRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord, rechargerecordresult_),
  };
  SUB_GP_GetRechargeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUB_GP_GetRechargeRecord_descriptor_,
      SUB_GP_GetRechargeRecord::default_instance_,
      SUB_GP_GetRechargeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUB_GP_GetRechargeRecord));
  SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_descriptor_ = SUB_GP_GetRechargeRecord_descriptor_->nested_type(0);
  static const int SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult, desc1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult, desc2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult, desc3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult, desc4_),
  };
  SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_descriptor_,
      SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::default_instance_,
      SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult));
  CMD_GP_GetMonthlyCardScore_descriptor_ = file->message_type(51);
  static const int CMD_GP_GetMonthlyCardScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetMonthlyCardScore, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetMonthlyCardScore, score_),
  };
  CMD_GP_GetMonthlyCardScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetMonthlyCardScore_descriptor_,
      CMD_GP_GetMonthlyCardScore::default_instance_,
      CMD_GP_GetMonthlyCardScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetMonthlyCardScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetMonthlyCardScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetMonthlyCardScore));
  CMD_GP_SendPhoneSms_descriptor_ = file->message_type(52);
  static const int CMD_GP_SendPhoneSms_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SendPhoneSms, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SendPhoneSms, msg_),
  };
  CMD_GP_SendPhoneSms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_SendPhoneSms_descriptor_,
      CMD_GP_SendPhoneSms::default_instance_,
      CMD_GP_SendPhoneSms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SendPhoneSms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_SendPhoneSms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_SendPhoneSms));
  CMD_GP_PhoneBanding_descriptor_ = file->message_type(53);
  static const int CMD_GP_PhoneBanding_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, msg_),
  };
  CMD_GP_PhoneBanding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_PhoneBanding_descriptor_,
      CMD_GP_PhoneBanding::default_instance_,
      CMD_GP_PhoneBanding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_PhoneBanding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_PhoneBanding));
  CMD_GP_ResetSafePwd_descriptor_ = file->message_type(54);
  static const int CMD_GP_ResetSafePwd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, msg_),
  };
  CMD_GP_ResetSafePwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_ResetSafePwd_descriptor_,
      CMD_GP_ResetSafePwd::default_instance_,
      CMD_GP_ResetSafePwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ResetSafePwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_ResetSafePwd));
  CMD_GP_RealNameAuthentication_descriptor_ = file->message_type(55);
  static const int CMD_GP_RealNameAuthentication_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_RealNameAuthentication, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_RealNameAuthentication, msg_),
  };
  CMD_GP_RealNameAuthentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_RealNameAuthentication_descriptor_,
      CMD_GP_RealNameAuthentication::default_instance_,
      CMD_GP_RealNameAuthentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_RealNameAuthentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_RealNameAuthentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_RealNameAuthentication));
  CMD_GP_GetNickName_descriptor_ = file->message_type(56);
  static const int CMD_GP_GetNickName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNickName, nickname_),
  };
  CMD_GP_GetNickName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetNickName_descriptor_,
      CMD_GP_GetNickName::default_instance_,
      CMD_GP_GetNickName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNickName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetNickName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetNickName));
  CMD_GP_LuckDraw_descriptor_ = file->message_type(57);
  static const int CMD_GP_LuckDraw_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LuckDraw, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LuckDraw, prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LuckDraw, msg_),
  };
  CMD_GP_LuckDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_LuckDraw_descriptor_,
      CMD_GP_LuckDraw::default_instance_,
      CMD_GP_LuckDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LuckDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_LuckDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_LuckDraw));
  CMD_GP_ReceiveNovicePack_descriptor_ = file->message_type(58);
  static const int CMD_GP_ReceiveNovicePack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ReceiveNovicePack, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ReceiveNovicePack, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ReceiveNovicePack, mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ReceiveNovicePack, totalamount_),
  };
  CMD_GP_ReceiveNovicePack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_ReceiveNovicePack_descriptor_,
      CMD_GP_ReceiveNovicePack::default_instance_,
      CMD_GP_ReceiveNovicePack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ReceiveNovicePack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_ReceiveNovicePack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_ReceiveNovicePack));
  CMD_GP_GetRechargeCaseBag_descriptor_ = file->message_type(59);
  static const int CMD_GP_GetRechargeCaseBag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeCaseBag, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeCaseBag, msg_),
  };
  CMD_GP_GetRechargeCaseBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_GetRechargeCaseBag_descriptor_,
      CMD_GP_GetRechargeCaseBag::default_instance_,
      CMD_GP_GetRechargeCaseBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeCaseBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_GetRechargeCaseBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_GetRechargeCaseBag));
  CMD_GP_BoxConversion_descriptor_ = file->message_type(60);
  static const int CMD_GP_BoxConversion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_BoxConversion, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_BoxConversion, msg_),
  };
  CMD_GP_BoxConversion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GP_BoxConversion_descriptor_,
      CMD_GP_BoxConversion::default_instance_,
      CMD_GP_BoxConversion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_BoxConversion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GP_BoxConversion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GP_BoxConversion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WebSocket_2fwebsocket_5fs2c_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GR_S_PropertySuccess_descriptor_, &CMD_GR_S_PropertySuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultFailure_descriptor_, &ResultFailure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_UserInsureSuccess_descriptor_, &CMD_GP_UserInsureSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_UserInsureInfo_descriptor_, &CMD_GP_UserInsureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_OperateSuccess_descriptor_, &CMD_GP_OperateSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_MeiliDuihuanSuccess_descriptor_, &CMD_GP_MeiliDuihuanSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiftBag_descriptor_, &GiftBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityConfig_descriptor_, &ActivityConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_descriptor_, &Activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberInfo_descriptor_, &MemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeCaseBag_descriptor_, &RechargeCaseBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Secure_descriptor_, &Secure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Novice_descriptor_, &Novice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hall_descriptor_, &Hall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Relief_descriptor_, &Relief::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewGiftBag_descriptor_, &NewGiftBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LanternBag_descriptor_, &LanternBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HomeConfig_descriptor_, &HomeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionalConfig_descriptor_, &FunctionalConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionalConfig1_descriptor_, &FunctionalConfig1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckDraw_descriptor_, &LuckDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeCase_descriptor_, &RechargeCase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxDate_descriptor_, &BoxDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxDateInfo_descriptor_, &BoxDateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxConfig_descriptor_, &BoxConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeConfig_descriptor_, &RechargeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewGift_descriptor_, &NewGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lantern_descriptor_, &Lantern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonthlyCard_descriptor_, &MonthlyCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NovicePack_descriptor_, &NovicePack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_NewDayRefresh_descriptor_, &CMD_GP_NewDayRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_LogonSuccess_descriptor_, &CMD_GP_LogonSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_LogonSuccess_CMD_GP_UserInfo_descriptor_, &CMD_GP_LogonSuccess_CMD_GP_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_LogonFinish_descriptor_, &CMD_GP_LogonFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GameServer_descriptor_, &CMD_GP_GameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GameServer_GameServer_descriptor_, &CMD_GP_GameServer_GameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GameKind_descriptor_, &CMD_GP_GameKind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GameKind_GameKind_descriptor_, &CMD_GP_GameKind_GameKind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GiftDetail_descriptor_, &CMD_GP_GiftDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GiftDetail_GiftDetail_descriptor_, &CMD_GP_GiftDetail_GiftDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_LanternGiftDetail_descriptor_, &CMD_GP_LanternGiftDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_LanternGiftDetail_LanternGiftDetail_descriptor_, &CMD_GP_LanternGiftDetail_LanternGiftDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_ChangeAccount_descriptor_, &CMD_GP_ChangeAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_TreasureChange_descriptor_, &CMD_GP_TreasureChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUB_GP_RANK_descriptor_, &SUB_GP_RANK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUB_GP_RANK_GoldRank_descriptor_, &SUB_GP_RANK_GoldRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUB_GP_FISHRANK_descriptor_, &SUB_GP_FISHRANK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUB_GP_FISHRANK_FishRank_descriptor_, &SUB_GP_FISHRANK_FishRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUB_GP_NEWPLAYGIFTFLAG_descriptor_, &SUB_GP_NEWPLAYGIFTFLAG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUB_GP_AllModelsSwitch_descriptor_, &SUB_GP_AllModelsSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUB_GP_AllModelsSwitch_AllModelsSwitch_descriptor_, &SUB_GP_AllModelsSwitch_AllModelsSwitch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_SignIn_descriptor_, &CMD_GP_SignIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetHeadUrl_descriptor_, &CMD_GP_GetHeadUrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetNoviceCard_descriptor_, &CMD_GP_GetNoviceCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetActivityCard_descriptor_, &CMD_GP_GetActivityCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetReliefMoney_descriptor_, &CMD_GP_GetReliefMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetPayPhone_descriptor_, &CMD_GP_GetPayPhone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetAwardGold_descriptor_, &CMD_GP_GetAwardGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUB_GP_GetRechargeRecord_descriptor_, &SUB_GP_GetRechargeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_descriptor_, &SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetMonthlyCardScore_descriptor_, &CMD_GP_GetMonthlyCardScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_SendPhoneSms_descriptor_, &CMD_GP_SendPhoneSms::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_PhoneBanding_descriptor_, &CMD_GP_PhoneBanding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_ResetSafePwd_descriptor_, &CMD_GP_ResetSafePwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_RealNameAuthentication_descriptor_, &CMD_GP_RealNameAuthentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetNickName_descriptor_, &CMD_GP_GetNickName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_LuckDraw_descriptor_, &CMD_GP_LuckDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_ReceiveNovicePack_descriptor_, &CMD_GP_ReceiveNovicePack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_GetRechargeCaseBag_descriptor_, &CMD_GP_GetRechargeCaseBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GP_BoxConversion_descriptor_, &CMD_GP_BoxConversion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto() {
  delete CMD_GR_S_PropertySuccess::default_instance_;
  delete CMD_GR_S_PropertySuccess_reflection_;
  delete ResultFailure::default_instance_;
  delete ResultFailure_reflection_;
  delete CMD_GP_UserInsureSuccess::default_instance_;
  delete CMD_GP_UserInsureSuccess_reflection_;
  delete CMD_GP_UserInsureInfo::default_instance_;
  delete CMD_GP_UserInsureInfo_reflection_;
  delete CMD_GP_OperateSuccess::default_instance_;
  delete CMD_GP_OperateSuccess_reflection_;
  delete CMD_GP_MeiliDuihuanSuccess::default_instance_;
  delete CMD_GP_MeiliDuihuanSuccess_reflection_;
  delete GiftBag::default_instance_;
  delete GiftBag_reflection_;
  delete ActivityConfig::default_instance_;
  delete ActivityConfig_reflection_;
  delete Activity::default_instance_;
  delete Activity_reflection_;
  delete MemberInfo::default_instance_;
  delete MemberInfo_reflection_;
  delete RechargeCaseBag::default_instance_;
  delete RechargeCaseBag_reflection_;
  delete Secure::default_instance_;
  delete Secure_reflection_;
  delete Novice::default_instance_;
  delete Novice_reflection_;
  delete Hall::default_instance_;
  delete Hall_reflection_;
  delete Relief::default_instance_;
  delete Relief_reflection_;
  delete NewGiftBag::default_instance_;
  delete NewGiftBag_reflection_;
  delete LanternBag::default_instance_;
  delete LanternBag_reflection_;
  delete HomeConfig::default_instance_;
  delete HomeConfig_reflection_;
  delete FunctionalConfig::default_instance_;
  delete FunctionalConfig_reflection_;
  delete FunctionalConfig1::default_instance_;
  delete FunctionalConfig1_reflection_;
  delete LuckDraw::default_instance_;
  delete LuckDraw_reflection_;
  delete RechargeCase::default_instance_;
  delete RechargeCase_reflection_;
  delete BoxDate::default_instance_;
  delete BoxDate_reflection_;
  delete BoxDateInfo::default_instance_;
  delete BoxDateInfo_reflection_;
  delete BoxConfig::default_instance_;
  delete BoxConfig_reflection_;
  delete RechargeConfig::default_instance_;
  delete RechargeConfig_reflection_;
  delete NewGift::default_instance_;
  delete NewGift_reflection_;
  delete Lantern::default_instance_;
  delete Lantern_reflection_;
  delete MonthlyCard::default_instance_;
  delete MonthlyCard_reflection_;
  delete NovicePack::default_instance_;
  delete NovicePack_reflection_;
  delete CMD_GP_NewDayRefresh::default_instance_;
  delete CMD_GP_NewDayRefresh_reflection_;
  delete CMD_GP_LogonSuccess::default_instance_;
  delete CMD_GP_LogonSuccess_reflection_;
  delete CMD_GP_LogonSuccess_CMD_GP_UserInfo::default_instance_;
  delete CMD_GP_LogonSuccess_CMD_GP_UserInfo_reflection_;
  delete CMD_GP_LogonFinish::default_instance_;
  delete CMD_GP_LogonFinish_reflection_;
  delete CMD_GP_GameServer::default_instance_;
  delete CMD_GP_GameServer_reflection_;
  delete CMD_GP_GameServer_GameServer::default_instance_;
  delete CMD_GP_GameServer_GameServer_reflection_;
  delete CMD_GP_GameKind::default_instance_;
  delete CMD_GP_GameKind_reflection_;
  delete CMD_GP_GameKind_GameKind::default_instance_;
  delete CMD_GP_GameKind_GameKind_reflection_;
  delete CMD_GP_GiftDetail::default_instance_;
  delete CMD_GP_GiftDetail_reflection_;
  delete CMD_GP_GiftDetail_GiftDetail::default_instance_;
  delete CMD_GP_GiftDetail_GiftDetail_reflection_;
  delete CMD_GP_LanternGiftDetail::default_instance_;
  delete CMD_GP_LanternGiftDetail_reflection_;
  delete CMD_GP_LanternGiftDetail_LanternGiftDetail::default_instance_;
  delete CMD_GP_LanternGiftDetail_LanternGiftDetail_reflection_;
  delete CMD_GP_ChangeAccount::default_instance_;
  delete CMD_GP_ChangeAccount_reflection_;
  delete CMD_GP_TreasureChange::default_instance_;
  delete CMD_GP_TreasureChange_reflection_;
  delete SUB_GP_RANK::default_instance_;
  delete SUB_GP_RANK_reflection_;
  delete SUB_GP_RANK_GoldRank::default_instance_;
  delete SUB_GP_RANK_GoldRank_reflection_;
  delete SUB_GP_FISHRANK::default_instance_;
  delete SUB_GP_FISHRANK_reflection_;
  delete SUB_GP_FISHRANK_FishRank::default_instance_;
  delete SUB_GP_FISHRANK_FishRank_reflection_;
  delete SUB_GP_NEWPLAYGIFTFLAG::default_instance_;
  delete SUB_GP_NEWPLAYGIFTFLAG_reflection_;
  delete SUB_GP_AllModelsSwitch::default_instance_;
  delete SUB_GP_AllModelsSwitch_reflection_;
  delete SUB_GP_AllModelsSwitch_AllModelsSwitch::default_instance_;
  delete SUB_GP_AllModelsSwitch_AllModelsSwitch_reflection_;
  delete CMD_GP_SignIn::default_instance_;
  delete CMD_GP_SignIn_reflection_;
  delete CMD_GP_GetHeadUrl::default_instance_;
  delete CMD_GP_GetHeadUrl_reflection_;
  delete CMD_GP_GetNoviceCard::default_instance_;
  delete CMD_GP_GetNoviceCard_reflection_;
  delete CMD_GP_GetActivityCard::default_instance_;
  delete CMD_GP_GetActivityCard_reflection_;
  delete CMD_GP_GetReliefMoney::default_instance_;
  delete CMD_GP_GetReliefMoney_reflection_;
  delete CMD_GP_GetPayPhone::default_instance_;
  delete CMD_GP_GetPayPhone_reflection_;
  delete CMD_GP_GetAwardGold::default_instance_;
  delete CMD_GP_GetAwardGold_reflection_;
  delete SUB_GP_GetRechargeRecord::default_instance_;
  delete SUB_GP_GetRechargeRecord_reflection_;
  delete SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::default_instance_;
  delete SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_reflection_;
  delete CMD_GP_GetMonthlyCardScore::default_instance_;
  delete CMD_GP_GetMonthlyCardScore_reflection_;
  delete CMD_GP_SendPhoneSms::default_instance_;
  delete CMD_GP_SendPhoneSms_reflection_;
  delete CMD_GP_PhoneBanding::default_instance_;
  delete CMD_GP_PhoneBanding_reflection_;
  delete CMD_GP_ResetSafePwd::default_instance_;
  delete CMD_GP_ResetSafePwd_reflection_;
  delete CMD_GP_RealNameAuthentication::default_instance_;
  delete CMD_GP_RealNameAuthentication_reflection_;
  delete CMD_GP_GetNickName::default_instance_;
  delete CMD_GP_GetNickName_reflection_;
  delete CMD_GP_LuckDraw::default_instance_;
  delete CMD_GP_LuckDraw_reflection_;
  delete CMD_GP_ReceiveNovicePack::default_instance_;
  delete CMD_GP_ReceiveNovicePack_reflection_;
  delete CMD_GP_GetRechargeCaseBag::default_instance_;
  delete CMD_GP_GetRechargeCaseBag_reflection_;
  delete CMD_GP_BoxConversion::default_instance_;
  delete CMD_GP_BoxConversion_reflection_;
}

void protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035WebSocket/websocket_s2c.proto\"\273\001\n\030CMD_"
    "GR_S_PropertySuccess\022\025\n\rcbRequestArea\030\001 "
    "\001(\005\022\022\n\nwItemCount\030\002 \001(\005\022\026\n\016wPropertyInde"
    "x\030\003 \001(\005\022\026\n\016dwSourceUserID\030\004 \002(\005\022\026\n\016dwTar"
    "getUserID\030\005 \002(\005\022\022\n\ndwLoveLess\030\006 \001(\005\022\030\n\020s"
    "zTargetNickName\030\007 \001(\t\"S\n\rResultFailure\022\024"
    "\n\014wRequestArea\030\001 \001(\005\022\022\n\nlErrorCode\030\002 \002(\005"
    "\022\030\n\020szDescribeString\030\003 \002(\t\"o\n\030CMD_GP_Use"
    "rInsureSuccess\022\020\n\010dwUserID\030\001 \002(\005\022\022\n\nlUse"
    "rScore\030\002 \002(\003\022\023\n\013lUserInsure\030\003 \002(\003\022\030\n\020szD"
    "escribeString\030\004 \002(\t\"\272\002\n\025CMD_GP_UserInsur"
    "eInfo\022\024\n\014wRevenueTake\030\001 \002(\005\022\030\n\020wRevenueT"
    "ransfer\030\002 \002(\005\022\021\n\twServerID\030\003 \002(\005\022\024\n\014wMem"
    "berOrder\030\004 \002(\005\022\022\n\nlUserScore\030\005 \002(\003\022\023\n\013lU"
    "serInsure\030\006 \002(\003\022\035\n\025lTransferPrerequisite"
    "\030\007 \002(\003\022\021\n\tlLoveNess\030\010 \002(\003\022\031\n\021MeiliDuihua"
    "nRatio\030\t \002(\003\022\027\n\017MeiliDuihuanMax\030\n \002(\003\022\036\n"
    "\026MeiliDuihuanDailyCount\030\013 \002(\003\022\031\n\021DailyDu"
    "ihuanCount\030\014 \002(\003\"F\n\025CMD_GP_OperateSucces"
    "s\022\023\n\013lResultCode\030\001 \002(\005\022\030\n\020szDescribeStri"
    "ng\030\002 \002(\t\"s\n\032CMD_GP_MeiliDuihuanSuccess\022\020"
    "\n\010dwUserID\030\001 \002(\005\022\022\n\nlUserScore\030\002 \002(\003\022\025\n\r"
    "lUserLoveness\030\003 \002(\003\022\030\n\020szDescribeString\030"
    "\004 \002(\t\"Q\n\007GiftBag\022\020\n\010giftBag1\030\001 \001(\005\022\020\n\010gi"
    "ftBag2\030\002 \001(\005\022\020\n\010giftBag3\030\003 \001(\005\022\020\n\010giftBa"
    "g4\030\004 \001(\005\"^\n\016ActivityConfig\022\024\n\014activityNa"
    "me\030\001 \001(\t\022\022\n\nactivityid\030\002 \001(\005\022\021\n\tstartTim"
    "e\030\003 \001(\t\022\017\n\007endTime\030\004 \001(\t\"N\n\010Activity\022\016\n\006"
    "status\030\001 \001(\005\022\021\n\tstartTime\030\002 \001(\t\022\017\n\007endTi"
    "me\030\003 \001(\t\022\016\n\006reward\030\004 \001(\t\"O\n\nMemberInfo\022\030"
    "\n\020memberSwitchDate\030\001 \001(\t\022\023\n\013memberOrder\030"
    "\002 \001(\005\022\022\n\nmemberDays\030\003 \001(\005\"\307\001\n\017RechargeCa"
    "seBag\022\030\n\020rechargeCaseBag1\030\001 \001(\005\022\030\n\020recha"
    "rgeCaseBag2\030\002 \001(\005\022\030\n\020rechargeCaseBag3\030\003 "
    "\001(\005\022\030\n\020rechargeCaseBag4\030\004 \001(\005\022\030\n\020recharg"
    "eCaseBag5\030\005 \001(\005\022\030\n\020rechargeCaseBag6\030\006 \001("
    "\005\022\030\n\020rechargeCaseBag7\030\007 \001(\005\"_\n\006Secure\022\024\n"
    "\014compellation\030\001 \001(\t\022\022\n\npassPortID\030\002 \001(\t\022"
    "\020\n\010isSecure\030\003 \001(\005\022\031\n\021verificationPhone\030\004"
    " \001(\t\"e\n\006Novice\022\022\n\nnoviceCard\030\001 \001(\t\022\r\n\005qu"
    "ota\030\002 \001(\t\022\024\n\014durationTerm\030\003 \001(\t\022\017\n\007cardD"
    "ay\030\004 \001(\005\022\021\n\tcardState\030\005 \001(\005\"$\n\004Hall\022\r\n\005t"
    "ype1\030\001 \001(\005\022\r\n\005type2\030\002 \001(\005\"B\n\006Relief\022\021\n\tr"
    "eliefNum\030\001 \001(\005\022\021\n\tcountDown\030\002 \001(\005\022\022\n\ncon"
    "ditions\030\003 \001(\005\"`\n\nNewGiftBag\022\023\n\013newGiftBa"
    "g1\030\001 \001(\005\022\023\n\013newGiftBag2\030\002 \001(\005\022\023\n\013newGift"
    "Bag3\030\003 \001(\005\022\023\n\013newGiftBag4\030\004 \001(\005\"`\n\nLante"
    "rnBag\022\023\n\013lanternBag1\030\001 \001(\005\022\023\n\013lanternBag"
    "2\030\002 \001(\005\022\023\n\013lanternBag3\030\003 \001(\005\022\023\n\013lanternB"
    "ag4\030\004 \001(\005\"\301\002\n\nHomeConfig\022+\n\020functionalCo"
    "nfig\030\001 \003(\0132\021.FunctionalConfig\022\033\n\010luckDra"
    "w\030\002 \001(\0132\t.LuckDraw\022#\n\014rechargeCase\030\003 \003(\013"
    "2\r.RechargeCase\022\014\n\004sign\030\004 \001(\t\022\031\n\007boxDate"
    "\030\005 \003(\0132\010.BoxDate\022\016\n\006relief\030\006 \001(\t\022\r\n\005shar"
    "e\030\007 \001(\t\022\035\n\tboxConfig\030\010 \003(\0132\n.BoxConfig\022\'"
    "\n\016rechargeConfig\030\t \003(\0132\017.RechargeConfig\022"
    "\031\n\007newGift\030\n \003(\0132\010.NewGift\022\031\n\007lantern\030\013 "
    "\003(\0132\010.Lantern\".\n\020FunctionalConfig\022\013\n\003key"
    "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\374\003\n\021FunctionalConf"
    "ig1\022\014\n\004bank\030\001 \001(\005\022\017\n\007actCard\030\002 \001(\005\022\023\n\013Re"
    "liefMoney\030\003 \001(\005\022\020\n\010Activity\030\004 \001(\005\022\017\n\007Mon"
    "Card\030\005 \001(\005\022\021\n\tDailyGift\030\006 \001(\005\022\020\n\010RankLis"
    "t\030\007 \001(\005\022\017\n\007NewCard\030\010 \001(\005\022\023\n\013GivePresent\030"
    "\t \001(\005\022\017\n\007isAudit\030\n \001(\005\022\017\n\007isH5Pay\030\013 \001(\005\022"
    "\021\n\tHorseLamp\030\014 \001(\005\022\021\n\tExtension\030\r \001(\005\022\022\n"
    "\nRunContent\030\016 \001(\t\022\030\n\020ReliefMoneyShare\030\017 "
    "\001(\005\022\020\n\010Register\030\020 \001(\005\022\026\n\016PersonalCenter\030"
    "\021 \001(\005\022\026\n\016ExchangeCenter\030\022 \001(\005\022\014\n\004Sign\030\023 "
    "\001(\005\022\021\n\tBindPhone\030\024 \001(\005\022\024\n\014ShCirFriends\030\025"
    " \001(\t\022\024\n\014ShoppingMall\030\026 \001(\005\022\r\n\005SetUp\030\027 \001("
    "\005\022\r\n\005Share\030\030 \001(\005\022\021\n\tShFriends\030\031 \001(\005\022\017\n\007N"
    "ewGift\030\032 \001(\005\"M\n\010LuckDraw\022\024\n\014activityTime"
    "\030\001 \001(\t\022\026\n\016luchDrawAmount\030\002 \001(\t\022\023\n\013luchDr"
    "awNum\030\003 \001(\005\"h\n\014RechargeCase\022\r\n\005price\030\001 \001"
    "(\005\022\023\n\013casegradeid\030\002 \001(\005\022\r\n\005score\030\003 \001(\005\022\013"
    "\n\003mid\030\004 \001(\005\022\030\n\020membershipperiod\030\005 \001(\005\"9\n"
    "\007BoxDate\022\013\n\003key\030\001 \001(\005\022!\n\013boxDateInfo\030\002 \003"
    "(\0132\014.BoxDateInfo\"4\n\013BoxDateInfo\022\021\n\tgoods"
    "Type\030\001 \001(\005\022\022\n\ngoodsValue\030\002 \001(\005\"=\n\tBoxCon"
    "fig\022\r\n\005boxID\030\001 \001(\005\022\017\n\007boxType\030\002 \001(\005\022\020\n\010b"
    "oxValue\030\003 \001(\005\".\n\016RechargeConfig\022\r\n\005payID"
    "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\231\001\n\007NewGift\022\r\n\005pay"
    "ID\030\001 \001(\t\022\014\n\004gold\030\002 \001(\003\022\020\n\010multiple\030\003 \001(\t"
    "\022\016\n\006member\030\004 \001(\005\022\021\n\tmemberday\030\005 \001(\005\022\023\n\013a"
    "ctualvalue\030\006 \001(\005\022\025\n\roriginalprice\030\007 \001(\005\022"
    "\020\n\010nowprice\030\010 \001(\005\"\231\001\n\007Lantern\022\r\n\005payID\030\001"
    " \001(\t\022\014\n\004gold\030\002 \001(\003\022\020\n\010multiple\030\003 \001(\t\022\016\n\006"
    "member\030\004 \001(\005\022\021\n\tmemberday\030\005 \001(\005\022\023\n\013actua"
    "lvalue\030\006 \001(\005\022\025\n\roriginalprice\030\007 \001(\005\022\020\n\010n"
    "owprice\030\010 \001(\005\"P\n\013MonthlyCard\022\014\n\004days\030\001 \001"
    "(\005\022\016\n\006status\030\002 \001(\005\022\021\n\thasGetted\030\003 \001(\005\022\020\n"
    "\010deadLine\030\004 \001(\t\";\n\nNovicePack\022\016\n\006daynum\030"
    "\001 \001(\005\022\016\n\006status\030\002 \001(\005\022\r\n\005money\030\003 \001(\001\"\210\001\n"
    "\024CMD_GP_NewDayRefresh\022\031\n\007giftBag\030\001 \001(\0132\010"
    ".GiftBag\022\023\n\004hall\030\002 \001(\0132\005.Hall\022\027\n\006relief\030"
    "\003 \001(\0132\007.Relief\022\026\n\016todayHasSigned\030\004 \001(\t\022\017"
    "\n\007aStatus\030\005 \001(\005\"\337\010\n\023CMD_GP_LogonSuccess\022"
    "\017\n\007wFaceID\030\001 \002(\005\022\020\n\010dwUserID\030\002 \002(\005\022\020\n\010dw"
    "GameID\030\003 \002(\005\022\022\n\ndwCustomID\030\004 \002(\005\022\023\n\013dwUs"
    "erMedal\030\005 \002(\005\022\024\n\014dwExperience\030\006 \002(\005\022\024\n\014d"
    "wLoveLiness\030\007 \002(\005\022\017\n\007lTicket\030\010 \002(\005\022\024\n\014dw"
    "SpreaderID\030\t \002(\005\022\022\n\nlUserScore\030\n \002(\003\022\023\n\013"
    "lUserInsure\030\013 \002(\003\022\020\n\010cbGender\030\014 \002(\005\022\025\n\rc"
    "bMoorMachine\030\r \001(\005\022\022\n\nszAccounts\030\016 \002(\t\022\022"
    "\n\nszNickName\030\017 \002(\t\022\025\n\rwInSpreaderID\030\020 \002("
    "\005\022\025\n\rcbMemberOrder\030\021 \002(\005\022\024\n\014szUnderWrite"
    "\030\022 \001(\t\022\r\n\005dwPwd\030\023 \001(\t\0226\n\010userInfo\030\024 \001(\0132"
    "$.CMD_GP_LogonSuccess.CMD_GP_UserInfo\032\221\005"
    "\n\017CMD_GP_UserInfo\022\031\n\007giftBag\030\001 \002(\0132\010.Gif"
    "tBag\022\'\n\016activityConfig\030\002 \003(\0132\017.ActivityC"
    "onfig\022\031\n\021rechargeCaseMoney\030\003 \001(\t\022\037\n\nmemb"
    "erInfo\030\004 \001(\0132\013.MemberInfo\022)\n\017rechargeCas"
    "eBag\030\005 \001(\0132\020.RechargeCaseBag\022\027\n\006secure\030\006"
    " \001(\0132\007.Secure\022\027\n\006novice\030\007 \001(\0132\007.Novice\022\023"
    "\n\004hall\030\010 \001(\0132\005.Hall\022\017\n\007aStatus\030\t \001(\005\022\034\n\024"
    "continuousDaysSigned\030\n \001(\005\022\023\n\013teaRoomNam"
    "e\030\013 \001(\t\022\027\n\006relief\030\014 \001(\0132\007.Relief\022\037\n\nnewG"
    "iftBag\030\r \001(\0132\013.NewGiftBag\022\021\n\tteaRoomQR\030\016"
    " \001(\t\022\026\n\016todayHasSigned\030\017 \001(\t\022\033\n\010activity"
    "\030\020 \001(\0132\t.Activity\022!\n\013monthlyCard\030\021 \001(\0132\014"
    ".MonthlyCard\022\037\n\nhomeConfig\030\022 \001(\0132\013.HomeC"
    "onfig\022\037\n\nnovicePack\030\023 \003(\0132\013.NovicePack\022\017"
    "\n\007NewSkin\030\024 \001(\005\022\027\n\017dwNewPlayerTime\030\025 \001(\t"
    "\022\026\n\016isOpenMiniGame\030\026 \001(\010\022\037\n\nlanternBag\030\027"
    " \001(\0132\013.LanternBag\"8\n\022CMD_GP_LogonFinish\022"
    "\017\n\007wKindID\030\001 \002(\005\022\021\n\twServerID\030\002 \002(\005\"\220\004\n\021"
    "CMD_GP_GameServer\0221\n\ngameserver\030\001 \003(\0132\035."
    "CMD_GP_GameServer.GameServer\032\307\003\n\nGameSer"
    "ver\022\017\n\007wKindID\030\001 \002(\005\022\017\n\007wNodeID\030\002 \002(\005\022\017\n"
    "\007wSortID\030\003 \002(\005\022\021\n\twServerID\030\004 \002(\005\022\023\n\013wSe"
    "rverPort\030\005 \002(\005\022\025\n\rdwOnLineCount\030\006 \002(\005\022\023\n"
    "\013dwFullCount\030\007 \002(\005\022\023\n\013wServerType\030\010 \002(\005\022"
    "\024\n\014szServerAddr\030\t \002(\t\022\024\n\014szServerName\030\n "
    "\002(\t\022\026\n\016lMinEnterScore\030\013 \002(\003\022\026\n\016lMaxEnter"
    "Score\030\014 \002(\003\022\023\n\013wServerKind\030\r \002(\005\022\024\n\014wSer"
    "verLevel\030\016 \002(\005\022\022\n\nlCellScore\030\017 \002(\003\022\023\n\013lE"
    "nterScore\030\020 \002(\003\022\025\n\rcbEnterMember\030\021 \002(\005\022\024"
    "\n\014dwServerRule\030\022 \002(\005\022\025\n\rdwSurportType\030\023 "
    "\002(\005\022\023\n\013wTableCount\030\024 \002(\005\022\024\n\014isChargeRoom"
    "\030\025 \002(\005\"\367\001\n\017CMD_GP_GameKind\022+\n\010gamekind\030\001"
    " \003(\0132\031.CMD_GP_GameKind.GameKind\032\266\001\n\010Game"
    "Kind\022\017\n\007wTypeID\030\001 \002(\005\022\017\n\007wJoinID\030\002 \002(\005\022\017"
    "\n\007wSortID\030\003 \002(\005\022\017\n\007wKindID\030\004 \002(\005\022\017\n\007wGam"
    "eID\030\005 \002(\005\022\025\n\rdwOnLineCount\030\006 \002(\005\022\023\n\013dwFu"
    "llCount\030\007 \002(\005\022\022\n\nszKindName\030\010 \002(\t\022\025\n\rszP"
    "rocessName\030\t \002(\t\"o\n\021CMD_GP_GiftDetail\0221\n"
    "\ngiftDetail\030\001 \003(\0132\035.CMD_GP_GiftDetail.Gi"
    "ftDetail\032\'\n\nGiftDetail\022\014\n\004type\030\001 \002(\005\022\013\n\003"
    "num\030\002 \002(\005\"\222\001\n\030CMD_GP_LanternGiftDetail\022F"
    "\n\021lanterngiftDetail\030\001 \003(\0132+.CMD_GP_Lante"
    "rnGiftDetail.LanternGiftDetail\032.\n\021Lanter"
    "nGiftDetail\022\014\n\004type\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\"#"
    "\n\024CMD_GP_ChangeAccount\022\013\n\003msg\030\001 \002(\t\"\350\001\n\025"
    "CMD_GP_TreasureChange\022\r\n\005score\030\001 \001(\003\022\022\n\n"
    "memberType\030\002 \001(\005\022\022\n\nmemberInfo\030\003 \001(\t\022\022\n\n"
    "loveliness\030\004 \001(\005\022\016\n\006ticket\030\005 \001(\005\022\025\n\rnewG"
    "iftCharge\030\006 \001(\005\022\020\n\010luckDraw\030\007 \001(\005\022!\n\013mon"
    "thlyCard\030\010 \001(\0132\014.MonthlyCard\022\022\n\nrecharge"
    "ID\030\t \001(\005\022\024\n\014rechargeType\030\n \001(\005\"\275\001\n\013SUB_G"
    "P_RANK\022\'\n\010goldRank\030\001 \003(\0132\025.SUB_GP_RANK.G"
    "oldRank\022\020\n\010selfRank\030\002 \002(\005\022\020\n\010showRank\030\003 "
    "\001(\005\032a\n\010GoldRank\022\017\n\007ranking\030\001 \002(\005\022\016\n\006game"
    "id\030\002 \002(\005\022\023\n\013memberorder\030\003 \002(\005\022\020\n\010nicknam"
    "e\030\004 \002(\t\022\r\n\005score\030\005 \002(\003\"\315\001\n\017SUB_GP_FISHRA"
    "NK\022+\n\010fishRank\030\001 \003(\0132\031.SUB_GP_FISHRANK.F"
    "ishRank\022\020\n\010selfRank\030\002 \002(\005\032{\n\010FishRank\022\014\n"
    "\004Rank\030\001 \002(\005\022\016\n\006GameID\030\002 \002(\005\022\023\n\013MemberOrd"
    "er\030\003 \002(\005\022\020\n\010NickName\030\004 \002(\t\022\026\n\016CatchedFis"
    "hNum\030\005 \002(\005\022\022\n\nUpdateTime\030\006 \002(\t\"3\n\026SUB_GP"
    "_NEWPLAYGIFTFLAG\022\014\n\004flag\030\001 \002(\005\022\013\n\003msg\030\002 "
    "\002(\t\"\216\001\n\026SUB_GP_AllModelsSwitch\022@\n\017allMod"
    "elsSwitch\030\001 \003(\0132\'.SUB_GP_AllModelsSwitch"
    ".AllModelsSwitch\0322\n\017AllModelsSwitch\022\017\n\007M"
    "odelID\030\001 \002(\005\022\016\n\006IsShow\030\002 \002(\005\"8\n\rCMD_GP_S"
    "ignIn\022\014\n\004flag\030\001 \002(\t\022\013\n\003msg\030\002 \001(\t\022\014\n\004gold"
    "\030\003 \001(\t\"!\n\021CMD_GP_GetHeadUrl\022\014\n\004flag\030\001 \002("
    "\t\"\220\001\n\024CMD_GP_GetNoviceCard\022\013\n\003Msg\030\001 \001(\t\022"
    "\014\n\004Code\030\002 \002(\t\022\r\n\005Quota\030\003 \001(\t\022\024\n\014Duration"
    "Term\030\004 \001(\t\022\017\n\007CardDay\030\005 \001(\t\022\021\n\tCardState"
    "\030\006 \001(\t\022\024\n\014Denomination\030\007 \001(\t\"B\n\026CMD_GP_G"
    "etActivityCard\022\013\n\003Msg\030\001 \001(\t\022\014\n\004Code\030\002 \002("
    "\t\022\r\n\005Score\030\003 \001(\t\"g\n\025CMD_GP_GetReliefMone"
    "y\022\013\n\003Msg\030\001 \001(\t\022\014\n\004Code\030\002 \002(\t\022\r\n\005Score\030\003 "
    "\001(\t\022\021\n\tCountDown\030\004 \001(\t\022\021\n\tReliefNum\030\005 \001("
    "\t\">\n\022CMD_GP_GetPayPhone\022\013\n\003Msg\030\001 \001(\t\022\014\n\004"
    "Code\030\002 \002(\t\022\r\n\005Award\030\003 \001(\t\"M\n\023CMD_GP_GetA"
    "wardGold\022\013\n\003Msg\030\001 \002(\t\022\014\n\004Code\030\002 \002(\t\022\r\n\005A"
    "ward\030\003 \001(\t\022\014\n\004Gold\030\004 \001(\t\"\330\001\n\030SUB_GP_GetR"
    "echargeRecord\022S\n\024rechargeRecordResult\030\001 "
    "\003(\01325.SUB_GP_GetRechargeRecord.CMD_GP_Re"
    "chargeRecordResult\032g\n\033CMD_GP_RechargeRec"
    "ordResult\022\014\n\004Type\030\001 \002(\005\022\r\n\005Desc1\030\002 \002(\t\022\r"
    "\n\005Desc2\030\003 \002(\t\022\r\n\005Desc3\030\004 \002(\t\022\r\n\005Desc4\030\005 "
    "\002(\005\"9\n\032CMD_GP_GetMonthlyCardScore\022\014\n\004fla"
    "g\030\001 \002(\t\022\r\n\005Score\030\002 \001(\t\"1\n\023CMD_GP_SendPho"
    "neSms\022\r\n\005MsgID\030\001 \002(\t\022\013\n\003Msg\030\002 \002(\t\"3\n\023CMD"
    "_GP_PhoneBanding\022\017\n\007Success\030\001 \002(\t\022\013\n\003Msg"
    "\030\002 \002(\t\"3\n\023CMD_GP_ResetSafePwd\022\017\n\007Success"
    "\030\001 \002(\t\022\013\n\003Msg\030\002 \002(\t\"=\n\035CMD_GP_RealNameAu"
    "thentication\022\017\n\007Success\030\001 \002(\t\022\013\n\003Msg\030\002 \002"
    "(\t\"&\n\022CMD_GP_GetNickName\022\020\n\010NickName\030\001 \002"
    "(\t\";\n\017CMD_GP_LuckDraw\022\014\n\004code\030\001 \002(\t\022\r\n\005p"
    "rize\030\002 \001(\t\022\013\n\003msg\030\003 \001(\t\"Y\n\030CMD_GP_Receiv"
    "eNovicePack\022\014\n\004code\030\001 \002(\t\022\013\n\003msg\030\002 \001(\t\022\r"
    "\n\005mount\030\003 \001(\t\022\023\n\013totalAmount\030\004 \001(\t\"6\n\031CM"
    "D_GP_GetRechargeCaseBag\022\014\n\004code\030\001 \002(\t\022\013\n"
    "\003msg\030\002 \001(\t\"1\n\024CMD_GP_BoxConversion\022\014\n\004co"
    "de\030\001 \002(\t\022\013\n\003msg\030\002 \001(\tB\035\n\022com.kxqp.kxqp.b"
    "eanB\007ProtoDo", 8332);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WebSocket/websocket_s2c.proto", &protobuf_RegisterTypes);
  CMD_GR_S_PropertySuccess::default_instance_ = new CMD_GR_S_PropertySuccess();
  ResultFailure::default_instance_ = new ResultFailure();
  CMD_GP_UserInsureSuccess::default_instance_ = new CMD_GP_UserInsureSuccess();
  CMD_GP_UserInsureInfo::default_instance_ = new CMD_GP_UserInsureInfo();
  CMD_GP_OperateSuccess::default_instance_ = new CMD_GP_OperateSuccess();
  CMD_GP_MeiliDuihuanSuccess::default_instance_ = new CMD_GP_MeiliDuihuanSuccess();
  GiftBag::default_instance_ = new GiftBag();
  ActivityConfig::default_instance_ = new ActivityConfig();
  Activity::default_instance_ = new Activity();
  MemberInfo::default_instance_ = new MemberInfo();
  RechargeCaseBag::default_instance_ = new RechargeCaseBag();
  Secure::default_instance_ = new Secure();
  Novice::default_instance_ = new Novice();
  Hall::default_instance_ = new Hall();
  Relief::default_instance_ = new Relief();
  NewGiftBag::default_instance_ = new NewGiftBag();
  LanternBag::default_instance_ = new LanternBag();
  HomeConfig::default_instance_ = new HomeConfig();
  FunctionalConfig::default_instance_ = new FunctionalConfig();
  FunctionalConfig1::default_instance_ = new FunctionalConfig1();
  LuckDraw::default_instance_ = new LuckDraw();
  RechargeCase::default_instance_ = new RechargeCase();
  BoxDate::default_instance_ = new BoxDate();
  BoxDateInfo::default_instance_ = new BoxDateInfo();
  BoxConfig::default_instance_ = new BoxConfig();
  RechargeConfig::default_instance_ = new RechargeConfig();
  NewGift::default_instance_ = new NewGift();
  Lantern::default_instance_ = new Lantern();
  MonthlyCard::default_instance_ = new MonthlyCard();
  NovicePack::default_instance_ = new NovicePack();
  CMD_GP_NewDayRefresh::default_instance_ = new CMD_GP_NewDayRefresh();
  CMD_GP_LogonSuccess::default_instance_ = new CMD_GP_LogonSuccess();
  CMD_GP_LogonSuccess_CMD_GP_UserInfo::default_instance_ = new CMD_GP_LogonSuccess_CMD_GP_UserInfo();
  CMD_GP_LogonFinish::default_instance_ = new CMD_GP_LogonFinish();
  CMD_GP_GameServer::default_instance_ = new CMD_GP_GameServer();
  CMD_GP_GameServer_GameServer::default_instance_ = new CMD_GP_GameServer_GameServer();
  CMD_GP_GameKind::default_instance_ = new CMD_GP_GameKind();
  CMD_GP_GameKind_GameKind::default_instance_ = new CMD_GP_GameKind_GameKind();
  CMD_GP_GiftDetail::default_instance_ = new CMD_GP_GiftDetail();
  CMD_GP_GiftDetail_GiftDetail::default_instance_ = new CMD_GP_GiftDetail_GiftDetail();
  CMD_GP_LanternGiftDetail::default_instance_ = new CMD_GP_LanternGiftDetail();
  CMD_GP_LanternGiftDetail_LanternGiftDetail::default_instance_ = new CMD_GP_LanternGiftDetail_LanternGiftDetail();
  CMD_GP_ChangeAccount::default_instance_ = new CMD_GP_ChangeAccount();
  CMD_GP_TreasureChange::default_instance_ = new CMD_GP_TreasureChange();
  SUB_GP_RANK::default_instance_ = new SUB_GP_RANK();
  SUB_GP_RANK_GoldRank::default_instance_ = new SUB_GP_RANK_GoldRank();
  SUB_GP_FISHRANK::default_instance_ = new SUB_GP_FISHRANK();
  SUB_GP_FISHRANK_FishRank::default_instance_ = new SUB_GP_FISHRANK_FishRank();
  SUB_GP_NEWPLAYGIFTFLAG::default_instance_ = new SUB_GP_NEWPLAYGIFTFLAG();
  SUB_GP_AllModelsSwitch::default_instance_ = new SUB_GP_AllModelsSwitch();
  SUB_GP_AllModelsSwitch_AllModelsSwitch::default_instance_ = new SUB_GP_AllModelsSwitch_AllModelsSwitch();
  CMD_GP_SignIn::default_instance_ = new CMD_GP_SignIn();
  CMD_GP_GetHeadUrl::default_instance_ = new CMD_GP_GetHeadUrl();
  CMD_GP_GetNoviceCard::default_instance_ = new CMD_GP_GetNoviceCard();
  CMD_GP_GetActivityCard::default_instance_ = new CMD_GP_GetActivityCard();
  CMD_GP_GetReliefMoney::default_instance_ = new CMD_GP_GetReliefMoney();
  CMD_GP_GetPayPhone::default_instance_ = new CMD_GP_GetPayPhone();
  CMD_GP_GetAwardGold::default_instance_ = new CMD_GP_GetAwardGold();
  SUB_GP_GetRechargeRecord::default_instance_ = new SUB_GP_GetRechargeRecord();
  SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::default_instance_ = new SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult();
  CMD_GP_GetMonthlyCardScore::default_instance_ = new CMD_GP_GetMonthlyCardScore();
  CMD_GP_SendPhoneSms::default_instance_ = new CMD_GP_SendPhoneSms();
  CMD_GP_PhoneBanding::default_instance_ = new CMD_GP_PhoneBanding();
  CMD_GP_ResetSafePwd::default_instance_ = new CMD_GP_ResetSafePwd();
  CMD_GP_RealNameAuthentication::default_instance_ = new CMD_GP_RealNameAuthentication();
  CMD_GP_GetNickName::default_instance_ = new CMD_GP_GetNickName();
  CMD_GP_LuckDraw::default_instance_ = new CMD_GP_LuckDraw();
  CMD_GP_ReceiveNovicePack::default_instance_ = new CMD_GP_ReceiveNovicePack();
  CMD_GP_GetRechargeCaseBag::default_instance_ = new CMD_GP_GetRechargeCaseBag();
  CMD_GP_BoxConversion::default_instance_ = new CMD_GP_BoxConversion();
  CMD_GR_S_PropertySuccess::default_instance_->InitAsDefaultInstance();
  ResultFailure::default_instance_->InitAsDefaultInstance();
  CMD_GP_UserInsureSuccess::default_instance_->InitAsDefaultInstance();
  CMD_GP_UserInsureInfo::default_instance_->InitAsDefaultInstance();
  CMD_GP_OperateSuccess::default_instance_->InitAsDefaultInstance();
  CMD_GP_MeiliDuihuanSuccess::default_instance_->InitAsDefaultInstance();
  GiftBag::default_instance_->InitAsDefaultInstance();
  ActivityConfig::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  MemberInfo::default_instance_->InitAsDefaultInstance();
  RechargeCaseBag::default_instance_->InitAsDefaultInstance();
  Secure::default_instance_->InitAsDefaultInstance();
  Novice::default_instance_->InitAsDefaultInstance();
  Hall::default_instance_->InitAsDefaultInstance();
  Relief::default_instance_->InitAsDefaultInstance();
  NewGiftBag::default_instance_->InitAsDefaultInstance();
  LanternBag::default_instance_->InitAsDefaultInstance();
  HomeConfig::default_instance_->InitAsDefaultInstance();
  FunctionalConfig::default_instance_->InitAsDefaultInstance();
  FunctionalConfig1::default_instance_->InitAsDefaultInstance();
  LuckDraw::default_instance_->InitAsDefaultInstance();
  RechargeCase::default_instance_->InitAsDefaultInstance();
  BoxDate::default_instance_->InitAsDefaultInstance();
  BoxDateInfo::default_instance_->InitAsDefaultInstance();
  BoxConfig::default_instance_->InitAsDefaultInstance();
  RechargeConfig::default_instance_->InitAsDefaultInstance();
  NewGift::default_instance_->InitAsDefaultInstance();
  Lantern::default_instance_->InitAsDefaultInstance();
  MonthlyCard::default_instance_->InitAsDefaultInstance();
  NovicePack::default_instance_->InitAsDefaultInstance();
  CMD_GP_NewDayRefresh::default_instance_->InitAsDefaultInstance();
  CMD_GP_LogonSuccess::default_instance_->InitAsDefaultInstance();
  CMD_GP_LogonSuccess_CMD_GP_UserInfo::default_instance_->InitAsDefaultInstance();
  CMD_GP_LogonFinish::default_instance_->InitAsDefaultInstance();
  CMD_GP_GameServer::default_instance_->InitAsDefaultInstance();
  CMD_GP_GameServer_GameServer::default_instance_->InitAsDefaultInstance();
  CMD_GP_GameKind::default_instance_->InitAsDefaultInstance();
  CMD_GP_GameKind_GameKind::default_instance_->InitAsDefaultInstance();
  CMD_GP_GiftDetail::default_instance_->InitAsDefaultInstance();
  CMD_GP_GiftDetail_GiftDetail::default_instance_->InitAsDefaultInstance();
  CMD_GP_LanternGiftDetail::default_instance_->InitAsDefaultInstance();
  CMD_GP_LanternGiftDetail_LanternGiftDetail::default_instance_->InitAsDefaultInstance();
  CMD_GP_ChangeAccount::default_instance_->InitAsDefaultInstance();
  CMD_GP_TreasureChange::default_instance_->InitAsDefaultInstance();
  SUB_GP_RANK::default_instance_->InitAsDefaultInstance();
  SUB_GP_RANK_GoldRank::default_instance_->InitAsDefaultInstance();
  SUB_GP_FISHRANK::default_instance_->InitAsDefaultInstance();
  SUB_GP_FISHRANK_FishRank::default_instance_->InitAsDefaultInstance();
  SUB_GP_NEWPLAYGIFTFLAG::default_instance_->InitAsDefaultInstance();
  SUB_GP_AllModelsSwitch::default_instance_->InitAsDefaultInstance();
  SUB_GP_AllModelsSwitch_AllModelsSwitch::default_instance_->InitAsDefaultInstance();
  CMD_GP_SignIn::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetHeadUrl::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetNoviceCard::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetActivityCard::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetReliefMoney::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetPayPhone::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetAwardGold::default_instance_->InitAsDefaultInstance();
  SUB_GP_GetRechargeRecord::default_instance_->InitAsDefaultInstance();
  SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetMonthlyCardScore::default_instance_->InitAsDefaultInstance();
  CMD_GP_SendPhoneSms::default_instance_->InitAsDefaultInstance();
  CMD_GP_PhoneBanding::default_instance_->InitAsDefaultInstance();
  CMD_GP_ResetSafePwd::default_instance_->InitAsDefaultInstance();
  CMD_GP_RealNameAuthentication::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetNickName::default_instance_->InitAsDefaultInstance();
  CMD_GP_LuckDraw::default_instance_->InitAsDefaultInstance();
  CMD_GP_ReceiveNovicePack::default_instance_->InitAsDefaultInstance();
  CMD_GP_GetRechargeCaseBag::default_instance_->InitAsDefaultInstance();
  CMD_GP_BoxConversion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WebSocket_2fwebsocket_5fs2c_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WebSocket_2fwebsocket_5fs2c_2eproto {
  StaticDescriptorInitializer_WebSocket_2fwebsocket_5fs2c_2eproto() {
    protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  }
} static_descriptor_initializer_WebSocket_2fwebsocket_5fs2c_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_S_PropertySuccess::kCbRequestAreaFieldNumber;
const int CMD_GR_S_PropertySuccess::kWItemCountFieldNumber;
const int CMD_GR_S_PropertySuccess::kWPropertyIndexFieldNumber;
const int CMD_GR_S_PropertySuccess::kDwSourceUserIDFieldNumber;
const int CMD_GR_S_PropertySuccess::kDwTargetUserIDFieldNumber;
const int CMD_GR_S_PropertySuccess::kDwLoveLessFieldNumber;
const int CMD_GR_S_PropertySuccess::kSzTargetNickNameFieldNumber;
#endif  // !_MSC_VER

CMD_GR_S_PropertySuccess::CMD_GR_S_PropertySuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GR_S_PropertySuccess::InitAsDefaultInstance() {
}

CMD_GR_S_PropertySuccess::CMD_GR_S_PropertySuccess(const CMD_GR_S_PropertySuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_S_PropertySuccess::SharedCtor() {
  _cached_size_ = 0;
  cbrequestarea_ = 0;
  witemcount_ = 0;
  wpropertyindex_ = 0;
  dwsourceuserid_ = 0;
  dwtargetuserid_ = 0;
  dwloveless_ = 0;
  sztargetnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_S_PropertySuccess::~CMD_GR_S_PropertySuccess() {
  SharedDtor();
}

void CMD_GR_S_PropertySuccess::SharedDtor() {
  if (sztargetnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sztargetnickname_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GR_S_PropertySuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GR_S_PropertySuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GR_S_PropertySuccess_descriptor_;
}

const CMD_GR_S_PropertySuccess& CMD_GR_S_PropertySuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GR_S_PropertySuccess* CMD_GR_S_PropertySuccess::default_instance_ = NULL;

CMD_GR_S_PropertySuccess* CMD_GR_S_PropertySuccess::New() const {
  return new CMD_GR_S_PropertySuccess;
}

void CMD_GR_S_PropertySuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cbrequestarea_ = 0;
    witemcount_ = 0;
    wpropertyindex_ = 0;
    dwsourceuserid_ = 0;
    dwtargetuserid_ = 0;
    dwloveless_ = 0;
    if (has_sztargetnickname()) {
      if (sztargetnickname_ != &::google::protobuf::internal::kEmptyString) {
        sztargetnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GR_S_PropertySuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cbRequestArea = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbrequestarea_)));
          set_has_cbrequestarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wItemCount;
        break;
      }

      // optional int32 wItemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &witemcount_)));
          set_has_witemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wPropertyIndex;
        break;
      }

      // optional int32 wPropertyIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wPropertyIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpropertyindex_)));
          set_has_wpropertyindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dwSourceUserID;
        break;
      }

      // required int32 dwSourceUserID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwSourceUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwsourceuserid_)));
          set_has_dwsourceuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dwTargetUserID;
        break;
      }

      // required int32 dwTargetUserID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTargetUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtargetuserid_)));
          set_has_dwtargetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dwLoveLess;
        break;
      }

      // optional int32 dwLoveLess = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwLoveLess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwloveless_)));
          set_has_dwloveless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_szTargetNickName;
        break;
      }

      // optional string szTargetNickName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szTargetNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sztargetnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sztargetnickname().data(), this->sztargetnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_S_PropertySuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cbRequestArea = 1;
  if (has_cbrequestarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cbrequestarea(), output);
  }

  // optional int32 wItemCount = 2;
  if (has_witemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->witemcount(), output);
  }

  // optional int32 wPropertyIndex = 3;
  if (has_wpropertyindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wpropertyindex(), output);
  }

  // required int32 dwSourceUserID = 4;
  if (has_dwsourceuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dwsourceuserid(), output);
  }

  // required int32 dwTargetUserID = 5;
  if (has_dwtargetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dwtargetuserid(), output);
  }

  // optional int32 dwLoveLess = 6;
  if (has_dwloveless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dwloveless(), output);
  }

  // optional string szTargetNickName = 7;
  if (has_sztargetnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztargetnickname().data(), this->sztargetnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sztargetnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GR_S_PropertySuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cbRequestArea = 1;
  if (has_cbrequestarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cbrequestarea(), target);
  }

  // optional int32 wItemCount = 2;
  if (has_witemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->witemcount(), target);
  }

  // optional int32 wPropertyIndex = 3;
  if (has_wpropertyindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wpropertyindex(), target);
  }

  // required int32 dwSourceUserID = 4;
  if (has_dwsourceuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dwsourceuserid(), target);
  }

  // required int32 dwTargetUserID = 5;
  if (has_dwtargetuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dwtargetuserid(), target);
  }

  // optional int32 dwLoveLess = 6;
  if (has_dwloveless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dwloveless(), target);
  }

  // optional string szTargetNickName = 7;
  if (has_sztargetnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztargetnickname().data(), this->sztargetnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sztargetnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GR_S_PropertySuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cbRequestArea = 1;
    if (has_cbrequestarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbrequestarea());
    }

    // optional int32 wItemCount = 2;
    if (has_witemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->witemcount());
    }

    // optional int32 wPropertyIndex = 3;
    if (has_wpropertyindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpropertyindex());
    }

    // required int32 dwSourceUserID = 4;
    if (has_dwsourceuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwsourceuserid());
    }

    // required int32 dwTargetUserID = 5;
    if (has_dwtargetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwtargetuserid());
    }

    // optional int32 dwLoveLess = 6;
    if (has_dwloveless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwloveless());
    }

    // optional string szTargetNickName = 7;
    if (has_sztargetnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sztargetnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_S_PropertySuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GR_S_PropertySuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GR_S_PropertySuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GR_S_PropertySuccess::MergeFrom(const CMD_GR_S_PropertySuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cbrequestarea()) {
      set_cbrequestarea(from.cbrequestarea());
    }
    if (from.has_witemcount()) {
      set_witemcount(from.witemcount());
    }
    if (from.has_wpropertyindex()) {
      set_wpropertyindex(from.wpropertyindex());
    }
    if (from.has_dwsourceuserid()) {
      set_dwsourceuserid(from.dwsourceuserid());
    }
    if (from.has_dwtargetuserid()) {
      set_dwtargetuserid(from.dwtargetuserid());
    }
    if (from.has_dwloveless()) {
      set_dwloveless(from.dwloveless());
    }
    if (from.has_sztargetnickname()) {
      set_sztargetnickname(from.sztargetnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GR_S_PropertySuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GR_S_PropertySuccess::CopyFrom(const CMD_GR_S_PropertySuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_S_PropertySuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;

  return true;
}

void CMD_GR_S_PropertySuccess::Swap(CMD_GR_S_PropertySuccess* other) {
  if (other != this) {
    std::swap(cbrequestarea_, other->cbrequestarea_);
    std::swap(witemcount_, other->witemcount_);
    std::swap(wpropertyindex_, other->wpropertyindex_);
    std::swap(dwsourceuserid_, other->dwsourceuserid_);
    std::swap(dwtargetuserid_, other->dwtargetuserid_);
    std::swap(dwloveless_, other->dwloveless_);
    std::swap(sztargetnickname_, other->sztargetnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GR_S_PropertySuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GR_S_PropertySuccess_descriptor_;
  metadata.reflection = CMD_GR_S_PropertySuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultFailure::kWRequestAreaFieldNumber;
const int ResultFailure::kLErrorCodeFieldNumber;
const int ResultFailure::kSzDescribeStringFieldNumber;
#endif  // !_MSC_VER

ResultFailure::ResultFailure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultFailure::InitAsDefaultInstance() {
}

ResultFailure::ResultFailure(const ResultFailure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultFailure::SharedCtor() {
  _cached_size_ = 0;
  wrequestarea_ = 0;
  lerrorcode_ = 0;
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultFailure::~ResultFailure() {
  SharedDtor();
}

void ResultFailure::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    delete szdescribestring_;
  }
  if (this != default_instance_) {
  }
}

void ResultFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultFailure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultFailure_descriptor_;
}

const ResultFailure& ResultFailure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

ResultFailure* ResultFailure::default_instance_ = NULL;

ResultFailure* ResultFailure::New() const {
  return new ResultFailure;
}

void ResultFailure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wrequestarea_ = 0;
    lerrorcode_ = 0;
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
        szdescribestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wRequestArea = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrequestarea_)));
          set_has_wrequestarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lErrorCode;
        break;
      }

      // required int32 lErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lerrorcode_)));
          set_has_lerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szdescribestring().data(), this->szdescribestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wRequestArea = 1;
  if (has_wrequestarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wrequestarea(), output);
  }

  // required int32 lErrorCode = 2;
  if (has_lerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lerrorcode(), output);
  }

  // required string szDescribeString = 3;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdescribestring().data(), this->szdescribestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->szdescribestring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultFailure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wRequestArea = 1;
  if (has_wrequestarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wrequestarea(), target);
  }

  // required int32 lErrorCode = 2;
  if (has_lerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lerrorcode(), target);
  }

  // required string szDescribeString = 3;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdescribestring().data(), this->szdescribestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szdescribestring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultFailure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wRequestArea = 1;
    if (has_wrequestarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrequestarea());
    }

    // required int32 lErrorCode = 2;
    if (has_lerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lerrorcode());
    }

    // required string szDescribeString = 3;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultFailure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultFailure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultFailure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultFailure::MergeFrom(const ResultFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wrequestarea()) {
      set_wrequestarea(from.wrequestarea());
    }
    if (from.has_lerrorcode()) {
      set_lerrorcode(from.lerrorcode());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultFailure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultFailure::CopyFrom(const ResultFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultFailure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void ResultFailure::Swap(ResultFailure* other) {
  if (other != this) {
    std::swap(wrequestarea_, other->wrequestarea_);
    std::swap(lerrorcode_, other->lerrorcode_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultFailure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultFailure_descriptor_;
  metadata.reflection = ResultFailure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_UserInsureSuccess::kDwUserIDFieldNumber;
const int CMD_GP_UserInsureSuccess::kLUserScoreFieldNumber;
const int CMD_GP_UserInsureSuccess::kLUserInsureFieldNumber;
const int CMD_GP_UserInsureSuccess::kSzDescribeStringFieldNumber;
#endif  // !_MSC_VER

CMD_GP_UserInsureSuccess::CMD_GP_UserInsureSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_UserInsureSuccess::InitAsDefaultInstance() {
}

CMD_GP_UserInsureSuccess::CMD_GP_UserInsureSuccess(const CMD_GP_UserInsureSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_UserInsureSuccess::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = 0;
  luserscore_ = GOOGLE_LONGLONG(0);
  luserinsure_ = GOOGLE_LONGLONG(0);
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_UserInsureSuccess::~CMD_GP_UserInsureSuccess() {
  SharedDtor();
}

void CMD_GP_UserInsureSuccess::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    delete szdescribestring_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_UserInsureSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_UserInsureSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_UserInsureSuccess_descriptor_;
}

const CMD_GP_UserInsureSuccess& CMD_GP_UserInsureSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_UserInsureSuccess* CMD_GP_UserInsureSuccess::default_instance_ = NULL;

CMD_GP_UserInsureSuccess* CMD_GP_UserInsureSuccess::New() const {
  return new CMD_GP_UserInsureSuccess;
}

void CMD_GP_UserInsureSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwuserid_ = 0;
    luserscore_ = GOOGLE_LONGLONG(0);
    luserinsure_ = GOOGLE_LONGLONG(0);
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
        szdescribestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_UserInsureSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lUserScore;
        break;
      }

      // required int64 lUserScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserscore_)));
          set_has_luserscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lUserInsure;
        break;
      }

      // required int64 lUserInsure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserInsure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserinsure_)));
          set_has_luserinsure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szdescribestring().data(), this->szdescribestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_UserInsureSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwuserid(), output);
  }

  // required int64 lUserScore = 2;
  if (has_luserscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->luserscore(), output);
  }

  // required int64 lUserInsure = 3;
  if (has_luserinsure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->luserinsure(), output);
  }

  // required string szDescribeString = 4;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdescribestring().data(), this->szdescribestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->szdescribestring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_UserInsureSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwuserid(), target);
  }

  // required int64 lUserScore = 2;
  if (has_luserscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->luserscore(), target);
  }

  // required int64 lUserInsure = 3;
  if (has_luserinsure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->luserinsure(), target);
  }

  // required string szDescribeString = 4;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdescribestring().data(), this->szdescribestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->szdescribestring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_UserInsureSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwuserid());
    }

    // required int64 lUserScore = 2;
    if (has_luserscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserscore());
    }

    // required int64 lUserInsure = 3;
    if (has_luserinsure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserinsure());
    }

    // required string szDescribeString = 4;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_UserInsureSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_UserInsureSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_UserInsureSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_UserInsureSuccess::MergeFrom(const CMD_GP_UserInsureSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_luserscore()) {
      set_luserscore(from.luserscore());
    }
    if (from.has_luserinsure()) {
      set_luserinsure(from.luserinsure());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_UserInsureSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_UserInsureSuccess::CopyFrom(const CMD_GP_UserInsureSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_UserInsureSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_GP_UserInsureSuccess::Swap(CMD_GP_UserInsureSuccess* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(luserscore_, other->luserscore_);
    std::swap(luserinsure_, other->luserinsure_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_UserInsureSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_UserInsureSuccess_descriptor_;
  metadata.reflection = CMD_GP_UserInsureSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_UserInsureInfo::kWRevenueTakeFieldNumber;
const int CMD_GP_UserInsureInfo::kWRevenueTransferFieldNumber;
const int CMD_GP_UserInsureInfo::kWServerIDFieldNumber;
const int CMD_GP_UserInsureInfo::kWMemberOrderFieldNumber;
const int CMD_GP_UserInsureInfo::kLUserScoreFieldNumber;
const int CMD_GP_UserInsureInfo::kLUserInsureFieldNumber;
const int CMD_GP_UserInsureInfo::kLTransferPrerequisiteFieldNumber;
const int CMD_GP_UserInsureInfo::kLLoveNessFieldNumber;
const int CMD_GP_UserInsureInfo::kMeiliDuihuanRatioFieldNumber;
const int CMD_GP_UserInsureInfo::kMeiliDuihuanMaxFieldNumber;
const int CMD_GP_UserInsureInfo::kMeiliDuihuanDailyCountFieldNumber;
const int CMD_GP_UserInsureInfo::kDailyDuihuanCountFieldNumber;
#endif  // !_MSC_VER

CMD_GP_UserInsureInfo::CMD_GP_UserInsureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_UserInsureInfo::InitAsDefaultInstance() {
}

CMD_GP_UserInsureInfo::CMD_GP_UserInsureInfo(const CMD_GP_UserInsureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_UserInsureInfo::SharedCtor() {
  _cached_size_ = 0;
  wrevenuetake_ = 0;
  wrevenuetransfer_ = 0;
  wserverid_ = 0;
  wmemberorder_ = 0;
  luserscore_ = GOOGLE_LONGLONG(0);
  luserinsure_ = GOOGLE_LONGLONG(0);
  ltransferprerequisite_ = GOOGLE_LONGLONG(0);
  lloveness_ = GOOGLE_LONGLONG(0);
  meiliduihuanratio_ = GOOGLE_LONGLONG(0);
  meiliduihuanmax_ = GOOGLE_LONGLONG(0);
  meiliduihuandailycount_ = GOOGLE_LONGLONG(0);
  dailyduihuancount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_UserInsureInfo::~CMD_GP_UserInsureInfo() {
  SharedDtor();
}

void CMD_GP_UserInsureInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_UserInsureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_UserInsureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_UserInsureInfo_descriptor_;
}

const CMD_GP_UserInsureInfo& CMD_GP_UserInsureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_UserInsureInfo* CMD_GP_UserInsureInfo::default_instance_ = NULL;

CMD_GP_UserInsureInfo* CMD_GP_UserInsureInfo::New() const {
  return new CMD_GP_UserInsureInfo;
}

void CMD_GP_UserInsureInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wrevenuetake_ = 0;
    wrevenuetransfer_ = 0;
    wserverid_ = 0;
    wmemberorder_ = 0;
    luserscore_ = GOOGLE_LONGLONG(0);
    luserinsure_ = GOOGLE_LONGLONG(0);
    ltransferprerequisite_ = GOOGLE_LONGLONG(0);
    lloveness_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    meiliduihuanratio_ = GOOGLE_LONGLONG(0);
    meiliduihuanmax_ = GOOGLE_LONGLONG(0);
    meiliduihuandailycount_ = GOOGLE_LONGLONG(0);
    dailyduihuancount_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_UserInsureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wRevenueTake = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrevenuetake_)));
          set_has_wrevenuetake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wRevenueTransfer;
        break;
      }

      // required int32 wRevenueTransfer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wRevenueTransfer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrevenuetransfer_)));
          set_has_wrevenuetransfer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wServerID;
        break;
      }

      // required int32 wServerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverid_)));
          set_has_wserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wMemberOrder;
        break;
      }

      // required int32 wMemberOrder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wMemberOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmemberorder_)));
          set_has_wmemberorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lUserScore;
        break;
      }

      // required int64 lUserScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserscore_)));
          set_has_luserscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lUserInsure;
        break;
      }

      // required int64 lUserInsure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserInsure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserinsure_)));
          set_has_luserinsure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lTransferPrerequisite;
        break;
      }

      // required int64 lTransferPrerequisite = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTransferPrerequisite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ltransferprerequisite_)));
          set_has_ltransferprerequisite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lLoveNess;
        break;
      }

      // required int64 lLoveNess = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lLoveNess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lloveness_)));
          set_has_lloveness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_MeiliDuihuanRatio;
        break;
      }

      // required int64 MeiliDuihuanRatio = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MeiliDuihuanRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meiliduihuanratio_)));
          set_has_meiliduihuanratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_MeiliDuihuanMax;
        break;
      }

      // required int64 MeiliDuihuanMax = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MeiliDuihuanMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meiliduihuanmax_)));
          set_has_meiliduihuanmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MeiliDuihuanDailyCount;
        break;
      }

      // required int64 MeiliDuihuanDailyCount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MeiliDuihuanDailyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meiliduihuandailycount_)));
          set_has_meiliduihuandailycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_DailyDuihuanCount;
        break;
      }

      // required int64 DailyDuihuanCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DailyDuihuanCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dailyduihuancount_)));
          set_has_dailyduihuancount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_UserInsureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 wRevenueTake = 1;
  if (has_wrevenuetake()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wrevenuetake(), output);
  }

  // required int32 wRevenueTransfer = 2;
  if (has_wrevenuetransfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wrevenuetransfer(), output);
  }

  // required int32 wServerID = 3;
  if (has_wserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wserverid(), output);
  }

  // required int32 wMemberOrder = 4;
  if (has_wmemberorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wmemberorder(), output);
  }

  // required int64 lUserScore = 5;
  if (has_luserscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->luserscore(), output);
  }

  // required int64 lUserInsure = 6;
  if (has_luserinsure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->luserinsure(), output);
  }

  // required int64 lTransferPrerequisite = 7;
  if (has_ltransferprerequisite()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ltransferprerequisite(), output);
  }

  // required int64 lLoveNess = 8;
  if (has_lloveness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lloveness(), output);
  }

  // required int64 MeiliDuihuanRatio = 9;
  if (has_meiliduihuanratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->meiliduihuanratio(), output);
  }

  // required int64 MeiliDuihuanMax = 10;
  if (has_meiliduihuanmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->meiliduihuanmax(), output);
  }

  // required int64 MeiliDuihuanDailyCount = 11;
  if (has_meiliduihuandailycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->meiliduihuandailycount(), output);
  }

  // required int64 DailyDuihuanCount = 12;
  if (has_dailyduihuancount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->dailyduihuancount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_UserInsureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 wRevenueTake = 1;
  if (has_wrevenuetake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wrevenuetake(), target);
  }

  // required int32 wRevenueTransfer = 2;
  if (has_wrevenuetransfer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wrevenuetransfer(), target);
  }

  // required int32 wServerID = 3;
  if (has_wserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wserverid(), target);
  }

  // required int32 wMemberOrder = 4;
  if (has_wmemberorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wmemberorder(), target);
  }

  // required int64 lUserScore = 5;
  if (has_luserscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->luserscore(), target);
  }

  // required int64 lUserInsure = 6;
  if (has_luserinsure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->luserinsure(), target);
  }

  // required int64 lTransferPrerequisite = 7;
  if (has_ltransferprerequisite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ltransferprerequisite(), target);
  }

  // required int64 lLoveNess = 8;
  if (has_lloveness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lloveness(), target);
  }

  // required int64 MeiliDuihuanRatio = 9;
  if (has_meiliduihuanratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->meiliduihuanratio(), target);
  }

  // required int64 MeiliDuihuanMax = 10;
  if (has_meiliduihuanmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->meiliduihuanmax(), target);
  }

  // required int64 MeiliDuihuanDailyCount = 11;
  if (has_meiliduihuandailycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->meiliduihuandailycount(), target);
  }

  // required int64 DailyDuihuanCount = 12;
  if (has_dailyduihuancount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->dailyduihuancount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_UserInsureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wRevenueTake = 1;
    if (has_wrevenuetake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrevenuetake());
    }

    // required int32 wRevenueTransfer = 2;
    if (has_wrevenuetransfer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrevenuetransfer());
    }

    // required int32 wServerID = 3;
    if (has_wserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wserverid());
    }

    // required int32 wMemberOrder = 4;
    if (has_wmemberorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmemberorder());
    }

    // required int64 lUserScore = 5;
    if (has_luserscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserscore());
    }

    // required int64 lUserInsure = 6;
    if (has_luserinsure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserinsure());
    }

    // required int64 lTransferPrerequisite = 7;
    if (has_ltransferprerequisite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltransferprerequisite());
    }

    // required int64 lLoveNess = 8;
    if (has_lloveness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lloveness());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 MeiliDuihuanRatio = 9;
    if (has_meiliduihuanratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meiliduihuanratio());
    }

    // required int64 MeiliDuihuanMax = 10;
    if (has_meiliduihuanmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meiliduihuanmax());
    }

    // required int64 MeiliDuihuanDailyCount = 11;
    if (has_meiliduihuandailycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meiliduihuandailycount());
    }

    // required int64 DailyDuihuanCount = 12;
    if (has_dailyduihuancount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dailyduihuancount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_UserInsureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_UserInsureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_UserInsureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_UserInsureInfo::MergeFrom(const CMD_GP_UserInsureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wrevenuetake()) {
      set_wrevenuetake(from.wrevenuetake());
    }
    if (from.has_wrevenuetransfer()) {
      set_wrevenuetransfer(from.wrevenuetransfer());
    }
    if (from.has_wserverid()) {
      set_wserverid(from.wserverid());
    }
    if (from.has_wmemberorder()) {
      set_wmemberorder(from.wmemberorder());
    }
    if (from.has_luserscore()) {
      set_luserscore(from.luserscore());
    }
    if (from.has_luserinsure()) {
      set_luserinsure(from.luserinsure());
    }
    if (from.has_ltransferprerequisite()) {
      set_ltransferprerequisite(from.ltransferprerequisite());
    }
    if (from.has_lloveness()) {
      set_lloveness(from.lloveness());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_meiliduihuanratio()) {
      set_meiliduihuanratio(from.meiliduihuanratio());
    }
    if (from.has_meiliduihuanmax()) {
      set_meiliduihuanmax(from.meiliduihuanmax());
    }
    if (from.has_meiliduihuandailycount()) {
      set_meiliduihuandailycount(from.meiliduihuandailycount());
    }
    if (from.has_dailyduihuancount()) {
      set_dailyduihuancount(from.dailyduihuancount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_UserInsureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_UserInsureInfo::CopyFrom(const CMD_GP_UserInsureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_UserInsureInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void CMD_GP_UserInsureInfo::Swap(CMD_GP_UserInsureInfo* other) {
  if (other != this) {
    std::swap(wrevenuetake_, other->wrevenuetake_);
    std::swap(wrevenuetransfer_, other->wrevenuetransfer_);
    std::swap(wserverid_, other->wserverid_);
    std::swap(wmemberorder_, other->wmemberorder_);
    std::swap(luserscore_, other->luserscore_);
    std::swap(luserinsure_, other->luserinsure_);
    std::swap(ltransferprerequisite_, other->ltransferprerequisite_);
    std::swap(lloveness_, other->lloveness_);
    std::swap(meiliduihuanratio_, other->meiliduihuanratio_);
    std::swap(meiliduihuanmax_, other->meiliduihuanmax_);
    std::swap(meiliduihuandailycount_, other->meiliduihuandailycount_);
    std::swap(dailyduihuancount_, other->dailyduihuancount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_UserInsureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_UserInsureInfo_descriptor_;
  metadata.reflection = CMD_GP_UserInsureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_OperateSuccess::kLResultCodeFieldNumber;
const int CMD_GP_OperateSuccess::kSzDescribeStringFieldNumber;
#endif  // !_MSC_VER

CMD_GP_OperateSuccess::CMD_GP_OperateSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_OperateSuccess::InitAsDefaultInstance() {
}

CMD_GP_OperateSuccess::CMD_GP_OperateSuccess(const CMD_GP_OperateSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_OperateSuccess::SharedCtor() {
  _cached_size_ = 0;
  lresultcode_ = 0;
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_OperateSuccess::~CMD_GP_OperateSuccess() {
  SharedDtor();
}

void CMD_GP_OperateSuccess::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    delete szdescribestring_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_OperateSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_OperateSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_OperateSuccess_descriptor_;
}

const CMD_GP_OperateSuccess& CMD_GP_OperateSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_OperateSuccess* CMD_GP_OperateSuccess::default_instance_ = NULL;

CMD_GP_OperateSuccess* CMD_GP_OperateSuccess::New() const {
  return new CMD_GP_OperateSuccess;
}

void CMD_GP_OperateSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lresultcode_ = 0;
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
        szdescribestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_OperateSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lResultCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lresultcode_)));
          set_has_lresultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szdescribestring().data(), this->szdescribestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_OperateSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lResultCode = 1;
  if (has_lresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lresultcode(), output);
  }

  // required string szDescribeString = 2;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdescribestring().data(), this->szdescribestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->szdescribestring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_OperateSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lResultCode = 1;
  if (has_lresultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lresultcode(), target);
  }

  // required string szDescribeString = 2;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdescribestring().data(), this->szdescribestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szdescribestring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_OperateSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lResultCode = 1;
    if (has_lresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lresultcode());
    }

    // required string szDescribeString = 2;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_OperateSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_OperateSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_OperateSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_OperateSuccess::MergeFrom(const CMD_GP_OperateSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lresultcode()) {
      set_lresultcode(from.lresultcode());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_OperateSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_OperateSuccess::CopyFrom(const CMD_GP_OperateSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_OperateSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_OperateSuccess::Swap(CMD_GP_OperateSuccess* other) {
  if (other != this) {
    std::swap(lresultcode_, other->lresultcode_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_OperateSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_OperateSuccess_descriptor_;
  metadata.reflection = CMD_GP_OperateSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_MeiliDuihuanSuccess::kDwUserIDFieldNumber;
const int CMD_GP_MeiliDuihuanSuccess::kLUserScoreFieldNumber;
const int CMD_GP_MeiliDuihuanSuccess::kLUserLovenessFieldNumber;
const int CMD_GP_MeiliDuihuanSuccess::kSzDescribeStringFieldNumber;
#endif  // !_MSC_VER

CMD_GP_MeiliDuihuanSuccess::CMD_GP_MeiliDuihuanSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_MeiliDuihuanSuccess::InitAsDefaultInstance() {
}

CMD_GP_MeiliDuihuanSuccess::CMD_GP_MeiliDuihuanSuccess(const CMD_GP_MeiliDuihuanSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_MeiliDuihuanSuccess::SharedCtor() {
  _cached_size_ = 0;
  dwuserid_ = 0;
  luserscore_ = GOOGLE_LONGLONG(0);
  luserloveness_ = GOOGLE_LONGLONG(0);
  szdescribestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_MeiliDuihuanSuccess::~CMD_GP_MeiliDuihuanSuccess() {
  SharedDtor();
}

void CMD_GP_MeiliDuihuanSuccess::SharedDtor() {
  if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
    delete szdescribestring_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_MeiliDuihuanSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_MeiliDuihuanSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_MeiliDuihuanSuccess_descriptor_;
}

const CMD_GP_MeiliDuihuanSuccess& CMD_GP_MeiliDuihuanSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_MeiliDuihuanSuccess* CMD_GP_MeiliDuihuanSuccess::default_instance_ = NULL;

CMD_GP_MeiliDuihuanSuccess* CMD_GP_MeiliDuihuanSuccess::New() const {
  return new CMD_GP_MeiliDuihuanSuccess;
}

void CMD_GP_MeiliDuihuanSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwuserid_ = 0;
    luserscore_ = GOOGLE_LONGLONG(0);
    luserloveness_ = GOOGLE_LONGLONG(0);
    if (has_szdescribestring()) {
      if (szdescribestring_ != &::google::protobuf::internal::kEmptyString) {
        szdescribestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_MeiliDuihuanSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwUserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lUserScore;
        break;
      }

      // required int64 lUserScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserscore_)));
          set_has_luserscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lUserLoveness;
        break;
      }

      // required int64 lUserLoveness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserLoveness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserloveness_)));
          set_has_luserloveness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szDescribeString;
        break;
      }

      // required string szDescribeString = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szDescribeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdescribestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szdescribestring().data(), this->szdescribestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_MeiliDuihuanSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwuserid(), output);
  }

  // required int64 lUserScore = 2;
  if (has_luserscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->luserscore(), output);
  }

  // required int64 lUserLoveness = 3;
  if (has_luserloveness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->luserloveness(), output);
  }

  // required string szDescribeString = 4;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdescribestring().data(), this->szdescribestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->szdescribestring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_MeiliDuihuanSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwUserID = 1;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwuserid(), target);
  }

  // required int64 lUserScore = 2;
  if (has_luserscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->luserscore(), target);
  }

  // required int64 lUserLoveness = 3;
  if (has_luserloveness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->luserloveness(), target);
  }

  // required string szDescribeString = 4;
  if (has_szdescribestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szdescribestring().data(), this->szdescribestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->szdescribestring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_MeiliDuihuanSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwUserID = 1;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwuserid());
    }

    // required int64 lUserScore = 2;
    if (has_luserscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserscore());
    }

    // required int64 lUserLoveness = 3;
    if (has_luserloveness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserloveness());
    }

    // required string szDescribeString = 4;
    if (has_szdescribestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szdescribestring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_MeiliDuihuanSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_MeiliDuihuanSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_MeiliDuihuanSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_MeiliDuihuanSuccess::MergeFrom(const CMD_GP_MeiliDuihuanSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_luserscore()) {
      set_luserscore(from.luserscore());
    }
    if (from.has_luserloveness()) {
      set_luserloveness(from.luserloveness());
    }
    if (from.has_szdescribestring()) {
      set_szdescribestring(from.szdescribestring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_MeiliDuihuanSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_MeiliDuihuanSuccess::CopyFrom(const CMD_GP_MeiliDuihuanSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_MeiliDuihuanSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_GP_MeiliDuihuanSuccess::Swap(CMD_GP_MeiliDuihuanSuccess* other) {
  if (other != this) {
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(luserscore_, other->luserscore_);
    std::swap(luserloveness_, other->luserloveness_);
    std::swap(szdescribestring_, other->szdescribestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_MeiliDuihuanSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_MeiliDuihuanSuccess_descriptor_;
  metadata.reflection = CMD_GP_MeiliDuihuanSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiftBag::kGiftBag1FieldNumber;
const int GiftBag::kGiftBag2FieldNumber;
const int GiftBag::kGiftBag3FieldNumber;
const int GiftBag::kGiftBag4FieldNumber;
#endif  // !_MSC_VER

GiftBag::GiftBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GiftBag::InitAsDefaultInstance() {
}

GiftBag::GiftBag(const GiftBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GiftBag::SharedCtor() {
  _cached_size_ = 0;
  giftbag1_ = 0;
  giftbag2_ = 0;
  giftbag3_ = 0;
  giftbag4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftBag::~GiftBag() {
  SharedDtor();
}

void GiftBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiftBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiftBag_descriptor_;
}

const GiftBag& GiftBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

GiftBag* GiftBag::default_instance_ = NULL;

GiftBag* GiftBag::New() const {
  return new GiftBag;
}

void GiftBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giftbag1_ = 0;
    giftbag2_ = 0;
    giftbag3_ = 0;
    giftbag4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 giftBag1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftbag1_)));
          set_has_giftbag1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giftBag2;
        break;
      }

      // optional int32 giftBag2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftBag2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftbag2_)));
          set_has_giftbag2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_giftBag3;
        break;
      }

      // optional int32 giftBag3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftBag3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftbag3_)));
          set_has_giftbag3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_giftBag4;
        break;
      }

      // optional int32 giftBag4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftBag4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftbag4_)));
          set_has_giftbag4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 giftBag1 = 1;
  if (has_giftbag1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->giftbag1(), output);
  }

  // optional int32 giftBag2 = 2;
  if (has_giftbag2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->giftbag2(), output);
  }

  // optional int32 giftBag3 = 3;
  if (has_giftbag3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->giftbag3(), output);
  }

  // optional int32 giftBag4 = 4;
  if (has_giftbag4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->giftbag4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GiftBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 giftBag1 = 1;
  if (has_giftbag1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->giftbag1(), target);
  }

  // optional int32 giftBag2 = 2;
  if (has_giftbag2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->giftbag2(), target);
  }

  // optional int32 giftBag3 = 3;
  if (has_giftbag3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->giftbag3(), target);
  }

  // optional int32 giftBag4 = 4;
  if (has_giftbag4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->giftbag4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 giftBag1 = 1;
    if (has_giftbag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftbag1());
    }

    // optional int32 giftBag2 = 2;
    if (has_giftbag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftbag2());
    }

    // optional int32 giftBag3 = 3;
    if (has_giftbag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftbag3());
    }

    // optional int32 giftBag4 = 4;
    if (has_giftbag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftbag4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiftBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiftBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiftBag::MergeFrom(const GiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftbag1()) {
      set_giftbag1(from.giftbag1());
    }
    if (from.has_giftbag2()) {
      set_giftbag2(from.giftbag2());
    }
    if (from.has_giftbag3()) {
      set_giftbag3(from.giftbag3());
    }
    if (from.has_giftbag4()) {
      set_giftbag4(from.giftbag4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiftBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftBag::CopyFrom(const GiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftBag::IsInitialized() const {

  return true;
}

void GiftBag::Swap(GiftBag* other) {
  if (other != this) {
    std::swap(giftbag1_, other->giftbag1_);
    std::swap(giftbag2_, other->giftbag2_);
    std::swap(giftbag3_, other->giftbag3_);
    std::swap(giftbag4_, other->giftbag4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiftBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiftBag_descriptor_;
  metadata.reflection = GiftBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityConfig::kActivityNameFieldNumber;
const int ActivityConfig::kActivityidFieldNumber;
const int ActivityConfig::kStartTimeFieldNumber;
const int ActivityConfig::kEndTimeFieldNumber;
#endif  // !_MSC_VER

ActivityConfig::ActivityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityConfig::InitAsDefaultInstance() {
}

ActivityConfig::ActivityConfig(const ActivityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityConfig::SharedCtor() {
  _cached_size_ = 0;
  activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activityid_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityConfig::~ActivityConfig() {
  SharedDtor();
}

void ActivityConfig::SharedDtor() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (this != default_instance_) {
  }
}

void ActivityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityConfig_descriptor_;
}

const ActivityConfig& ActivityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

ActivityConfig* ActivityConfig::default_instance_ = NULL;

ActivityConfig* ActivityConfig::New() const {
  return new ActivityConfig;
}

void ActivityConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activityname()) {
      if (activityname_ != &::google::protobuf::internal::kEmptyString) {
        activityname_->clear();
      }
    }
    activityid_ = 0;
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::kEmptyString) {
        endtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string activityName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activityname().data(), this->activityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activityid;
        break;
      }

      // optional int32 activityid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_startTime;
        break;
      }

      // optional string startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_endTime;
        break;
      }

      // optional string endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activityname(), output);
  }

  // optional int32 activityid = 2;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activityid(), output);
  }

  // optional string startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->starttime(), output);
  }

  // optional string endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->activityname(), target);
  }

  // optional int32 activityid = 2;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activityid(), target);
  }

  // optional string startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->starttime(), target);
  }

  // optional string endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string activityName = 1;
    if (has_activityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activityname());
    }

    // optional int32 activityid = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }

    // optional string startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityConfig::MergeFrom(const ActivityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityname()) {
      set_activityname(from.activityname());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityConfig::CopyFrom(const ActivityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityConfig::IsInitialized() const {

  return true;
}

void ActivityConfig::Swap(ActivityConfig* other) {
  if (other != this) {
    std::swap(activityname_, other->activityname_);
    std::swap(activityid_, other->activityid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityConfig_descriptor_;
  metadata.reflection = ActivityConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kStatusFieldNumber;
const int Activity::kStartTimeFieldNumber;
const int Activity::kEndTimeFieldNumber;
const int Activity::kRewardFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity::InitAsDefaultInstance() {
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  SharedDtor();
}

void Activity::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (this != default_instance_) {
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_descriptor_;
}

const Activity& Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_endtime()) {
      if (endtime_ != &::google::protobuf::internal::kEmptyString) {
        endtime_->clear();
      }
    }
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::kEmptyString) {
        reward_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_startTime;
        break;
      }

      // optional string startTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_endTime;
        break;
      }

      // optional string endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // optional string reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional string startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->starttime(), output);
  }

  // optional string endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->endtime(), output);
  }

  // optional string reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional string startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->starttime(), target);
  }

  // optional string endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->endtime(), target);
  }

  // optional string reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endtime());
    }

    // optional string reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {

  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_descriptor_;
  metadata.reflection = Activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberInfo::kMemberSwitchDateFieldNumber;
const int MemberInfo::kMemberOrderFieldNumber;
const int MemberInfo::kMemberDaysFieldNumber;
#endif  // !_MSC_VER

MemberInfo::MemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberInfo::InitAsDefaultInstance() {
}

MemberInfo::MemberInfo(const MemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberInfo::SharedCtor() {
  _cached_size_ = 0;
  memberswitchdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memberorder_ = 0;
  memberdays_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberInfo::~MemberInfo() {
  SharedDtor();
}

void MemberInfo::SharedDtor() {
  if (memberswitchdate_ != &::google::protobuf::internal::kEmptyString) {
    delete memberswitchdate_;
  }
  if (this != default_instance_) {
  }
}

void MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberInfo_descriptor_;
}

const MemberInfo& MemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

MemberInfo* MemberInfo::default_instance_ = NULL;

MemberInfo* MemberInfo::New() const {
  return new MemberInfo;
}

void MemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_memberswitchdate()) {
      if (memberswitchdate_ != &::google::protobuf::internal::kEmptyString) {
        memberswitchdate_->clear();
      }
    }
    memberorder_ = 0;
    memberdays_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string memberSwitchDate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memberswitchdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->memberswitchdate().data(), this->memberswitchdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_memberOrder;
        break;
      }

      // optional int32 memberOrder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberorder_)));
          set_has_memberorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberDays;
        break;
      }

      // optional int32 memberDays = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberdays_)));
          set_has_memberdays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string memberSwitchDate = 1;
  if (has_memberswitchdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memberswitchdate().data(), this->memberswitchdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->memberswitchdate(), output);
  }

  // optional int32 memberOrder = 2;
  if (has_memberorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->memberorder(), output);
  }

  // optional int32 memberDays = 3;
  if (has_memberdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->memberdays(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string memberSwitchDate = 1;
  if (has_memberswitchdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memberswitchdate().data(), this->memberswitchdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->memberswitchdate(), target);
  }

  // optional int32 memberOrder = 2;
  if (has_memberorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->memberorder(), target);
  }

  // optional int32 memberDays = 3;
  if (has_memberdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->memberdays(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string memberSwitchDate = 1;
    if (has_memberswitchdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memberswitchdate());
    }

    // optional int32 memberOrder = 2;
    if (has_memberorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberorder());
    }

    // optional int32 memberDays = 3;
    if (has_memberdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberdays());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberInfo::MergeFrom(const MemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberswitchdate()) {
      set_memberswitchdate(from.memberswitchdate());
    }
    if (from.has_memberorder()) {
      set_memberorder(from.memberorder());
    }
    if (from.has_memberdays()) {
      set_memberdays(from.memberdays());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {

  return true;
}

void MemberInfo::Swap(MemberInfo* other) {
  if (other != this) {
    std::swap(memberswitchdate_, other->memberswitchdate_);
    std::swap(memberorder_, other->memberorder_);
    std::swap(memberdays_, other->memberdays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberInfo_descriptor_;
  metadata.reflection = MemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeCaseBag::kRechargeCaseBag1FieldNumber;
const int RechargeCaseBag::kRechargeCaseBag2FieldNumber;
const int RechargeCaseBag::kRechargeCaseBag3FieldNumber;
const int RechargeCaseBag::kRechargeCaseBag4FieldNumber;
const int RechargeCaseBag::kRechargeCaseBag5FieldNumber;
const int RechargeCaseBag::kRechargeCaseBag6FieldNumber;
const int RechargeCaseBag::kRechargeCaseBag7FieldNumber;
#endif  // !_MSC_VER

RechargeCaseBag::RechargeCaseBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeCaseBag::InitAsDefaultInstance() {
}

RechargeCaseBag::RechargeCaseBag(const RechargeCaseBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeCaseBag::SharedCtor() {
  _cached_size_ = 0;
  rechargecasebag1_ = 0;
  rechargecasebag2_ = 0;
  rechargecasebag3_ = 0;
  rechargecasebag4_ = 0;
  rechargecasebag5_ = 0;
  rechargecasebag6_ = 0;
  rechargecasebag7_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeCaseBag::~RechargeCaseBag() {
  SharedDtor();
}

void RechargeCaseBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargeCaseBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeCaseBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeCaseBag_descriptor_;
}

const RechargeCaseBag& RechargeCaseBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

RechargeCaseBag* RechargeCaseBag::default_instance_ = NULL;

RechargeCaseBag* RechargeCaseBag::New() const {
  return new RechargeCaseBag;
}

void RechargeCaseBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rechargecasebag1_ = 0;
    rechargecasebag2_ = 0;
    rechargecasebag3_ = 0;
    rechargecasebag4_ = 0;
    rechargecasebag5_ = 0;
    rechargecasebag6_ = 0;
    rechargecasebag7_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeCaseBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rechargeCaseBag1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargecasebag1_)));
          set_has_rechargecasebag1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rechargeCaseBag2;
        break;
      }

      // optional int32 rechargeCaseBag2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeCaseBag2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargecasebag2_)));
          set_has_rechargecasebag2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rechargeCaseBag3;
        break;
      }

      // optional int32 rechargeCaseBag3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeCaseBag3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargecasebag3_)));
          set_has_rechargecasebag3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rechargeCaseBag4;
        break;
      }

      // optional int32 rechargeCaseBag4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeCaseBag4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargecasebag4_)));
          set_has_rechargecasebag4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rechargeCaseBag5;
        break;
      }

      // optional int32 rechargeCaseBag5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeCaseBag5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargecasebag5_)));
          set_has_rechargecasebag5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rechargeCaseBag6;
        break;
      }

      // optional int32 rechargeCaseBag6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeCaseBag6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargecasebag6_)));
          set_has_rechargecasebag6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rechargeCaseBag7;
        break;
      }

      // optional int32 rechargeCaseBag7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeCaseBag7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargecasebag7_)));
          set_has_rechargecasebag7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeCaseBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rechargeCaseBag1 = 1;
  if (has_rechargecasebag1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rechargecasebag1(), output);
  }

  // optional int32 rechargeCaseBag2 = 2;
  if (has_rechargecasebag2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rechargecasebag2(), output);
  }

  // optional int32 rechargeCaseBag3 = 3;
  if (has_rechargecasebag3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rechargecasebag3(), output);
  }

  // optional int32 rechargeCaseBag4 = 4;
  if (has_rechargecasebag4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rechargecasebag4(), output);
  }

  // optional int32 rechargeCaseBag5 = 5;
  if (has_rechargecasebag5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rechargecasebag5(), output);
  }

  // optional int32 rechargeCaseBag6 = 6;
  if (has_rechargecasebag6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rechargecasebag6(), output);
  }

  // optional int32 rechargeCaseBag7 = 7;
  if (has_rechargecasebag7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rechargecasebag7(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeCaseBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rechargeCaseBag1 = 1;
  if (has_rechargecasebag1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rechargecasebag1(), target);
  }

  // optional int32 rechargeCaseBag2 = 2;
  if (has_rechargecasebag2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rechargecasebag2(), target);
  }

  // optional int32 rechargeCaseBag3 = 3;
  if (has_rechargecasebag3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rechargecasebag3(), target);
  }

  // optional int32 rechargeCaseBag4 = 4;
  if (has_rechargecasebag4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rechargecasebag4(), target);
  }

  // optional int32 rechargeCaseBag5 = 5;
  if (has_rechargecasebag5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rechargecasebag5(), target);
  }

  // optional int32 rechargeCaseBag6 = 6;
  if (has_rechargecasebag6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rechargecasebag6(), target);
  }

  // optional int32 rechargeCaseBag7 = 7;
  if (has_rechargecasebag7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rechargecasebag7(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeCaseBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rechargeCaseBag1 = 1;
    if (has_rechargecasebag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargecasebag1());
    }

    // optional int32 rechargeCaseBag2 = 2;
    if (has_rechargecasebag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargecasebag2());
    }

    // optional int32 rechargeCaseBag3 = 3;
    if (has_rechargecasebag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargecasebag3());
    }

    // optional int32 rechargeCaseBag4 = 4;
    if (has_rechargecasebag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargecasebag4());
    }

    // optional int32 rechargeCaseBag5 = 5;
    if (has_rechargecasebag5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargecasebag5());
    }

    // optional int32 rechargeCaseBag6 = 6;
    if (has_rechargecasebag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargecasebag6());
    }

    // optional int32 rechargeCaseBag7 = 7;
    if (has_rechargecasebag7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargecasebag7());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeCaseBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeCaseBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeCaseBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeCaseBag::MergeFrom(const RechargeCaseBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rechargecasebag1()) {
      set_rechargecasebag1(from.rechargecasebag1());
    }
    if (from.has_rechargecasebag2()) {
      set_rechargecasebag2(from.rechargecasebag2());
    }
    if (from.has_rechargecasebag3()) {
      set_rechargecasebag3(from.rechargecasebag3());
    }
    if (from.has_rechargecasebag4()) {
      set_rechargecasebag4(from.rechargecasebag4());
    }
    if (from.has_rechargecasebag5()) {
      set_rechargecasebag5(from.rechargecasebag5());
    }
    if (from.has_rechargecasebag6()) {
      set_rechargecasebag6(from.rechargecasebag6());
    }
    if (from.has_rechargecasebag7()) {
      set_rechargecasebag7(from.rechargecasebag7());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeCaseBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeCaseBag::CopyFrom(const RechargeCaseBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeCaseBag::IsInitialized() const {

  return true;
}

void RechargeCaseBag::Swap(RechargeCaseBag* other) {
  if (other != this) {
    std::swap(rechargecasebag1_, other->rechargecasebag1_);
    std::swap(rechargecasebag2_, other->rechargecasebag2_);
    std::swap(rechargecasebag3_, other->rechargecasebag3_);
    std::swap(rechargecasebag4_, other->rechargecasebag4_);
    std::swap(rechargecasebag5_, other->rechargecasebag5_);
    std::swap(rechargecasebag6_, other->rechargecasebag6_);
    std::swap(rechargecasebag7_, other->rechargecasebag7_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeCaseBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeCaseBag_descriptor_;
  metadata.reflection = RechargeCaseBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Secure::kCompellationFieldNumber;
const int Secure::kPassPortIDFieldNumber;
const int Secure::kIsSecureFieldNumber;
const int Secure::kVerificationPhoneFieldNumber;
#endif  // !_MSC_VER

Secure::Secure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Secure::InitAsDefaultInstance() {
}

Secure::Secure(const Secure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Secure::SharedCtor() {
  _cached_size_ = 0;
  compellation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  issecure_ = 0;
  verificationphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secure::~Secure() {
  SharedDtor();
}

void Secure::SharedDtor() {
  if (compellation_ != &::google::protobuf::internal::kEmptyString) {
    delete compellation_;
  }
  if (passportid_ != &::google::protobuf::internal::kEmptyString) {
    delete passportid_;
  }
  if (verificationphone_ != &::google::protobuf::internal::kEmptyString) {
    delete verificationphone_;
  }
  if (this != default_instance_) {
  }
}

void Secure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secure_descriptor_;
}

const Secure& Secure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

Secure* Secure::default_instance_ = NULL;

Secure* Secure::New() const {
  return new Secure;
}

void Secure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_compellation()) {
      if (compellation_ != &::google::protobuf::internal::kEmptyString) {
        compellation_->clear();
      }
    }
    if (has_passportid()) {
      if (passportid_ != &::google::protobuf::internal::kEmptyString) {
        passportid_->clear();
      }
    }
    issecure_ = 0;
    if (has_verificationphone()) {
      if (verificationphone_ != &::google::protobuf::internal::kEmptyString) {
        verificationphone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Secure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string compellation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compellation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->compellation().data(), this->compellation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passPortID;
        break;
      }

      // optional string passPortID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passPortID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passportid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passportid().data(), this->passportid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isSecure;
        break;
      }

      // optional int32 isSecure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSecure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issecure_)));
          set_has_issecure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_verificationPhone;
        break;
      }

      // optional string verificationPhone = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verificationPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verificationphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verificationphone().data(), this->verificationphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Secure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string compellation = 1;
  if (has_compellation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compellation().data(), this->compellation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->compellation(), output);
  }

  // optional string passPortID = 2;
  if (has_passportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passportid().data(), this->passportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passportid(), output);
  }

  // optional int32 isSecure = 3;
  if (has_issecure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->issecure(), output);
  }

  // optional string verificationPhone = 4;
  if (has_verificationphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verificationphone().data(), this->verificationphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->verificationphone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Secure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string compellation = 1;
  if (has_compellation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compellation().data(), this->compellation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->compellation(), target);
  }

  // optional string passPortID = 2;
  if (has_passportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passportid().data(), this->passportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passportid(), target);
  }

  // optional int32 isSecure = 3;
  if (has_issecure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->issecure(), target);
  }

  // optional string verificationPhone = 4;
  if (has_verificationphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verificationphone().data(), this->verificationphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->verificationphone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Secure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string compellation = 1;
    if (has_compellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compellation());
    }

    // optional string passPortID = 2;
    if (has_passportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passportid());
    }

    // optional int32 isSecure = 3;
    if (has_issecure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issecure());
    }

    // optional string verificationPhone = 4;
    if (has_verificationphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verificationphone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Secure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Secure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secure::MergeFrom(const Secure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compellation()) {
      set_compellation(from.compellation());
    }
    if (from.has_passportid()) {
      set_passportid(from.passportid());
    }
    if (from.has_issecure()) {
      set_issecure(from.issecure());
    }
    if (from.has_verificationphone()) {
      set_verificationphone(from.verificationphone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Secure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secure::CopyFrom(const Secure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secure::IsInitialized() const {

  return true;
}

void Secure::Swap(Secure* other) {
  if (other != this) {
    std::swap(compellation_, other->compellation_);
    std::swap(passportid_, other->passportid_);
    std::swap(issecure_, other->issecure_);
    std::swap(verificationphone_, other->verificationphone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Secure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secure_descriptor_;
  metadata.reflection = Secure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Novice::kNoviceCardFieldNumber;
const int Novice::kQuotaFieldNumber;
const int Novice::kDurationTermFieldNumber;
const int Novice::kCardDayFieldNumber;
const int Novice::kCardStateFieldNumber;
#endif  // !_MSC_VER

Novice::Novice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Novice::InitAsDefaultInstance() {
}

Novice::Novice(const Novice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Novice::SharedCtor() {
  _cached_size_ = 0;
  novicecard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quota_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  durationterm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardday_ = 0;
  cardstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Novice::~Novice() {
  SharedDtor();
}

void Novice::SharedDtor() {
  if (novicecard_ != &::google::protobuf::internal::kEmptyString) {
    delete novicecard_;
  }
  if (quota_ != &::google::protobuf::internal::kEmptyString) {
    delete quota_;
  }
  if (durationterm_ != &::google::protobuf::internal::kEmptyString) {
    delete durationterm_;
  }
  if (this != default_instance_) {
  }
}

void Novice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Novice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Novice_descriptor_;
}

const Novice& Novice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

Novice* Novice::default_instance_ = NULL;

Novice* Novice::New() const {
  return new Novice;
}

void Novice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_novicecard()) {
      if (novicecard_ != &::google::protobuf::internal::kEmptyString) {
        novicecard_->clear();
      }
    }
    if (has_quota()) {
      if (quota_ != &::google::protobuf::internal::kEmptyString) {
        quota_->clear();
      }
    }
    if (has_durationterm()) {
      if (durationterm_ != &::google::protobuf::internal::kEmptyString) {
        durationterm_->clear();
      }
    }
    cardday_ = 0;
    cardstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Novice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string noviceCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_novicecard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->novicecard().data(), this->novicecard().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quota;
        break;
      }

      // optional string quota = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quota:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quota()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quota().data(), this->quota().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_durationTerm;
        break;
      }

      // optional string durationTerm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_durationTerm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_durationterm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->durationterm().data(), this->durationterm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardDay;
        break;
      }

      // optional int32 cardDay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardday_)));
          set_has_cardday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cardState;
        break;
      }

      // optional int32 cardState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardstate_)));
          set_has_cardstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Novice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string noviceCard = 1;
  if (has_novicecard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->novicecard().data(), this->novicecard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->novicecard(), output);
  }

  // optional string quota = 2;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quota().data(), this->quota().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->quota(), output);
  }

  // optional string durationTerm = 3;
  if (has_durationterm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->durationterm().data(), this->durationterm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->durationterm(), output);
  }

  // optional int32 cardDay = 4;
  if (has_cardday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardday(), output);
  }

  // optional int32 cardState = 5;
  if (has_cardstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Novice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string noviceCard = 1;
  if (has_novicecard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->novicecard().data(), this->novicecard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->novicecard(), target);
  }

  // optional string quota = 2;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quota().data(), this->quota().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->quota(), target);
  }

  // optional string durationTerm = 3;
  if (has_durationterm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->durationterm().data(), this->durationterm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->durationterm(), target);
  }

  // optional int32 cardDay = 4;
  if (has_cardday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardday(), target);
  }

  // optional int32 cardState = 5;
  if (has_cardstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Novice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string noviceCard = 1;
    if (has_novicecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->novicecard());
    }

    // optional string quota = 2;
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quota());
    }

    // optional string durationTerm = 3;
    if (has_durationterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->durationterm());
    }

    // optional int32 cardDay = 4;
    if (has_cardday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardday());
    }

    // optional int32 cardState = 5;
    if (has_cardstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Novice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Novice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Novice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Novice::MergeFrom(const Novice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_novicecard()) {
      set_novicecard(from.novicecard());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
    if (from.has_durationterm()) {
      set_durationterm(from.durationterm());
    }
    if (from.has_cardday()) {
      set_cardday(from.cardday());
    }
    if (from.has_cardstate()) {
      set_cardstate(from.cardstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Novice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Novice::CopyFrom(const Novice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Novice::IsInitialized() const {

  return true;
}

void Novice::Swap(Novice* other) {
  if (other != this) {
    std::swap(novicecard_, other->novicecard_);
    std::swap(quota_, other->quota_);
    std::swap(durationterm_, other->durationterm_);
    std::swap(cardday_, other->cardday_);
    std::swap(cardstate_, other->cardstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Novice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Novice_descriptor_;
  metadata.reflection = Novice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hall::kType1FieldNumber;
const int Hall::kType2FieldNumber;
#endif  // !_MSC_VER

Hall::Hall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hall::InitAsDefaultInstance() {
}

Hall::Hall(const Hall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hall::SharedCtor() {
  _cached_size_ = 0;
  type1_ = 0;
  type2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hall::~Hall() {
  SharedDtor();
}

void Hall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hall_descriptor_;
}

const Hall& Hall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

Hall* Hall::default_instance_ = NULL;

Hall* Hall::New() const {
  return new Hall;
}

void Hall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type1_ = 0;
    type2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type1_)));
          set_has_type1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type2;
        break;
      }

      // optional int32 type2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type2_)));
          set_has_type2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type1 = 1;
  if (has_type1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type1(), output);
  }

  // optional int32 type2 = 2;
  if (has_type2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type1 = 1;
  if (has_type1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type1(), target);
  }

  // optional int32 type2 = 2;
  if (has_type2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type1 = 1;
    if (has_type1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type1());
    }

    // optional int32 type2 = 2;
    if (has_type2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hall::MergeFrom(const Hall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type1()) {
      set_type1(from.type1());
    }
    if (from.has_type2()) {
      set_type2(from.type2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hall::CopyFrom(const Hall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hall::IsInitialized() const {

  return true;
}

void Hall::Swap(Hall* other) {
  if (other != this) {
    std::swap(type1_, other->type1_);
    std::swap(type2_, other->type2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hall_descriptor_;
  metadata.reflection = Hall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Relief::kReliefNumFieldNumber;
const int Relief::kCountDownFieldNumber;
const int Relief::kConditionsFieldNumber;
#endif  // !_MSC_VER

Relief::Relief()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Relief::InitAsDefaultInstance() {
}

Relief::Relief(const Relief& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Relief::SharedCtor() {
  _cached_size_ = 0;
  reliefnum_ = 0;
  countdown_ = 0;
  conditions_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relief::~Relief() {
  SharedDtor();
}

void Relief::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relief::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relief_descriptor_;
}

const Relief& Relief::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

Relief* Relief::default_instance_ = NULL;

Relief* Relief::New() const {
  return new Relief;
}

void Relief::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reliefnum_ = 0;
    countdown_ = 0;
    conditions_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Relief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reliefNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reliefnum_)));
          set_has_reliefnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_countDown;
        break;
      }

      // optional int32 countDown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_conditions;
        break;
      }

      // optional int32 conditions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conditions_)));
          set_has_conditions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Relief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reliefNum = 1;
  if (has_reliefnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reliefnum(), output);
  }

  // optional int32 countDown = 2;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->countdown(), output);
  }

  // optional int32 conditions = 3;
  if (has_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->conditions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Relief::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reliefNum = 1;
  if (has_reliefnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reliefnum(), target);
  }

  // optional int32 countDown = 2;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->countdown(), target);
  }

  // optional int32 conditions = 3;
  if (has_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->conditions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Relief::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reliefNum = 1;
    if (has_reliefnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reliefnum());
    }

    // optional int32 countDown = 2;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }

    // optional int32 conditions = 3;
    if (has_conditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conditions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relief::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Relief* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Relief*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Relief::MergeFrom(const Relief& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reliefnum()) {
      set_reliefnum(from.reliefnum());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_conditions()) {
      set_conditions(from.conditions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Relief::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relief::CopyFrom(const Relief& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relief::IsInitialized() const {

  return true;
}

void Relief::Swap(Relief* other) {
  if (other != this) {
    std::swap(reliefnum_, other->reliefnum_);
    std::swap(countdown_, other->countdown_);
    std::swap(conditions_, other->conditions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Relief::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relief_descriptor_;
  metadata.reflection = Relief_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewGiftBag::kNewGiftBag1FieldNumber;
const int NewGiftBag::kNewGiftBag2FieldNumber;
const int NewGiftBag::kNewGiftBag3FieldNumber;
const int NewGiftBag::kNewGiftBag4FieldNumber;
#endif  // !_MSC_VER

NewGiftBag::NewGiftBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewGiftBag::InitAsDefaultInstance() {
}

NewGiftBag::NewGiftBag(const NewGiftBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewGiftBag::SharedCtor() {
  _cached_size_ = 0;
  newgiftbag1_ = 0;
  newgiftbag2_ = 0;
  newgiftbag3_ = 0;
  newgiftbag4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewGiftBag::~NewGiftBag() {
  SharedDtor();
}

void NewGiftBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewGiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewGiftBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewGiftBag_descriptor_;
}

const NewGiftBag& NewGiftBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

NewGiftBag* NewGiftBag::default_instance_ = NULL;

NewGiftBag* NewGiftBag::New() const {
  return new NewGiftBag;
}

void NewGiftBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newgiftbag1_ = 0;
    newgiftbag2_ = 0;
    newgiftbag3_ = 0;
    newgiftbag4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 newGiftBag1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newgiftbag1_)));
          set_has_newgiftbag1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newGiftBag2;
        break;
      }

      // optional int32 newGiftBag2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newGiftBag2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newgiftbag2_)));
          set_has_newgiftbag2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newGiftBag3;
        break;
      }

      // optional int32 newGiftBag3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newGiftBag3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newgiftbag3_)));
          set_has_newgiftbag3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newGiftBag4;
        break;
      }

      // optional int32 newGiftBag4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newGiftBag4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newgiftbag4_)));
          set_has_newgiftbag4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 newGiftBag1 = 1;
  if (has_newgiftbag1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->newgiftbag1(), output);
  }

  // optional int32 newGiftBag2 = 2;
  if (has_newgiftbag2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->newgiftbag2(), output);
  }

  // optional int32 newGiftBag3 = 3;
  if (has_newgiftbag3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newgiftbag3(), output);
  }

  // optional int32 newGiftBag4 = 4;
  if (has_newgiftbag4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->newgiftbag4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewGiftBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 newGiftBag1 = 1;
  if (has_newgiftbag1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->newgiftbag1(), target);
  }

  // optional int32 newGiftBag2 = 2;
  if (has_newgiftbag2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->newgiftbag2(), target);
  }

  // optional int32 newGiftBag3 = 3;
  if (has_newgiftbag3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newgiftbag3(), target);
  }

  // optional int32 newGiftBag4 = 4;
  if (has_newgiftbag4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->newgiftbag4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewGiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 newGiftBag1 = 1;
    if (has_newgiftbag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newgiftbag1());
    }

    // optional int32 newGiftBag2 = 2;
    if (has_newgiftbag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newgiftbag2());
    }

    // optional int32 newGiftBag3 = 3;
    if (has_newgiftbag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newgiftbag3());
    }

    // optional int32 newGiftBag4 = 4;
    if (has_newgiftbag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newgiftbag4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewGiftBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewGiftBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewGiftBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewGiftBag::MergeFrom(const NewGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newgiftbag1()) {
      set_newgiftbag1(from.newgiftbag1());
    }
    if (from.has_newgiftbag2()) {
      set_newgiftbag2(from.newgiftbag2());
    }
    if (from.has_newgiftbag3()) {
      set_newgiftbag3(from.newgiftbag3());
    }
    if (from.has_newgiftbag4()) {
      set_newgiftbag4(from.newgiftbag4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewGiftBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewGiftBag::CopyFrom(const NewGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewGiftBag::IsInitialized() const {

  return true;
}

void NewGiftBag::Swap(NewGiftBag* other) {
  if (other != this) {
    std::swap(newgiftbag1_, other->newgiftbag1_);
    std::swap(newgiftbag2_, other->newgiftbag2_);
    std::swap(newgiftbag3_, other->newgiftbag3_);
    std::swap(newgiftbag4_, other->newgiftbag4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewGiftBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewGiftBag_descriptor_;
  metadata.reflection = NewGiftBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LanternBag::kLanternBag1FieldNumber;
const int LanternBag::kLanternBag2FieldNumber;
const int LanternBag::kLanternBag3FieldNumber;
const int LanternBag::kLanternBag4FieldNumber;
#endif  // !_MSC_VER

LanternBag::LanternBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LanternBag::InitAsDefaultInstance() {
}

LanternBag::LanternBag(const LanternBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LanternBag::SharedCtor() {
  _cached_size_ = 0;
  lanternbag1_ = 0;
  lanternbag2_ = 0;
  lanternbag3_ = 0;
  lanternbag4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanternBag::~LanternBag() {
  SharedDtor();
}

void LanternBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LanternBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanternBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanternBag_descriptor_;
}

const LanternBag& LanternBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

LanternBag* LanternBag::default_instance_ = NULL;

LanternBag* LanternBag::New() const {
  return new LanternBag;
}

void LanternBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lanternbag1_ = 0;
    lanternbag2_ = 0;
    lanternbag3_ = 0;
    lanternbag4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LanternBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lanternBag1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lanternbag1_)));
          set_has_lanternbag1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lanternBag2;
        break;
      }

      // optional int32 lanternBag2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lanternBag2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lanternbag2_)));
          set_has_lanternbag2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lanternBag3;
        break;
      }

      // optional int32 lanternBag3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lanternBag3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lanternbag3_)));
          set_has_lanternbag3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lanternBag4;
        break;
      }

      // optional int32 lanternBag4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lanternBag4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lanternbag4_)));
          set_has_lanternbag4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanternBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lanternBag1 = 1;
  if (has_lanternbag1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lanternbag1(), output);
  }

  // optional int32 lanternBag2 = 2;
  if (has_lanternbag2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lanternbag2(), output);
  }

  // optional int32 lanternBag3 = 3;
  if (has_lanternbag3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lanternbag3(), output);
  }

  // optional int32 lanternBag4 = 4;
  if (has_lanternbag4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lanternbag4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LanternBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lanternBag1 = 1;
  if (has_lanternbag1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lanternbag1(), target);
  }

  // optional int32 lanternBag2 = 2;
  if (has_lanternbag2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lanternbag2(), target);
  }

  // optional int32 lanternBag3 = 3;
  if (has_lanternbag3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lanternbag3(), target);
  }

  // optional int32 lanternBag4 = 4;
  if (has_lanternbag4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lanternbag4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LanternBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lanternBag1 = 1;
    if (has_lanternbag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lanternbag1());
    }

    // optional int32 lanternBag2 = 2;
    if (has_lanternbag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lanternbag2());
    }

    // optional int32 lanternBag3 = 3;
    if (has_lanternbag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lanternbag3());
    }

    // optional int32 lanternBag4 = 4;
    if (has_lanternbag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lanternbag4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanternBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LanternBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LanternBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LanternBag::MergeFrom(const LanternBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lanternbag1()) {
      set_lanternbag1(from.lanternbag1());
    }
    if (from.has_lanternbag2()) {
      set_lanternbag2(from.lanternbag2());
    }
    if (from.has_lanternbag3()) {
      set_lanternbag3(from.lanternbag3());
    }
    if (from.has_lanternbag4()) {
      set_lanternbag4(from.lanternbag4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LanternBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanternBag::CopyFrom(const LanternBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanternBag::IsInitialized() const {

  return true;
}

void LanternBag::Swap(LanternBag* other) {
  if (other != this) {
    std::swap(lanternbag1_, other->lanternbag1_);
    std::swap(lanternbag2_, other->lanternbag2_);
    std::swap(lanternbag3_, other->lanternbag3_);
    std::swap(lanternbag4_, other->lanternbag4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LanternBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LanternBag_descriptor_;
  metadata.reflection = LanternBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HomeConfig::kFunctionalConfigFieldNumber;
const int HomeConfig::kLuckDrawFieldNumber;
const int HomeConfig::kRechargeCaseFieldNumber;
const int HomeConfig::kSignFieldNumber;
const int HomeConfig::kBoxDateFieldNumber;
const int HomeConfig::kReliefFieldNumber;
const int HomeConfig::kShareFieldNumber;
const int HomeConfig::kBoxConfigFieldNumber;
const int HomeConfig::kRechargeConfigFieldNumber;
const int HomeConfig::kNewGiftFieldNumber;
const int HomeConfig::kLanternFieldNumber;
#endif  // !_MSC_VER

HomeConfig::HomeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HomeConfig::InitAsDefaultInstance() {
  luckdraw_ = const_cast< ::LuckDraw*>(&::LuckDraw::default_instance());
}

HomeConfig::HomeConfig(const HomeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HomeConfig::SharedCtor() {
  _cached_size_ = 0;
  luckdraw_ = NULL;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  share_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HomeConfig::~HomeConfig() {
  SharedDtor();
}

void HomeConfig::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (relief_ != &::google::protobuf::internal::kEmptyString) {
    delete relief_;
  }
  if (share_ != &::google::protobuf::internal::kEmptyString) {
    delete share_;
  }
  if (this != default_instance_) {
    delete luckdraw_;
  }
}

void HomeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HomeConfig_descriptor_;
}

const HomeConfig& HomeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

HomeConfig* HomeConfig::default_instance_ = NULL;

HomeConfig* HomeConfig::New() const {
  return new HomeConfig;
}

void HomeConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_luckdraw()) {
      if (luckdraw_ != NULL) luckdraw_->::LuckDraw::Clear();
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_relief()) {
      if (relief_ != &::google::protobuf::internal::kEmptyString) {
        relief_->clear();
      }
    }
    if (has_share()) {
      if (share_ != &::google::protobuf::internal::kEmptyString) {
        share_->clear();
      }
    }
  }
  functionalconfig_.Clear();
  rechargecase_.Clear();
  boxdate_.Clear();
  boxconfig_.Clear();
  rechargeconfig_.Clear();
  newgift_.Clear();
  lantern_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HomeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FunctionalConfig functionalConfig = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functionalConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functionalconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_functionalConfig;
        if (input->ExpectTag(18)) goto parse_luckDraw;
        break;
      }

      // optional .LuckDraw luckDraw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_luckDraw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_luckdraw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rechargeCase;
        break;
      }

      // repeated .RechargeCase rechargeCase = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeCase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rechargecase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rechargeCase;
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // optional string sign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_boxDate;
        break;
      }

      // repeated .BoxDate boxDate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_boxDate;
        if (input->ExpectTag(50)) goto parse_relief;
        break;
      }

      // optional string relief = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relief()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relief().data(), this->relief().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_share;
        break;
      }

      // optional string share = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_share:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->share().data(), this->share().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boxConfig;
        break;
      }

      // repeated .BoxConfig boxConfig = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boxConfig;
        if (input->ExpectTag(74)) goto parse_rechargeConfig;
        break;
      }

      // repeated .RechargeConfig rechargeConfig = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rechargeconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rechargeConfig;
        if (input->ExpectTag(82)) goto parse_newGift;
        break;
      }

      // repeated .NewGift newGift = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newGift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newgift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_newGift;
        if (input->ExpectTag(90)) goto parse_lantern;
        break;
      }

      // repeated .Lantern lantern = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lantern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lantern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_lantern;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HomeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FunctionalConfig functionalConfig = 1;
  for (int i = 0; i < this->functionalconfig_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->functionalconfig(i), output);
  }

  // optional .LuckDraw luckDraw = 2;
  if (has_luckdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->luckdraw(), output);
  }

  // repeated .RechargeCase rechargeCase = 3;
  for (int i = 0; i < this->rechargecase_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rechargecase(i), output);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sign(), output);
  }

  // repeated .BoxDate boxDate = 5;
  for (int i = 0; i < this->boxdate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->boxdate(i), output);
  }

  // optional string relief = 6;
  if (has_relief()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relief().data(), this->relief().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->relief(), output);
  }

  // optional string share = 7;
  if (has_share()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->share().data(), this->share().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->share(), output);
  }

  // repeated .BoxConfig boxConfig = 8;
  for (int i = 0; i < this->boxconfig_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->boxconfig(i), output);
  }

  // repeated .RechargeConfig rechargeConfig = 9;
  for (int i = 0; i < this->rechargeconfig_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rechargeconfig(i), output);
  }

  // repeated .NewGift newGift = 10;
  for (int i = 0; i < this->newgift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->newgift(i), output);
  }

  // repeated .Lantern lantern = 11;
  for (int i = 0; i < this->lantern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lantern(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HomeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FunctionalConfig functionalConfig = 1;
  for (int i = 0; i < this->functionalconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->functionalconfig(i), target);
  }

  // optional .LuckDraw luckDraw = 2;
  if (has_luckdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->luckdraw(), target);
  }

  // repeated .RechargeCase rechargeCase = 3;
  for (int i = 0; i < this->rechargecase_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rechargecase(i), target);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // repeated .BoxDate boxDate = 5;
  for (int i = 0; i < this->boxdate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->boxdate(i), target);
  }

  // optional string relief = 6;
  if (has_relief()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relief().data(), this->relief().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->relief(), target);
  }

  // optional string share = 7;
  if (has_share()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->share().data(), this->share().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->share(), target);
  }

  // repeated .BoxConfig boxConfig = 8;
  for (int i = 0; i < this->boxconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->boxconfig(i), target);
  }

  // repeated .RechargeConfig rechargeConfig = 9;
  for (int i = 0; i < this->rechargeconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rechargeconfig(i), target);
  }

  // repeated .NewGift newGift = 10;
  for (int i = 0; i < this->newgift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->newgift(i), target);
  }

  // repeated .Lantern lantern = 11;
  for (int i = 0; i < this->lantern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->lantern(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HomeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .LuckDraw luckDraw = 2;
    if (has_luckdraw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->luckdraw());
    }

    // optional string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string relief = 6;
    if (has_relief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relief());
    }

    // optional string share = 7;
    if (has_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->share());
    }

  }
  // repeated .FunctionalConfig functionalConfig = 1;
  total_size += 1 * this->functionalconfig_size();
  for (int i = 0; i < this->functionalconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functionalconfig(i));
  }

  // repeated .RechargeCase rechargeCase = 3;
  total_size += 1 * this->rechargecase_size();
  for (int i = 0; i < this->rechargecase_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rechargecase(i));
  }

  // repeated .BoxDate boxDate = 5;
  total_size += 1 * this->boxdate_size();
  for (int i = 0; i < this->boxdate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxdate(i));
  }

  // repeated .BoxConfig boxConfig = 8;
  total_size += 1 * this->boxconfig_size();
  for (int i = 0; i < this->boxconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxconfig(i));
  }

  // repeated .RechargeConfig rechargeConfig = 9;
  total_size += 1 * this->rechargeconfig_size();
  for (int i = 0; i < this->rechargeconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rechargeconfig(i));
  }

  // repeated .NewGift newGift = 10;
  total_size += 1 * this->newgift_size();
  for (int i = 0; i < this->newgift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newgift(i));
  }

  // repeated .Lantern lantern = 11;
  total_size += 1 * this->lantern_size();
  for (int i = 0; i < this->lantern_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lantern(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HomeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HomeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HomeConfig::MergeFrom(const HomeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  functionalconfig_.MergeFrom(from.functionalconfig_);
  rechargecase_.MergeFrom(from.rechargecase_);
  boxdate_.MergeFrom(from.boxdate_);
  boxconfig_.MergeFrom(from.boxconfig_);
  rechargeconfig_.MergeFrom(from.rechargeconfig_);
  newgift_.MergeFrom(from.newgift_);
  lantern_.MergeFrom(from.lantern_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_luckdraw()) {
      mutable_luckdraw()->::LuckDraw::MergeFrom(from.luckdraw());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_relief()) {
      set_relief(from.relief());
    }
    if (from.has_share()) {
      set_share(from.share());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HomeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeConfig::CopyFrom(const HomeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeConfig::IsInitialized() const {

  return true;
}

void HomeConfig::Swap(HomeConfig* other) {
  if (other != this) {
    functionalconfig_.Swap(&other->functionalconfig_);
    std::swap(luckdraw_, other->luckdraw_);
    rechargecase_.Swap(&other->rechargecase_);
    std::swap(sign_, other->sign_);
    boxdate_.Swap(&other->boxdate_);
    std::swap(relief_, other->relief_);
    std::swap(share_, other->share_);
    boxconfig_.Swap(&other->boxconfig_);
    rechargeconfig_.Swap(&other->rechargeconfig_);
    newgift_.Swap(&other->newgift_);
    lantern_.Swap(&other->lantern_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HomeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HomeConfig_descriptor_;
  metadata.reflection = HomeConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionalConfig::kKeyFieldNumber;
const int FunctionalConfig::kValueFieldNumber;
#endif  // !_MSC_VER

FunctionalConfig::FunctionalConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionalConfig::InitAsDefaultInstance() {
}

FunctionalConfig::FunctionalConfig(const FunctionalConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionalConfig::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionalConfig::~FunctionalConfig() {
  SharedDtor();
}

void FunctionalConfig::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void FunctionalConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionalConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionalConfig_descriptor_;
}

const FunctionalConfig& FunctionalConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

FunctionalConfig* FunctionalConfig::default_instance_ = NULL;

FunctionalConfig* FunctionalConfig::New() const {
  return new FunctionalConfig;
}

void FunctionalConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionalConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionalConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionalConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionalConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionalConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionalConfig::MergeFrom(const FunctionalConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionalConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionalConfig::CopyFrom(const FunctionalConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionalConfig::IsInitialized() const {

  return true;
}

void FunctionalConfig::Swap(FunctionalConfig* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionalConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionalConfig_descriptor_;
  metadata.reflection = FunctionalConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionalConfig1::kBankFieldNumber;
const int FunctionalConfig1::kActCardFieldNumber;
const int FunctionalConfig1::kReliefMoneyFieldNumber;
const int FunctionalConfig1::kActivityFieldNumber;
const int FunctionalConfig1::kMonCardFieldNumber;
const int FunctionalConfig1::kDailyGiftFieldNumber;
const int FunctionalConfig1::kRankListFieldNumber;
const int FunctionalConfig1::kNewCardFieldNumber;
const int FunctionalConfig1::kGivePresentFieldNumber;
const int FunctionalConfig1::kIsAuditFieldNumber;
const int FunctionalConfig1::kIsH5PayFieldNumber;
const int FunctionalConfig1::kHorseLampFieldNumber;
const int FunctionalConfig1::kExtensionFieldNumber;
const int FunctionalConfig1::kRunContentFieldNumber;
const int FunctionalConfig1::kReliefMoneyShareFieldNumber;
const int FunctionalConfig1::kRegisterFieldNumber;
const int FunctionalConfig1::kPersonalCenterFieldNumber;
const int FunctionalConfig1::kExchangeCenterFieldNumber;
const int FunctionalConfig1::kSignFieldNumber;
const int FunctionalConfig1::kBindPhoneFieldNumber;
const int FunctionalConfig1::kShCirFriendsFieldNumber;
const int FunctionalConfig1::kShoppingMallFieldNumber;
const int FunctionalConfig1::kSetUpFieldNumber;
const int FunctionalConfig1::kShareFieldNumber;
const int FunctionalConfig1::kShFriendsFieldNumber;
const int FunctionalConfig1::kNewGiftFieldNumber;
#endif  // !_MSC_VER

FunctionalConfig1::FunctionalConfig1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionalConfig1::InitAsDefaultInstance() {
}

FunctionalConfig1::FunctionalConfig1(const FunctionalConfig1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionalConfig1::SharedCtor() {
  _cached_size_ = 0;
  bank_ = 0;
  actcard_ = 0;
  reliefmoney_ = 0;
  activity_ = 0;
  moncard_ = 0;
  dailygift_ = 0;
  ranklist_ = 0;
  newcard_ = 0;
  givepresent_ = 0;
  isaudit_ = 0;
  ish5pay_ = 0;
  horselamp_ = 0;
  extension_ = 0;
  runcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reliefmoneyshare_ = 0;
  register__ = 0;
  personalcenter_ = 0;
  exchangecenter_ = 0;
  sign_ = 0;
  bindphone_ = 0;
  shcirfriends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shoppingmall_ = 0;
  setup_ = 0;
  share_ = 0;
  shfriends_ = 0;
  newgift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionalConfig1::~FunctionalConfig1() {
  SharedDtor();
}

void FunctionalConfig1::SharedDtor() {
  if (runcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete runcontent_;
  }
  if (shcirfriends_ != &::google::protobuf::internal::kEmptyString) {
    delete shcirfriends_;
  }
  if (this != default_instance_) {
  }
}

void FunctionalConfig1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionalConfig1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionalConfig1_descriptor_;
}

const FunctionalConfig1& FunctionalConfig1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

FunctionalConfig1* FunctionalConfig1::default_instance_ = NULL;

FunctionalConfig1* FunctionalConfig1::New() const {
  return new FunctionalConfig1;
}

void FunctionalConfig1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bank_ = 0;
    actcard_ = 0;
    reliefmoney_ = 0;
    activity_ = 0;
    moncard_ = 0;
    dailygift_ = 0;
    ranklist_ = 0;
    newcard_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    givepresent_ = 0;
    isaudit_ = 0;
    ish5pay_ = 0;
    horselamp_ = 0;
    extension_ = 0;
    if (has_runcontent()) {
      if (runcontent_ != &::google::protobuf::internal::kEmptyString) {
        runcontent_->clear();
      }
    }
    reliefmoneyshare_ = 0;
    register__ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    personalcenter_ = 0;
    exchangecenter_ = 0;
    sign_ = 0;
    bindphone_ = 0;
    if (has_shcirfriends()) {
      if (shcirfriends_ != &::google::protobuf::internal::kEmptyString) {
        shcirfriends_->clear();
      }
    }
    shoppingmall_ = 0;
    setup_ = 0;
    share_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    shfriends_ = 0;
    newgift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionalConfig1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bank_)));
          set_has_bank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_actCard;
        break;
      }

      // optional int32 actCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actcard_)));
          set_has_actcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ReliefMoney;
        break;
      }

      // optional int32 ReliefMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReliefMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reliefmoney_)));
          set_has_reliefmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Activity;
        break;
      }

      // optional int32 Activity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_)));
          set_has_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MonCard;
        break;
      }

      // optional int32 MonCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moncard_)));
          set_has_moncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DailyGift;
        break;
      }

      // optional int32 DailyGift = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DailyGift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailygift_)));
          set_has_dailygift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_RankList;
        break;
      }

      // optional int32 RankList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RankList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranklist_)));
          set_has_ranklist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_NewCard;
        break;
      }

      // optional int32 NewCard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newcard_)));
          set_has_newcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_GivePresent;
        break;
      }

      // optional int32 GivePresent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GivePresent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &givepresent_)));
          set_has_givepresent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isAudit;
        break;
      }

      // optional int32 isAudit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAudit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isaudit_)));
          set_has_isaudit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isH5Pay;
        break;
      }

      // optional int32 isH5Pay = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isH5Pay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ish5pay_)));
          set_has_ish5pay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_HorseLamp;
        break;
      }

      // optional int32 HorseLamp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseLamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horselamp_)));
          set_has_horselamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Extension;
        break;
      }

      // optional int32 Extension = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extension_)));
          set_has_extension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_RunContent;
        break;
      }

      // optional string RunContent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RunContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->runcontent().data(), this->runcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ReliefMoneyShare;
        break;
      }

      // optional int32 ReliefMoneyShare = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReliefMoneyShare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reliefmoneyshare_)));
          set_has_reliefmoneyshare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_Register;
        break;
      }

      // optional int32 Register = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &register__)));
          set_has_register_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_PersonalCenter;
        break;
      }

      // optional int32 PersonalCenter = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PersonalCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &personalcenter_)));
          set_has_personalcenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ExchangeCenter;
        break;
      }

      // optional int32 ExchangeCenter = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExchangeCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangecenter_)));
          set_has_exchangecenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Sign;
        break;
      }

      // optional int32 Sign = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_)));
          set_has_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_BindPhone;
        break;
      }

      // optional int32 BindPhone = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BindPhone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindphone_)));
          set_has_bindphone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ShCirFriends;
        break;
      }

      // optional string ShCirFriends = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShCirFriends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shcirfriends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shcirfriends().data(), this->shcirfriends().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_ShoppingMall;
        break;
      }

      // optional int32 ShoppingMall = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShoppingMall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoppingmall_)));
          set_has_shoppingmall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_SetUp;
        break;
      }

      // optional int32 SetUp = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SetUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setup_)));
          set_has_setup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_Share;
        break;
      }

      // optional int32 Share = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Share:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &share_)));
          set_has_share();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_ShFriends;
        break;
      }

      // optional int32 ShFriends = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShFriends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shfriends_)));
          set_has_shfriends();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_NewGift;
        break;
      }

      // optional int32 NewGift = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewGift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newgift_)));
          set_has_newgift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionalConfig1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bank = 1;
  if (has_bank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bank(), output);
  }

  // optional int32 actCard = 2;
  if (has_actcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actcard(), output);
  }

  // optional int32 ReliefMoney = 3;
  if (has_reliefmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reliefmoney(), output);
  }

  // optional int32 Activity = 4;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->activity(), output);
  }

  // optional int32 MonCard = 5;
  if (has_moncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->moncard(), output);
  }

  // optional int32 DailyGift = 6;
  if (has_dailygift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dailygift(), output);
  }

  // optional int32 RankList = 7;
  if (has_ranklist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ranklist(), output);
  }

  // optional int32 NewCard = 8;
  if (has_newcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->newcard(), output);
  }

  // optional int32 GivePresent = 9;
  if (has_givepresent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->givepresent(), output);
  }

  // optional int32 isAudit = 10;
  if (has_isaudit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isaudit(), output);
  }

  // optional int32 isH5Pay = 11;
  if (has_ish5pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ish5pay(), output);
  }

  // optional int32 HorseLamp = 12;
  if (has_horselamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->horselamp(), output);
  }

  // optional int32 Extension = 13;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->extension(), output);
  }

  // optional string RunContent = 14;
  if (has_runcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->runcontent().data(), this->runcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->runcontent(), output);
  }

  // optional int32 ReliefMoneyShare = 15;
  if (has_reliefmoneyshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->reliefmoneyshare(), output);
  }

  // optional int32 Register = 16;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->register_(), output);
  }

  // optional int32 PersonalCenter = 17;
  if (has_personalcenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->personalcenter(), output);
  }

  // optional int32 ExchangeCenter = 18;
  if (has_exchangecenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->exchangecenter(), output);
  }

  // optional int32 Sign = 19;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sign(), output);
  }

  // optional int32 BindPhone = 20;
  if (has_bindphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bindphone(), output);
  }

  // optional string ShCirFriends = 21;
  if (has_shcirfriends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shcirfriends().data(), this->shcirfriends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->shcirfriends(), output);
  }

  // optional int32 ShoppingMall = 22;
  if (has_shoppingmall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->shoppingmall(), output);
  }

  // optional int32 SetUp = 23;
  if (has_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->setup(), output);
  }

  // optional int32 Share = 24;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->share(), output);
  }

  // optional int32 ShFriends = 25;
  if (has_shfriends()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->shfriends(), output);
  }

  // optional int32 NewGift = 26;
  if (has_newgift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->newgift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionalConfig1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bank = 1;
  if (has_bank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bank(), target);
  }

  // optional int32 actCard = 2;
  if (has_actcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actcard(), target);
  }

  // optional int32 ReliefMoney = 3;
  if (has_reliefmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reliefmoney(), target);
  }

  // optional int32 Activity = 4;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->activity(), target);
  }

  // optional int32 MonCard = 5;
  if (has_moncard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->moncard(), target);
  }

  // optional int32 DailyGift = 6;
  if (has_dailygift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dailygift(), target);
  }

  // optional int32 RankList = 7;
  if (has_ranklist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ranklist(), target);
  }

  // optional int32 NewCard = 8;
  if (has_newcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->newcard(), target);
  }

  // optional int32 GivePresent = 9;
  if (has_givepresent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->givepresent(), target);
  }

  // optional int32 isAudit = 10;
  if (has_isaudit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->isaudit(), target);
  }

  // optional int32 isH5Pay = 11;
  if (has_ish5pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ish5pay(), target);
  }

  // optional int32 HorseLamp = 12;
  if (has_horselamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->horselamp(), target);
  }

  // optional int32 Extension = 13;
  if (has_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->extension(), target);
  }

  // optional string RunContent = 14;
  if (has_runcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->runcontent().data(), this->runcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->runcontent(), target);
  }

  // optional int32 ReliefMoneyShare = 15;
  if (has_reliefmoneyshare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->reliefmoneyshare(), target);
  }

  // optional int32 Register = 16;
  if (has_register_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->register_(), target);
  }

  // optional int32 PersonalCenter = 17;
  if (has_personalcenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->personalcenter(), target);
  }

  // optional int32 ExchangeCenter = 18;
  if (has_exchangecenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->exchangecenter(), target);
  }

  // optional int32 Sign = 19;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->sign(), target);
  }

  // optional int32 BindPhone = 20;
  if (has_bindphone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bindphone(), target);
  }

  // optional string ShCirFriends = 21;
  if (has_shcirfriends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shcirfriends().data(), this->shcirfriends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->shcirfriends(), target);
  }

  // optional int32 ShoppingMall = 22;
  if (has_shoppingmall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->shoppingmall(), target);
  }

  // optional int32 SetUp = 23;
  if (has_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->setup(), target);
  }

  // optional int32 Share = 24;
  if (has_share()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->share(), target);
  }

  // optional int32 ShFriends = 25;
  if (has_shfriends()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->shfriends(), target);
  }

  // optional int32 NewGift = 26;
  if (has_newgift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->newgift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionalConfig1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bank = 1;
    if (has_bank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bank());
    }

    // optional int32 actCard = 2;
    if (has_actcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actcard());
    }

    // optional int32 ReliefMoney = 3;
    if (has_reliefmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reliefmoney());
    }

    // optional int32 Activity = 4;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity());
    }

    // optional int32 MonCard = 5;
    if (has_moncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moncard());
    }

    // optional int32 DailyGift = 6;
    if (has_dailygift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailygift());
    }

    // optional int32 RankList = 7;
    if (has_ranklist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranklist());
    }

    // optional int32 NewCard = 8;
    if (has_newcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newcard());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 GivePresent = 9;
    if (has_givepresent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->givepresent());
    }

    // optional int32 isAudit = 10;
    if (has_isaudit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isaudit());
    }

    // optional int32 isH5Pay = 11;
    if (has_ish5pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ish5pay());
    }

    // optional int32 HorseLamp = 12;
    if (has_horselamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horselamp());
    }

    // optional int32 Extension = 13;
    if (has_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extension());
    }

    // optional string RunContent = 14;
    if (has_runcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->runcontent());
    }

    // optional int32 ReliefMoneyShare = 15;
    if (has_reliefmoneyshare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reliefmoneyshare());
    }

    // optional int32 Register = 16;
    if (has_register_()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->register_());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 PersonalCenter = 17;
    if (has_personalcenter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->personalcenter());
    }

    // optional int32 ExchangeCenter = 18;
    if (has_exchangecenter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchangecenter());
    }

    // optional int32 Sign = 19;
    if (has_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign());
    }

    // optional int32 BindPhone = 20;
    if (has_bindphone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindphone());
    }

    // optional string ShCirFriends = 21;
    if (has_shcirfriends()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shcirfriends());
    }

    // optional int32 ShoppingMall = 22;
    if (has_shoppingmall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoppingmall());
    }

    // optional int32 SetUp = 23;
    if (has_setup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setup());
    }

    // optional int32 Share = 24;
    if (has_share()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->share());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 ShFriends = 25;
    if (has_shfriends()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shfriends());
    }

    // optional int32 NewGift = 26;
    if (has_newgift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newgift());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionalConfig1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionalConfig1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionalConfig1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionalConfig1::MergeFrom(const FunctionalConfig1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bank()) {
      set_bank(from.bank());
    }
    if (from.has_actcard()) {
      set_actcard(from.actcard());
    }
    if (from.has_reliefmoney()) {
      set_reliefmoney(from.reliefmoney());
    }
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_moncard()) {
      set_moncard(from.moncard());
    }
    if (from.has_dailygift()) {
      set_dailygift(from.dailygift());
    }
    if (from.has_ranklist()) {
      set_ranklist(from.ranklist());
    }
    if (from.has_newcard()) {
      set_newcard(from.newcard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_givepresent()) {
      set_givepresent(from.givepresent());
    }
    if (from.has_isaudit()) {
      set_isaudit(from.isaudit());
    }
    if (from.has_ish5pay()) {
      set_ish5pay(from.ish5pay());
    }
    if (from.has_horselamp()) {
      set_horselamp(from.horselamp());
    }
    if (from.has_extension()) {
      set_extension(from.extension());
    }
    if (from.has_runcontent()) {
      set_runcontent(from.runcontent());
    }
    if (from.has_reliefmoneyshare()) {
      set_reliefmoneyshare(from.reliefmoneyshare());
    }
    if (from.has_register_()) {
      set_register_(from.register_());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_personalcenter()) {
      set_personalcenter(from.personalcenter());
    }
    if (from.has_exchangecenter()) {
      set_exchangecenter(from.exchangecenter());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_bindphone()) {
      set_bindphone(from.bindphone());
    }
    if (from.has_shcirfriends()) {
      set_shcirfriends(from.shcirfriends());
    }
    if (from.has_shoppingmall()) {
      set_shoppingmall(from.shoppingmall());
    }
    if (from.has_setup()) {
      set_setup(from.setup());
    }
    if (from.has_share()) {
      set_share(from.share());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_shfriends()) {
      set_shfriends(from.shfriends());
    }
    if (from.has_newgift()) {
      set_newgift(from.newgift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionalConfig1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionalConfig1::CopyFrom(const FunctionalConfig1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionalConfig1::IsInitialized() const {

  return true;
}

void FunctionalConfig1::Swap(FunctionalConfig1* other) {
  if (other != this) {
    std::swap(bank_, other->bank_);
    std::swap(actcard_, other->actcard_);
    std::swap(reliefmoney_, other->reliefmoney_);
    std::swap(activity_, other->activity_);
    std::swap(moncard_, other->moncard_);
    std::swap(dailygift_, other->dailygift_);
    std::swap(ranklist_, other->ranklist_);
    std::swap(newcard_, other->newcard_);
    std::swap(givepresent_, other->givepresent_);
    std::swap(isaudit_, other->isaudit_);
    std::swap(ish5pay_, other->ish5pay_);
    std::swap(horselamp_, other->horselamp_);
    std::swap(extension_, other->extension_);
    std::swap(runcontent_, other->runcontent_);
    std::swap(reliefmoneyshare_, other->reliefmoneyshare_);
    std::swap(register__, other->register__);
    std::swap(personalcenter_, other->personalcenter_);
    std::swap(exchangecenter_, other->exchangecenter_);
    std::swap(sign_, other->sign_);
    std::swap(bindphone_, other->bindphone_);
    std::swap(shcirfriends_, other->shcirfriends_);
    std::swap(shoppingmall_, other->shoppingmall_);
    std::swap(setup_, other->setup_);
    std::swap(share_, other->share_);
    std::swap(shfriends_, other->shfriends_);
    std::swap(newgift_, other->newgift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionalConfig1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionalConfig1_descriptor_;
  metadata.reflection = FunctionalConfig1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckDraw::kActivityTimeFieldNumber;
const int LuckDraw::kLuchDrawAmountFieldNumber;
const int LuckDraw::kLuchDrawNumFieldNumber;
#endif  // !_MSC_VER

LuckDraw::LuckDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuckDraw::InitAsDefaultInstance() {
}

LuckDraw::LuckDraw(const LuckDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuckDraw::SharedCtor() {
  _cached_size_ = 0;
  activitytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  luchdrawamount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  luchdrawnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckDraw::~LuckDraw() {
  SharedDtor();
}

void LuckDraw::SharedDtor() {
  if (activitytime_ != &::google::protobuf::internal::kEmptyString) {
    delete activitytime_;
  }
  if (luchdrawamount_ != &::google::protobuf::internal::kEmptyString) {
    delete luchdrawamount_;
  }
  if (this != default_instance_) {
  }
}

void LuckDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckDraw_descriptor_;
}

const LuckDraw& LuckDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

LuckDraw* LuckDraw::default_instance_ = NULL;

LuckDraw* LuckDraw::New() const {
  return new LuckDraw;
}

void LuckDraw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activitytime()) {
      if (activitytime_ != &::google::protobuf::internal::kEmptyString) {
        activitytime_->clear();
      }
    }
    if (has_luchdrawamount()) {
      if (luchdrawamount_ != &::google::protobuf::internal::kEmptyString) {
        luchdrawamount_->clear();
      }
    }
    luchdrawnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string activityTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activitytime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activitytime().data(), this->activitytime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_luchDrawAmount;
        break;
      }

      // optional string luchDrawAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_luchDrawAmount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luchdrawamount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->luchdrawamount().data(), this->luchdrawamount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_luchDrawNum;
        break;
      }

      // optional int32 luchDrawNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luchDrawNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luchdrawnum_)));
          set_has_luchdrawnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LuckDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string activityTime = 1;
  if (has_activitytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activitytime().data(), this->activitytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activitytime(), output);
  }

  // optional string luchDrawAmount = 2;
  if (has_luchdrawamount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->luchdrawamount().data(), this->luchdrawamount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->luchdrawamount(), output);
  }

  // optional int32 luchDrawNum = 3;
  if (has_luchdrawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->luchdrawnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuckDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string activityTime = 1;
  if (has_activitytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activitytime().data(), this->activitytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->activitytime(), target);
  }

  // optional string luchDrawAmount = 2;
  if (has_luchdrawamount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->luchdrawamount().data(), this->luchdrawamount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->luchdrawamount(), target);
  }

  // optional int32 luchDrawNum = 3;
  if (has_luchdrawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->luchdrawnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuckDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string activityTime = 1;
    if (has_activitytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activitytime());
    }

    // optional string luchDrawAmount = 2;
    if (has_luchdrawamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->luchdrawamount());
    }

    // optional int32 luchDrawNum = 3;
    if (has_luchdrawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luchdrawnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckDraw::MergeFrom(const LuckDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activitytime()) {
      set_activitytime(from.activitytime());
    }
    if (from.has_luchdrawamount()) {
      set_luchdrawamount(from.luchdrawamount());
    }
    if (from.has_luchdrawnum()) {
      set_luchdrawnum(from.luchdrawnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckDraw::CopyFrom(const LuckDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckDraw::IsInitialized() const {

  return true;
}

void LuckDraw::Swap(LuckDraw* other) {
  if (other != this) {
    std::swap(activitytime_, other->activitytime_);
    std::swap(luchdrawamount_, other->luchdrawamount_);
    std::swap(luchdrawnum_, other->luchdrawnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckDraw_descriptor_;
  metadata.reflection = LuckDraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeCase::kPriceFieldNumber;
const int RechargeCase::kCasegradeidFieldNumber;
const int RechargeCase::kScoreFieldNumber;
const int RechargeCase::kMidFieldNumber;
const int RechargeCase::kMembershipperiodFieldNumber;
#endif  // !_MSC_VER

RechargeCase::RechargeCase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeCase::InitAsDefaultInstance() {
}

RechargeCase::RechargeCase(const RechargeCase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeCase::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0;
  casegradeid_ = 0;
  score_ = 0;
  mid_ = 0;
  membershipperiod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeCase::~RechargeCase() {
  SharedDtor();
}

void RechargeCase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargeCase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeCase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeCase_descriptor_;
}

const RechargeCase& RechargeCase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

RechargeCase* RechargeCase::default_instance_ = NULL;

RechargeCase* RechargeCase::New() const {
  return new RechargeCase;
}

void RechargeCase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_ = 0;
    casegradeid_ = 0;
    score_ = 0;
    mid_ = 0;
    membershipperiod_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeCase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_casegradeid;
        break;
      }

      // optional int32 casegradeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_casegradeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &casegradeid_)));
          set_has_casegradeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mid;
        break;
      }

      // optional int32 mid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_membershipperiod;
        break;
      }

      // optional int32 membershipperiod = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_membershipperiod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membershipperiod_)));
          set_has_membershipperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeCase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->price(), output);
  }

  // optional int32 casegradeid = 2;
  if (has_casegradeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->casegradeid(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional int32 mid = 4;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mid(), output);
  }

  // optional int32 membershipperiod = 5;
  if (has_membershipperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->membershipperiod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeCase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->price(), target);
  }

  // optional int32 casegradeid = 2;
  if (has_casegradeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->casegradeid(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional int32 mid = 4;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mid(), target);
  }

  // optional int32 membershipperiod = 5;
  if (has_membershipperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->membershipperiod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeCase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 casegradeid = 2;
    if (has_casegradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->casegradeid());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 mid = 4;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional int32 membershipperiod = 5;
    if (has_membershipperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membershipperiod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeCase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeCase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeCase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeCase::MergeFrom(const RechargeCase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_casegradeid()) {
      set_casegradeid(from.casegradeid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_membershipperiod()) {
      set_membershipperiod(from.membershipperiod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeCase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeCase::CopyFrom(const RechargeCase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeCase::IsInitialized() const {

  return true;
}

void RechargeCase::Swap(RechargeCase* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(casegradeid_, other->casegradeid_);
    std::swap(score_, other->score_);
    std::swap(mid_, other->mid_);
    std::swap(membershipperiod_, other->membershipperiod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeCase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeCase_descriptor_;
  metadata.reflection = RechargeCase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoxDate::kKeyFieldNumber;
const int BoxDate::kBoxDateInfoFieldNumber;
#endif  // !_MSC_VER

BoxDate::BoxDate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoxDate::InitAsDefaultInstance() {
}

BoxDate::BoxDate(const BoxDate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoxDate::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxDate::~BoxDate() {
  SharedDtor();
}

void BoxDate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxDate_descriptor_;
}

const BoxDate& BoxDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

BoxDate* BoxDate::default_instance_ = NULL;

BoxDate* BoxDate::New() const {
  return new BoxDate;
}

void BoxDate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  boxdateinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boxDateInfo;
        break;
      }

      // repeated .BoxDateInfo boxDateInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxDateInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxdateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boxDateInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // repeated .BoxDateInfo boxDateInfo = 2;
  for (int i = 0; i < this->boxdateinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boxdateinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoxDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // repeated .BoxDateInfo boxDateInfo = 2;
  for (int i = 0; i < this->boxdateinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boxdateinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoxDate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  // repeated .BoxDateInfo boxDateInfo = 2;
  total_size += 1 * this->boxdateinfo_size();
  for (int i = 0; i < this->boxdateinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxdateinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxDate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxDate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxDate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxDate::MergeFrom(const BoxDate& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxdateinfo_.MergeFrom(from.boxdateinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDate::CopyFrom(const BoxDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDate::IsInitialized() const {

  return true;
}

void BoxDate::Swap(BoxDate* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    boxdateinfo_.Swap(&other->boxdateinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxDate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxDate_descriptor_;
  metadata.reflection = BoxDate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoxDateInfo::kGoodsTypeFieldNumber;
const int BoxDateInfo::kGoodsValueFieldNumber;
#endif  // !_MSC_VER

BoxDateInfo::BoxDateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoxDateInfo::InitAsDefaultInstance() {
}

BoxDateInfo::BoxDateInfo(const BoxDateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoxDateInfo::SharedCtor() {
  _cached_size_ = 0;
  goodstype_ = 0;
  goodsvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxDateInfo::~BoxDateInfo() {
  SharedDtor();
}

void BoxDateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxDateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxDateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxDateInfo_descriptor_;
}

const BoxDateInfo& BoxDateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

BoxDateInfo* BoxDateInfo::default_instance_ = NULL;

BoxDateInfo* BoxDateInfo::New() const {
  return new BoxDateInfo;
}

void BoxDateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goodstype_ = 0;
    goodsvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxDateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 goodsType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodstype_)));
          set_has_goodstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goodsValue;
        break;
      }

      // optional int32 goodsValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsvalue_)));
          set_has_goodsvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxDateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 goodsType = 1;
  if (has_goodstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->goodstype(), output);
  }

  // optional int32 goodsValue = 2;
  if (has_goodsvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goodsvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoxDateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 goodsType = 1;
  if (has_goodstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->goodstype(), target);
  }

  // optional int32 goodsValue = 2;
  if (has_goodsvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goodsvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoxDateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 goodsType = 1;
    if (has_goodstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodstype());
    }

    // optional int32 goodsValue = 2;
    if (has_goodsvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxDateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxDateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxDateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxDateInfo::MergeFrom(const BoxDateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodstype()) {
      set_goodstype(from.goodstype());
    }
    if (from.has_goodsvalue()) {
      set_goodsvalue(from.goodsvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxDateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDateInfo::CopyFrom(const BoxDateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDateInfo::IsInitialized() const {

  return true;
}

void BoxDateInfo::Swap(BoxDateInfo* other) {
  if (other != this) {
    std::swap(goodstype_, other->goodstype_);
    std::swap(goodsvalue_, other->goodsvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxDateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxDateInfo_descriptor_;
  metadata.reflection = BoxDateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoxConfig::kBoxIDFieldNumber;
const int BoxConfig::kBoxTypeFieldNumber;
const int BoxConfig::kBoxValueFieldNumber;
#endif  // !_MSC_VER

BoxConfig::BoxConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoxConfig::InitAsDefaultInstance() {
}

BoxConfig::BoxConfig(const BoxConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoxConfig::SharedCtor() {
  _cached_size_ = 0;
  boxid_ = 0;
  boxtype_ = 0;
  boxvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxConfig::~BoxConfig() {
  SharedDtor();
}

void BoxConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxConfig_descriptor_;
}

const BoxConfig& BoxConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

BoxConfig* BoxConfig::default_instance_ = NULL;

BoxConfig* BoxConfig::New() const {
  return new BoxConfig;
}

void BoxConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boxid_ = 0;
    boxtype_ = 0;
    boxvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boxID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxType;
        break;
      }

      // optional int32 boxType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxtype_)));
          set_has_boxtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boxValue;
        break;
      }

      // optional int32 boxValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxvalue_)));
          set_has_boxvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boxID = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boxid(), output);
  }

  // optional int32 boxType = 2;
  if (has_boxtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->boxtype(), output);
  }

  // optional int32 boxValue = 3;
  if (has_boxvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boxvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoxConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boxID = 1;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boxid(), target);
  }

  // optional int32 boxType = 2;
  if (has_boxtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->boxtype(), target);
  }

  // optional int32 boxValue = 3;
  if (has_boxvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boxvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoxConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boxID = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxid());
    }

    // optional int32 boxType = 2;
    if (has_boxtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxtype());
    }

    // optional int32 boxValue = 3;
    if (has_boxvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxConfig::MergeFrom(const BoxConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_boxtype()) {
      set_boxtype(from.boxtype());
    }
    if (from.has_boxvalue()) {
      set_boxvalue(from.boxvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxConfig::CopyFrom(const BoxConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxConfig::IsInitialized() const {

  return true;
}

void BoxConfig::Swap(BoxConfig* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(boxtype_, other->boxtype_);
    std::swap(boxvalue_, other->boxvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxConfig_descriptor_;
  metadata.reflection = BoxConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeConfig::kPayIDFieldNumber;
const int RechargeConfig::kValueFieldNumber;
#endif  // !_MSC_VER

RechargeConfig::RechargeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeConfig::InitAsDefaultInstance() {
}

RechargeConfig::RechargeConfig(const RechargeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeConfig::SharedCtor() {
  _cached_size_ = 0;
  payid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeConfig::~RechargeConfig() {
  SharedDtor();
}

void RechargeConfig::SharedDtor() {
  if (payid_ != &::google::protobuf::internal::kEmptyString) {
    delete payid_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RechargeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeConfig_descriptor_;
}

const RechargeConfig& RechargeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

RechargeConfig* RechargeConfig::default_instance_ = NULL;

RechargeConfig* RechargeConfig::New() const {
  return new RechargeConfig;
}

void RechargeConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_payid()) {
      if (payid_ != &::google::protobuf::internal::kEmptyString) {
        payid_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string payID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payid().data(), this->payid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string payID = 1;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payid().data(), this->payid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->payid(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string payID = 1;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payid().data(), this->payid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->payid(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string payID = 1;
    if (has_payid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payid());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeConfig::MergeFrom(const RechargeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payid()) {
      set_payid(from.payid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeConfig::CopyFrom(const RechargeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeConfig::IsInitialized() const {

  return true;
}

void RechargeConfig::Swap(RechargeConfig* other) {
  if (other != this) {
    std::swap(payid_, other->payid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeConfig_descriptor_;
  metadata.reflection = RechargeConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewGift::kPayIDFieldNumber;
const int NewGift::kGoldFieldNumber;
const int NewGift::kMultipleFieldNumber;
const int NewGift::kMemberFieldNumber;
const int NewGift::kMemberdayFieldNumber;
const int NewGift::kActualvalueFieldNumber;
const int NewGift::kOriginalpriceFieldNumber;
const int NewGift::kNowpriceFieldNumber;
#endif  // !_MSC_VER

NewGift::NewGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewGift::InitAsDefaultInstance() {
}

NewGift::NewGift(const NewGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewGift::SharedCtor() {
  _cached_size_ = 0;
  payid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = GOOGLE_LONGLONG(0);
  multiple_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  member_ = 0;
  memberday_ = 0;
  actualvalue_ = 0;
  originalprice_ = 0;
  nowprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewGift::~NewGift() {
  SharedDtor();
}

void NewGift::SharedDtor() {
  if (payid_ != &::google::protobuf::internal::kEmptyString) {
    delete payid_;
  }
  if (multiple_ != &::google::protobuf::internal::kEmptyString) {
    delete multiple_;
  }
  if (this != default_instance_) {
  }
}

void NewGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewGift_descriptor_;
}

const NewGift& NewGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

NewGift* NewGift::default_instance_ = NULL;

NewGift* NewGift::New() const {
  return new NewGift;
}

void NewGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_payid()) {
      if (payid_ != &::google::protobuf::internal::kEmptyString) {
        payid_->clear();
      }
    }
    gold_ = GOOGLE_LONGLONG(0);
    if (has_multiple()) {
      if (multiple_ != &::google::protobuf::internal::kEmptyString) {
        multiple_->clear();
      }
    }
    member_ = 0;
    memberday_ = 0;
    actualvalue_ = 0;
    originalprice_ = 0;
    nowprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string payID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payid().data(), this->payid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_multiple;
        break;
      }

      // optional string multiple = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multiple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multiple()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multiple().data(), this->multiple().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_member;
        break;
      }

      // optional int32 member = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_)));
          set_has_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_memberday;
        break;
      }

      // optional int32 memberday = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberday_)));
          set_has_memberday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_actualvalue;
        break;
      }

      // optional int32 actualvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actualvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualvalue_)));
          set_has_actualvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_originalprice;
        break;
      }

      // optional int32 originalprice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_originalprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originalprice_)));
          set_has_originalprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nowprice;
        break;
      }

      // optional int32 nowprice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowprice_)));
          set_has_nowprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string payID = 1;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payid().data(), this->payid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->payid(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional string multiple = 3;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multiple().data(), this->multiple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->multiple(), output);
  }

  // optional int32 member = 4;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->member(), output);
  }

  // optional int32 memberday = 5;
  if (has_memberday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->memberday(), output);
  }

  // optional int32 actualvalue = 6;
  if (has_actualvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->actualvalue(), output);
  }

  // optional int32 originalprice = 7;
  if (has_originalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->originalprice(), output);
  }

  // optional int32 nowprice = 8;
  if (has_nowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nowprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string payID = 1;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payid().data(), this->payid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->payid(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional string multiple = 3;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multiple().data(), this->multiple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->multiple(), target);
  }

  // optional int32 member = 4;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->member(), target);
  }

  // optional int32 memberday = 5;
  if (has_memberday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->memberday(), target);
  }

  // optional int32 actualvalue = 6;
  if (has_actualvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->actualvalue(), target);
  }

  // optional int32 originalprice = 7;
  if (has_originalprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->originalprice(), target);
  }

  // optional int32 nowprice = 8;
  if (has_nowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nowprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string payID = 1;
    if (has_payid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payid());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional string multiple = 3;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multiple());
    }

    // optional int32 member = 4;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member());
    }

    // optional int32 memberday = 5;
    if (has_memberday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberday());
    }

    // optional int32 actualvalue = 6;
    if (has_actualvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actualvalue());
    }

    // optional int32 originalprice = 7;
    if (has_originalprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originalprice());
    }

    // optional int32 nowprice = 8;
    if (has_nowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewGift::MergeFrom(const NewGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payid()) {
      set_payid(from.payid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_member()) {
      set_member(from.member());
    }
    if (from.has_memberday()) {
      set_memberday(from.memberday());
    }
    if (from.has_actualvalue()) {
      set_actualvalue(from.actualvalue());
    }
    if (from.has_originalprice()) {
      set_originalprice(from.originalprice());
    }
    if (from.has_nowprice()) {
      set_nowprice(from.nowprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewGift::CopyFrom(const NewGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewGift::IsInitialized() const {

  return true;
}

void NewGift::Swap(NewGift* other) {
  if (other != this) {
    std::swap(payid_, other->payid_);
    std::swap(gold_, other->gold_);
    std::swap(multiple_, other->multiple_);
    std::swap(member_, other->member_);
    std::swap(memberday_, other->memberday_);
    std::swap(actualvalue_, other->actualvalue_);
    std::swap(originalprice_, other->originalprice_);
    std::swap(nowprice_, other->nowprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewGift_descriptor_;
  metadata.reflection = NewGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lantern::kPayIDFieldNumber;
const int Lantern::kGoldFieldNumber;
const int Lantern::kMultipleFieldNumber;
const int Lantern::kMemberFieldNumber;
const int Lantern::kMemberdayFieldNumber;
const int Lantern::kActualvalueFieldNumber;
const int Lantern::kOriginalpriceFieldNumber;
const int Lantern::kNowpriceFieldNumber;
#endif  // !_MSC_VER

Lantern::Lantern()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lantern::InitAsDefaultInstance() {
}

Lantern::Lantern(const Lantern& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lantern::SharedCtor() {
  _cached_size_ = 0;
  payid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = GOOGLE_LONGLONG(0);
  multiple_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  member_ = 0;
  memberday_ = 0;
  actualvalue_ = 0;
  originalprice_ = 0;
  nowprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lantern::~Lantern() {
  SharedDtor();
}

void Lantern::SharedDtor() {
  if (payid_ != &::google::protobuf::internal::kEmptyString) {
    delete payid_;
  }
  if (multiple_ != &::google::protobuf::internal::kEmptyString) {
    delete multiple_;
  }
  if (this != default_instance_) {
  }
}

void Lantern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lantern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lantern_descriptor_;
}

const Lantern& Lantern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

Lantern* Lantern::default_instance_ = NULL;

Lantern* Lantern::New() const {
  return new Lantern;
}

void Lantern::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_payid()) {
      if (payid_ != &::google::protobuf::internal::kEmptyString) {
        payid_->clear();
      }
    }
    gold_ = GOOGLE_LONGLONG(0);
    if (has_multiple()) {
      if (multiple_ != &::google::protobuf::internal::kEmptyString) {
        multiple_->clear();
      }
    }
    member_ = 0;
    memberday_ = 0;
    actualvalue_ = 0;
    originalprice_ = 0;
    nowprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lantern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string payID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payid().data(), this->payid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_multiple;
        break;
      }

      // optional string multiple = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multiple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multiple()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multiple().data(), this->multiple().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_member;
        break;
      }

      // optional int32 member = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_)));
          set_has_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_memberday;
        break;
      }

      // optional int32 memberday = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberday_)));
          set_has_memberday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_actualvalue;
        break;
      }

      // optional int32 actualvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actualvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualvalue_)));
          set_has_actualvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_originalprice;
        break;
      }

      // optional int32 originalprice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_originalprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originalprice_)));
          set_has_originalprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nowprice;
        break;
      }

      // optional int32 nowprice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowprice_)));
          set_has_nowprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lantern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string payID = 1;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payid().data(), this->payid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->payid(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional string multiple = 3;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multiple().data(), this->multiple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->multiple(), output);
  }

  // optional int32 member = 4;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->member(), output);
  }

  // optional int32 memberday = 5;
  if (has_memberday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->memberday(), output);
  }

  // optional int32 actualvalue = 6;
  if (has_actualvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->actualvalue(), output);
  }

  // optional int32 originalprice = 7;
  if (has_originalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->originalprice(), output);
  }

  // optional int32 nowprice = 8;
  if (has_nowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nowprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lantern::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string payID = 1;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payid().data(), this->payid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->payid(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional string multiple = 3;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multiple().data(), this->multiple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->multiple(), target);
  }

  // optional int32 member = 4;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->member(), target);
  }

  // optional int32 memberday = 5;
  if (has_memberday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->memberday(), target);
  }

  // optional int32 actualvalue = 6;
  if (has_actualvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->actualvalue(), target);
  }

  // optional int32 originalprice = 7;
  if (has_originalprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->originalprice(), target);
  }

  // optional int32 nowprice = 8;
  if (has_nowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nowprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lantern::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string payID = 1;
    if (has_payid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payid());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional string multiple = 3;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multiple());
    }

    // optional int32 member = 4;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member());
    }

    // optional int32 memberday = 5;
    if (has_memberday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberday());
    }

    // optional int32 actualvalue = 6;
    if (has_actualvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actualvalue());
    }

    // optional int32 originalprice = 7;
    if (has_originalprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originalprice());
    }

    // optional int32 nowprice = 8;
    if (has_nowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lantern::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lantern* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lantern*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lantern::MergeFrom(const Lantern& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payid()) {
      set_payid(from.payid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_member()) {
      set_member(from.member());
    }
    if (from.has_memberday()) {
      set_memberday(from.memberday());
    }
    if (from.has_actualvalue()) {
      set_actualvalue(from.actualvalue());
    }
    if (from.has_originalprice()) {
      set_originalprice(from.originalprice());
    }
    if (from.has_nowprice()) {
      set_nowprice(from.nowprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lantern::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lantern::CopyFrom(const Lantern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lantern::IsInitialized() const {

  return true;
}

void Lantern::Swap(Lantern* other) {
  if (other != this) {
    std::swap(payid_, other->payid_);
    std::swap(gold_, other->gold_);
    std::swap(multiple_, other->multiple_);
    std::swap(member_, other->member_);
    std::swap(memberday_, other->memberday_);
    std::swap(actualvalue_, other->actualvalue_);
    std::swap(originalprice_, other->originalprice_);
    std::swap(nowprice_, other->nowprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lantern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lantern_descriptor_;
  metadata.reflection = Lantern_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonthlyCard::kDaysFieldNumber;
const int MonthlyCard::kStatusFieldNumber;
const int MonthlyCard::kHasGettedFieldNumber;
const int MonthlyCard::kDeadLineFieldNumber;
#endif  // !_MSC_VER

MonthlyCard::MonthlyCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonthlyCard::InitAsDefaultInstance() {
}

MonthlyCard::MonthlyCard(const MonthlyCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonthlyCard::SharedCtor() {
  _cached_size_ = 0;
  days_ = 0;
  status_ = 0;
  hasgetted_ = 0;
  deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthlyCard::~MonthlyCard() {
  SharedDtor();
}

void MonthlyCard::SharedDtor() {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    delete deadline_;
  }
  if (this != default_instance_) {
  }
}

void MonthlyCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonthlyCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonthlyCard_descriptor_;
}

const MonthlyCard& MonthlyCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

MonthlyCard* MonthlyCard::default_instance_ = NULL;

MonthlyCard* MonthlyCard::New() const {
  return new MonthlyCard;
}

void MonthlyCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    days_ = 0;
    status_ = 0;
    hasgetted_ = 0;
    if (has_deadline()) {
      if (deadline_ != &::google::protobuf::internal::kEmptyString) {
        deadline_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonthlyCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 days = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasGetted;
        break;
      }

      // optional int32 hasGetted = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGetted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasgetted_)));
          set_has_hasgetted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deadLine;
        break;
      }

      // optional string deadLine = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deadLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deadline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deadline().data(), this->deadline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonthlyCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 days = 1;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->days(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 hasGetted = 3;
  if (has_hasgetted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hasgetted(), output);
  }

  // optional string deadLine = 4;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deadline().data(), this->deadline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->deadline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonthlyCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 days = 1;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->days(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 hasGetted = 3;
  if (has_hasgetted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hasgetted(), target);
  }

  // optional string deadLine = 4;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deadline().data(), this->deadline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deadline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonthlyCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 days = 1;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 hasGetted = 3;
    if (has_hasgetted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasgetted());
    }

    // optional string deadLine = 4;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deadline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthlyCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonthlyCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonthlyCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonthlyCard::MergeFrom(const MonthlyCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_hasgetted()) {
      set_hasgetted(from.hasgetted());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonthlyCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthlyCard::CopyFrom(const MonthlyCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthlyCard::IsInitialized() const {

  return true;
}

void MonthlyCard::Swap(MonthlyCard* other) {
  if (other != this) {
    std::swap(days_, other->days_);
    std::swap(status_, other->status_);
    std::swap(hasgetted_, other->hasgetted_);
    std::swap(deadline_, other->deadline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonthlyCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonthlyCard_descriptor_;
  metadata.reflection = MonthlyCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NovicePack::kDaynumFieldNumber;
const int NovicePack::kStatusFieldNumber;
const int NovicePack::kMoneyFieldNumber;
#endif  // !_MSC_VER

NovicePack::NovicePack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NovicePack::InitAsDefaultInstance() {
}

NovicePack::NovicePack(const NovicePack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NovicePack::SharedCtor() {
  _cached_size_ = 0;
  daynum_ = 0;
  status_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NovicePack::~NovicePack() {
  SharedDtor();
}

void NovicePack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NovicePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NovicePack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NovicePack_descriptor_;
}

const NovicePack& NovicePack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

NovicePack* NovicePack::default_instance_ = NULL;

NovicePack* NovicePack::New() const {
  return new NovicePack;
}

void NovicePack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daynum_ = 0;
    status_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NovicePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 daynum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynum_)));
          set_has_daynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_money;
        break;
      }

      // optional double money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NovicePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 daynum = 1;
  if (has_daynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->daynum(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional double money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NovicePack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 daynum = 1;
  if (has_daynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->daynum(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional double money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NovicePack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 daynum = 1;
    if (has_daynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynum());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional double money = 3;
    if (has_money()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NovicePack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NovicePack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NovicePack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NovicePack::MergeFrom(const NovicePack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daynum()) {
      set_daynum(from.daynum());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NovicePack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NovicePack::CopyFrom(const NovicePack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NovicePack::IsInitialized() const {

  return true;
}

void NovicePack::Swap(NovicePack* other) {
  if (other != this) {
    std::swap(daynum_, other->daynum_);
    std::swap(status_, other->status_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NovicePack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NovicePack_descriptor_;
  metadata.reflection = NovicePack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_NewDayRefresh::kGiftBagFieldNumber;
const int CMD_GP_NewDayRefresh::kHallFieldNumber;
const int CMD_GP_NewDayRefresh::kReliefFieldNumber;
const int CMD_GP_NewDayRefresh::kTodayHasSignedFieldNumber;
const int CMD_GP_NewDayRefresh::kAStatusFieldNumber;
#endif  // !_MSC_VER

CMD_GP_NewDayRefresh::CMD_GP_NewDayRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_NewDayRefresh::InitAsDefaultInstance() {
  giftbag_ = const_cast< ::GiftBag*>(&::GiftBag::default_instance());
  hall_ = const_cast< ::Hall*>(&::Hall::default_instance());
  relief_ = const_cast< ::Relief*>(&::Relief::default_instance());
}

CMD_GP_NewDayRefresh::CMD_GP_NewDayRefresh(const CMD_GP_NewDayRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_NewDayRefresh::SharedCtor() {
  _cached_size_ = 0;
  giftbag_ = NULL;
  hall_ = NULL;
  relief_ = NULL;
  todayhassigned_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  astatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_NewDayRefresh::~CMD_GP_NewDayRefresh() {
  SharedDtor();
}

void CMD_GP_NewDayRefresh::SharedDtor() {
  if (todayhassigned_ != &::google::protobuf::internal::kEmptyString) {
    delete todayhassigned_;
  }
  if (this != default_instance_) {
    delete giftbag_;
    delete hall_;
    delete relief_;
  }
}

void CMD_GP_NewDayRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_NewDayRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_NewDayRefresh_descriptor_;
}

const CMD_GP_NewDayRefresh& CMD_GP_NewDayRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_NewDayRefresh* CMD_GP_NewDayRefresh::default_instance_ = NULL;

CMD_GP_NewDayRefresh* CMD_GP_NewDayRefresh::New() const {
  return new CMD_GP_NewDayRefresh;
}

void CMD_GP_NewDayRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_giftbag()) {
      if (giftbag_ != NULL) giftbag_->::GiftBag::Clear();
    }
    if (has_hall()) {
      if (hall_ != NULL) hall_->::Hall::Clear();
    }
    if (has_relief()) {
      if (relief_ != NULL) relief_->::Relief::Clear();
    }
    if (has_todayhassigned()) {
      if (todayhassigned_ != &::google::protobuf::internal::kEmptyString) {
        todayhassigned_->clear();
      }
    }
    astatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_NewDayRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GiftBag giftBag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_giftbag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hall;
        break;
      }

      // optional .Hall hall = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_relief;
        break;
      }

      // optional .Relief relief = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_todayHasSigned;
        break;
      }

      // optional string todayHasSigned = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_todayHasSigned:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todayhassigned()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->todayhassigned().data(), this->todayhassigned().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_aStatus;
        break;
      }

      // optional int32 aStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &astatus_)));
          set_has_astatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_NewDayRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GiftBag giftBag = 1;
  if (has_giftbag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->giftbag(), output);
  }

  // optional .Hall hall = 2;
  if (has_hall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hall(), output);
  }

  // optional .Relief relief = 3;
  if (has_relief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->relief(), output);
  }

  // optional string todayHasSigned = 4;
  if (has_todayhassigned()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todayhassigned().data(), this->todayhassigned().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->todayhassigned(), output);
  }

  // optional int32 aStatus = 5;
  if (has_astatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->astatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_NewDayRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GiftBag giftBag = 1;
  if (has_giftbag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->giftbag(), target);
  }

  // optional .Hall hall = 2;
  if (has_hall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hall(), target);
  }

  // optional .Relief relief = 3;
  if (has_relief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->relief(), target);
  }

  // optional string todayHasSigned = 4;
  if (has_todayhassigned()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todayhassigned().data(), this->todayhassigned().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->todayhassigned(), target);
  }

  // optional int32 aStatus = 5;
  if (has_astatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->astatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_NewDayRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GiftBag giftBag = 1;
    if (has_giftbag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->giftbag());
    }

    // optional .Hall hall = 2;
    if (has_hall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hall());
    }

    // optional .Relief relief = 3;
    if (has_relief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relief());
    }

    // optional string todayHasSigned = 4;
    if (has_todayhassigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todayhassigned());
    }

    // optional int32 aStatus = 5;
    if (has_astatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->astatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_NewDayRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_NewDayRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_NewDayRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_NewDayRefresh::MergeFrom(const CMD_GP_NewDayRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftbag()) {
      mutable_giftbag()->::GiftBag::MergeFrom(from.giftbag());
    }
    if (from.has_hall()) {
      mutable_hall()->::Hall::MergeFrom(from.hall());
    }
    if (from.has_relief()) {
      mutable_relief()->::Relief::MergeFrom(from.relief());
    }
    if (from.has_todayhassigned()) {
      set_todayhassigned(from.todayhassigned());
    }
    if (from.has_astatus()) {
      set_astatus(from.astatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_NewDayRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_NewDayRefresh::CopyFrom(const CMD_GP_NewDayRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_NewDayRefresh::IsInitialized() const {

  return true;
}

void CMD_GP_NewDayRefresh::Swap(CMD_GP_NewDayRefresh* other) {
  if (other != this) {
    std::swap(giftbag_, other->giftbag_);
    std::swap(hall_, other->hall_);
    std::swap(relief_, other->relief_);
    std::swap(todayhassigned_, other->todayhassigned_);
    std::swap(astatus_, other->astatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_NewDayRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_NewDayRefresh_descriptor_;
  metadata.reflection = CMD_GP_NewDayRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kGiftBagFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kActivityConfigFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kRechargeCaseMoneyFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kMemberInfoFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kRechargeCaseBagFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kSecureFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kNoviceFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kHallFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kAStatusFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kContinuousDaysSignedFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kTeaRoomNameFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kReliefFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kNewGiftBagFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kTeaRoomQRFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kTodayHasSignedFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kActivityFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kMonthlyCardFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kHomeConfigFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kNovicePackFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kNewSkinFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kDwNewPlayerTimeFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kIsOpenMiniGameFieldNumber;
const int CMD_GP_LogonSuccess_CMD_GP_UserInfo::kLanternBagFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LogonSuccess_CMD_GP_UserInfo::CMD_GP_LogonSuccess_CMD_GP_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::InitAsDefaultInstance() {
  giftbag_ = const_cast< ::GiftBag*>(&::GiftBag::default_instance());
  memberinfo_ = const_cast< ::MemberInfo*>(&::MemberInfo::default_instance());
  rechargecasebag_ = const_cast< ::RechargeCaseBag*>(&::RechargeCaseBag::default_instance());
  secure_ = const_cast< ::Secure*>(&::Secure::default_instance());
  novice_ = const_cast< ::Novice*>(&::Novice::default_instance());
  hall_ = const_cast< ::Hall*>(&::Hall::default_instance());
  relief_ = const_cast< ::Relief*>(&::Relief::default_instance());
  newgiftbag_ = const_cast< ::NewGiftBag*>(&::NewGiftBag::default_instance());
  activity_ = const_cast< ::Activity*>(&::Activity::default_instance());
  monthlycard_ = const_cast< ::MonthlyCard*>(&::MonthlyCard::default_instance());
  homeconfig_ = const_cast< ::HomeConfig*>(&::HomeConfig::default_instance());
  lanternbag_ = const_cast< ::LanternBag*>(&::LanternBag::default_instance());
}

CMD_GP_LogonSuccess_CMD_GP_UserInfo::CMD_GP_LogonSuccess_CMD_GP_UserInfo(const CMD_GP_LogonSuccess_CMD_GP_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  giftbag_ = NULL;
  rechargecasemoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memberinfo_ = NULL;
  rechargecasebag_ = NULL;
  secure_ = NULL;
  novice_ = NULL;
  hall_ = NULL;
  astatus_ = 0;
  continuousdayssigned_ = 0;
  tearoomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relief_ = NULL;
  newgiftbag_ = NULL;
  tearoomqr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  todayhassigned_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activity_ = NULL;
  monthlycard_ = NULL;
  homeconfig_ = NULL;
  newskin_ = 0;
  dwnewplayertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isopenminigame_ = false;
  lanternbag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LogonSuccess_CMD_GP_UserInfo::~CMD_GP_LogonSuccess_CMD_GP_UserInfo() {
  SharedDtor();
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::SharedDtor() {
  if (rechargecasemoney_ != &::google::protobuf::internal::kEmptyString) {
    delete rechargecasemoney_;
  }
  if (tearoomname_ != &::google::protobuf::internal::kEmptyString) {
    delete tearoomname_;
  }
  if (tearoomqr_ != &::google::protobuf::internal::kEmptyString) {
    delete tearoomqr_;
  }
  if (todayhassigned_ != &::google::protobuf::internal::kEmptyString) {
    delete todayhassigned_;
  }
  if (dwnewplayertime_ != &::google::protobuf::internal::kEmptyString) {
    delete dwnewplayertime_;
  }
  if (this != default_instance_) {
    delete giftbag_;
    delete memberinfo_;
    delete rechargecasebag_;
    delete secure_;
    delete novice_;
    delete hall_;
    delete relief_;
    delete newgiftbag_;
    delete activity_;
    delete monthlycard_;
    delete homeconfig_;
    delete lanternbag_;
  }
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_LogonSuccess_CMD_GP_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_LogonSuccess_CMD_GP_UserInfo_descriptor_;
}

const CMD_GP_LogonSuccess_CMD_GP_UserInfo& CMD_GP_LogonSuccess_CMD_GP_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_LogonSuccess_CMD_GP_UserInfo* CMD_GP_LogonSuccess_CMD_GP_UserInfo::default_instance_ = NULL;

CMD_GP_LogonSuccess_CMD_GP_UserInfo* CMD_GP_LogonSuccess_CMD_GP_UserInfo::New() const {
  return new CMD_GP_LogonSuccess_CMD_GP_UserInfo;
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_giftbag()) {
      if (giftbag_ != NULL) giftbag_->::GiftBag::Clear();
    }
    if (has_rechargecasemoney()) {
      if (rechargecasemoney_ != &::google::protobuf::internal::kEmptyString) {
        rechargecasemoney_->clear();
      }
    }
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::MemberInfo::Clear();
    }
    if (has_rechargecasebag()) {
      if (rechargecasebag_ != NULL) rechargecasebag_->::RechargeCaseBag::Clear();
    }
    if (has_secure()) {
      if (secure_ != NULL) secure_->::Secure::Clear();
    }
    if (has_novice()) {
      if (novice_ != NULL) novice_->::Novice::Clear();
    }
    if (has_hall()) {
      if (hall_ != NULL) hall_->::Hall::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    astatus_ = 0;
    continuousdayssigned_ = 0;
    if (has_tearoomname()) {
      if (tearoomname_ != &::google::protobuf::internal::kEmptyString) {
        tearoomname_->clear();
      }
    }
    if (has_relief()) {
      if (relief_ != NULL) relief_->::Relief::Clear();
    }
    if (has_newgiftbag()) {
      if (newgiftbag_ != NULL) newgiftbag_->::NewGiftBag::Clear();
    }
    if (has_tearoomqr()) {
      if (tearoomqr_ != &::google::protobuf::internal::kEmptyString) {
        tearoomqr_->clear();
      }
    }
    if (has_todayhassigned()) {
      if (todayhassigned_ != &::google::protobuf::internal::kEmptyString) {
        todayhassigned_->clear();
      }
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::Activity::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_monthlycard()) {
      if (monthlycard_ != NULL) monthlycard_->::MonthlyCard::Clear();
    }
    if (has_homeconfig()) {
      if (homeconfig_ != NULL) homeconfig_->::HomeConfig::Clear();
    }
    newskin_ = 0;
    if (has_dwnewplayertime()) {
      if (dwnewplayertime_ != &::google::protobuf::internal::kEmptyString) {
        dwnewplayertime_->clear();
      }
    }
    isopenminigame_ = false;
    if (has_lanternbag()) {
      if (lanternbag_ != NULL) lanternbag_->::LanternBag::Clear();
    }
  }
  activityconfig_.Clear();
  novicepack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GiftBag giftBag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_giftbag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activityConfig;
        break;
      }

      // repeated .ActivityConfig activityConfig = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activityconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activityConfig;
        if (input->ExpectTag(26)) goto parse_rechargeCaseMoney;
        break;
      }

      // optional string rechargeCaseMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeCaseMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rechargecasemoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rechargecasemoney().data(), this->rechargecasemoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_memberInfo;
        break;
      }

      // optional .MemberInfo memberInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rechargeCaseBag;
        break;
      }

      // optional .RechargeCaseBag rechargeCaseBag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeCaseBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rechargecasebag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_secure;
        break;
      }

      // optional .Secure secure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_novice;
        break;
      }

      // optional .Novice novice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_novice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_novice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_hall;
        break;
      }

      // optional .Hall hall = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_aStatus;
        break;
      }

      // optional int32 aStatus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &astatus_)));
          set_has_astatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_continuousDaysSigned;
        break;
      }

      // optional int32 continuousDaysSigned = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continuousDaysSigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuousdayssigned_)));
          set_has_continuousdayssigned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_teaRoomName;
        break;
      }

      // optional string teaRoomName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teaRoomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tearoomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tearoomname().data(), this->tearoomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_relief;
        break;
      }

      // optional .Relief relief = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_newGiftBag;
        break;
      }

      // optional .NewGiftBag newGiftBag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newGiftBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newgiftbag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_teaRoomQR;
        break;
      }

      // optional string teaRoomQR = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teaRoomQR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tearoomqr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tearoomqr().data(), this->tearoomqr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_todayHasSigned;
        break;
      }

      // optional string todayHasSigned = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_todayHasSigned:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todayhassigned()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->todayhassigned().data(), this->todayhassigned().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_activity;
        break;
      }

      // optional .Activity activity = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_monthlyCard;
        break;
      }

      // optional .MonthlyCard monthlyCard = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monthlyCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monthlycard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_homeConfig;
        break;
      }

      // optional .HomeConfig homeConfig = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_homeConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_homeconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_novicePack;
        break;
      }

      // repeated .NovicePack novicePack = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_novicePack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_novicepack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_novicePack;
        if (input->ExpectTag(160)) goto parse_NewSkin;
        break;
      }

      // optional int32 NewSkin = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewSkin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newskin_)));
          set_has_newskin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_dwNewPlayerTime;
        break;
      }

      // optional string dwNewPlayerTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dwNewPlayerTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dwnewplayertime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dwnewplayertime().data(), this->dwnewplayertime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_isOpenMiniGame;
        break;
      }

      // optional bool isOpenMiniGame = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpenMiniGame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopenminigame_)));
          set_has_isopenminigame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_lanternBag;
        break;
      }

      // optional .LanternBag lanternBag = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lanternBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lanternbag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GiftBag giftBag = 1;
  if (has_giftbag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->giftbag(), output);
  }

  // repeated .ActivityConfig activityConfig = 2;
  for (int i = 0; i < this->activityconfig_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activityconfig(i), output);
  }

  // optional string rechargeCaseMoney = 3;
  if (has_rechargecasemoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargecasemoney().data(), this->rechargecasemoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rechargecasemoney(), output);
  }

  // optional .MemberInfo memberInfo = 4;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberinfo(), output);
  }

  // optional .RechargeCaseBag rechargeCaseBag = 5;
  if (has_rechargecasebag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rechargecasebag(), output);
  }

  // optional .Secure secure = 6;
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->secure(), output);
  }

  // optional .Novice novice = 7;
  if (has_novice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->novice(), output);
  }

  // optional .Hall hall = 8;
  if (has_hall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hall(), output);
  }

  // optional int32 aStatus = 9;
  if (has_astatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->astatus(), output);
  }

  // optional int32 continuousDaysSigned = 10;
  if (has_continuousdayssigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->continuousdayssigned(), output);
  }

  // optional string teaRoomName = 11;
  if (has_tearoomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tearoomname().data(), this->tearoomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->tearoomname(), output);
  }

  // optional .Relief relief = 12;
  if (has_relief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->relief(), output);
  }

  // optional .NewGiftBag newGiftBag = 13;
  if (has_newgiftbag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->newgiftbag(), output);
  }

  // optional string teaRoomQR = 14;
  if (has_tearoomqr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tearoomqr().data(), this->tearoomqr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->tearoomqr(), output);
  }

  // optional string todayHasSigned = 15;
  if (has_todayhassigned()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todayhassigned().data(), this->todayhassigned().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->todayhassigned(), output);
  }

  // optional .Activity activity = 16;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->activity(), output);
  }

  // optional .MonthlyCard monthlyCard = 17;
  if (has_monthlycard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->monthlycard(), output);
  }

  // optional .HomeConfig homeConfig = 18;
  if (has_homeconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->homeconfig(), output);
  }

  // repeated .NovicePack novicePack = 19;
  for (int i = 0; i < this->novicepack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->novicepack(i), output);
  }

  // optional int32 NewSkin = 20;
  if (has_newskin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->newskin(), output);
  }

  // optional string dwNewPlayerTime = 21;
  if (has_dwnewplayertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwnewplayertime().data(), this->dwnewplayertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->dwnewplayertime(), output);
  }

  // optional bool isOpenMiniGame = 22;
  if (has_isopenminigame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isopenminigame(), output);
  }

  // optional .LanternBag lanternBag = 23;
  if (has_lanternbag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->lanternbag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_LogonSuccess_CMD_GP_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GiftBag giftBag = 1;
  if (has_giftbag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->giftbag(), target);
  }

  // repeated .ActivityConfig activityConfig = 2;
  for (int i = 0; i < this->activityconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activityconfig(i), target);
  }

  // optional string rechargeCaseMoney = 3;
  if (has_rechargecasemoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargecasemoney().data(), this->rechargecasemoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rechargecasemoney(), target);
  }

  // optional .MemberInfo memberInfo = 4;
  if (has_memberinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memberinfo(), target);
  }

  // optional .RechargeCaseBag rechargeCaseBag = 5;
  if (has_rechargecasebag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rechargecasebag(), target);
  }

  // optional .Secure secure = 6;
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->secure(), target);
  }

  // optional .Novice novice = 7;
  if (has_novice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->novice(), target);
  }

  // optional .Hall hall = 8;
  if (has_hall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hall(), target);
  }

  // optional int32 aStatus = 9;
  if (has_astatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->astatus(), target);
  }

  // optional int32 continuousDaysSigned = 10;
  if (has_continuousdayssigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->continuousdayssigned(), target);
  }

  // optional string teaRoomName = 11;
  if (has_tearoomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tearoomname().data(), this->tearoomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->tearoomname(), target);
  }

  // optional .Relief relief = 12;
  if (has_relief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->relief(), target);
  }

  // optional .NewGiftBag newGiftBag = 13;
  if (has_newgiftbag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->newgiftbag(), target);
  }

  // optional string teaRoomQR = 14;
  if (has_tearoomqr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tearoomqr().data(), this->tearoomqr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->tearoomqr(), target);
  }

  // optional string todayHasSigned = 15;
  if (has_todayhassigned()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todayhassigned().data(), this->todayhassigned().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->todayhassigned(), target);
  }

  // optional .Activity activity = 16;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->activity(), target);
  }

  // optional .MonthlyCard monthlyCard = 17;
  if (has_monthlycard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->monthlycard(), target);
  }

  // optional .HomeConfig homeConfig = 18;
  if (has_homeconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->homeconfig(), target);
  }

  // repeated .NovicePack novicePack = 19;
  for (int i = 0; i < this->novicepack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->novicepack(i), target);
  }

  // optional int32 NewSkin = 20;
  if (has_newskin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->newskin(), target);
  }

  // optional string dwNewPlayerTime = 21;
  if (has_dwnewplayertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwnewplayertime().data(), this->dwnewplayertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->dwnewplayertime(), target);
  }

  // optional bool isOpenMiniGame = 22;
  if (has_isopenminigame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isopenminigame(), target);
  }

  // optional .LanternBag lanternBag = 23;
  if (has_lanternbag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->lanternbag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_LogonSuccess_CMD_GP_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GiftBag giftBag = 1;
    if (has_giftbag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->giftbag());
    }

    // optional string rechargeCaseMoney = 3;
    if (has_rechargecasemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rechargecasemoney());
    }

    // optional .MemberInfo memberInfo = 4;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }

    // optional .RechargeCaseBag rechargeCaseBag = 5;
    if (has_rechargecasebag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rechargecasebag());
    }

    // optional .Secure secure = 6;
    if (has_secure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->secure());
    }

    // optional .Novice novice = 7;
    if (has_novice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->novice());
    }

    // optional .Hall hall = 8;
    if (has_hall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hall());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 aStatus = 9;
    if (has_astatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->astatus());
    }

    // optional int32 continuousDaysSigned = 10;
    if (has_continuousdayssigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuousdayssigned());
    }

    // optional string teaRoomName = 11;
    if (has_tearoomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tearoomname());
    }

    // optional .Relief relief = 12;
    if (has_relief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relief());
    }

    // optional .NewGiftBag newGiftBag = 13;
    if (has_newgiftbag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newgiftbag());
    }

    // optional string teaRoomQR = 14;
    if (has_tearoomqr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tearoomqr());
    }

    // optional string todayHasSigned = 15;
    if (has_todayhassigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todayhassigned());
    }

    // optional .Activity activity = 16;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .MonthlyCard monthlyCard = 17;
    if (has_monthlycard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monthlycard());
    }

    // optional .HomeConfig homeConfig = 18;
    if (has_homeconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->homeconfig());
    }

    // optional int32 NewSkin = 20;
    if (has_newskin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newskin());
    }

    // optional string dwNewPlayerTime = 21;
    if (has_dwnewplayertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dwnewplayertime());
    }

    // optional bool isOpenMiniGame = 22;
    if (has_isopenminigame()) {
      total_size += 2 + 1;
    }

    // optional .LanternBag lanternBag = 23;
    if (has_lanternbag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lanternbag());
    }

  }
  // repeated .ActivityConfig activityConfig = 2;
  total_size += 1 * this->activityconfig_size();
  for (int i = 0; i < this->activityconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activityconfig(i));
  }

  // repeated .NovicePack novicePack = 19;
  total_size += 2 * this->novicepack_size();
  for (int i = 0; i < this->novicepack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->novicepack(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_LogonSuccess_CMD_GP_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_LogonSuccess_CMD_GP_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::MergeFrom(const CMD_GP_LogonSuccess_CMD_GP_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  activityconfig_.MergeFrom(from.activityconfig_);
  novicepack_.MergeFrom(from.novicepack_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftbag()) {
      mutable_giftbag()->::GiftBag::MergeFrom(from.giftbag());
    }
    if (from.has_rechargecasemoney()) {
      set_rechargecasemoney(from.rechargecasemoney());
    }
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::MemberInfo::MergeFrom(from.memberinfo());
    }
    if (from.has_rechargecasebag()) {
      mutable_rechargecasebag()->::RechargeCaseBag::MergeFrom(from.rechargecasebag());
    }
    if (from.has_secure()) {
      mutable_secure()->::Secure::MergeFrom(from.secure());
    }
    if (from.has_novice()) {
      mutable_novice()->::Novice::MergeFrom(from.novice());
    }
    if (from.has_hall()) {
      mutable_hall()->::Hall::MergeFrom(from.hall());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_astatus()) {
      set_astatus(from.astatus());
    }
    if (from.has_continuousdayssigned()) {
      set_continuousdayssigned(from.continuousdayssigned());
    }
    if (from.has_tearoomname()) {
      set_tearoomname(from.tearoomname());
    }
    if (from.has_relief()) {
      mutable_relief()->::Relief::MergeFrom(from.relief());
    }
    if (from.has_newgiftbag()) {
      mutable_newgiftbag()->::NewGiftBag::MergeFrom(from.newgiftbag());
    }
    if (from.has_tearoomqr()) {
      set_tearoomqr(from.tearoomqr());
    }
    if (from.has_todayhassigned()) {
      set_todayhassigned(from.todayhassigned());
    }
    if (from.has_activity()) {
      mutable_activity()->::Activity::MergeFrom(from.activity());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_monthlycard()) {
      mutable_monthlycard()->::MonthlyCard::MergeFrom(from.monthlycard());
    }
    if (from.has_homeconfig()) {
      mutable_homeconfig()->::HomeConfig::MergeFrom(from.homeconfig());
    }
    if (from.has_newskin()) {
      set_newskin(from.newskin());
    }
    if (from.has_dwnewplayertime()) {
      set_dwnewplayertime(from.dwnewplayertime());
    }
    if (from.has_isopenminigame()) {
      set_isopenminigame(from.isopenminigame());
    }
    if (from.has_lanternbag()) {
      mutable_lanternbag()->::LanternBag::MergeFrom(from.lanternbag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::CopyFrom(const CMD_GP_LogonSuccess_CMD_GP_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LogonSuccess_CMD_GP_UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_LogonSuccess_CMD_GP_UserInfo::Swap(CMD_GP_LogonSuccess_CMD_GP_UserInfo* other) {
  if (other != this) {
    std::swap(giftbag_, other->giftbag_);
    activityconfig_.Swap(&other->activityconfig_);
    std::swap(rechargecasemoney_, other->rechargecasemoney_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(rechargecasebag_, other->rechargecasebag_);
    std::swap(secure_, other->secure_);
    std::swap(novice_, other->novice_);
    std::swap(hall_, other->hall_);
    std::swap(astatus_, other->astatus_);
    std::swap(continuousdayssigned_, other->continuousdayssigned_);
    std::swap(tearoomname_, other->tearoomname_);
    std::swap(relief_, other->relief_);
    std::swap(newgiftbag_, other->newgiftbag_);
    std::swap(tearoomqr_, other->tearoomqr_);
    std::swap(todayhassigned_, other->todayhassigned_);
    std::swap(activity_, other->activity_);
    std::swap(monthlycard_, other->monthlycard_);
    std::swap(homeconfig_, other->homeconfig_);
    novicepack_.Swap(&other->novicepack_);
    std::swap(newskin_, other->newskin_);
    std::swap(dwnewplayertime_, other->dwnewplayertime_);
    std::swap(isopenminigame_, other->isopenminigame_);
    std::swap(lanternbag_, other->lanternbag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_LogonSuccess_CMD_GP_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_LogonSuccess_CMD_GP_UserInfo_descriptor_;
  metadata.reflection = CMD_GP_LogonSuccess_CMD_GP_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMD_GP_LogonSuccess::kWFaceIDFieldNumber;
const int CMD_GP_LogonSuccess::kDwUserIDFieldNumber;
const int CMD_GP_LogonSuccess::kDwGameIDFieldNumber;
const int CMD_GP_LogonSuccess::kDwCustomIDFieldNumber;
const int CMD_GP_LogonSuccess::kDwUserMedalFieldNumber;
const int CMD_GP_LogonSuccess::kDwExperienceFieldNumber;
const int CMD_GP_LogonSuccess::kDwLoveLinessFieldNumber;
const int CMD_GP_LogonSuccess::kLTicketFieldNumber;
const int CMD_GP_LogonSuccess::kDwSpreaderIDFieldNumber;
const int CMD_GP_LogonSuccess::kLUserScoreFieldNumber;
const int CMD_GP_LogonSuccess::kLUserInsureFieldNumber;
const int CMD_GP_LogonSuccess::kCbGenderFieldNumber;
const int CMD_GP_LogonSuccess::kCbMoorMachineFieldNumber;
const int CMD_GP_LogonSuccess::kSzAccountsFieldNumber;
const int CMD_GP_LogonSuccess::kSzNickNameFieldNumber;
const int CMD_GP_LogonSuccess::kWInSpreaderIDFieldNumber;
const int CMD_GP_LogonSuccess::kCbMemberOrderFieldNumber;
const int CMD_GP_LogonSuccess::kSzUnderWriteFieldNumber;
const int CMD_GP_LogonSuccess::kDwPwdFieldNumber;
const int CMD_GP_LogonSuccess::kUserInfoFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LogonSuccess::CMD_GP_LogonSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_LogonSuccess::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::CMD_GP_LogonSuccess_CMD_GP_UserInfo*>(&::CMD_GP_LogonSuccess_CMD_GP_UserInfo::default_instance());
}

CMD_GP_LogonSuccess::CMD_GP_LogonSuccess(const CMD_GP_LogonSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_LogonSuccess::SharedCtor() {
  _cached_size_ = 0;
  wfaceid_ = 0;
  dwuserid_ = 0;
  dwgameid_ = 0;
  dwcustomid_ = 0;
  dwusermedal_ = 0;
  dwexperience_ = 0;
  dwloveliness_ = 0;
  lticket_ = 0;
  dwspreaderid_ = 0;
  luserscore_ = GOOGLE_LONGLONG(0);
  luserinsure_ = GOOGLE_LONGLONG(0);
  cbgender_ = 0;
  cbmoormachine_ = 0;
  szaccounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winspreaderid_ = 0;
  cbmemberorder_ = 0;
  szunderwrite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dwpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LogonSuccess::~CMD_GP_LogonSuccess() {
  SharedDtor();
}

void CMD_GP_LogonSuccess::SharedDtor() {
  if (szaccounts_ != &::google::protobuf::internal::kEmptyString) {
    delete szaccounts_;
  }
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sznickname_;
  }
  if (szunderwrite_ != &::google::protobuf::internal::kEmptyString) {
    delete szunderwrite_;
  }
  if (dwpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete dwpwd_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void CMD_GP_LogonSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_LogonSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_LogonSuccess_descriptor_;
}

const CMD_GP_LogonSuccess& CMD_GP_LogonSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_LogonSuccess* CMD_GP_LogonSuccess::default_instance_ = NULL;

CMD_GP_LogonSuccess* CMD_GP_LogonSuccess::New() const {
  return new CMD_GP_LogonSuccess;
}

void CMD_GP_LogonSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wfaceid_ = 0;
    dwuserid_ = 0;
    dwgameid_ = 0;
    dwcustomid_ = 0;
    dwusermedal_ = 0;
    dwexperience_ = 0;
    dwloveliness_ = 0;
    lticket_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dwspreaderid_ = 0;
    luserscore_ = GOOGLE_LONGLONG(0);
    luserinsure_ = GOOGLE_LONGLONG(0);
    cbgender_ = 0;
    cbmoormachine_ = 0;
    if (has_szaccounts()) {
      if (szaccounts_ != &::google::protobuf::internal::kEmptyString) {
        szaccounts_->clear();
      }
    }
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
        sznickname_->clear();
      }
    }
    winspreaderid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cbmemberorder_ = 0;
    if (has_szunderwrite()) {
      if (szunderwrite_ != &::google::protobuf::internal::kEmptyString) {
        szunderwrite_->clear();
      }
    }
    if (has_dwpwd()) {
      if (dwpwd_ != &::google::protobuf::internal::kEmptyString) {
        dwpwd_->clear();
      }
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::CMD_GP_LogonSuccess_CMD_GP_UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_LogonSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wFaceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wfaceid_)));
          set_has_wfaceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwUserID;
        break;
      }

      // required int32 dwUserID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dwGameID;
        break;
      }

      // required int32 dwGameID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwGameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwgameid_)));
          set_has_dwgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dwCustomID;
        break;
      }

      // required int32 dwCustomID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwCustomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwcustomid_)));
          set_has_dwcustomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dwUserMedal;
        break;
      }

      // required int32 dwUserMedal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwUserMedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwusermedal_)));
          set_has_dwusermedal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dwExperience;
        break;
      }

      // required int32 dwExperience = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwExperience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwexperience_)));
          set_has_dwexperience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwLoveLiness;
        break;
      }

      // required int32 dwLoveLiness = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwLoveLiness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwloveliness_)));
          set_has_dwloveliness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lTicket;
        break;
      }

      // required int32 lTicket = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lticket_)));
          set_has_lticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dwSpreaderID;
        break;
      }

      // required int32 dwSpreaderID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwSpreaderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwspreaderid_)));
          set_has_dwspreaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lUserScore;
        break;
      }

      // required int64 lUserScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserscore_)));
          set_has_luserscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lUserInsure;
        break;
      }

      // required int64 lUserInsure = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserInsure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserinsure_)));
          set_has_luserinsure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cbGender;
        break;
      }

      // required int32 cbGender = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbGender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbgender_)));
          set_has_cbgender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cbMoorMachine;
        break;
      }

      // optional int32 cbMoorMachine = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbMoorMachine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbmoormachine_)));
          set_has_cbmoormachine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_szAccounts;
        break;
      }

      // required string szAccounts = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szAccounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szaccounts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szaccounts().data(), this->szaccounts().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_szNickName;
        break;
      }

      // required string szNickName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sznickname().data(), this->sznickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_wInSpreaderID;
        break;
      }

      // required int32 wInSpreaderID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wInSpreaderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winspreaderid_)));
          set_has_winspreaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cbMemberOrder;
        break;
      }

      // required int32 cbMemberOrder = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbMemberOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbmemberorder_)));
          set_has_cbmemberorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_szUnderWrite;
        break;
      }

      // optional string szUnderWrite = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szUnderWrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szunderwrite()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szunderwrite().data(), this->szunderwrite().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_dwPwd;
        break;
      }

      // optional string dwPwd = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dwPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dwpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dwpwd().data(), this->dwpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_userInfo;
        break;
      }

      // optional .CMD_GP_LogonSuccess.CMD_GP_UserInfo userInfo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_LogonSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 wFaceID = 1;
  if (has_wfaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wfaceid(), output);
  }

  // required int32 dwUserID = 2;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwuserid(), output);
  }

  // required int32 dwGameID = 3;
  if (has_dwgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dwgameid(), output);
  }

  // required int32 dwCustomID = 4;
  if (has_dwcustomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dwcustomid(), output);
  }

  // required int32 dwUserMedal = 5;
  if (has_dwusermedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dwusermedal(), output);
  }

  // required int32 dwExperience = 6;
  if (has_dwexperience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dwexperience(), output);
  }

  // required int32 dwLoveLiness = 7;
  if (has_dwloveliness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dwloveliness(), output);
  }

  // required int32 lTicket = 8;
  if (has_lticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lticket(), output);
  }

  // required int32 dwSpreaderID = 9;
  if (has_dwspreaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dwspreaderid(), output);
  }

  // required int64 lUserScore = 10;
  if (has_luserscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->luserscore(), output);
  }

  // required int64 lUserInsure = 11;
  if (has_luserinsure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->luserinsure(), output);
  }

  // required int32 cbGender = 12;
  if (has_cbgender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cbgender(), output);
  }

  // optional int32 cbMoorMachine = 13;
  if (has_cbmoormachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cbmoormachine(), output);
  }

  // required string szAccounts = 14;
  if (has_szaccounts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szaccounts().data(), this->szaccounts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->szaccounts(), output);
  }

  // required string szNickName = 15;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->sznickname(), output);
  }

  // required int32 wInSpreaderID = 16;
  if (has_winspreaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->winspreaderid(), output);
  }

  // required int32 cbMemberOrder = 17;
  if (has_cbmemberorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cbmemberorder(), output);
  }

  // optional string szUnderWrite = 18;
  if (has_szunderwrite()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szunderwrite().data(), this->szunderwrite().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->szunderwrite(), output);
  }

  // optional string dwPwd = 19;
  if (has_dwpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwpwd().data(), this->dwpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->dwpwd(), output);
  }

  // optional .CMD_GP_LogonSuccess.CMD_GP_UserInfo userInfo = 20;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_LogonSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 wFaceID = 1;
  if (has_wfaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wfaceid(), target);
  }

  // required int32 dwUserID = 2;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwuserid(), target);
  }

  // required int32 dwGameID = 3;
  if (has_dwgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dwgameid(), target);
  }

  // required int32 dwCustomID = 4;
  if (has_dwcustomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dwcustomid(), target);
  }

  // required int32 dwUserMedal = 5;
  if (has_dwusermedal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dwusermedal(), target);
  }

  // required int32 dwExperience = 6;
  if (has_dwexperience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dwexperience(), target);
  }

  // required int32 dwLoveLiness = 7;
  if (has_dwloveliness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dwloveliness(), target);
  }

  // required int32 lTicket = 8;
  if (has_lticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lticket(), target);
  }

  // required int32 dwSpreaderID = 9;
  if (has_dwspreaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dwspreaderid(), target);
  }

  // required int64 lUserScore = 10;
  if (has_luserscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->luserscore(), target);
  }

  // required int64 lUserInsure = 11;
  if (has_luserinsure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->luserinsure(), target);
  }

  // required int32 cbGender = 12;
  if (has_cbgender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cbgender(), target);
  }

  // optional int32 cbMoorMachine = 13;
  if (has_cbmoormachine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cbmoormachine(), target);
  }

  // required string szAccounts = 14;
  if (has_szaccounts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szaccounts().data(), this->szaccounts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->szaccounts(), target);
  }

  // required string szNickName = 15;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->sznickname(), target);
  }

  // required int32 wInSpreaderID = 16;
  if (has_winspreaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->winspreaderid(), target);
  }

  // required int32 cbMemberOrder = 17;
  if (has_cbmemberorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cbmemberorder(), target);
  }

  // optional string szUnderWrite = 18;
  if (has_szunderwrite()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szunderwrite().data(), this->szunderwrite().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->szunderwrite(), target);
  }

  // optional string dwPwd = 19;
  if (has_dwpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwpwd().data(), this->dwpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->dwpwd(), target);
  }

  // optional .CMD_GP_LogonSuccess.CMD_GP_UserInfo userInfo = 20;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_LogonSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wFaceID = 1;
    if (has_wfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wfaceid());
    }

    // required int32 dwUserID = 2;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwuserid());
    }

    // required int32 dwGameID = 3;
    if (has_dwgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwgameid());
    }

    // required int32 dwCustomID = 4;
    if (has_dwcustomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwcustomid());
    }

    // required int32 dwUserMedal = 5;
    if (has_dwusermedal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwusermedal());
    }

    // required int32 dwExperience = 6;
    if (has_dwexperience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwexperience());
    }

    // required int32 dwLoveLiness = 7;
    if (has_dwloveliness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwloveliness());
    }

    // required int32 lTicket = 8;
    if (has_lticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lticket());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 dwSpreaderID = 9;
    if (has_dwspreaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwspreaderid());
    }

    // required int64 lUserScore = 10;
    if (has_luserscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserscore());
    }

    // required int64 lUserInsure = 11;
    if (has_luserinsure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserinsure());
    }

    // required int32 cbGender = 12;
    if (has_cbgender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbgender());
    }

    // optional int32 cbMoorMachine = 13;
    if (has_cbmoormachine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbmoormachine());
    }

    // required string szAccounts = 14;
    if (has_szaccounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szaccounts());
    }

    // required string szNickName = 15;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

    // required int32 wInSpreaderID = 16;
    if (has_winspreaderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winspreaderid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 cbMemberOrder = 17;
    if (has_cbmemberorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbmemberorder());
    }

    // optional string szUnderWrite = 18;
    if (has_szunderwrite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szunderwrite());
    }

    // optional string dwPwd = 19;
    if (has_dwpwd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dwpwd());
    }

    // optional .CMD_GP_LogonSuccess.CMD_GP_UserInfo userInfo = 20;
    if (has_userinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LogonSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_LogonSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_LogonSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_LogonSuccess::MergeFrom(const CMD_GP_LogonSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wfaceid()) {
      set_wfaceid(from.wfaceid());
    }
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_dwgameid()) {
      set_dwgameid(from.dwgameid());
    }
    if (from.has_dwcustomid()) {
      set_dwcustomid(from.dwcustomid());
    }
    if (from.has_dwusermedal()) {
      set_dwusermedal(from.dwusermedal());
    }
    if (from.has_dwexperience()) {
      set_dwexperience(from.dwexperience());
    }
    if (from.has_dwloveliness()) {
      set_dwloveliness(from.dwloveliness());
    }
    if (from.has_lticket()) {
      set_lticket(from.lticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dwspreaderid()) {
      set_dwspreaderid(from.dwspreaderid());
    }
    if (from.has_luserscore()) {
      set_luserscore(from.luserscore());
    }
    if (from.has_luserinsure()) {
      set_luserinsure(from.luserinsure());
    }
    if (from.has_cbgender()) {
      set_cbgender(from.cbgender());
    }
    if (from.has_cbmoormachine()) {
      set_cbmoormachine(from.cbmoormachine());
    }
    if (from.has_szaccounts()) {
      set_szaccounts(from.szaccounts());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
    if (from.has_winspreaderid()) {
      set_winspreaderid(from.winspreaderid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cbmemberorder()) {
      set_cbmemberorder(from.cbmemberorder());
    }
    if (from.has_szunderwrite()) {
      set_szunderwrite(from.szunderwrite());
    }
    if (from.has_dwpwd()) {
      set_dwpwd(from.dwpwd());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::CMD_GP_LogonSuccess_CMD_GP_UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_LogonSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_LogonSuccess::CopyFrom(const CMD_GP_LogonSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LogonSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001efff) != 0x0001efff) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void CMD_GP_LogonSuccess::Swap(CMD_GP_LogonSuccess* other) {
  if (other != this) {
    std::swap(wfaceid_, other->wfaceid_);
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(dwgameid_, other->dwgameid_);
    std::swap(dwcustomid_, other->dwcustomid_);
    std::swap(dwusermedal_, other->dwusermedal_);
    std::swap(dwexperience_, other->dwexperience_);
    std::swap(dwloveliness_, other->dwloveliness_);
    std::swap(lticket_, other->lticket_);
    std::swap(dwspreaderid_, other->dwspreaderid_);
    std::swap(luserscore_, other->luserscore_);
    std::swap(luserinsure_, other->luserinsure_);
    std::swap(cbgender_, other->cbgender_);
    std::swap(cbmoormachine_, other->cbmoormachine_);
    std::swap(szaccounts_, other->szaccounts_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(winspreaderid_, other->winspreaderid_);
    std::swap(cbmemberorder_, other->cbmemberorder_);
    std::swap(szunderwrite_, other->szunderwrite_);
    std::swap(dwpwd_, other->dwpwd_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_LogonSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_LogonSuccess_descriptor_;
  metadata.reflection = CMD_GP_LogonSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LogonFinish::kWKindIDFieldNumber;
const int CMD_GP_LogonFinish::kWServerIDFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LogonFinish::CMD_GP_LogonFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_LogonFinish::InitAsDefaultInstance() {
}

CMD_GP_LogonFinish::CMD_GP_LogonFinish(const CMD_GP_LogonFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_LogonFinish::SharedCtor() {
  _cached_size_ = 0;
  wkindid_ = 0;
  wserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LogonFinish::~CMD_GP_LogonFinish() {
  SharedDtor();
}

void CMD_GP_LogonFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_LogonFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_LogonFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_LogonFinish_descriptor_;
}

const CMD_GP_LogonFinish& CMD_GP_LogonFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_LogonFinish* CMD_GP_LogonFinish::default_instance_ = NULL;

CMD_GP_LogonFinish* CMD_GP_LogonFinish::New() const {
  return new CMD_GP_LogonFinish;
}

void CMD_GP_LogonFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wkindid_ = 0;
    wserverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_LogonFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wKindID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
          set_has_wkindid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wServerID;
        break;
      }

      // required int32 wServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverid_)));
          set_has_wserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_LogonFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 wKindID = 1;
  if (has_wkindid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wkindid(), output);
  }

  // required int32 wServerID = 2;
  if (has_wserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_LogonFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 wKindID = 1;
  if (has_wkindid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wkindid(), target);
  }

  // required int32 wServerID = 2;
  if (has_wserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_LogonFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wKindID = 1;
    if (has_wkindid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wkindid());
    }

    // required int32 wServerID = 2;
    if (has_wserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LogonFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_LogonFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_LogonFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_LogonFinish::MergeFrom(const CMD_GP_LogonFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wkindid()) {
      set_wkindid(from.wkindid());
    }
    if (from.has_wserverid()) {
      set_wserverid(from.wserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_LogonFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_LogonFinish::CopyFrom(const CMD_GP_LogonFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LogonFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_LogonFinish::Swap(CMD_GP_LogonFinish* other) {
  if (other != this) {
    std::swap(wkindid_, other->wkindid_);
    std::swap(wserverid_, other->wserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_LogonFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_LogonFinish_descriptor_;
  metadata.reflection = CMD_GP_LogonFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GameServer_GameServer::kWKindIDFieldNumber;
const int CMD_GP_GameServer_GameServer::kWNodeIDFieldNumber;
const int CMD_GP_GameServer_GameServer::kWSortIDFieldNumber;
const int CMD_GP_GameServer_GameServer::kWServerIDFieldNumber;
const int CMD_GP_GameServer_GameServer::kWServerPortFieldNumber;
const int CMD_GP_GameServer_GameServer::kDwOnLineCountFieldNumber;
const int CMD_GP_GameServer_GameServer::kDwFullCountFieldNumber;
const int CMD_GP_GameServer_GameServer::kWServerTypeFieldNumber;
const int CMD_GP_GameServer_GameServer::kSzServerAddrFieldNumber;
const int CMD_GP_GameServer_GameServer::kSzServerNameFieldNumber;
const int CMD_GP_GameServer_GameServer::kLMinEnterScoreFieldNumber;
const int CMD_GP_GameServer_GameServer::kLMaxEnterScoreFieldNumber;
const int CMD_GP_GameServer_GameServer::kWServerKindFieldNumber;
const int CMD_GP_GameServer_GameServer::kWServerLevelFieldNumber;
const int CMD_GP_GameServer_GameServer::kLCellScoreFieldNumber;
const int CMD_GP_GameServer_GameServer::kLEnterScoreFieldNumber;
const int CMD_GP_GameServer_GameServer::kCbEnterMemberFieldNumber;
const int CMD_GP_GameServer_GameServer::kDwServerRuleFieldNumber;
const int CMD_GP_GameServer_GameServer::kDwSurportTypeFieldNumber;
const int CMD_GP_GameServer_GameServer::kWTableCountFieldNumber;
const int CMD_GP_GameServer_GameServer::kIsChargeRoomFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GameServer_GameServer::CMD_GP_GameServer_GameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GameServer_GameServer::InitAsDefaultInstance() {
}

CMD_GP_GameServer_GameServer::CMD_GP_GameServer_GameServer(const CMD_GP_GameServer_GameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GameServer_GameServer::SharedCtor() {
  _cached_size_ = 0;
  wkindid_ = 0;
  wnodeid_ = 0;
  wsortid_ = 0;
  wserverid_ = 0;
  wserverport_ = 0;
  dwonlinecount_ = 0;
  dwfullcount_ = 0;
  wservertype_ = 0;
  szserveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lminenterscore_ = GOOGLE_LONGLONG(0);
  lmaxenterscore_ = GOOGLE_LONGLONG(0);
  wserverkind_ = 0;
  wserverlevel_ = 0;
  lcellscore_ = GOOGLE_LONGLONG(0);
  lenterscore_ = GOOGLE_LONGLONG(0);
  cbentermember_ = 0;
  dwserverrule_ = 0;
  dwsurporttype_ = 0;
  wtablecount_ = 0;
  ischargeroom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GameServer_GameServer::~CMD_GP_GameServer_GameServer() {
  SharedDtor();
}

void CMD_GP_GameServer_GameServer::SharedDtor() {
  if (szserveraddr_ != &::google::protobuf::internal::kEmptyString) {
    delete szserveraddr_;
  }
  if (szservername_ != &::google::protobuf::internal::kEmptyString) {
    delete szservername_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GameServer_GameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GameServer_GameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GameServer_GameServer_descriptor_;
}

const CMD_GP_GameServer_GameServer& CMD_GP_GameServer_GameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GameServer_GameServer* CMD_GP_GameServer_GameServer::default_instance_ = NULL;

CMD_GP_GameServer_GameServer* CMD_GP_GameServer_GameServer::New() const {
  return new CMD_GP_GameServer_GameServer;
}

void CMD_GP_GameServer_GameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wkindid_ = 0;
    wnodeid_ = 0;
    wsortid_ = 0;
    wserverid_ = 0;
    wserverport_ = 0;
    dwonlinecount_ = 0;
    dwfullcount_ = 0;
    wservertype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_szserveraddr()) {
      if (szserveraddr_ != &::google::protobuf::internal::kEmptyString) {
        szserveraddr_->clear();
      }
    }
    if (has_szservername()) {
      if (szservername_ != &::google::protobuf::internal::kEmptyString) {
        szservername_->clear();
      }
    }
    lminenterscore_ = GOOGLE_LONGLONG(0);
    lmaxenterscore_ = GOOGLE_LONGLONG(0);
    wserverkind_ = 0;
    wserverlevel_ = 0;
    lcellscore_ = GOOGLE_LONGLONG(0);
    lenterscore_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cbentermember_ = 0;
    dwserverrule_ = 0;
    dwsurporttype_ = 0;
    wtablecount_ = 0;
    ischargeroom_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GameServer_GameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wKindID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
          set_has_wkindid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wNodeID;
        break;
      }

      // required int32 wNodeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wNodeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wnodeid_)));
          set_has_wnodeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wSortID;
        break;
      }

      // required int32 wSortID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wSortID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
          set_has_wsortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wServerID;
        break;
      }

      // required int32 wServerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverid_)));
          set_has_wserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wServerPort;
        break;
      }

      // required int32 wServerPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wServerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverport_)));
          set_has_wserverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dwOnLineCount;
        break;
      }

      // required int32 dwOnLineCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwOnLineCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwonlinecount_)));
          set_has_dwonlinecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwFullCount;
        break;
      }

      // required int32 dwFullCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwFullCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwfullcount_)));
          set_has_dwfullcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_wServerType;
        break;
      }

      // required int32 wServerType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wServerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wservertype_)));
          set_has_wservertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_szServerAddr;
        break;
      }

      // required string szServerAddr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szServerAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szserveraddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szserveraddr().data(), this->szserveraddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_szServerName;
        break;
      }

      // required string szServerName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szservername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szservername().data(), this->szservername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lMinEnterScore;
        break;
      }

      // required int64 lMinEnterScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lMinEnterScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lminenterscore_)));
          set_has_lminenterscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lMaxEnterScore;
        break;
      }

      // required int64 lMaxEnterScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lMaxEnterScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lmaxenterscore_)));
          set_has_lmaxenterscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_wServerKind;
        break;
      }

      // required int32 wServerKind = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wServerKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverkind_)));
          set_has_wserverkind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_wServerLevel;
        break;
      }

      // required int32 wServerLevel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wServerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverlevel_)));
          set_has_wserverlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lCellScore;
        break;
      }

      // required int64 lCellScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCellScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lcellscore_)));
          set_has_lcellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lEnterScore;
        break;
      }

      // required int64 lEnterScore = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lEnterScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lenterscore_)));
          set_has_lenterscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cbEnterMember;
        break;
      }

      // required int32 cbEnterMember = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbEnterMember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbentermember_)));
          set_has_cbentermember();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_dwServerRule;
        break;
      }

      // required int32 dwServerRule = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwServerRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwserverrule_)));
          set_has_dwserverrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_dwSurportType;
        break;
      }

      // required int32 dwSurportType = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwSurportType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwsurporttype_)));
          set_has_dwsurporttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_wTableCount;
        break;
      }

      // required int32 wTableCount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wTableCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wtablecount_)));
          set_has_wtablecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_isChargeRoom;
        break;
      }

      // required int32 isChargeRoom = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChargeRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischargeroom_)));
          set_has_ischargeroom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GameServer_GameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 wKindID = 1;
  if (has_wkindid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wkindid(), output);
  }

  // required int32 wNodeID = 2;
  if (has_wnodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wnodeid(), output);
  }

  // required int32 wSortID = 3;
  if (has_wsortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wsortid(), output);
  }

  // required int32 wServerID = 4;
  if (has_wserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wserverid(), output);
  }

  // required int32 wServerPort = 5;
  if (has_wserverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wserverport(), output);
  }

  // required int32 dwOnLineCount = 6;
  if (has_dwonlinecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dwonlinecount(), output);
  }

  // required int32 dwFullCount = 7;
  if (has_dwfullcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dwfullcount(), output);
  }

  // required int32 wServerType = 8;
  if (has_wservertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->wservertype(), output);
  }

  // required string szServerAddr = 9;
  if (has_szserveraddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szserveraddr().data(), this->szserveraddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->szserveraddr(), output);
  }

  // required string szServerName = 10;
  if (has_szservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szservername().data(), this->szservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->szservername(), output);
  }

  // required int64 lMinEnterScore = 11;
  if (has_lminenterscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->lminenterscore(), output);
  }

  // required int64 lMaxEnterScore = 12;
  if (has_lmaxenterscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->lmaxenterscore(), output);
  }

  // required int32 wServerKind = 13;
  if (has_wserverkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wserverkind(), output);
  }

  // required int32 wServerLevel = 14;
  if (has_wserverlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->wserverlevel(), output);
  }

  // required int64 lCellScore = 15;
  if (has_lcellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->lcellscore(), output);
  }

  // required int64 lEnterScore = 16;
  if (has_lenterscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->lenterscore(), output);
  }

  // required int32 cbEnterMember = 17;
  if (has_cbentermember()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cbentermember(), output);
  }

  // required int32 dwServerRule = 18;
  if (has_dwserverrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->dwserverrule(), output);
  }

  // required int32 dwSurportType = 19;
  if (has_dwsurporttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->dwsurporttype(), output);
  }

  // required int32 wTableCount = 20;
  if (has_wtablecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->wtablecount(), output);
  }

  // required int32 isChargeRoom = 21;
  if (has_ischargeroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ischargeroom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GameServer_GameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 wKindID = 1;
  if (has_wkindid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wkindid(), target);
  }

  // required int32 wNodeID = 2;
  if (has_wnodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wnodeid(), target);
  }

  // required int32 wSortID = 3;
  if (has_wsortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wsortid(), target);
  }

  // required int32 wServerID = 4;
  if (has_wserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wserverid(), target);
  }

  // required int32 wServerPort = 5;
  if (has_wserverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wserverport(), target);
  }

  // required int32 dwOnLineCount = 6;
  if (has_dwonlinecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dwonlinecount(), target);
  }

  // required int32 dwFullCount = 7;
  if (has_dwfullcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dwfullcount(), target);
  }

  // required int32 wServerType = 8;
  if (has_wservertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->wservertype(), target);
  }

  // required string szServerAddr = 9;
  if (has_szserveraddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szserveraddr().data(), this->szserveraddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->szserveraddr(), target);
  }

  // required string szServerName = 10;
  if (has_szservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szservername().data(), this->szservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->szservername(), target);
  }

  // required int64 lMinEnterScore = 11;
  if (has_lminenterscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->lminenterscore(), target);
  }

  // required int64 lMaxEnterScore = 12;
  if (has_lmaxenterscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->lmaxenterscore(), target);
  }

  // required int32 wServerKind = 13;
  if (has_wserverkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wserverkind(), target);
  }

  // required int32 wServerLevel = 14;
  if (has_wserverlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->wserverlevel(), target);
  }

  // required int64 lCellScore = 15;
  if (has_lcellscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->lcellscore(), target);
  }

  // required int64 lEnterScore = 16;
  if (has_lenterscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->lenterscore(), target);
  }

  // required int32 cbEnterMember = 17;
  if (has_cbentermember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cbentermember(), target);
  }

  // required int32 dwServerRule = 18;
  if (has_dwserverrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->dwserverrule(), target);
  }

  // required int32 dwSurportType = 19;
  if (has_dwsurporttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->dwsurporttype(), target);
  }

  // required int32 wTableCount = 20;
  if (has_wtablecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->wtablecount(), target);
  }

  // required int32 isChargeRoom = 21;
  if (has_ischargeroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ischargeroom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GameServer_GameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wKindID = 1;
    if (has_wkindid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wkindid());
    }

    // required int32 wNodeID = 2;
    if (has_wnodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wnodeid());
    }

    // required int32 wSortID = 3;
    if (has_wsortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wsortid());
    }

    // required int32 wServerID = 4;
    if (has_wserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wserverid());
    }

    // required int32 wServerPort = 5;
    if (has_wserverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wserverport());
    }

    // required int32 dwOnLineCount = 6;
    if (has_dwonlinecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwonlinecount());
    }

    // required int32 dwFullCount = 7;
    if (has_dwfullcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwfullcount());
    }

    // required int32 wServerType = 8;
    if (has_wservertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wservertype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string szServerAddr = 9;
    if (has_szserveraddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szserveraddr());
    }

    // required string szServerName = 10;
    if (has_szservername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szservername());
    }

    // required int64 lMinEnterScore = 11;
    if (has_lminenterscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lminenterscore());
    }

    // required int64 lMaxEnterScore = 12;
    if (has_lmaxenterscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lmaxenterscore());
    }

    // required int32 wServerKind = 13;
    if (has_wserverkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wserverkind());
    }

    // required int32 wServerLevel = 14;
    if (has_wserverlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wserverlevel());
    }

    // required int64 lCellScore = 15;
    if (has_lcellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lcellscore());
    }

    // required int64 lEnterScore = 16;
    if (has_lenterscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lenterscore());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 cbEnterMember = 17;
    if (has_cbentermember()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbentermember());
    }

    // required int32 dwServerRule = 18;
    if (has_dwserverrule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwserverrule());
    }

    // required int32 dwSurportType = 19;
    if (has_dwsurporttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwsurporttype());
    }

    // required int32 wTableCount = 20;
    if (has_wtablecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wtablecount());
    }

    // required int32 isChargeRoom = 21;
    if (has_ischargeroom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischargeroom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GameServer_GameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GameServer_GameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GameServer_GameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GameServer_GameServer::MergeFrom(const CMD_GP_GameServer_GameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wkindid()) {
      set_wkindid(from.wkindid());
    }
    if (from.has_wnodeid()) {
      set_wnodeid(from.wnodeid());
    }
    if (from.has_wsortid()) {
      set_wsortid(from.wsortid());
    }
    if (from.has_wserverid()) {
      set_wserverid(from.wserverid());
    }
    if (from.has_wserverport()) {
      set_wserverport(from.wserverport());
    }
    if (from.has_dwonlinecount()) {
      set_dwonlinecount(from.dwonlinecount());
    }
    if (from.has_dwfullcount()) {
      set_dwfullcount(from.dwfullcount());
    }
    if (from.has_wservertype()) {
      set_wservertype(from.wservertype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_szserveraddr()) {
      set_szserveraddr(from.szserveraddr());
    }
    if (from.has_szservername()) {
      set_szservername(from.szservername());
    }
    if (from.has_lminenterscore()) {
      set_lminenterscore(from.lminenterscore());
    }
    if (from.has_lmaxenterscore()) {
      set_lmaxenterscore(from.lmaxenterscore());
    }
    if (from.has_wserverkind()) {
      set_wserverkind(from.wserverkind());
    }
    if (from.has_wserverlevel()) {
      set_wserverlevel(from.wserverlevel());
    }
    if (from.has_lcellscore()) {
      set_lcellscore(from.lcellscore());
    }
    if (from.has_lenterscore()) {
      set_lenterscore(from.lenterscore());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cbentermember()) {
      set_cbentermember(from.cbentermember());
    }
    if (from.has_dwserverrule()) {
      set_dwserverrule(from.dwserverrule());
    }
    if (from.has_dwsurporttype()) {
      set_dwsurporttype(from.dwsurporttype());
    }
    if (from.has_wtablecount()) {
      set_wtablecount(from.wtablecount());
    }
    if (from.has_ischargeroom()) {
      set_ischargeroom(from.ischargeroom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GameServer_GameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GameServer_GameServer::CopyFrom(const CMD_GP_GameServer_GameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GameServer_GameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;

  return true;
}

void CMD_GP_GameServer_GameServer::Swap(CMD_GP_GameServer_GameServer* other) {
  if (other != this) {
    std::swap(wkindid_, other->wkindid_);
    std::swap(wnodeid_, other->wnodeid_);
    std::swap(wsortid_, other->wsortid_);
    std::swap(wserverid_, other->wserverid_);
    std::swap(wserverport_, other->wserverport_);
    std::swap(dwonlinecount_, other->dwonlinecount_);
    std::swap(dwfullcount_, other->dwfullcount_);
    std::swap(wservertype_, other->wservertype_);
    std::swap(szserveraddr_, other->szserveraddr_);
    std::swap(szservername_, other->szservername_);
    std::swap(lminenterscore_, other->lminenterscore_);
    std::swap(lmaxenterscore_, other->lmaxenterscore_);
    std::swap(wserverkind_, other->wserverkind_);
    std::swap(wserverlevel_, other->wserverlevel_);
    std::swap(lcellscore_, other->lcellscore_);
    std::swap(lenterscore_, other->lenterscore_);
    std::swap(cbentermember_, other->cbentermember_);
    std::swap(dwserverrule_, other->dwserverrule_);
    std::swap(dwsurporttype_, other->dwsurporttype_);
    std::swap(wtablecount_, other->wtablecount_);
    std::swap(ischargeroom_, other->ischargeroom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GameServer_GameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GameServer_GameServer_descriptor_;
  metadata.reflection = CMD_GP_GameServer_GameServer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMD_GP_GameServer::kGameserverFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GameServer::CMD_GP_GameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GameServer::InitAsDefaultInstance() {
}

CMD_GP_GameServer::CMD_GP_GameServer(const CMD_GP_GameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GameServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GameServer::~CMD_GP_GameServer() {
  SharedDtor();
}

void CMD_GP_GameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GameServer_descriptor_;
}

const CMD_GP_GameServer& CMD_GP_GameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GameServer* CMD_GP_GameServer::default_instance_ = NULL;

CMD_GP_GameServer* CMD_GP_GameServer::New() const {
  return new CMD_GP_GameServer;
}

void CMD_GP_GameServer::Clear() {
  gameserver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMD_GP_GameServer.GameServer gameserver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameserver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gameserver;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMD_GP_GameServer.GameServer gameserver = 1;
  for (int i = 0; i < this->gameserver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gameserver(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMD_GP_GameServer.GameServer gameserver = 1;
  for (int i = 0; i < this->gameserver_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gameserver(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GameServer::ByteSize() const {
  int total_size = 0;

  // repeated .CMD_GP_GameServer.GameServer gameserver = 1;
  total_size += 1 * this->gameserver_size();
  for (int i = 0; i < this->gameserver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameserver(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GameServer::MergeFrom(const CMD_GP_GameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameserver_.MergeFrom(from.gameserver_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GameServer::CopyFrom(const CMD_GP_GameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GameServer::IsInitialized() const {

  for (int i = 0; i < gameserver_size(); i++) {
    if (!this->gameserver(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_GP_GameServer::Swap(CMD_GP_GameServer* other) {
  if (other != this) {
    gameserver_.Swap(&other->gameserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GameServer_descriptor_;
  metadata.reflection = CMD_GP_GameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GameKind_GameKind::kWTypeIDFieldNumber;
const int CMD_GP_GameKind_GameKind::kWJoinIDFieldNumber;
const int CMD_GP_GameKind_GameKind::kWSortIDFieldNumber;
const int CMD_GP_GameKind_GameKind::kWKindIDFieldNumber;
const int CMD_GP_GameKind_GameKind::kWGameIDFieldNumber;
const int CMD_GP_GameKind_GameKind::kDwOnLineCountFieldNumber;
const int CMD_GP_GameKind_GameKind::kDwFullCountFieldNumber;
const int CMD_GP_GameKind_GameKind::kSzKindNameFieldNumber;
const int CMD_GP_GameKind_GameKind::kSzProcessNameFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GameKind_GameKind::CMD_GP_GameKind_GameKind()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GameKind_GameKind::InitAsDefaultInstance() {
}

CMD_GP_GameKind_GameKind::CMD_GP_GameKind_GameKind(const CMD_GP_GameKind_GameKind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GameKind_GameKind::SharedCtor() {
  _cached_size_ = 0;
  wtypeid_ = 0;
  wjoinid_ = 0;
  wsortid_ = 0;
  wkindid_ = 0;
  wgameid_ = 0;
  dwonlinecount_ = 0;
  dwfullcount_ = 0;
  szkindname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szprocessname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GameKind_GameKind::~CMD_GP_GameKind_GameKind() {
  SharedDtor();
}

void CMD_GP_GameKind_GameKind::SharedDtor() {
  if (szkindname_ != &::google::protobuf::internal::kEmptyString) {
    delete szkindname_;
  }
  if (szprocessname_ != &::google::protobuf::internal::kEmptyString) {
    delete szprocessname_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GameKind_GameKind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GameKind_GameKind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GameKind_GameKind_descriptor_;
}

const CMD_GP_GameKind_GameKind& CMD_GP_GameKind_GameKind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GameKind_GameKind* CMD_GP_GameKind_GameKind::default_instance_ = NULL;

CMD_GP_GameKind_GameKind* CMD_GP_GameKind_GameKind::New() const {
  return new CMD_GP_GameKind_GameKind;
}

void CMD_GP_GameKind_GameKind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wtypeid_ = 0;
    wjoinid_ = 0;
    wsortid_ = 0;
    wkindid_ = 0;
    wgameid_ = 0;
    dwonlinecount_ = 0;
    dwfullcount_ = 0;
    if (has_szkindname()) {
      if (szkindname_ != &::google::protobuf::internal::kEmptyString) {
        szkindname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_szprocessname()) {
      if (szprocessname_ != &::google::protobuf::internal::kEmptyString) {
        szprocessname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GameKind_GameKind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wTypeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wtypeid_)));
          set_has_wtypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wJoinID;
        break;
      }

      // required int32 wJoinID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wJoinID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wjoinid_)));
          set_has_wjoinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wSortID;
        break;
      }

      // required int32 wSortID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wSortID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
          set_has_wsortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wKindID;
        break;
      }

      // required int32 wKindID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wKindID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
          set_has_wkindid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wGameID;
        break;
      }

      // required int32 wGameID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wGameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wgameid_)));
          set_has_wgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dwOnLineCount;
        break;
      }

      // required int32 dwOnLineCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwOnLineCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwonlinecount_)));
          set_has_dwonlinecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwFullCount;
        break;
      }

      // required int32 dwFullCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwFullCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwfullcount_)));
          set_has_dwfullcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_szKindName;
        break;
      }

      // required string szKindName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szKindName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szkindname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szkindname().data(), this->szkindname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_szProcessName;
        break;
      }

      // required string szProcessName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szProcessName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szprocessname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szprocessname().data(), this->szprocessname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GameKind_GameKind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 wTypeID = 1;
  if (has_wtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wtypeid(), output);
  }

  // required int32 wJoinID = 2;
  if (has_wjoinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wjoinid(), output);
  }

  // required int32 wSortID = 3;
  if (has_wsortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wsortid(), output);
  }

  // required int32 wKindID = 4;
  if (has_wkindid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wkindid(), output);
  }

  // required int32 wGameID = 5;
  if (has_wgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wgameid(), output);
  }

  // required int32 dwOnLineCount = 6;
  if (has_dwonlinecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dwonlinecount(), output);
  }

  // required int32 dwFullCount = 7;
  if (has_dwfullcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dwfullcount(), output);
  }

  // required string szKindName = 8;
  if (has_szkindname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szkindname().data(), this->szkindname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->szkindname(), output);
  }

  // required string szProcessName = 9;
  if (has_szprocessname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szprocessname().data(), this->szprocessname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->szprocessname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GameKind_GameKind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 wTypeID = 1;
  if (has_wtypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wtypeid(), target);
  }

  // required int32 wJoinID = 2;
  if (has_wjoinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wjoinid(), target);
  }

  // required int32 wSortID = 3;
  if (has_wsortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wsortid(), target);
  }

  // required int32 wKindID = 4;
  if (has_wkindid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wkindid(), target);
  }

  // required int32 wGameID = 5;
  if (has_wgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wgameid(), target);
  }

  // required int32 dwOnLineCount = 6;
  if (has_dwonlinecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dwonlinecount(), target);
  }

  // required int32 dwFullCount = 7;
  if (has_dwfullcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dwfullcount(), target);
  }

  // required string szKindName = 8;
  if (has_szkindname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szkindname().data(), this->szkindname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->szkindname(), target);
  }

  // required string szProcessName = 9;
  if (has_szprocessname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szprocessname().data(), this->szprocessname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->szprocessname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GameKind_GameKind::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wTypeID = 1;
    if (has_wtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wtypeid());
    }

    // required int32 wJoinID = 2;
    if (has_wjoinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wjoinid());
    }

    // required int32 wSortID = 3;
    if (has_wsortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wsortid());
    }

    // required int32 wKindID = 4;
    if (has_wkindid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wkindid());
    }

    // required int32 wGameID = 5;
    if (has_wgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wgameid());
    }

    // required int32 dwOnLineCount = 6;
    if (has_dwonlinecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwonlinecount());
    }

    // required int32 dwFullCount = 7;
    if (has_dwfullcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwfullcount());
    }

    // required string szKindName = 8;
    if (has_szkindname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szkindname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string szProcessName = 9;
    if (has_szprocessname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szprocessname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GameKind_GameKind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GameKind_GameKind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GameKind_GameKind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GameKind_GameKind::MergeFrom(const CMD_GP_GameKind_GameKind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wtypeid()) {
      set_wtypeid(from.wtypeid());
    }
    if (from.has_wjoinid()) {
      set_wjoinid(from.wjoinid());
    }
    if (from.has_wsortid()) {
      set_wsortid(from.wsortid());
    }
    if (from.has_wkindid()) {
      set_wkindid(from.wkindid());
    }
    if (from.has_wgameid()) {
      set_wgameid(from.wgameid());
    }
    if (from.has_dwonlinecount()) {
      set_dwonlinecount(from.dwonlinecount());
    }
    if (from.has_dwfullcount()) {
      set_dwfullcount(from.dwfullcount());
    }
    if (from.has_szkindname()) {
      set_szkindname(from.szkindname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_szprocessname()) {
      set_szprocessname(from.szprocessname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GameKind_GameKind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GameKind_GameKind::CopyFrom(const CMD_GP_GameKind_GameKind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GameKind_GameKind::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CMD_GP_GameKind_GameKind::Swap(CMD_GP_GameKind_GameKind* other) {
  if (other != this) {
    std::swap(wtypeid_, other->wtypeid_);
    std::swap(wjoinid_, other->wjoinid_);
    std::swap(wsortid_, other->wsortid_);
    std::swap(wkindid_, other->wkindid_);
    std::swap(wgameid_, other->wgameid_);
    std::swap(dwonlinecount_, other->dwonlinecount_);
    std::swap(dwfullcount_, other->dwfullcount_);
    std::swap(szkindname_, other->szkindname_);
    std::swap(szprocessname_, other->szprocessname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GameKind_GameKind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GameKind_GameKind_descriptor_;
  metadata.reflection = CMD_GP_GameKind_GameKind_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMD_GP_GameKind::kGamekindFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GameKind::CMD_GP_GameKind()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GameKind::InitAsDefaultInstance() {
}

CMD_GP_GameKind::CMD_GP_GameKind(const CMD_GP_GameKind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GameKind::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GameKind::~CMD_GP_GameKind() {
  SharedDtor();
}

void CMD_GP_GameKind::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GameKind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GameKind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GameKind_descriptor_;
}

const CMD_GP_GameKind& CMD_GP_GameKind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GameKind* CMD_GP_GameKind::default_instance_ = NULL;

CMD_GP_GameKind* CMD_GP_GameKind::New() const {
  return new CMD_GP_GameKind;
}

void CMD_GP_GameKind::Clear() {
  gamekind_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GameKind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMD_GP_GameKind.GameKind gamekind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamekind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamekind()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gamekind;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GameKind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMD_GP_GameKind.GameKind gamekind = 1;
  for (int i = 0; i < this->gamekind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gamekind(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GameKind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMD_GP_GameKind.GameKind gamekind = 1;
  for (int i = 0; i < this->gamekind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gamekind(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GameKind::ByteSize() const {
  int total_size = 0;

  // repeated .CMD_GP_GameKind.GameKind gamekind = 1;
  total_size += 1 * this->gamekind_size();
  for (int i = 0; i < this->gamekind_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamekind(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GameKind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GameKind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GameKind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GameKind::MergeFrom(const CMD_GP_GameKind& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamekind_.MergeFrom(from.gamekind_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GameKind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GameKind::CopyFrom(const CMD_GP_GameKind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GameKind::IsInitialized() const {

  for (int i = 0; i < gamekind_size(); i++) {
    if (!this->gamekind(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_GP_GameKind::Swap(CMD_GP_GameKind* other) {
  if (other != this) {
    gamekind_.Swap(&other->gamekind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GameKind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GameKind_descriptor_;
  metadata.reflection = CMD_GP_GameKind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GiftDetail_GiftDetail::kTypeFieldNumber;
const int CMD_GP_GiftDetail_GiftDetail::kNumFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GiftDetail_GiftDetail::CMD_GP_GiftDetail_GiftDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GiftDetail_GiftDetail::InitAsDefaultInstance() {
}

CMD_GP_GiftDetail_GiftDetail::CMD_GP_GiftDetail_GiftDetail(const CMD_GP_GiftDetail_GiftDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GiftDetail_GiftDetail::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GiftDetail_GiftDetail::~CMD_GP_GiftDetail_GiftDetail() {
  SharedDtor();
}

void CMD_GP_GiftDetail_GiftDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GiftDetail_GiftDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GiftDetail_GiftDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GiftDetail_GiftDetail_descriptor_;
}

const CMD_GP_GiftDetail_GiftDetail& CMD_GP_GiftDetail_GiftDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GiftDetail_GiftDetail* CMD_GP_GiftDetail_GiftDetail::default_instance_ = NULL;

CMD_GP_GiftDetail_GiftDetail* CMD_GP_GiftDetail_GiftDetail::New() const {
  return new CMD_GP_GiftDetail_GiftDetail;
}

void CMD_GP_GiftDetail_GiftDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GiftDetail_GiftDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GiftDetail_GiftDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GiftDetail_GiftDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GiftDetail_GiftDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GiftDetail_GiftDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GiftDetail_GiftDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GiftDetail_GiftDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GiftDetail_GiftDetail::MergeFrom(const CMD_GP_GiftDetail_GiftDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GiftDetail_GiftDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GiftDetail_GiftDetail::CopyFrom(const CMD_GP_GiftDetail_GiftDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GiftDetail_GiftDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_GiftDetail_GiftDetail::Swap(CMD_GP_GiftDetail_GiftDetail* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GiftDetail_GiftDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GiftDetail_GiftDetail_descriptor_;
  metadata.reflection = CMD_GP_GiftDetail_GiftDetail_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMD_GP_GiftDetail::kGiftDetailFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GiftDetail::CMD_GP_GiftDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GiftDetail::InitAsDefaultInstance() {
}

CMD_GP_GiftDetail::CMD_GP_GiftDetail(const CMD_GP_GiftDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GiftDetail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GiftDetail::~CMD_GP_GiftDetail() {
  SharedDtor();
}

void CMD_GP_GiftDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_GiftDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GiftDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GiftDetail_descriptor_;
}

const CMD_GP_GiftDetail& CMD_GP_GiftDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GiftDetail* CMD_GP_GiftDetail::default_instance_ = NULL;

CMD_GP_GiftDetail* CMD_GP_GiftDetail::New() const {
  return new CMD_GP_GiftDetail;
}

void CMD_GP_GiftDetail::Clear() {
  giftdetail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GiftDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMD_GP_GiftDetail.GiftDetail giftDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_giftDetail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GiftDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMD_GP_GiftDetail.GiftDetail giftDetail = 1;
  for (int i = 0; i < this->giftdetail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->giftdetail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GiftDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMD_GP_GiftDetail.GiftDetail giftDetail = 1;
  for (int i = 0; i < this->giftdetail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->giftdetail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GiftDetail::ByteSize() const {
  int total_size = 0;

  // repeated .CMD_GP_GiftDetail.GiftDetail giftDetail = 1;
  total_size += 1 * this->giftdetail_size();
  for (int i = 0; i < this->giftdetail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftdetail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GiftDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GiftDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GiftDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GiftDetail::MergeFrom(const CMD_GP_GiftDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  giftdetail_.MergeFrom(from.giftdetail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GiftDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GiftDetail::CopyFrom(const CMD_GP_GiftDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GiftDetail::IsInitialized() const {

  for (int i = 0; i < giftdetail_size(); i++) {
    if (!this->giftdetail(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_GP_GiftDetail::Swap(CMD_GP_GiftDetail* other) {
  if (other != this) {
    giftdetail_.Swap(&other->giftdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GiftDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GiftDetail_descriptor_;
  metadata.reflection = CMD_GP_GiftDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LanternGiftDetail_LanternGiftDetail::kTypeFieldNumber;
const int CMD_GP_LanternGiftDetail_LanternGiftDetail::kNumFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LanternGiftDetail_LanternGiftDetail::CMD_GP_LanternGiftDetail_LanternGiftDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::InitAsDefaultInstance() {
}

CMD_GP_LanternGiftDetail_LanternGiftDetail::CMD_GP_LanternGiftDetail_LanternGiftDetail(const CMD_GP_LanternGiftDetail_LanternGiftDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LanternGiftDetail_LanternGiftDetail::~CMD_GP_LanternGiftDetail_LanternGiftDetail() {
  SharedDtor();
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_LanternGiftDetail_LanternGiftDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_LanternGiftDetail_LanternGiftDetail_descriptor_;
}

const CMD_GP_LanternGiftDetail_LanternGiftDetail& CMD_GP_LanternGiftDetail_LanternGiftDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_LanternGiftDetail_LanternGiftDetail* CMD_GP_LanternGiftDetail_LanternGiftDetail::default_instance_ = NULL;

CMD_GP_LanternGiftDetail_LanternGiftDetail* CMD_GP_LanternGiftDetail_LanternGiftDetail::New() const {
  return new CMD_GP_LanternGiftDetail_LanternGiftDetail;
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_LanternGiftDetail_LanternGiftDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_LanternGiftDetail_LanternGiftDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_LanternGiftDetail_LanternGiftDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_LanternGiftDetail_LanternGiftDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_LanternGiftDetail_LanternGiftDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::MergeFrom(const CMD_GP_LanternGiftDetail_LanternGiftDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::CopyFrom(const CMD_GP_LanternGiftDetail_LanternGiftDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LanternGiftDetail_LanternGiftDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_LanternGiftDetail_LanternGiftDetail::Swap(CMD_GP_LanternGiftDetail_LanternGiftDetail* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_LanternGiftDetail_LanternGiftDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_LanternGiftDetail_LanternGiftDetail_descriptor_;
  metadata.reflection = CMD_GP_LanternGiftDetail_LanternGiftDetail_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMD_GP_LanternGiftDetail::kLanterngiftDetailFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LanternGiftDetail::CMD_GP_LanternGiftDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_LanternGiftDetail::InitAsDefaultInstance() {
}

CMD_GP_LanternGiftDetail::CMD_GP_LanternGiftDetail(const CMD_GP_LanternGiftDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_LanternGiftDetail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LanternGiftDetail::~CMD_GP_LanternGiftDetail() {
  SharedDtor();
}

void CMD_GP_LanternGiftDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GP_LanternGiftDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_LanternGiftDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_LanternGiftDetail_descriptor_;
}

const CMD_GP_LanternGiftDetail& CMD_GP_LanternGiftDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_LanternGiftDetail* CMD_GP_LanternGiftDetail::default_instance_ = NULL;

CMD_GP_LanternGiftDetail* CMD_GP_LanternGiftDetail::New() const {
  return new CMD_GP_LanternGiftDetail;
}

void CMD_GP_LanternGiftDetail::Clear() {
  lanterngiftdetail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_LanternGiftDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMD_GP_LanternGiftDetail.LanternGiftDetail lanterngiftDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lanterngiftDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lanterngiftdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lanterngiftDetail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_LanternGiftDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMD_GP_LanternGiftDetail.LanternGiftDetail lanterngiftDetail = 1;
  for (int i = 0; i < this->lanterngiftdetail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lanterngiftdetail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_LanternGiftDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMD_GP_LanternGiftDetail.LanternGiftDetail lanterngiftDetail = 1;
  for (int i = 0; i < this->lanterngiftdetail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lanterngiftdetail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_LanternGiftDetail::ByteSize() const {
  int total_size = 0;

  // repeated .CMD_GP_LanternGiftDetail.LanternGiftDetail lanterngiftDetail = 1;
  total_size += 1 * this->lanterngiftdetail_size();
  for (int i = 0; i < this->lanterngiftdetail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lanterngiftdetail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LanternGiftDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_LanternGiftDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_LanternGiftDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_LanternGiftDetail::MergeFrom(const CMD_GP_LanternGiftDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  lanterngiftdetail_.MergeFrom(from.lanterngiftdetail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_LanternGiftDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_LanternGiftDetail::CopyFrom(const CMD_GP_LanternGiftDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LanternGiftDetail::IsInitialized() const {

  for (int i = 0; i < lanterngiftdetail_size(); i++) {
    if (!this->lanterngiftdetail(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_GP_LanternGiftDetail::Swap(CMD_GP_LanternGiftDetail* other) {
  if (other != this) {
    lanterngiftdetail_.Swap(&other->lanterngiftdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_LanternGiftDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_LanternGiftDetail_descriptor_;
  metadata.reflection = CMD_GP_LanternGiftDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_ChangeAccount::kMsgFieldNumber;
#endif  // !_MSC_VER

CMD_GP_ChangeAccount::CMD_GP_ChangeAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_ChangeAccount::InitAsDefaultInstance() {
}

CMD_GP_ChangeAccount::CMD_GP_ChangeAccount(const CMD_GP_ChangeAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_ChangeAccount::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_ChangeAccount::~CMD_GP_ChangeAccount() {
  SharedDtor();
}

void CMD_GP_ChangeAccount::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_ChangeAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_ChangeAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_ChangeAccount_descriptor_;
}

const CMD_GP_ChangeAccount& CMD_GP_ChangeAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_ChangeAccount* CMD_GP_ChangeAccount::default_instance_ = NULL;

CMD_GP_ChangeAccount* CMD_GP_ChangeAccount::New() const {
  return new CMD_GP_ChangeAccount;
}

void CMD_GP_ChangeAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_ChangeAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_ChangeAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_ChangeAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_ChangeAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_ChangeAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_ChangeAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_ChangeAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_ChangeAccount::MergeFrom(const CMD_GP_ChangeAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_ChangeAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_ChangeAccount::CopyFrom(const CMD_GP_ChangeAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_ChangeAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_ChangeAccount::Swap(CMD_GP_ChangeAccount* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_ChangeAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_ChangeAccount_descriptor_;
  metadata.reflection = CMD_GP_ChangeAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_TreasureChange::kScoreFieldNumber;
const int CMD_GP_TreasureChange::kMemberTypeFieldNumber;
const int CMD_GP_TreasureChange::kMemberInfoFieldNumber;
const int CMD_GP_TreasureChange::kLovelinessFieldNumber;
const int CMD_GP_TreasureChange::kTicketFieldNumber;
const int CMD_GP_TreasureChange::kNewGiftChargeFieldNumber;
const int CMD_GP_TreasureChange::kLuckDrawFieldNumber;
const int CMD_GP_TreasureChange::kMonthlyCardFieldNumber;
const int CMD_GP_TreasureChange::kRechargeIDFieldNumber;
const int CMD_GP_TreasureChange::kRechargeTypeFieldNumber;
#endif  // !_MSC_VER

CMD_GP_TreasureChange::CMD_GP_TreasureChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_TreasureChange::InitAsDefaultInstance() {
  monthlycard_ = const_cast< ::MonthlyCard*>(&::MonthlyCard::default_instance());
}

CMD_GP_TreasureChange::CMD_GP_TreasureChange(const CMD_GP_TreasureChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_TreasureChange::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  membertype_ = 0;
  memberinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loveliness_ = 0;
  ticket_ = 0;
  newgiftcharge_ = 0;
  luckdraw_ = 0;
  monthlycard_ = NULL;
  rechargeid_ = 0;
  rechargetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_TreasureChange::~CMD_GP_TreasureChange() {
  SharedDtor();
}

void CMD_GP_TreasureChange::SharedDtor() {
  if (memberinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete memberinfo_;
  }
  if (this != default_instance_) {
    delete monthlycard_;
  }
}

void CMD_GP_TreasureChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_TreasureChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_TreasureChange_descriptor_;
}

const CMD_GP_TreasureChange& CMD_GP_TreasureChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_TreasureChange* CMD_GP_TreasureChange::default_instance_ = NULL;

CMD_GP_TreasureChange* CMD_GP_TreasureChange::New() const {
  return new CMD_GP_TreasureChange;
}

void CMD_GP_TreasureChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
    membertype_ = 0;
    if (has_memberinfo()) {
      if (memberinfo_ != &::google::protobuf::internal::kEmptyString) {
        memberinfo_->clear();
      }
    }
    loveliness_ = 0;
    ticket_ = 0;
    newgiftcharge_ = 0;
    luckdraw_ = 0;
    if (has_monthlycard()) {
      if (monthlycard_ != NULL) monthlycard_->::MonthlyCard::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rechargeid_ = 0;
    rechargetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_TreasureChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_memberType;
        break;
      }

      // optional int32 memberType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membertype_)));
          set_has_membertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_memberInfo;
        break;
      }

      // optional string memberInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memberinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->memberinfo().data(), this->memberinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loveliness;
        break;
      }

      // optional int32 loveliness = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loveliness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loveliness_)));
          set_has_loveliness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_newGiftCharge;
        break;
      }

      // optional int32 newGiftCharge = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newGiftCharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newgiftcharge_)));
          set_has_newgiftcharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_luckDraw;
        break;
      }

      // optional int32 luckDraw = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckDraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luckdraw_)));
          set_has_luckdraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monthlyCard;
        break;
      }

      // optional .MonthlyCard monthlyCard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monthlyCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monthlycard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rechargeID;
        break;
      }

      // optional int32 rechargeID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargeid_)));
          set_has_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rechargeType;
        break;
      }

      // optional int32 rechargeType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargetype_)));
          set_has_rechargetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_TreasureChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // optional int32 memberType = 2;
  if (has_membertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->membertype(), output);
  }

  // optional string memberInfo = 3;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memberinfo().data(), this->memberinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->memberinfo(), output);
  }

  // optional int32 loveliness = 4;
  if (has_loveliness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->loveliness(), output);
  }

  // optional int32 ticket = 5;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ticket(), output);
  }

  // optional int32 newGiftCharge = 6;
  if (has_newgiftcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->newgiftcharge(), output);
  }

  // optional int32 luckDraw = 7;
  if (has_luckdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->luckdraw(), output);
  }

  // optional .MonthlyCard monthlyCard = 8;
  if (has_monthlycard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monthlycard(), output);
  }

  // optional int32 rechargeID = 9;
  if (has_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rechargeid(), output);
  }

  // optional int32 rechargeType = 10;
  if (has_rechargetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rechargetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_TreasureChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  // optional int32 memberType = 2;
  if (has_membertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->membertype(), target);
  }

  // optional string memberInfo = 3;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memberinfo().data(), this->memberinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->memberinfo(), target);
  }

  // optional int32 loveliness = 4;
  if (has_loveliness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->loveliness(), target);
  }

  // optional int32 ticket = 5;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ticket(), target);
  }

  // optional int32 newGiftCharge = 6;
  if (has_newgiftcharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->newgiftcharge(), target);
  }

  // optional int32 luckDraw = 7;
  if (has_luckdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->luckdraw(), target);
  }

  // optional .MonthlyCard monthlyCard = 8;
  if (has_monthlycard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monthlycard(), target);
  }

  // optional int32 rechargeID = 9;
  if (has_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rechargeid(), target);
  }

  // optional int32 rechargeType = 10;
  if (has_rechargetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rechargetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_TreasureChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int32 memberType = 2;
    if (has_membertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membertype());
    }

    // optional string memberInfo = 3;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memberinfo());
    }

    // optional int32 loveliness = 4;
    if (has_loveliness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loveliness());
    }

    // optional int32 ticket = 5;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional int32 newGiftCharge = 6;
    if (has_newgiftcharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newgiftcharge());
    }

    // optional int32 luckDraw = 7;
    if (has_luckdraw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luckdraw());
    }

    // optional .MonthlyCard monthlyCard = 8;
    if (has_monthlycard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monthlycard());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 rechargeID = 9;
    if (has_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargeid());
    }

    // optional int32 rechargeType = 10;
    if (has_rechargetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_TreasureChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_TreasureChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_TreasureChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_TreasureChange::MergeFrom(const CMD_GP_TreasureChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_membertype()) {
      set_membertype(from.membertype());
    }
    if (from.has_memberinfo()) {
      set_memberinfo(from.memberinfo());
    }
    if (from.has_loveliness()) {
      set_loveliness(from.loveliness());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_newgiftcharge()) {
      set_newgiftcharge(from.newgiftcharge());
    }
    if (from.has_luckdraw()) {
      set_luckdraw(from.luckdraw());
    }
    if (from.has_monthlycard()) {
      mutable_monthlycard()->::MonthlyCard::MergeFrom(from.monthlycard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rechargeid()) {
      set_rechargeid(from.rechargeid());
    }
    if (from.has_rechargetype()) {
      set_rechargetype(from.rechargetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_TreasureChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_TreasureChange::CopyFrom(const CMD_GP_TreasureChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_TreasureChange::IsInitialized() const {

  return true;
}

void CMD_GP_TreasureChange::Swap(CMD_GP_TreasureChange* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(membertype_, other->membertype_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(loveliness_, other->loveliness_);
    std::swap(ticket_, other->ticket_);
    std::swap(newgiftcharge_, other->newgiftcharge_);
    std::swap(luckdraw_, other->luckdraw_);
    std::swap(monthlycard_, other->monthlycard_);
    std::swap(rechargeid_, other->rechargeid_);
    std::swap(rechargetype_, other->rechargetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_TreasureChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_TreasureChange_descriptor_;
  metadata.reflection = CMD_GP_TreasureChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SUB_GP_RANK_GoldRank::kRankingFieldNumber;
const int SUB_GP_RANK_GoldRank::kGameidFieldNumber;
const int SUB_GP_RANK_GoldRank::kMemberorderFieldNumber;
const int SUB_GP_RANK_GoldRank::kNicknameFieldNumber;
const int SUB_GP_RANK_GoldRank::kScoreFieldNumber;
#endif  // !_MSC_VER

SUB_GP_RANK_GoldRank::SUB_GP_RANK_GoldRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUB_GP_RANK_GoldRank::InitAsDefaultInstance() {
}

SUB_GP_RANK_GoldRank::SUB_GP_RANK_GoldRank(const SUB_GP_RANK_GoldRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUB_GP_RANK_GoldRank::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0;
  gameid_ = 0;
  memberorder_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUB_GP_RANK_GoldRank::~SUB_GP_RANK_GoldRank() {
  SharedDtor();
}

void SUB_GP_RANK_GoldRank::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void SUB_GP_RANK_GoldRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUB_GP_RANK_GoldRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_GP_RANK_GoldRank_descriptor_;
}

const SUB_GP_RANK_GoldRank& SUB_GP_RANK_GoldRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

SUB_GP_RANK_GoldRank* SUB_GP_RANK_GoldRank::default_instance_ = NULL;

SUB_GP_RANK_GoldRank* SUB_GP_RANK_GoldRank::New() const {
  return new SUB_GP_RANK_GoldRank;
}

void SUB_GP_RANK_GoldRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranking_ = 0;
    gameid_ = 0;
    memberorder_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUB_GP_RANK_GoldRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberorder;
        break;
      }

      // required int32 memberorder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberorder_)));
          set_has_memberorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // required string nickname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // required int64 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUB_GP_RANK_GoldRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranking(), output);
  }

  // required int32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // required int32 memberorder = 3;
  if (has_memberorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->memberorder(), output);
  }

  // required string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

  // required int64 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUB_GP_RANK_GoldRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranking(), target);
  }

  // required int32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // required int32 memberorder = 3;
  if (has_memberorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->memberorder(), target);
  }

  // required string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // required int64 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUB_GP_RANK_GoldRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required int32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 memberorder = 3;
    if (has_memberorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberorder());
    }

    // required string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int64 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUB_GP_RANK_GoldRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUB_GP_RANK_GoldRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUB_GP_RANK_GoldRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUB_GP_RANK_GoldRank::MergeFrom(const SUB_GP_RANK_GoldRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_memberorder()) {
      set_memberorder(from.memberorder());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUB_GP_RANK_GoldRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUB_GP_RANK_GoldRank::CopyFrom(const SUB_GP_RANK_GoldRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUB_GP_RANK_GoldRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SUB_GP_RANK_GoldRank::Swap(SUB_GP_RANK_GoldRank* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(gameid_, other->gameid_);
    std::swap(memberorder_, other->memberorder_);
    std::swap(nickname_, other->nickname_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUB_GP_RANK_GoldRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUB_GP_RANK_GoldRank_descriptor_;
  metadata.reflection = SUB_GP_RANK_GoldRank_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SUB_GP_RANK::kGoldRankFieldNumber;
const int SUB_GP_RANK::kSelfRankFieldNumber;
const int SUB_GP_RANK::kShowRankFieldNumber;
#endif  // !_MSC_VER

SUB_GP_RANK::SUB_GP_RANK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUB_GP_RANK::InitAsDefaultInstance() {
}

SUB_GP_RANK::SUB_GP_RANK(const SUB_GP_RANK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUB_GP_RANK::SharedCtor() {
  _cached_size_ = 0;
  selfrank_ = 0;
  showrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUB_GP_RANK::~SUB_GP_RANK() {
  SharedDtor();
}

void SUB_GP_RANK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SUB_GP_RANK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUB_GP_RANK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_GP_RANK_descriptor_;
}

const SUB_GP_RANK& SUB_GP_RANK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

SUB_GP_RANK* SUB_GP_RANK::default_instance_ = NULL;

SUB_GP_RANK* SUB_GP_RANK::New() const {
  return new SUB_GP_RANK;
}

void SUB_GP_RANK::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    selfrank_ = 0;
    showrank_ = 0;
  }
  goldrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUB_GP_RANK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SUB_GP_RANK.GoldRank goldRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goldrank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goldRank;
        if (input->ExpectTag(16)) goto parse_selfRank;
        break;
      }

      // required int32 selfRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_showRank;
        break;
      }

      // optional int32 showRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showrank_)));
          set_has_showrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUB_GP_RANK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SUB_GP_RANK.GoldRank goldRank = 1;
  for (int i = 0; i < this->goldrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goldrank(i), output);
  }

  // required int32 selfRank = 2;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selfrank(), output);
  }

  // optional int32 showRank = 3;
  if (has_showrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->showrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUB_GP_RANK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SUB_GP_RANK.GoldRank goldRank = 1;
  for (int i = 0; i < this->goldrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goldrank(i), target);
  }

  // required int32 selfRank = 2;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selfrank(), target);
  }

  // optional int32 showRank = 3;
  if (has_showrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->showrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUB_GP_RANK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 selfRank = 2;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }

    // optional int32 showRank = 3;
    if (has_showrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showrank());
    }

  }
  // repeated .SUB_GP_RANK.GoldRank goldRank = 1;
  total_size += 1 * this->goldrank_size();
  for (int i = 0; i < this->goldrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goldrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUB_GP_RANK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUB_GP_RANK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUB_GP_RANK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUB_GP_RANK::MergeFrom(const SUB_GP_RANK& from) {
  GOOGLE_CHECK_NE(&from, this);
  goldrank_.MergeFrom(from.goldrank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_showrank()) {
      set_showrank(from.showrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUB_GP_RANK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUB_GP_RANK::CopyFrom(const SUB_GP_RANK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUB_GP_RANK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < goldrank_size(); i++) {
    if (!this->goldrank(i).IsInitialized()) return false;
  }
  return true;
}

void SUB_GP_RANK::Swap(SUB_GP_RANK* other) {
  if (other != this) {
    goldrank_.Swap(&other->goldrank_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(showrank_, other->showrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUB_GP_RANK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUB_GP_RANK_descriptor_;
  metadata.reflection = SUB_GP_RANK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SUB_GP_FISHRANK_FishRank::kRankFieldNumber;
const int SUB_GP_FISHRANK_FishRank::kGameIDFieldNumber;
const int SUB_GP_FISHRANK_FishRank::kMemberOrderFieldNumber;
const int SUB_GP_FISHRANK_FishRank::kNickNameFieldNumber;
const int SUB_GP_FISHRANK_FishRank::kCatchedFishNumFieldNumber;
const int SUB_GP_FISHRANK_FishRank::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

SUB_GP_FISHRANK_FishRank::SUB_GP_FISHRANK_FishRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUB_GP_FISHRANK_FishRank::InitAsDefaultInstance() {
}

SUB_GP_FISHRANK_FishRank::SUB_GP_FISHRANK_FishRank(const SUB_GP_FISHRANK_FishRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUB_GP_FISHRANK_FishRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  gameid_ = 0;
  memberorder_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  catchedfishnum_ = 0;
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUB_GP_FISHRANK_FishRank::~SUB_GP_FISHRANK_FishRank() {
  SharedDtor();
}

void SUB_GP_FISHRANK_FishRank::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void SUB_GP_FISHRANK_FishRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUB_GP_FISHRANK_FishRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_GP_FISHRANK_FishRank_descriptor_;
}

const SUB_GP_FISHRANK_FishRank& SUB_GP_FISHRANK_FishRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

SUB_GP_FISHRANK_FishRank* SUB_GP_FISHRANK_FishRank::default_instance_ = NULL;

SUB_GP_FISHRANK_FishRank* SUB_GP_FISHRANK_FishRank::New() const {
  return new SUB_GP_FISHRANK_FishRank;
}

void SUB_GP_FISHRANK_FishRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    gameid_ = 0;
    memberorder_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    catchedfishnum_ = 0;
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUB_GP_FISHRANK_FishRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GameID;
        break;
      }

      // required int32 GameID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MemberOrder;
        break;
      }

      // required int32 MemberOrder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemberOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberorder_)));
          set_has_memberorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NickName;
        break;
      }

      // required string NickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CatchedFishNum;
        break;
      }

      // required int32 CatchedFishNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CatchedFishNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &catchedfishnum_)));
          set_has_catchedfishnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_UpdateTime;
        break;
      }

      // required string UpdateTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUB_GP_FISHRANK_FishRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // required int32 GameID = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // required int32 MemberOrder = 3;
  if (has_memberorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->memberorder(), output);
  }

  // required string NickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

  // required int32 CatchedFishNum = 5;
  if (has_catchedfishnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->catchedfishnum(), output);
  }

  // required string UpdateTime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUB_GP_FISHRANK_FishRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // required int32 GameID = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // required int32 MemberOrder = 3;
  if (has_memberorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->memberorder(), target);
  }

  // required string NickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // required int32 CatchedFishNum = 5;
  if (has_catchedfishnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->catchedfishnum(), target);
  }

  // required string UpdateTime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUB_GP_FISHRANK_FishRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 GameID = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 MemberOrder = 3;
    if (has_memberorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberorder());
    }

    // required string NickName = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 CatchedFishNum = 5;
    if (has_catchedfishnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->catchedfishnum());
    }

    // required string UpdateTime = 6;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUB_GP_FISHRANK_FishRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUB_GP_FISHRANK_FishRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUB_GP_FISHRANK_FishRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUB_GP_FISHRANK_FishRank::MergeFrom(const SUB_GP_FISHRANK_FishRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_memberorder()) {
      set_memberorder(from.memberorder());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_catchedfishnum()) {
      set_catchedfishnum(from.catchedfishnum());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUB_GP_FISHRANK_FishRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUB_GP_FISHRANK_FishRank::CopyFrom(const SUB_GP_FISHRANK_FishRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUB_GP_FISHRANK_FishRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SUB_GP_FISHRANK_FishRank::Swap(SUB_GP_FISHRANK_FishRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(gameid_, other->gameid_);
    std::swap(memberorder_, other->memberorder_);
    std::swap(nickname_, other->nickname_);
    std::swap(catchedfishnum_, other->catchedfishnum_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUB_GP_FISHRANK_FishRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUB_GP_FISHRANK_FishRank_descriptor_;
  metadata.reflection = SUB_GP_FISHRANK_FishRank_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SUB_GP_FISHRANK::kFishRankFieldNumber;
const int SUB_GP_FISHRANK::kSelfRankFieldNumber;
#endif  // !_MSC_VER

SUB_GP_FISHRANK::SUB_GP_FISHRANK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUB_GP_FISHRANK::InitAsDefaultInstance() {
}

SUB_GP_FISHRANK::SUB_GP_FISHRANK(const SUB_GP_FISHRANK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUB_GP_FISHRANK::SharedCtor() {
  _cached_size_ = 0;
  selfrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUB_GP_FISHRANK::~SUB_GP_FISHRANK() {
  SharedDtor();
}

void SUB_GP_FISHRANK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SUB_GP_FISHRANK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUB_GP_FISHRANK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_GP_FISHRANK_descriptor_;
}

const SUB_GP_FISHRANK& SUB_GP_FISHRANK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

SUB_GP_FISHRANK* SUB_GP_FISHRANK::default_instance_ = NULL;

SUB_GP_FISHRANK* SUB_GP_FISHRANK::New() const {
  return new SUB_GP_FISHRANK;
}

void SUB_GP_FISHRANK::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    selfrank_ = 0;
  }
  fishrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUB_GP_FISHRANK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SUB_GP_FISHRANK.FishRank fishRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishrank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fishRank;
        if (input->ExpectTag(16)) goto parse_selfRank;
        break;
      }

      // required int32 selfRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUB_GP_FISHRANK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SUB_GP_FISHRANK.FishRank fishRank = 1;
  for (int i = 0; i < this->fishrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fishrank(i), output);
  }

  // required int32 selfRank = 2;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selfrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUB_GP_FISHRANK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SUB_GP_FISHRANK.FishRank fishRank = 1;
  for (int i = 0; i < this->fishrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fishrank(i), target);
  }

  // required int32 selfRank = 2;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selfrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUB_GP_FISHRANK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 selfRank = 2;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }

  }
  // repeated .SUB_GP_FISHRANK.FishRank fishRank = 1;
  total_size += 1 * this->fishrank_size();
  for (int i = 0; i < this->fishrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUB_GP_FISHRANK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUB_GP_FISHRANK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUB_GP_FISHRANK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUB_GP_FISHRANK::MergeFrom(const SUB_GP_FISHRANK& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishrank_.MergeFrom(from.fishrank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUB_GP_FISHRANK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUB_GP_FISHRANK::CopyFrom(const SUB_GP_FISHRANK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUB_GP_FISHRANK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < fishrank_size(); i++) {
    if (!this->fishrank(i).IsInitialized()) return false;
  }
  return true;
}

void SUB_GP_FISHRANK::Swap(SUB_GP_FISHRANK* other) {
  if (other != this) {
    fishrank_.Swap(&other->fishrank_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUB_GP_FISHRANK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUB_GP_FISHRANK_descriptor_;
  metadata.reflection = SUB_GP_FISHRANK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SUB_GP_NEWPLAYGIFTFLAG::kFlagFieldNumber;
const int SUB_GP_NEWPLAYGIFTFLAG::kMsgFieldNumber;
#endif  // !_MSC_VER

SUB_GP_NEWPLAYGIFTFLAG::SUB_GP_NEWPLAYGIFTFLAG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUB_GP_NEWPLAYGIFTFLAG::InitAsDefaultInstance() {
}

SUB_GP_NEWPLAYGIFTFLAG::SUB_GP_NEWPLAYGIFTFLAG(const SUB_GP_NEWPLAYGIFTFLAG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUB_GP_NEWPLAYGIFTFLAG::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUB_GP_NEWPLAYGIFTFLAG::~SUB_GP_NEWPLAYGIFTFLAG() {
  SharedDtor();
}

void SUB_GP_NEWPLAYGIFTFLAG::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void SUB_GP_NEWPLAYGIFTFLAG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUB_GP_NEWPLAYGIFTFLAG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_GP_NEWPLAYGIFTFLAG_descriptor_;
}

const SUB_GP_NEWPLAYGIFTFLAG& SUB_GP_NEWPLAYGIFTFLAG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

SUB_GP_NEWPLAYGIFTFLAG* SUB_GP_NEWPLAYGIFTFLAG::default_instance_ = NULL;

SUB_GP_NEWPLAYGIFTFLAG* SUB_GP_NEWPLAYGIFTFLAG::New() const {
  return new SUB_GP_NEWPLAYGIFTFLAG;
}

void SUB_GP_NEWPLAYGIFTFLAG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUB_GP_NEWPLAYGIFTFLAG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUB_GP_NEWPLAYGIFTFLAG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUB_GP_NEWPLAYGIFTFLAG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUB_GP_NEWPLAYGIFTFLAG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUB_GP_NEWPLAYGIFTFLAG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUB_GP_NEWPLAYGIFTFLAG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUB_GP_NEWPLAYGIFTFLAG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUB_GP_NEWPLAYGIFTFLAG::MergeFrom(const SUB_GP_NEWPLAYGIFTFLAG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUB_GP_NEWPLAYGIFTFLAG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUB_GP_NEWPLAYGIFTFLAG::CopyFrom(const SUB_GP_NEWPLAYGIFTFLAG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUB_GP_NEWPLAYGIFTFLAG::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SUB_GP_NEWPLAYGIFTFLAG::Swap(SUB_GP_NEWPLAYGIFTFLAG* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUB_GP_NEWPLAYGIFTFLAG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUB_GP_NEWPLAYGIFTFLAG_descriptor_;
  metadata.reflection = SUB_GP_NEWPLAYGIFTFLAG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SUB_GP_AllModelsSwitch_AllModelsSwitch::kModelIDFieldNumber;
const int SUB_GP_AllModelsSwitch_AllModelsSwitch::kIsShowFieldNumber;
#endif  // !_MSC_VER

SUB_GP_AllModelsSwitch_AllModelsSwitch::SUB_GP_AllModelsSwitch_AllModelsSwitch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::InitAsDefaultInstance() {
}

SUB_GP_AllModelsSwitch_AllModelsSwitch::SUB_GP_AllModelsSwitch_AllModelsSwitch(const SUB_GP_AllModelsSwitch_AllModelsSwitch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::SharedCtor() {
  _cached_size_ = 0;
  modelid_ = 0;
  isshow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUB_GP_AllModelsSwitch_AllModelsSwitch::~SUB_GP_AllModelsSwitch_AllModelsSwitch() {
  SharedDtor();
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUB_GP_AllModelsSwitch_AllModelsSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_GP_AllModelsSwitch_AllModelsSwitch_descriptor_;
}

const SUB_GP_AllModelsSwitch_AllModelsSwitch& SUB_GP_AllModelsSwitch_AllModelsSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

SUB_GP_AllModelsSwitch_AllModelsSwitch* SUB_GP_AllModelsSwitch_AllModelsSwitch::default_instance_ = NULL;

SUB_GP_AllModelsSwitch_AllModelsSwitch* SUB_GP_AllModelsSwitch_AllModelsSwitch::New() const {
  return new SUB_GP_AllModelsSwitch_AllModelsSwitch;
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modelid_ = 0;
    isshow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUB_GP_AllModelsSwitch_AllModelsSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ModelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsShow;
        break;
      }

      // required int32 IsShow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isshow_)));
          set_has_isshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ModelID = 1;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modelid(), output);
  }

  // required int32 IsShow = 2;
  if (has_isshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isshow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUB_GP_AllModelsSwitch_AllModelsSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ModelID = 1;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modelid(), target);
  }

  // required int32 IsShow = 2;
  if (has_isshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isshow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUB_GP_AllModelsSwitch_AllModelsSwitch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ModelID = 1;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelid());
    }

    // required int32 IsShow = 2;
    if (has_isshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isshow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUB_GP_AllModelsSwitch_AllModelsSwitch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUB_GP_AllModelsSwitch_AllModelsSwitch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::MergeFrom(const SUB_GP_AllModelsSwitch_AllModelsSwitch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_isshow()) {
      set_isshow(from.isshow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::CopyFrom(const SUB_GP_AllModelsSwitch_AllModelsSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUB_GP_AllModelsSwitch_AllModelsSwitch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SUB_GP_AllModelsSwitch_AllModelsSwitch::Swap(SUB_GP_AllModelsSwitch_AllModelsSwitch* other) {
  if (other != this) {
    std::swap(modelid_, other->modelid_);
    std::swap(isshow_, other->isshow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUB_GP_AllModelsSwitch_AllModelsSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUB_GP_AllModelsSwitch_AllModelsSwitch_descriptor_;
  metadata.reflection = SUB_GP_AllModelsSwitch_AllModelsSwitch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SUB_GP_AllModelsSwitch::kAllModelsSwitchFieldNumber;
#endif  // !_MSC_VER

SUB_GP_AllModelsSwitch::SUB_GP_AllModelsSwitch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUB_GP_AllModelsSwitch::InitAsDefaultInstance() {
}

SUB_GP_AllModelsSwitch::SUB_GP_AllModelsSwitch(const SUB_GP_AllModelsSwitch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUB_GP_AllModelsSwitch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUB_GP_AllModelsSwitch::~SUB_GP_AllModelsSwitch() {
  SharedDtor();
}

void SUB_GP_AllModelsSwitch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SUB_GP_AllModelsSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUB_GP_AllModelsSwitch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_GP_AllModelsSwitch_descriptor_;
}

const SUB_GP_AllModelsSwitch& SUB_GP_AllModelsSwitch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

SUB_GP_AllModelsSwitch* SUB_GP_AllModelsSwitch::default_instance_ = NULL;

SUB_GP_AllModelsSwitch* SUB_GP_AllModelsSwitch::New() const {
  return new SUB_GP_AllModelsSwitch;
}

void SUB_GP_AllModelsSwitch::Clear() {
  allmodelsswitch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUB_GP_AllModelsSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SUB_GP_AllModelsSwitch.AllModelsSwitch allModelsSwitch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allModelsSwitch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allmodelsswitch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allModelsSwitch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUB_GP_AllModelsSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SUB_GP_AllModelsSwitch.AllModelsSwitch allModelsSwitch = 1;
  for (int i = 0; i < this->allmodelsswitch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allmodelsswitch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUB_GP_AllModelsSwitch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SUB_GP_AllModelsSwitch.AllModelsSwitch allModelsSwitch = 1;
  for (int i = 0; i < this->allmodelsswitch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allmodelsswitch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUB_GP_AllModelsSwitch::ByteSize() const {
  int total_size = 0;

  // repeated .SUB_GP_AllModelsSwitch.AllModelsSwitch allModelsSwitch = 1;
  total_size += 1 * this->allmodelsswitch_size();
  for (int i = 0; i < this->allmodelsswitch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allmodelsswitch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUB_GP_AllModelsSwitch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUB_GP_AllModelsSwitch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUB_GP_AllModelsSwitch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUB_GP_AllModelsSwitch::MergeFrom(const SUB_GP_AllModelsSwitch& from) {
  GOOGLE_CHECK_NE(&from, this);
  allmodelsswitch_.MergeFrom(from.allmodelsswitch_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUB_GP_AllModelsSwitch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUB_GP_AllModelsSwitch::CopyFrom(const SUB_GP_AllModelsSwitch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUB_GP_AllModelsSwitch::IsInitialized() const {

  for (int i = 0; i < allmodelsswitch_size(); i++) {
    if (!this->allmodelsswitch(i).IsInitialized()) return false;
  }
  return true;
}

void SUB_GP_AllModelsSwitch::Swap(SUB_GP_AllModelsSwitch* other) {
  if (other != this) {
    allmodelsswitch_.Swap(&other->allmodelsswitch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUB_GP_AllModelsSwitch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUB_GP_AllModelsSwitch_descriptor_;
  metadata.reflection = SUB_GP_AllModelsSwitch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_SignIn::kFlagFieldNumber;
const int CMD_GP_SignIn::kMsgFieldNumber;
const int CMD_GP_SignIn::kGoldFieldNumber;
#endif  // !_MSC_VER

CMD_GP_SignIn::CMD_GP_SignIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_SignIn::InitAsDefaultInstance() {
}

CMD_GP_SignIn::CMD_GP_SignIn(const CMD_GP_SignIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_SignIn::SharedCtor() {
  _cached_size_ = 0;
  flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_SignIn::~CMD_GP_SignIn() {
  SharedDtor();
}

void CMD_GP_SignIn::SharedDtor() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (gold_ != &::google::protobuf::internal::kEmptyString) {
    delete gold_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_SignIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_SignIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_SignIn_descriptor_;
}

const CMD_GP_SignIn& CMD_GP_SignIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_SignIn* CMD_GP_SignIn::default_instance_ = NULL;

CMD_GP_SignIn* CMD_GP_SignIn::New() const {
  return new CMD_GP_SignIn;
}

void CMD_GP_SignIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_flag()) {
      if (flag_ != &::google::protobuf::internal::kEmptyString) {
        flag_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_gold()) {
      if (gold_ != &::google::protobuf::internal::kEmptyString) {
        gold_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_SignIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag().data(), this->flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gold;
        break;
      }

      // optional string gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gold()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gold().data(), this->gold().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_SignIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->flag(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // optional string gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gold().data(), this->gold().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_SignIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->flag(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional string gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gold().data(), this->gold().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_SignIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional string gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_SignIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_SignIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_SignIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_SignIn::MergeFrom(const CMD_GP_SignIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_SignIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_SignIn::CopyFrom(const CMD_GP_SignIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_SignIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_SignIn::Swap(CMD_GP_SignIn* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(msg_, other->msg_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_SignIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_SignIn_descriptor_;
  metadata.reflection = CMD_GP_SignIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetHeadUrl::kFlagFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetHeadUrl::CMD_GP_GetHeadUrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetHeadUrl::InitAsDefaultInstance() {
}

CMD_GP_GetHeadUrl::CMD_GP_GetHeadUrl(const CMD_GP_GetHeadUrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetHeadUrl::SharedCtor() {
  _cached_size_ = 0;
  flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetHeadUrl::~CMD_GP_GetHeadUrl() {
  SharedDtor();
}

void CMD_GP_GetHeadUrl::SharedDtor() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetHeadUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetHeadUrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetHeadUrl_descriptor_;
}

const CMD_GP_GetHeadUrl& CMD_GP_GetHeadUrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GetHeadUrl* CMD_GP_GetHeadUrl::default_instance_ = NULL;

CMD_GP_GetHeadUrl* CMD_GP_GetHeadUrl::New() const {
  return new CMD_GP_GetHeadUrl;
}

void CMD_GP_GetHeadUrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_flag()) {
      if (flag_ != &::google::protobuf::internal::kEmptyString) {
        flag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetHeadUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag().data(), this->flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetHeadUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetHeadUrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetHeadUrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetHeadUrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetHeadUrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetHeadUrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetHeadUrl::MergeFrom(const CMD_GP_GetHeadUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetHeadUrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetHeadUrl::CopyFrom(const CMD_GP_GetHeadUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetHeadUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_GetHeadUrl::Swap(CMD_GP_GetHeadUrl* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetHeadUrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetHeadUrl_descriptor_;
  metadata.reflection = CMD_GP_GetHeadUrl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetNoviceCard::kMsgFieldNumber;
const int CMD_GP_GetNoviceCard::kCodeFieldNumber;
const int CMD_GP_GetNoviceCard::kQuotaFieldNumber;
const int CMD_GP_GetNoviceCard::kDurationTermFieldNumber;
const int CMD_GP_GetNoviceCard::kCardDayFieldNumber;
const int CMD_GP_GetNoviceCard::kCardStateFieldNumber;
const int CMD_GP_GetNoviceCard::kDenominationFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetNoviceCard::CMD_GP_GetNoviceCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetNoviceCard::InitAsDefaultInstance() {
}

CMD_GP_GetNoviceCard::CMD_GP_GetNoviceCard(const CMD_GP_GetNoviceCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetNoviceCard::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quota_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  durationterm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  denomination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetNoviceCard::~CMD_GP_GetNoviceCard() {
  SharedDtor();
}

void CMD_GP_GetNoviceCard::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (quota_ != &::google::protobuf::internal::kEmptyString) {
    delete quota_;
  }
  if (durationterm_ != &::google::protobuf::internal::kEmptyString) {
    delete durationterm_;
  }
  if (cardday_ != &::google::protobuf::internal::kEmptyString) {
    delete cardday_;
  }
  if (cardstate_ != &::google::protobuf::internal::kEmptyString) {
    delete cardstate_;
  }
  if (denomination_ != &::google::protobuf::internal::kEmptyString) {
    delete denomination_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetNoviceCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetNoviceCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetNoviceCard_descriptor_;
}

const CMD_GP_GetNoviceCard& CMD_GP_GetNoviceCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GetNoviceCard* CMD_GP_GetNoviceCard::default_instance_ = NULL;

CMD_GP_GetNoviceCard* CMD_GP_GetNoviceCard::New() const {
  return new CMD_GP_GetNoviceCard;
}

void CMD_GP_GetNoviceCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_quota()) {
      if (quota_ != &::google::protobuf::internal::kEmptyString) {
        quota_->clear();
      }
    }
    if (has_durationterm()) {
      if (durationterm_ != &::google::protobuf::internal::kEmptyString) {
        durationterm_->clear();
      }
    }
    if (has_cardday()) {
      if (cardday_ != &::google::protobuf::internal::kEmptyString) {
        cardday_->clear();
      }
    }
    if (has_cardstate()) {
      if (cardstate_ != &::google::protobuf::internal::kEmptyString) {
        cardstate_->clear();
      }
    }
    if (has_denomination()) {
      if (denomination_ != &::google::protobuf::internal::kEmptyString) {
        denomination_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetNoviceCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Quota;
        break;
      }

      // optional string Quota = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Quota:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quota()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quota().data(), this->quota().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DurationTerm;
        break;
      }

      // optional string DurationTerm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DurationTerm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_durationterm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->durationterm().data(), this->durationterm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CardDay;
        break;
      }

      // optional string CardDay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardday().data(), this->cardday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_CardState;
        break;
      }

      // optional string CardState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardstate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardstate().data(), this->cardstate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Denomination;
        break;
      }

      // optional string Denomination = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Denomination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denomination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->denomination().data(), this->denomination().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetNoviceCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }

  // optional string Quota = 3;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quota().data(), this->quota().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->quota(), output);
  }

  // optional string DurationTerm = 4;
  if (has_durationterm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->durationterm().data(), this->durationterm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->durationterm(), output);
  }

  // optional string CardDay = 5;
  if (has_cardday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardday().data(), this->cardday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cardday(), output);
  }

  // optional string CardState = 6;
  if (has_cardstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardstate().data(), this->cardstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cardstate(), output);
  }

  // optional string Denomination = 7;
  if (has_denomination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->denomination().data(), this->denomination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->denomination(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetNoviceCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string Quota = 3;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quota().data(), this->quota().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->quota(), target);
  }

  // optional string DurationTerm = 4;
  if (has_durationterm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->durationterm().data(), this->durationterm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->durationterm(), target);
  }

  // optional string CardDay = 5;
  if (has_cardday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardday().data(), this->cardday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cardday(), target);
  }

  // optional string CardState = 6;
  if (has_cardstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardstate().data(), this->cardstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cardstate(), target);
  }

  // optional string Denomination = 7;
  if (has_denomination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->denomination().data(), this->denomination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->denomination(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetNoviceCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string Quota = 3;
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quota());
    }

    // optional string DurationTerm = 4;
    if (has_durationterm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->durationterm());
    }

    // optional string CardDay = 5;
    if (has_cardday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardday());
    }

    // optional string CardState = 6;
    if (has_cardstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardstate());
    }

    // optional string Denomination = 7;
    if (has_denomination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->denomination());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetNoviceCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetNoviceCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetNoviceCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetNoviceCard::MergeFrom(const CMD_GP_GetNoviceCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
    if (from.has_durationterm()) {
      set_durationterm(from.durationterm());
    }
    if (from.has_cardday()) {
      set_cardday(from.cardday());
    }
    if (from.has_cardstate()) {
      set_cardstate(from.cardstate());
    }
    if (from.has_denomination()) {
      set_denomination(from.denomination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetNoviceCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetNoviceCard::CopyFrom(const CMD_GP_GetNoviceCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetNoviceCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CMD_GP_GetNoviceCard::Swap(CMD_GP_GetNoviceCard* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(code_, other->code_);
    std::swap(quota_, other->quota_);
    std::swap(durationterm_, other->durationterm_);
    std::swap(cardday_, other->cardday_);
    std::swap(cardstate_, other->cardstate_);
    std::swap(denomination_, other->denomination_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetNoviceCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetNoviceCard_descriptor_;
  metadata.reflection = CMD_GP_GetNoviceCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetActivityCard::kMsgFieldNumber;
const int CMD_GP_GetActivityCard::kCodeFieldNumber;
const int CMD_GP_GetActivityCard::kScoreFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetActivityCard::CMD_GP_GetActivityCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetActivityCard::InitAsDefaultInstance() {
}

CMD_GP_GetActivityCard::CMD_GP_GetActivityCard(const CMD_GP_GetActivityCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetActivityCard::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetActivityCard::~CMD_GP_GetActivityCard() {
  SharedDtor();
}

void CMD_GP_GetActivityCard::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetActivityCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetActivityCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetActivityCard_descriptor_;
}

const CMD_GP_GetActivityCard& CMD_GP_GetActivityCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GetActivityCard* CMD_GP_GetActivityCard::default_instance_ = NULL;

CMD_GP_GetActivityCard* CMD_GP_GetActivityCard::New() const {
  return new CMD_GP_GetActivityCard;
}

void CMD_GP_GetActivityCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetActivityCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Score;
        break;
      }

      // optional string Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->score().data(), this->score().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetActivityCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }

  // optional string Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetActivityCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetActivityCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetActivityCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetActivityCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetActivityCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetActivityCard::MergeFrom(const CMD_GP_GetActivityCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetActivityCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetActivityCard::CopyFrom(const CMD_GP_GetActivityCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetActivityCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CMD_GP_GetActivityCard::Swap(CMD_GP_GetActivityCard* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(code_, other->code_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetActivityCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetActivityCard_descriptor_;
  metadata.reflection = CMD_GP_GetActivityCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetReliefMoney::kMsgFieldNumber;
const int CMD_GP_GetReliefMoney::kCodeFieldNumber;
const int CMD_GP_GetReliefMoney::kScoreFieldNumber;
const int CMD_GP_GetReliefMoney::kCountDownFieldNumber;
const int CMD_GP_GetReliefMoney::kReliefNumFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetReliefMoney::CMD_GP_GetReliefMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetReliefMoney::InitAsDefaultInstance() {
}

CMD_GP_GetReliefMoney::CMD_GP_GetReliefMoney(const CMD_GP_GetReliefMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetReliefMoney::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  countdown_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reliefnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetReliefMoney::~CMD_GP_GetReliefMoney() {
  SharedDtor();
}

void CMD_GP_GetReliefMoney::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (countdown_ != &::google::protobuf::internal::kEmptyString) {
    delete countdown_;
  }
  if (reliefnum_ != &::google::protobuf::internal::kEmptyString) {
    delete reliefnum_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetReliefMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetReliefMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetReliefMoney_descriptor_;
}

const CMD_GP_GetReliefMoney& CMD_GP_GetReliefMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GetReliefMoney* CMD_GP_GetReliefMoney::default_instance_ = NULL;

CMD_GP_GetReliefMoney* CMD_GP_GetReliefMoney::New() const {
  return new CMD_GP_GetReliefMoney;
}

void CMD_GP_GetReliefMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
    if (has_countdown()) {
      if (countdown_ != &::google::protobuf::internal::kEmptyString) {
        countdown_->clear();
      }
    }
    if (has_reliefnum()) {
      if (reliefnum_ != &::google::protobuf::internal::kEmptyString) {
        reliefnum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetReliefMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Score;
        break;
      }

      // optional string Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->score().data(), this->score().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CountDown;
        break;
      }

      // optional string CountDown = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CountDown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countdown()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->countdown().data(), this->countdown().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ReliefNum;
        break;
      }

      // optional string ReliefNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReliefNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reliefnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reliefnum().data(), this->reliefnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetReliefMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }

  // optional string Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->score(), output);
  }

  // optional string CountDown = 4;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countdown().data(), this->countdown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->countdown(), output);
  }

  // optional string ReliefNum = 5;
  if (has_reliefnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reliefnum().data(), this->reliefnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->reliefnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetReliefMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->score(), target);
  }

  // optional string CountDown = 4;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countdown().data(), this->countdown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->countdown(), target);
  }

  // optional string ReliefNum = 5;
  if (has_reliefnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reliefnum().data(), this->reliefnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reliefnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetReliefMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->score());
    }

    // optional string CountDown = 4;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countdown());
    }

    // optional string ReliefNum = 5;
    if (has_reliefnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reliefnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetReliefMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetReliefMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetReliefMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetReliefMoney::MergeFrom(const CMD_GP_GetReliefMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_reliefnum()) {
      set_reliefnum(from.reliefnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetReliefMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetReliefMoney::CopyFrom(const CMD_GP_GetReliefMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetReliefMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CMD_GP_GetReliefMoney::Swap(CMD_GP_GetReliefMoney* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(code_, other->code_);
    std::swap(score_, other->score_);
    std::swap(countdown_, other->countdown_);
    std::swap(reliefnum_, other->reliefnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetReliefMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetReliefMoney_descriptor_;
  metadata.reflection = CMD_GP_GetReliefMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetPayPhone::kMsgFieldNumber;
const int CMD_GP_GetPayPhone::kCodeFieldNumber;
const int CMD_GP_GetPayPhone::kAwardFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetPayPhone::CMD_GP_GetPayPhone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetPayPhone::InitAsDefaultInstance() {
}

CMD_GP_GetPayPhone::CMD_GP_GetPayPhone(const CMD_GP_GetPayPhone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetPayPhone::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetPayPhone::~CMD_GP_GetPayPhone() {
  SharedDtor();
}

void CMD_GP_GetPayPhone::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetPayPhone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetPayPhone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetPayPhone_descriptor_;
}

const CMD_GP_GetPayPhone& CMD_GP_GetPayPhone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GetPayPhone* CMD_GP_GetPayPhone::default_instance_ = NULL;

CMD_GP_GetPayPhone* CMD_GP_GetPayPhone::New() const {
  return new CMD_GP_GetPayPhone;
}

void CMD_GP_GetPayPhone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_award()) {
      if (award_ != &::google::protobuf::internal::kEmptyString) {
        award_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetPayPhone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Award;
        break;
      }

      // optional string Award = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->award().data(), this->award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetPayPhone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }

  // optional string Award = 3;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->award(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetPayPhone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string Award = 3;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->award(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetPayPhone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string Award = 3;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->award());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetPayPhone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetPayPhone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetPayPhone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetPayPhone::MergeFrom(const CMD_GP_GetPayPhone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetPayPhone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetPayPhone::CopyFrom(const CMD_GP_GetPayPhone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetPayPhone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CMD_GP_GetPayPhone::Swap(CMD_GP_GetPayPhone* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(code_, other->code_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetPayPhone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetPayPhone_descriptor_;
  metadata.reflection = CMD_GP_GetPayPhone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetAwardGold::kMsgFieldNumber;
const int CMD_GP_GetAwardGold::kCodeFieldNumber;
const int CMD_GP_GetAwardGold::kAwardFieldNumber;
const int CMD_GP_GetAwardGold::kGoldFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetAwardGold::CMD_GP_GetAwardGold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetAwardGold::InitAsDefaultInstance() {
}

CMD_GP_GetAwardGold::CMD_GP_GetAwardGold(const CMD_GP_GetAwardGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetAwardGold::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetAwardGold::~CMD_GP_GetAwardGold() {
  SharedDtor();
}

void CMD_GP_GetAwardGold::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (gold_ != &::google::protobuf::internal::kEmptyString) {
    delete gold_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetAwardGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetAwardGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetAwardGold_descriptor_;
}

const CMD_GP_GetAwardGold& CMD_GP_GetAwardGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GetAwardGold* CMD_GP_GetAwardGold::default_instance_ = NULL;

CMD_GP_GetAwardGold* CMD_GP_GetAwardGold::New() const {
  return new CMD_GP_GetAwardGold;
}

void CMD_GP_GetAwardGold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_award()) {
      if (award_ != &::google::protobuf::internal::kEmptyString) {
        award_->clear();
      }
    }
    if (has_gold()) {
      if (gold_ != &::google::protobuf::internal::kEmptyString) {
        gold_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetAwardGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Award;
        break;
      }

      // optional string Award = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->award().data(), this->award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Gold;
        break;
      }

      // optional string Gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Gold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gold()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gold().data(), this->gold().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetAwardGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }

  // optional string Award = 3;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->award(), output);
  }

  // optional string Gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gold().data(), this->gold().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetAwardGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string Award = 3;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->award(), target);
  }

  // optional string Gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gold().data(), this->gold().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetAwardGold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string Award = 3;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->award());
    }

    // optional string Gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetAwardGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetAwardGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetAwardGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetAwardGold::MergeFrom(const CMD_GP_GetAwardGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetAwardGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetAwardGold::CopyFrom(const CMD_GP_GetAwardGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetAwardGold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_GetAwardGold::Swap(CMD_GP_GetAwardGold* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(code_, other->code_);
    std::swap(award_, other->award_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetAwardGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetAwardGold_descriptor_;
  metadata.reflection = CMD_GP_GetAwardGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::kTypeFieldNumber;
const int SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::kDesc1FieldNumber;
const int SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::kDesc2FieldNumber;
const int SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::kDesc3FieldNumber;
const int SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::kDesc4FieldNumber;
#endif  // !_MSC_VER

SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::InitAsDefaultInstance() {
}

SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult(const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  desc1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::~SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult() {
  SharedDtor();
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::SharedDtor() {
  if (desc1_ != &::google::protobuf::internal::kEmptyString) {
    delete desc1_;
  }
  if (desc2_ != &::google::protobuf::internal::kEmptyString) {
    delete desc2_;
  }
  if (desc3_ != &::google::protobuf::internal::kEmptyString) {
    delete desc3_;
  }
  if (this != default_instance_) {
  }
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_descriptor_;
}

const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::default_instance_ = NULL;

SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::New() const {
  return new SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult;
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_desc1()) {
      if (desc1_ != &::google::protobuf::internal::kEmptyString) {
        desc1_->clear();
      }
    }
    if (has_desc2()) {
      if (desc2_ != &::google::protobuf::internal::kEmptyString) {
        desc2_->clear();
      }
    }
    if (has_desc3()) {
      if (desc3_ != &::google::protobuf::internal::kEmptyString) {
        desc3_->clear();
      }
    }
    desc4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Desc1;
        break;
      }

      // required string Desc1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc1().data(), this->desc1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Desc2;
        break;
      }

      // required string Desc2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc2().data(), this->desc2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Desc3;
        break;
      }

      // required string Desc3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc3().data(), this->desc3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Desc4;
        break;
      }

      // required int32 Desc4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Desc4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desc4_)));
          set_has_desc4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string Desc1 = 2;
  if (has_desc1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc1().data(), this->desc1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc1(), output);
  }

  // required string Desc2 = 3;
  if (has_desc2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc2().data(), this->desc2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc2(), output);
  }

  // required string Desc3 = 4;
  if (has_desc3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc3().data(), this->desc3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc3(), output);
  }

  // required int32 Desc4 = 5;
  if (has_desc4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->desc4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string Desc1 = 2;
  if (has_desc1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc1().data(), this->desc1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc1(), target);
  }

  // required string Desc2 = 3;
  if (has_desc2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc2().data(), this->desc2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc2(), target);
  }

  // required string Desc3 = 4;
  if (has_desc3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc3().data(), this->desc3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc3(), target);
  }

  // required int32 Desc4 = 5;
  if (has_desc4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->desc4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string Desc1 = 2;
    if (has_desc1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc1());
    }

    // required string Desc2 = 3;
    if (has_desc2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc2());
    }

    // required string Desc3 = 4;
    if (has_desc3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc3());
    }

    // required int32 Desc4 = 5;
    if (has_desc4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desc4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::MergeFrom(const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_desc1()) {
      set_desc1(from.desc1());
    }
    if (from.has_desc2()) {
      set_desc2(from.desc2());
    }
    if (from.has_desc3()) {
      set_desc3(from.desc3());
    }
    if (from.has_desc4()) {
      set_desc4(from.desc4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::CopyFrom(const SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::Swap(SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(desc1_, other->desc1_);
    std::swap(desc2_, other->desc2_);
    std::swap(desc3_, other->desc3_);
    std::swap(desc4_, other->desc4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_descriptor_;
  metadata.reflection = SUB_GP_GetRechargeRecord_CMD_GP_RechargeRecordResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SUB_GP_GetRechargeRecord::kRechargeRecordResultFieldNumber;
#endif  // !_MSC_VER

SUB_GP_GetRechargeRecord::SUB_GP_GetRechargeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUB_GP_GetRechargeRecord::InitAsDefaultInstance() {
}

SUB_GP_GetRechargeRecord::SUB_GP_GetRechargeRecord(const SUB_GP_GetRechargeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUB_GP_GetRechargeRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUB_GP_GetRechargeRecord::~SUB_GP_GetRechargeRecord() {
  SharedDtor();
}

void SUB_GP_GetRechargeRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SUB_GP_GetRechargeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUB_GP_GetRechargeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_GP_GetRechargeRecord_descriptor_;
}

const SUB_GP_GetRechargeRecord& SUB_GP_GetRechargeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

SUB_GP_GetRechargeRecord* SUB_GP_GetRechargeRecord::default_instance_ = NULL;

SUB_GP_GetRechargeRecord* SUB_GP_GetRechargeRecord::New() const {
  return new SUB_GP_GetRechargeRecord;
}

void SUB_GP_GetRechargeRecord::Clear() {
  rechargerecordresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUB_GP_GetRechargeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SUB_GP_GetRechargeRecord.CMD_GP_RechargeRecordResult rechargeRecordResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeRecordResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rechargerecordresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rechargeRecordResult;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUB_GP_GetRechargeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SUB_GP_GetRechargeRecord.CMD_GP_RechargeRecordResult rechargeRecordResult = 1;
  for (int i = 0; i < this->rechargerecordresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rechargerecordresult(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUB_GP_GetRechargeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SUB_GP_GetRechargeRecord.CMD_GP_RechargeRecordResult rechargeRecordResult = 1;
  for (int i = 0; i < this->rechargerecordresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rechargerecordresult(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUB_GP_GetRechargeRecord::ByteSize() const {
  int total_size = 0;

  // repeated .SUB_GP_GetRechargeRecord.CMD_GP_RechargeRecordResult rechargeRecordResult = 1;
  total_size += 1 * this->rechargerecordresult_size();
  for (int i = 0; i < this->rechargerecordresult_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rechargerecordresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUB_GP_GetRechargeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUB_GP_GetRechargeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUB_GP_GetRechargeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUB_GP_GetRechargeRecord::MergeFrom(const SUB_GP_GetRechargeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  rechargerecordresult_.MergeFrom(from.rechargerecordresult_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUB_GP_GetRechargeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUB_GP_GetRechargeRecord::CopyFrom(const SUB_GP_GetRechargeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUB_GP_GetRechargeRecord::IsInitialized() const {

  for (int i = 0; i < rechargerecordresult_size(); i++) {
    if (!this->rechargerecordresult(i).IsInitialized()) return false;
  }
  return true;
}

void SUB_GP_GetRechargeRecord::Swap(SUB_GP_GetRechargeRecord* other) {
  if (other != this) {
    rechargerecordresult_.Swap(&other->rechargerecordresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUB_GP_GetRechargeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUB_GP_GetRechargeRecord_descriptor_;
  metadata.reflection = SUB_GP_GetRechargeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetMonthlyCardScore::kFlagFieldNumber;
const int CMD_GP_GetMonthlyCardScore::kScoreFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetMonthlyCardScore::CMD_GP_GetMonthlyCardScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetMonthlyCardScore::InitAsDefaultInstance() {
}

CMD_GP_GetMonthlyCardScore::CMD_GP_GetMonthlyCardScore(const CMD_GP_GetMonthlyCardScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetMonthlyCardScore::SharedCtor() {
  _cached_size_ = 0;
  flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetMonthlyCardScore::~CMD_GP_GetMonthlyCardScore() {
  SharedDtor();
}

void CMD_GP_GetMonthlyCardScore::SharedDtor() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetMonthlyCardScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetMonthlyCardScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetMonthlyCardScore_descriptor_;
}

const CMD_GP_GetMonthlyCardScore& CMD_GP_GetMonthlyCardScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GetMonthlyCardScore* CMD_GP_GetMonthlyCardScore::default_instance_ = NULL;

CMD_GP_GetMonthlyCardScore* CMD_GP_GetMonthlyCardScore::New() const {
  return new CMD_GP_GetMonthlyCardScore;
}

void CMD_GP_GetMonthlyCardScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_flag()) {
      if (flag_ != &::google::protobuf::internal::kEmptyString) {
        flag_->clear();
      }
    }
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetMonthlyCardScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag().data(), this->flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Score;
        break;
      }

      // optional string Score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->score().data(), this->score().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetMonthlyCardScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->flag(), output);
  }

  // optional string Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetMonthlyCardScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->flag(), target);
  }

  // optional string Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetMonthlyCardScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag());
    }

    // optional string Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetMonthlyCardScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetMonthlyCardScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetMonthlyCardScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetMonthlyCardScore::MergeFrom(const CMD_GP_GetMonthlyCardScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetMonthlyCardScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetMonthlyCardScore::CopyFrom(const CMD_GP_GetMonthlyCardScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetMonthlyCardScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_GetMonthlyCardScore::Swap(CMD_GP_GetMonthlyCardScore* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetMonthlyCardScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetMonthlyCardScore_descriptor_;
  metadata.reflection = CMD_GP_GetMonthlyCardScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_SendPhoneSms::kMsgIDFieldNumber;
const int CMD_GP_SendPhoneSms::kMsgFieldNumber;
#endif  // !_MSC_VER

CMD_GP_SendPhoneSms::CMD_GP_SendPhoneSms()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_SendPhoneSms::InitAsDefaultInstance() {
}

CMD_GP_SendPhoneSms::CMD_GP_SendPhoneSms(const CMD_GP_SendPhoneSms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_SendPhoneSms::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_SendPhoneSms::~CMD_GP_SendPhoneSms() {
  SharedDtor();
}

void CMD_GP_SendPhoneSms::SharedDtor() {
  if (msgid_ != &::google::protobuf::internal::kEmptyString) {
    delete msgid_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_SendPhoneSms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_SendPhoneSms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_SendPhoneSms_descriptor_;
}

const CMD_GP_SendPhoneSms& CMD_GP_SendPhoneSms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_SendPhoneSms* CMD_GP_SendPhoneSms::default_instance_ = NULL;

CMD_GP_SendPhoneSms* CMD_GP_SendPhoneSms::New() const {
  return new CMD_GP_SendPhoneSms;
}

void CMD_GP_SendPhoneSms::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgid()) {
      if (msgid_ != &::google::protobuf::internal::kEmptyString) {
        msgid_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_SendPhoneSms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string MsgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // required string Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_SendPhoneSms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string MsgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgid(), output);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_SendPhoneSms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string MsgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgid(), target);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_SendPhoneSms::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string MsgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }

    // required string Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_SendPhoneSms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_SendPhoneSms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_SendPhoneSms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_SendPhoneSms::MergeFrom(const CMD_GP_SendPhoneSms& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_SendPhoneSms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_SendPhoneSms::CopyFrom(const CMD_GP_SendPhoneSms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_SendPhoneSms::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_SendPhoneSms::Swap(CMD_GP_SendPhoneSms* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_SendPhoneSms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_SendPhoneSms_descriptor_;
  metadata.reflection = CMD_GP_SendPhoneSms_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_PhoneBanding::kSuccessFieldNumber;
const int CMD_GP_PhoneBanding::kMsgFieldNumber;
#endif  // !_MSC_VER

CMD_GP_PhoneBanding::CMD_GP_PhoneBanding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_PhoneBanding::InitAsDefaultInstance() {
}

CMD_GP_PhoneBanding::CMD_GP_PhoneBanding(const CMD_GP_PhoneBanding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_PhoneBanding::SharedCtor() {
  _cached_size_ = 0;
  success_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_PhoneBanding::~CMD_GP_PhoneBanding() {
  SharedDtor();
}

void CMD_GP_PhoneBanding::SharedDtor() {
  if (success_ != &::google::protobuf::internal::kEmptyString) {
    delete success_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_PhoneBanding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_PhoneBanding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_PhoneBanding_descriptor_;
}

const CMD_GP_PhoneBanding& CMD_GP_PhoneBanding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_PhoneBanding* CMD_GP_PhoneBanding::default_instance_ = NULL;

CMD_GP_PhoneBanding* CMD_GP_PhoneBanding::New() const {
  return new CMD_GP_PhoneBanding;
}

void CMD_GP_PhoneBanding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_success()) {
      if (success_ != &::google::protobuf::internal::kEmptyString) {
        success_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_PhoneBanding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_success()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->success().data(), this->success().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // required string Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_PhoneBanding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->success().data(), this->success().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->success(), output);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_PhoneBanding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->success().data(), this->success().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->success(), target);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_PhoneBanding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->success());
    }

    // required string Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_PhoneBanding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_PhoneBanding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_PhoneBanding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_PhoneBanding::MergeFrom(const CMD_GP_PhoneBanding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_PhoneBanding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_PhoneBanding::CopyFrom(const CMD_GP_PhoneBanding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_PhoneBanding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_PhoneBanding::Swap(CMD_GP_PhoneBanding* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_PhoneBanding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_PhoneBanding_descriptor_;
  metadata.reflection = CMD_GP_PhoneBanding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_ResetSafePwd::kSuccessFieldNumber;
const int CMD_GP_ResetSafePwd::kMsgFieldNumber;
#endif  // !_MSC_VER

CMD_GP_ResetSafePwd::CMD_GP_ResetSafePwd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_ResetSafePwd::InitAsDefaultInstance() {
}

CMD_GP_ResetSafePwd::CMD_GP_ResetSafePwd(const CMD_GP_ResetSafePwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_ResetSafePwd::SharedCtor() {
  _cached_size_ = 0;
  success_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_ResetSafePwd::~CMD_GP_ResetSafePwd() {
  SharedDtor();
}

void CMD_GP_ResetSafePwd::SharedDtor() {
  if (success_ != &::google::protobuf::internal::kEmptyString) {
    delete success_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_ResetSafePwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_ResetSafePwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_ResetSafePwd_descriptor_;
}

const CMD_GP_ResetSafePwd& CMD_GP_ResetSafePwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_ResetSafePwd* CMD_GP_ResetSafePwd::default_instance_ = NULL;

CMD_GP_ResetSafePwd* CMD_GP_ResetSafePwd::New() const {
  return new CMD_GP_ResetSafePwd;
}

void CMD_GP_ResetSafePwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_success()) {
      if (success_ != &::google::protobuf::internal::kEmptyString) {
        success_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_ResetSafePwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_success()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->success().data(), this->success().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // required string Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_ResetSafePwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->success().data(), this->success().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->success(), output);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_ResetSafePwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->success().data(), this->success().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->success(), target);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_ResetSafePwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->success());
    }

    // required string Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_ResetSafePwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_ResetSafePwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_ResetSafePwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_ResetSafePwd::MergeFrom(const CMD_GP_ResetSafePwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_ResetSafePwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_ResetSafePwd::CopyFrom(const CMD_GP_ResetSafePwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_ResetSafePwd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_ResetSafePwd::Swap(CMD_GP_ResetSafePwd* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_ResetSafePwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_ResetSafePwd_descriptor_;
  metadata.reflection = CMD_GP_ResetSafePwd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_RealNameAuthentication::kSuccessFieldNumber;
const int CMD_GP_RealNameAuthentication::kMsgFieldNumber;
#endif  // !_MSC_VER

CMD_GP_RealNameAuthentication::CMD_GP_RealNameAuthentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_RealNameAuthentication::InitAsDefaultInstance() {
}

CMD_GP_RealNameAuthentication::CMD_GP_RealNameAuthentication(const CMD_GP_RealNameAuthentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_RealNameAuthentication::SharedCtor() {
  _cached_size_ = 0;
  success_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_RealNameAuthentication::~CMD_GP_RealNameAuthentication() {
  SharedDtor();
}

void CMD_GP_RealNameAuthentication::SharedDtor() {
  if (success_ != &::google::protobuf::internal::kEmptyString) {
    delete success_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_RealNameAuthentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_RealNameAuthentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_RealNameAuthentication_descriptor_;
}

const CMD_GP_RealNameAuthentication& CMD_GP_RealNameAuthentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_RealNameAuthentication* CMD_GP_RealNameAuthentication::default_instance_ = NULL;

CMD_GP_RealNameAuthentication* CMD_GP_RealNameAuthentication::New() const {
  return new CMD_GP_RealNameAuthentication;
}

void CMD_GP_RealNameAuthentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_success()) {
      if (success_ != &::google::protobuf::internal::kEmptyString) {
        success_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_RealNameAuthentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_success()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->success().data(), this->success().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // required string Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_RealNameAuthentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->success().data(), this->success().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->success(), output);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_RealNameAuthentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->success().data(), this->success().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->success(), target);
  }

  // required string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_RealNameAuthentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->success());
    }

    // required string Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_RealNameAuthentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_RealNameAuthentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_RealNameAuthentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_RealNameAuthentication::MergeFrom(const CMD_GP_RealNameAuthentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_RealNameAuthentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_RealNameAuthentication::CopyFrom(const CMD_GP_RealNameAuthentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_RealNameAuthentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GP_RealNameAuthentication::Swap(CMD_GP_RealNameAuthentication* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_RealNameAuthentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_RealNameAuthentication_descriptor_;
  metadata.reflection = CMD_GP_RealNameAuthentication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetNickName::kNickNameFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetNickName::CMD_GP_GetNickName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetNickName::InitAsDefaultInstance() {
}

CMD_GP_GetNickName::CMD_GP_GetNickName(const CMD_GP_GetNickName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetNickName::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetNickName::~CMD_GP_GetNickName() {
  SharedDtor();
}

void CMD_GP_GetNickName::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetNickName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetNickName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetNickName_descriptor_;
}

const CMD_GP_GetNickName& CMD_GP_GetNickName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GetNickName* CMD_GP_GetNickName::default_instance_ = NULL;

CMD_GP_GetNickName* CMD_GP_GetNickName::New() const {
  return new CMD_GP_GetNickName;
}

void CMD_GP_GetNickName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetNickName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string NickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetNickName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string NickName = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetNickName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string NickName = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetNickName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string NickName = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetNickName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetNickName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetNickName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetNickName::MergeFrom(const CMD_GP_GetNickName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetNickName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetNickName::CopyFrom(const CMD_GP_GetNickName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetNickName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_GetNickName::Swap(CMD_GP_GetNickName* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetNickName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetNickName_descriptor_;
  metadata.reflection = CMD_GP_GetNickName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_LuckDraw::kCodeFieldNumber;
const int CMD_GP_LuckDraw::kPrizeFieldNumber;
const int CMD_GP_LuckDraw::kMsgFieldNumber;
#endif  // !_MSC_VER

CMD_GP_LuckDraw::CMD_GP_LuckDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_LuckDraw::InitAsDefaultInstance() {
}

CMD_GP_LuckDraw::CMD_GP_LuckDraw(const CMD_GP_LuckDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_LuckDraw::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_LuckDraw::~CMD_GP_LuckDraw() {
  SharedDtor();
}

void CMD_GP_LuckDraw::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (prize_ != &::google::protobuf::internal::kEmptyString) {
    delete prize_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_LuckDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_LuckDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_LuckDraw_descriptor_;
}

const CMD_GP_LuckDraw& CMD_GP_LuckDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_LuckDraw* CMD_GP_LuckDraw::default_instance_ = NULL;

CMD_GP_LuckDraw* CMD_GP_LuckDraw::New() const {
  return new CMD_GP_LuckDraw;
}

void CMD_GP_LuckDraw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_prize()) {
      if (prize_ != &::google::protobuf::internal::kEmptyString) {
        prize_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_LuckDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prize;
        break;
      }

      // optional string prize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prize()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prize().data(), this->prize().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_LuckDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  // optional string prize = 2;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prize().data(), this->prize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->prize(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_LuckDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string prize = 2;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prize().data(), this->prize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prize(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_LuckDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string prize = 2;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prize());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_LuckDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_LuckDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_LuckDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_LuckDraw::MergeFrom(const CMD_GP_LuckDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_prize()) {
      set_prize(from.prize());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_LuckDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_LuckDraw::CopyFrom(const CMD_GP_LuckDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_LuckDraw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_LuckDraw::Swap(CMD_GP_LuckDraw* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(prize_, other->prize_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_LuckDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_LuckDraw_descriptor_;
  metadata.reflection = CMD_GP_LuckDraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_ReceiveNovicePack::kCodeFieldNumber;
const int CMD_GP_ReceiveNovicePack::kMsgFieldNumber;
const int CMD_GP_ReceiveNovicePack::kMountFieldNumber;
const int CMD_GP_ReceiveNovicePack::kTotalAmountFieldNumber;
#endif  // !_MSC_VER

CMD_GP_ReceiveNovicePack::CMD_GP_ReceiveNovicePack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_ReceiveNovicePack::InitAsDefaultInstance() {
}

CMD_GP_ReceiveNovicePack::CMD_GP_ReceiveNovicePack(const CMD_GP_ReceiveNovicePack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_ReceiveNovicePack::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalamount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_ReceiveNovicePack::~CMD_GP_ReceiveNovicePack() {
  SharedDtor();
}

void CMD_GP_ReceiveNovicePack::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (mount_ != &::google::protobuf::internal::kEmptyString) {
    delete mount_;
  }
  if (totalamount_ != &::google::protobuf::internal::kEmptyString) {
    delete totalamount_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_ReceiveNovicePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_ReceiveNovicePack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_ReceiveNovicePack_descriptor_;
}

const CMD_GP_ReceiveNovicePack& CMD_GP_ReceiveNovicePack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_ReceiveNovicePack* CMD_GP_ReceiveNovicePack::default_instance_ = NULL;

CMD_GP_ReceiveNovicePack* CMD_GP_ReceiveNovicePack::New() const {
  return new CMD_GP_ReceiveNovicePack;
}

void CMD_GP_ReceiveNovicePack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_mount()) {
      if (mount_ != &::google::protobuf::internal::kEmptyString) {
        mount_->clear();
      }
    }
    if (has_totalamount()) {
      if (totalamount_ != &::google::protobuf::internal::kEmptyString) {
        totalamount_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_ReceiveNovicePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mount;
        break;
      }

      // optional string mount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mount().data(), this->mount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_totalAmount;
        break;
      }

      // optional string totalAmount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_totalAmount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalamount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->totalamount().data(), this->totalamount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_ReceiveNovicePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // optional string mount = 3;
  if (has_mount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mount().data(), this->mount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mount(), output);
  }

  // optional string totalAmount = 4;
  if (has_totalamount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totalamount().data(), this->totalamount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->totalamount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_ReceiveNovicePack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional string mount = 3;
  if (has_mount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mount().data(), this->mount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mount(), target);
  }

  // optional string totalAmount = 4;
  if (has_totalamount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totalamount().data(), this->totalamount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->totalamount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_ReceiveNovicePack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional string mount = 3;
    if (has_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mount());
    }

    // optional string totalAmount = 4;
    if (has_totalamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalamount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_ReceiveNovicePack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_ReceiveNovicePack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_ReceiveNovicePack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_ReceiveNovicePack::MergeFrom(const CMD_GP_ReceiveNovicePack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_mount()) {
      set_mount(from.mount());
    }
    if (from.has_totalamount()) {
      set_totalamount(from.totalamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_ReceiveNovicePack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_ReceiveNovicePack::CopyFrom(const CMD_GP_ReceiveNovicePack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_ReceiveNovicePack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_ReceiveNovicePack::Swap(CMD_GP_ReceiveNovicePack* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(mount_, other->mount_);
    std::swap(totalamount_, other->totalamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_ReceiveNovicePack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_ReceiveNovicePack_descriptor_;
  metadata.reflection = CMD_GP_ReceiveNovicePack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_GetRechargeCaseBag::kCodeFieldNumber;
const int CMD_GP_GetRechargeCaseBag::kMsgFieldNumber;
#endif  // !_MSC_VER

CMD_GP_GetRechargeCaseBag::CMD_GP_GetRechargeCaseBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_GetRechargeCaseBag::InitAsDefaultInstance() {
}

CMD_GP_GetRechargeCaseBag::CMD_GP_GetRechargeCaseBag(const CMD_GP_GetRechargeCaseBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_GetRechargeCaseBag::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_GetRechargeCaseBag::~CMD_GP_GetRechargeCaseBag() {
  SharedDtor();
}

void CMD_GP_GetRechargeCaseBag::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_GetRechargeCaseBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_GetRechargeCaseBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_GetRechargeCaseBag_descriptor_;
}

const CMD_GP_GetRechargeCaseBag& CMD_GP_GetRechargeCaseBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_GetRechargeCaseBag* CMD_GP_GetRechargeCaseBag::default_instance_ = NULL;

CMD_GP_GetRechargeCaseBag* CMD_GP_GetRechargeCaseBag::New() const {
  return new CMD_GP_GetRechargeCaseBag;
}

void CMD_GP_GetRechargeCaseBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_GetRechargeCaseBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_GetRechargeCaseBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_GetRechargeCaseBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_GetRechargeCaseBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_GetRechargeCaseBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_GetRechargeCaseBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_GetRechargeCaseBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_GetRechargeCaseBag::MergeFrom(const CMD_GP_GetRechargeCaseBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_GetRechargeCaseBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_GetRechargeCaseBag::CopyFrom(const CMD_GP_GetRechargeCaseBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_GetRechargeCaseBag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_GetRechargeCaseBag::Swap(CMD_GP_GetRechargeCaseBag* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_GetRechargeCaseBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_GetRechargeCaseBag_descriptor_;
  metadata.reflection = CMD_GP_GetRechargeCaseBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GP_BoxConversion::kCodeFieldNumber;
const int CMD_GP_BoxConversion::kMsgFieldNumber;
#endif  // !_MSC_VER

CMD_GP_BoxConversion::CMD_GP_BoxConversion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GP_BoxConversion::InitAsDefaultInstance() {
}

CMD_GP_BoxConversion::CMD_GP_BoxConversion(const CMD_GP_BoxConversion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GP_BoxConversion::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GP_BoxConversion::~CMD_GP_BoxConversion() {
  SharedDtor();
}

void CMD_GP_BoxConversion::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CMD_GP_BoxConversion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GP_BoxConversion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GP_BoxConversion_descriptor_;
}

const CMD_GP_BoxConversion& CMD_GP_BoxConversion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WebSocket_2fwebsocket_5fs2c_2eproto();
  return *default_instance_;
}

CMD_GP_BoxConversion* CMD_GP_BoxConversion::default_instance_ = NULL;

CMD_GP_BoxConversion* CMD_GP_BoxConversion::New() const {
  return new CMD_GP_BoxConversion;
}

void CMD_GP_BoxConversion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GP_BoxConversion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GP_BoxConversion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GP_BoxConversion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GP_BoxConversion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GP_BoxConversion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GP_BoxConversion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GP_BoxConversion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GP_BoxConversion::MergeFrom(const CMD_GP_BoxConversion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GP_BoxConversion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GP_BoxConversion::CopyFrom(const CMD_GP_BoxConversion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GP_BoxConversion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GP_BoxConversion::Swap(CMD_GP_BoxConversion* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GP_BoxConversion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GP_BoxConversion_descriptor_;
  metadata.reflection = CMD_GP_BoxConversion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

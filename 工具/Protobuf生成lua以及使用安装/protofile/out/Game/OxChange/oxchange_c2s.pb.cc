// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/OxChange/oxchange_c2s.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Game/OxChange/oxchange_c2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace oxchange {
namespace c2s {

void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fc2s_2eproto() {
  delete CMD_C2S_SelectScoreMode::default_instance_;
  delete CMD_C2S_CallBanker::default_instance_;
  delete CMD_C2S_AddScore::default_instance_;
  delete CMD_C2S_OxCard::default_instance_;
  delete CMD_C2S_WinLost::default_instance_;
  delete CMD_C2S_PostEmotion::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CMD_C2S_SelectScoreMode::default_instance_ = new CMD_C2S_SelectScoreMode();
  CMD_C2S_CallBanker::default_instance_ = new CMD_C2S_CallBanker();
  CMD_C2S_AddScore::default_instance_ = new CMD_C2S_AddScore();
  CMD_C2S_OxCard::default_instance_ = new CMD_C2S_OxCard();
  CMD_C2S_WinLost::default_instance_ = new CMD_C2S_WinLost();
  CMD_C2S_PostEmotion::default_instance_ = new CMD_C2S_PostEmotion();
  CMD_C2S_SelectScoreMode::default_instance_->InitAsDefaultInstance();
  CMD_C2S_CallBanker::default_instance_->InitAsDefaultInstance();
  CMD_C2S_AddScore::default_instance_->InitAsDefaultInstance();
  CMD_C2S_OxCard::default_instance_->InitAsDefaultInstance();
  CMD_C2S_WinLost::default_instance_->InitAsDefaultInstance();
  CMD_C2S_PostEmotion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fc2s_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto_once_);
void protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto_once_,
                 &protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Game_2fOxChange_2foxchange_5fc2s_2eproto {
  StaticDescriptorInitializer_Game_2fOxChange_2foxchange_5fc2s_2eproto() {
    protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
  }
} static_descriptor_initializer_Game_2fOxChange_2foxchange_5fc2s_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_SelectScoreMode::kSelectModeFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_SelectScoreMode::CMD_C2S_SelectScoreMode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_SelectScoreMode::InitAsDefaultInstance() {
}

CMD_C2S_SelectScoreMode::CMD_C2S_SelectScoreMode(const CMD_C2S_SelectScoreMode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_SelectScoreMode::SharedCtor() {
  _cached_size_ = 0;
  selectmode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_SelectScoreMode::~CMD_C2S_SelectScoreMode() {
  SharedDtor();
}

void CMD_C2S_SelectScoreMode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_SelectScoreMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_SelectScoreMode& CMD_C2S_SelectScoreMode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_SelectScoreMode* CMD_C2S_SelectScoreMode::default_instance_ = NULL;

CMD_C2S_SelectScoreMode* CMD_C2S_SelectScoreMode::New() const {
  return new CMD_C2S_SelectScoreMode;
}

void CMD_C2S_SelectScoreMode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selectmode_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_SelectScoreMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool selectMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selectmode_)));
          set_has_selectmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_SelectScoreMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool selectMode = 1;
  if (has_selectmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->selectmode(), output);
  }

}

int CMD_C2S_SelectScoreMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool selectMode = 1;
    if (has_selectmode()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_SelectScoreMode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_SelectScoreMode*>(&from));
}

void CMD_C2S_SelectScoreMode::MergeFrom(const CMD_C2S_SelectScoreMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selectmode()) {
      set_selectmode(from.selectmode());
    }
  }
}

void CMD_C2S_SelectScoreMode::CopyFrom(const CMD_C2S_SelectScoreMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_SelectScoreMode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_SelectScoreMode::Swap(CMD_C2S_SelectScoreMode* other) {
  if (other != this) {
    std::swap(selectmode_, other->selectmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_SelectScoreMode::GetTypeName() const {
  return "game.oxchange.c2s.CMD_C2S_SelectScoreMode";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_CallBanker::kBankerFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_CallBanker::CMD_C2S_CallBanker()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_CallBanker::InitAsDefaultInstance() {
}

CMD_C2S_CallBanker::CMD_C2S_CallBanker(const CMD_C2S_CallBanker& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_CallBanker::SharedCtor() {
  _cached_size_ = 0;
  banker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_CallBanker::~CMD_C2S_CallBanker() {
  SharedDtor();
}

void CMD_C2S_CallBanker::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_CallBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_CallBanker& CMD_C2S_CallBanker::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_CallBanker* CMD_C2S_CallBanker::default_instance_ = NULL;

CMD_C2S_CallBanker* CMD_C2S_CallBanker::New() const {
  return new CMD_C2S_CallBanker;
}

void CMD_C2S_CallBanker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_CallBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 banker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_)));
          set_has_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_CallBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 banker = 1;
  if (has_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker(), output);
  }

}

int CMD_C2S_CallBanker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 banker = 1;
    if (has_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_CallBanker::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_CallBanker*>(&from));
}

void CMD_C2S_CallBanker::MergeFrom(const CMD_C2S_CallBanker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker()) {
      set_banker(from.banker());
    }
  }
}

void CMD_C2S_CallBanker::CopyFrom(const CMD_C2S_CallBanker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_CallBanker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_CallBanker::Swap(CMD_C2S_CallBanker* other) {
  if (other != this) {
    std::swap(banker_, other->banker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_CallBanker::GetTypeName() const {
  return "game.oxchange.c2s.CMD_C2S_CallBanker";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_AddScore::kScoreFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_AddScore::CMD_C2S_AddScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_AddScore::InitAsDefaultInstance() {
}

CMD_C2S_AddScore::CMD_C2S_AddScore(const CMD_C2S_AddScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_AddScore::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_AddScore::~CMD_C2S_AddScore() {
  SharedDtor();
}

void CMD_C2S_AddScore::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_AddScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_AddScore& CMD_C2S_AddScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_AddScore* CMD_C2S_AddScore::default_instance_ = NULL;

CMD_C2S_AddScore* CMD_C2S_AddScore::New() const {
  return new CMD_C2S_AddScore;
}

void CMD_C2S_AddScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_AddScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_AddScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

}

int CMD_C2S_AddScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_AddScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_AddScore*>(&from));
}

void CMD_C2S_AddScore::MergeFrom(const CMD_C2S_AddScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void CMD_C2S_AddScore::CopyFrom(const CMD_C2S_AddScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_AddScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_AddScore::Swap(CMD_C2S_AddScore* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_AddScore::GetTypeName() const {
  return "game.oxchange.c2s.CMD_C2S_AddScore";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_OxCard::kOxFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_OxCard::CMD_C2S_OxCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_OxCard::InitAsDefaultInstance() {
}

CMD_C2S_OxCard::CMD_C2S_OxCard(const CMD_C2S_OxCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_OxCard::SharedCtor() {
  _cached_size_ = 0;
  ox_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_OxCard::~CMD_C2S_OxCard() {
  SharedDtor();
}

void CMD_C2S_OxCard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_OxCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_OxCard& CMD_C2S_OxCard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_OxCard* CMD_C2S_OxCard::default_instance_ = NULL;

CMD_C2S_OxCard* CMD_C2S_OxCard::New() const {
  return new CMD_C2S_OxCard;
}

void CMD_C2S_OxCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ox_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_OxCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ox = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ox_)));
          set_has_ox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_OxCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ox = 1;
  if (has_ox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ox(), output);
  }

}

int CMD_C2S_OxCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ox = 1;
    if (has_ox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ox());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_OxCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_OxCard*>(&from));
}

void CMD_C2S_OxCard::MergeFrom(const CMD_C2S_OxCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ox()) {
      set_ox(from.ox());
    }
  }
}

void CMD_C2S_OxCard::CopyFrom(const CMD_C2S_OxCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_OxCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_OxCard::Swap(CMD_C2S_OxCard* other) {
  if (other != this) {
    std::swap(ox_, other->ox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_OxCard::GetTypeName() const {
  return "game.oxchange.c2s.CMD_C2S_OxCard";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_WinLost::kGameIdFieldNumber;
const int CMD_C2S_WinLost::kCountFieldNumber;
const int CMD_C2S_WinLost::kWinLostFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_WinLost::CMD_C2S_WinLost()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_WinLost::InitAsDefaultInstance() {
}

CMD_C2S_WinLost::CMD_C2S_WinLost(const CMD_C2S_WinLost& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_WinLost::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  count_ = 0;
  winlost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_WinLost::~CMD_C2S_WinLost() {
  SharedDtor();
}

void CMD_C2S_WinLost::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_WinLost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_WinLost& CMD_C2S_WinLost::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_WinLost* CMD_C2S_WinLost::default_instance_ = NULL;

CMD_C2S_WinLost* CMD_C2S_WinLost::New() const {
  return new CMD_C2S_WinLost;
}

void CMD_C2S_WinLost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    count_ = 0;
    winlost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_WinLost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winLost;
        break;
      }

      // required int32 winLost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winLost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winlost_)));
          set_has_winlost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_WinLost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 winLost = 3;
  if (has_winlost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winlost(), output);
  }

}

int CMD_C2S_WinLost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 winLost = 3;
    if (has_winlost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winlost());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_WinLost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_WinLost*>(&from));
}

void CMD_C2S_WinLost::MergeFrom(const CMD_C2S_WinLost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_winlost()) {
      set_winlost(from.winlost());
    }
  }
}

void CMD_C2S_WinLost::CopyFrom(const CMD_C2S_WinLost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_WinLost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_C2S_WinLost::Swap(CMD_C2S_WinLost* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(count_, other->count_);
    std::swap(winlost_, other->winlost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_WinLost::GetTypeName() const {
  return "game.oxchange.c2s.CMD_C2S_WinLost";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_PostEmotion::kTypeFieldNumber;
const int CMD_C2S_PostEmotion::kEmotionIdFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_PostEmotion::CMD_C2S_PostEmotion()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_PostEmotion::InitAsDefaultInstance() {
}

CMD_C2S_PostEmotion::CMD_C2S_PostEmotion(const CMD_C2S_PostEmotion& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_PostEmotion::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  emotionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_PostEmotion::~CMD_C2S_PostEmotion() {
  SharedDtor();
}

void CMD_C2S_PostEmotion::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_PostEmotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_PostEmotion& CMD_C2S_PostEmotion::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_PostEmotion* CMD_C2S_PostEmotion::default_instance_ = NULL;

CMD_C2S_PostEmotion* CMD_C2S_PostEmotion::New() const {
  return new CMD_C2S_PostEmotion;
}

void CMD_C2S_PostEmotion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    emotionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_PostEmotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_emotionId;
        break;
      }

      // required int32 emotionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emotionid_)));
          set_has_emotionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_PostEmotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 emotionId = 2;
  if (has_emotionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->emotionid(), output);
  }

}

int CMD_C2S_PostEmotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 emotionId = 2;
    if (has_emotionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emotionid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_PostEmotion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_PostEmotion*>(&from));
}

void CMD_C2S_PostEmotion::MergeFrom(const CMD_C2S_PostEmotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_emotionid()) {
      set_emotionid(from.emotionid());
    }
  }
}

void CMD_C2S_PostEmotion::CopyFrom(const CMD_C2S_PostEmotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_PostEmotion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_C2S_PostEmotion::Swap(CMD_C2S_PostEmotion* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(emotionid_, other->emotionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_PostEmotion::GetTypeName() const {
  return "game.oxchange.c2s.CMD_C2S_PostEmotion";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace c2s
}  // namespace oxchange
}  // namespace game

// @@protoc_insertion_point(global_scope)

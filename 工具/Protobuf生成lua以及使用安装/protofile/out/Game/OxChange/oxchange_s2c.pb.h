// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/OxChange/oxchange_s2c.proto

#ifndef PROTOBUF_Game_2fOxChange_2foxchange_5fs2c_2eproto__INCLUDED
#define PROTOBUF_Game_2fOxChange_2foxchange_5fs2c_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace oxchange {
namespace s2c {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

class CMD_S2C_StatusFree;
class CMD_S2C_StatusCall;
class CMD_S2C_StatusScore;
class CMD_S2C_StatusPlay;
class CMD_S2C_CallBanker;
class CMD_S2C_GameStart;
class CMD_S2C_AddScore;
class CMD_S2C_GameEnd;
class CMD_S2C_SendCard;
class CMD_S2C_PlayerExit;
class CMD_S2C_OpenCard;
class CMD_S2C_ReceiveEmotion;
class CMD_S2C_PostServiceCharge;

// ===================================================================

class CMD_S2C_StatusFree : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_StatusFree();
  virtual ~CMD_S2C_StatusFree();

  CMD_S2C_StatusFree(const CMD_S2C_StatusFree& from);

  inline CMD_S2C_StatusFree& operator=(const CMD_S2C_StatusFree& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_StatusFree& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_StatusFree* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_StatusFree* other);

  // implements Message ----------------------------------------------

  CMD_S2C_StatusFree* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_StatusFree& from);
  void MergeFrom(const CMD_S2C_StatusFree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 cellScore = 1;
  inline bool has_cellscore() const;
  inline void clear_cellscore();
  static const int kCellScoreFieldNumber = 1;
  inline ::google::protobuf::int64 cellscore() const;
  inline void set_cellscore(::google::protobuf::int64 value);

  // repeated int64 turnScore = 2;
  inline int turnscore_size() const;
  inline void clear_turnscore();
  static const int kTurnScoreFieldNumber = 2;
  inline ::google::protobuf::int64 turnscore(int index) const;
  inline void set_turnscore(int index, ::google::protobuf::int64 value);
  inline void add_turnscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      turnscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_turnscore();

  // repeated int64 collectScore = 3;
  inline int collectscore_size() const;
  inline void clear_collectscore();
  static const int kCollectScoreFieldNumber = 3;
  inline ::google::protobuf::int64 collectscore(int index) const;
  inline void set_collectscore(int index, ::google::protobuf::int64 value);
  inline void add_collectscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      collectscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_collectscore();

  // required string gameRoomName = 4;
  inline bool has_gameroomname() const;
  inline void clear_gameroomname();
  static const int kGameRoomNameFieldNumber = 4;
  inline const ::std::string& gameroomname() const;
  inline void set_gameroomname(const ::std::string& value);
  inline void set_gameroomname(const char* value);
  inline void set_gameroomname(const char* value, size_t size);
  inline ::std::string* mutable_gameroomname();
  inline ::std::string* release_gameroomname();
  inline void set_allocated_gameroomname(::std::string* gameroomname);

  // required bool gameOption = 5;
  inline bool has_gameoption() const;
  inline void clear_gameoption();
  static const int kGameOptionFieldNumber = 5;
  inline bool gameoption() const;
  inline void set_gameoption(bool value);

  // required int32 callTime = 6;
  inline bool has_calltime() const;
  inline void clear_calltime();
  static const int kCallTimeFieldNumber = 6;
  inline ::google::protobuf::int32 calltime() const;
  inline void set_calltime(::google::protobuf::int32 value);

  // required int32 betTime = 7;
  inline bool has_bettime() const;
  inline void clear_bettime();
  static const int kBetTimeFieldNumber = 7;
  inline ::google::protobuf::int32 bettime() const;
  inline void set_bettime(::google::protobuf::int32 value);

  // required int32 openTime = 8;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 8;
  inline ::google::protobuf::int32 opentime() const;
  inline void set_opentime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_StatusFree)
 private:
  inline void set_has_cellscore();
  inline void clear_has_cellscore();
  inline void set_has_gameroomname();
  inline void clear_has_gameroomname();
  inline void set_has_gameoption();
  inline void clear_has_gameoption();
  inline void set_has_calltime();
  inline void clear_has_calltime();
  inline void set_has_bettime();
  inline void clear_has_bettime();
  inline void set_has_opentime();
  inline void clear_has_opentime();

  ::google::protobuf::int64 cellscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > turnscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > collectscore_;
  ::std::string* gameroomname_;
  bool gameoption_;
  ::google::protobuf::int32 calltime_;
  ::google::protobuf::int32 bettime_;
  ::google::protobuf::int32 opentime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_StatusFree* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_StatusCall : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_StatusCall();
  virtual ~CMD_S2C_StatusCall();

  CMD_S2C_StatusCall(const CMD_S2C_StatusCall& from);

  inline CMD_S2C_StatusCall& operator=(const CMD_S2C_StatusCall& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_StatusCall& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_StatusCall* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_StatusCall* other);

  // implements Message ----------------------------------------------

  CMD_S2C_StatusCall* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_StatusCall& from);
  void MergeFrom(const CMD_S2C_StatusCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 callBanker = 1;
  inline bool has_callbanker() const;
  inline void clear_callbanker();
  static const int kCallBankerFieldNumber = 1;
  inline ::google::protobuf::int32 callbanker() const;
  inline void set_callbanker(::google::protobuf::int32 value);

  // required int32 dynamicJoin = 2;
  inline bool has_dynamicjoin() const;
  inline void clear_dynamicjoin();
  static const int kDynamicJoinFieldNumber = 2;
  inline ::google::protobuf::int32 dynamicjoin() const;
  inline void set_dynamicjoin(::google::protobuf::int32 value);

  // repeated int32 playStatus = 3;
  inline int playstatus_size() const;
  inline void clear_playstatus();
  static const int kPlayStatusFieldNumber = 3;
  inline ::google::protobuf::int32 playstatus(int index) const;
  inline void set_playstatus(int index, ::google::protobuf::int32 value);
  inline void add_playstatus(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playstatus() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playstatus();

  // repeated int64 turnScore = 4;
  inline int turnscore_size() const;
  inline void clear_turnscore();
  static const int kTurnScoreFieldNumber = 4;
  inline ::google::protobuf::int64 turnscore(int index) const;
  inline void set_turnscore(int index, ::google::protobuf::int64 value);
  inline void add_turnscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      turnscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_turnscore();

  // repeated int64 collectScore = 5;
  inline int collectscore_size() const;
  inline void clear_collectscore();
  static const int kCollectScoreFieldNumber = 5;
  inline ::google::protobuf::int64 collectscore(int index) const;
  inline void set_collectscore(int index, ::google::protobuf::int64 value);
  inline void add_collectscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      collectscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_collectscore();

  // required string gameRoomName = 6;
  inline bool has_gameroomname() const;
  inline void clear_gameroomname();
  static const int kGameRoomNameFieldNumber = 6;
  inline const ::std::string& gameroomname() const;
  inline void set_gameroomname(const ::std::string& value);
  inline void set_gameroomname(const char* value);
  inline void set_gameroomname(const char* value, size_t size);
  inline ::std::string* mutable_gameroomname();
  inline ::std::string* release_gameroomname();
  inline void set_allocated_gameroomname(::std::string* gameroomname);

  // required bool gameOption = 7;
  inline bool has_gameoption() const;
  inline void clear_gameoption();
  static const int kGameOptionFieldNumber = 7;
  inline bool gameoption() const;
  inline void set_gameoption(bool value);

  // required int32 callTime = 8;
  inline bool has_calltime() const;
  inline void clear_calltime();
  static const int kCallTimeFieldNumber = 8;
  inline ::google::protobuf::int32 calltime() const;
  inline void set_calltime(::google::protobuf::int32 value);

  // required int32 betTime = 9;
  inline bool has_bettime() const;
  inline void clear_bettime();
  static const int kBetTimeFieldNumber = 9;
  inline ::google::protobuf::int32 bettime() const;
  inline void set_bettime(::google::protobuf::int32 value);

  // required int32 openTime = 10;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 10;
  inline ::google::protobuf::int32 opentime() const;
  inline void set_opentime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_StatusCall)
 private:
  inline void set_has_callbanker();
  inline void clear_has_callbanker();
  inline void set_has_dynamicjoin();
  inline void clear_has_dynamicjoin();
  inline void set_has_gameroomname();
  inline void clear_has_gameroomname();
  inline void set_has_gameoption();
  inline void clear_has_gameoption();
  inline void set_has_calltime();
  inline void clear_has_calltime();
  inline void set_has_bettime();
  inline void clear_has_bettime();
  inline void set_has_opentime();
  inline void clear_has_opentime();

  ::google::protobuf::int32 callbanker_;
  ::google::protobuf::int32 dynamicjoin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playstatus_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > turnscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > collectscore_;
  ::std::string* gameroomname_;
  bool gameoption_;
  ::google::protobuf::int32 calltime_;
  ::google::protobuf::int32 bettime_;
  ::google::protobuf::int32 opentime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_StatusCall* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_StatusScore : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_StatusScore();
  virtual ~CMD_S2C_StatusScore();

  CMD_S2C_StatusScore(const CMD_S2C_StatusScore& from);

  inline CMD_S2C_StatusScore& operator=(const CMD_S2C_StatusScore& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_StatusScore& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_StatusScore* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_StatusScore* other);

  // implements Message ----------------------------------------------

  CMD_S2C_StatusScore* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_StatusScore& from);
  void MergeFrom(const CMD_S2C_StatusScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 playStatus = 1;
  inline int playstatus_size() const;
  inline void clear_playstatus();
  static const int kPlayStatusFieldNumber = 1;
  inline ::google::protobuf::int32 playstatus(int index) const;
  inline void set_playstatus(int index, ::google::protobuf::int32 value);
  inline void add_playstatus(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playstatus() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playstatus();

  // required int32 dynamicJoin = 2;
  inline bool has_dynamicjoin() const;
  inline void clear_dynamicjoin();
  static const int kDynamicJoinFieldNumber = 2;
  inline ::google::protobuf::int32 dynamicjoin() const;
  inline void set_dynamicjoin(::google::protobuf::int32 value);

  // required int64 turnMaxScore = 3;
  inline bool has_turnmaxscore() const;
  inline void clear_turnmaxscore();
  static const int kTurnMaxScoreFieldNumber = 3;
  inline ::google::protobuf::int64 turnmaxscore() const;
  inline void set_turnmaxscore(::google::protobuf::int64 value);

  // repeated int64 tableScore = 4;
  inline int tablescore_size() const;
  inline void clear_tablescore();
  static const int kTableScoreFieldNumber = 4;
  inline ::google::protobuf::int64 tablescore(int index) const;
  inline void set_tablescore(int index, ::google::protobuf::int64 value);
  inline void add_tablescore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      tablescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_tablescore();

  // required int32 bankerUser = 5;
  inline bool has_bankeruser() const;
  inline void clear_bankeruser();
  static const int kBankerUserFieldNumber = 5;
  inline ::google::protobuf::int32 bankeruser() const;
  inline void set_bankeruser(::google::protobuf::int32 value);

  // required string gameRoomName = 6;
  inline bool has_gameroomname() const;
  inline void clear_gameroomname();
  static const int kGameRoomNameFieldNumber = 6;
  inline const ::std::string& gameroomname() const;
  inline void set_gameroomname(const ::std::string& value);
  inline void set_gameroomname(const char* value);
  inline void set_gameroomname(const char* value, size_t size);
  inline ::std::string* mutable_gameroomname();
  inline ::std::string* release_gameroomname();
  inline void set_allocated_gameroomname(::std::string* gameroomname);

  // repeated int64 turnScore = 7;
  inline int turnscore_size() const;
  inline void clear_turnscore();
  static const int kTurnScoreFieldNumber = 7;
  inline ::google::protobuf::int64 turnscore(int index) const;
  inline void set_turnscore(int index, ::google::protobuf::int64 value);
  inline void add_turnscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      turnscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_turnscore();

  // repeated int64 collectScore = 8;
  inline int collectscore_size() const;
  inline void clear_collectscore();
  static const int kCollectScoreFieldNumber = 8;
  inline ::google::protobuf::int64 collectscore(int index) const;
  inline void set_collectscore(int index, ::google::protobuf::int64 value);
  inline void add_collectscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      collectscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_collectscore();

  // required bool gameOption = 9;
  inline bool has_gameoption() const;
  inline void clear_gameoption();
  static const int kGameOptionFieldNumber = 9;
  inline bool gameoption() const;
  inline void set_gameoption(bool value);

  // required int32 callTime = 10;
  inline bool has_calltime() const;
  inline void clear_calltime();
  static const int kCallTimeFieldNumber = 10;
  inline ::google::protobuf::int32 calltime() const;
  inline void set_calltime(::google::protobuf::int32 value);

  // required int32 betTime = 11;
  inline bool has_bettime() const;
  inline void clear_bettime();
  static const int kBetTimeFieldNumber = 11;
  inline ::google::protobuf::int32 bettime() const;
  inline void set_bettime(::google::protobuf::int32 value);

  // required int32 openTime = 12;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 12;
  inline ::google::protobuf::int32 opentime() const;
  inline void set_opentime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_StatusScore)
 private:
  inline void set_has_dynamicjoin();
  inline void clear_has_dynamicjoin();
  inline void set_has_turnmaxscore();
  inline void clear_has_turnmaxscore();
  inline void set_has_bankeruser();
  inline void clear_has_bankeruser();
  inline void set_has_gameroomname();
  inline void clear_has_gameroomname();
  inline void set_has_gameoption();
  inline void clear_has_gameoption();
  inline void set_has_calltime();
  inline void clear_has_calltime();
  inline void set_has_bettime();
  inline void clear_has_bettime();
  inline void set_has_opentime();
  inline void clear_has_opentime();

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playstatus_;
  ::google::protobuf::int64 turnmaxscore_;
  ::google::protobuf::int32 dynamicjoin_;
  ::google::protobuf::int32 bankeruser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > tablescore_;
  ::std::string* gameroomname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > turnscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > collectscore_;
  bool gameoption_;
  ::google::protobuf::int32 calltime_;
  ::google::protobuf::int32 bettime_;
  ::google::protobuf::int32 opentime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_StatusScore* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_StatusPlay : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_StatusPlay();
  virtual ~CMD_S2C_StatusPlay();

  CMD_S2C_StatusPlay(const CMD_S2C_StatusPlay& from);

  inline CMD_S2C_StatusPlay& operator=(const CMD_S2C_StatusPlay& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_StatusPlay& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_StatusPlay* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_StatusPlay* other);

  // implements Message ----------------------------------------------

  CMD_S2C_StatusPlay* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_StatusPlay& from);
  void MergeFrom(const CMD_S2C_StatusPlay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 playStatus = 1;
  inline int playstatus_size() const;
  inline void clear_playstatus();
  static const int kPlayStatusFieldNumber = 1;
  inline ::google::protobuf::int32 playstatus(int index) const;
  inline void set_playstatus(int index, ::google::protobuf::int32 value);
  inline void add_playstatus(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playstatus() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playstatus();

  // required int32 dynamicJoin = 2;
  inline bool has_dynamicjoin() const;
  inline void clear_dynamicjoin();
  static const int kDynamicJoinFieldNumber = 2;
  inline ::google::protobuf::int32 dynamicjoin() const;
  inline void set_dynamicjoin(::google::protobuf::int32 value);

  // required int64 turnMaxScore = 3;
  inline bool has_turnmaxscore() const;
  inline void clear_turnmaxscore();
  static const int kTurnMaxScoreFieldNumber = 3;
  inline ::google::protobuf::int64 turnmaxscore() const;
  inline void set_turnmaxscore(::google::protobuf::int64 value);

  // repeated int64 tableScore = 4;
  inline int tablescore_size() const;
  inline void clear_tablescore();
  static const int kTableScoreFieldNumber = 4;
  inline ::google::protobuf::int64 tablescore(int index) const;
  inline void set_tablescore(int index, ::google::protobuf::int64 value);
  inline void add_tablescore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      tablescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_tablescore();

  // required int32 bankerUser = 5;
  inline bool has_bankeruser() const;
  inline void clear_bankeruser();
  static const int kBankerUserFieldNumber = 5;
  inline ::google::protobuf::int32 bankeruser() const;
  inline void set_bankeruser(::google::protobuf::int32 value);

  // repeated bytes handCardData = 6;
  inline int handcarddata_size() const;
  inline void clear_handcarddata();
  static const int kHandCardDataFieldNumber = 6;
  inline const ::std::string& handcarddata(int index) const;
  inline ::std::string* mutable_handcarddata(int index);
  inline void set_handcarddata(int index, const ::std::string& value);
  inline void set_handcarddata(int index, const char* value);
  inline void set_handcarddata(int index, const void* value, size_t size);
  inline ::std::string* add_handcarddata();
  inline void add_handcarddata(const ::std::string& value);
  inline void add_handcarddata(const char* value);
  inline void add_handcarddata(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& handcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_handcarddata();

  // required bytes oxCard = 7;
  inline bool has_oxcard() const;
  inline void clear_oxcard();
  static const int kOxCardFieldNumber = 7;
  inline const ::std::string& oxcard() const;
  inline void set_oxcard(const ::std::string& value);
  inline void set_oxcard(const char* value);
  inline void set_oxcard(const void* value, size_t size);
  inline ::std::string* mutable_oxcard();
  inline ::std::string* release_oxcard();
  inline void set_allocated_oxcard(::std::string* oxcard);

  // repeated int64 turnScore = 8;
  inline int turnscore_size() const;
  inline void clear_turnscore();
  static const int kTurnScoreFieldNumber = 8;
  inline ::google::protobuf::int64 turnscore(int index) const;
  inline void set_turnscore(int index, ::google::protobuf::int64 value);
  inline void add_turnscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      turnscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_turnscore();

  // repeated int64 collectScore = 9;
  inline int collectscore_size() const;
  inline void clear_collectscore();
  static const int kCollectScoreFieldNumber = 9;
  inline ::google::protobuf::int64 collectscore(int index) const;
  inline void set_collectscore(int index, ::google::protobuf::int64 value);
  inline void add_collectscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      collectscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_collectscore();

  // required string gameRoomName = 10;
  inline bool has_gameroomname() const;
  inline void clear_gameroomname();
  static const int kGameRoomNameFieldNumber = 10;
  inline const ::std::string& gameroomname() const;
  inline void set_gameroomname(const ::std::string& value);
  inline void set_gameroomname(const char* value);
  inline void set_gameroomname(const char* value, size_t size);
  inline ::std::string* mutable_gameroomname();
  inline ::std::string* release_gameroomname();
  inline void set_allocated_gameroomname(::std::string* gameroomname);

  // required bool gameOption = 11;
  inline bool has_gameoption() const;
  inline void clear_gameoption();
  static const int kGameOptionFieldNumber = 11;
  inline bool gameoption() const;
  inline void set_gameoption(bool value);

  // required int32 callTime = 12;
  inline bool has_calltime() const;
  inline void clear_calltime();
  static const int kCallTimeFieldNumber = 12;
  inline ::google::protobuf::int32 calltime() const;
  inline void set_calltime(::google::protobuf::int32 value);

  // required int32 betTime = 13;
  inline bool has_bettime() const;
  inline void clear_bettime();
  static const int kBetTimeFieldNumber = 13;
  inline ::google::protobuf::int32 bettime() const;
  inline void set_bettime(::google::protobuf::int32 value);

  // required int32 openTime = 14;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 14;
  inline ::google::protobuf::int32 opentime() const;
  inline void set_opentime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_StatusPlay)
 private:
  inline void set_has_dynamicjoin();
  inline void clear_has_dynamicjoin();
  inline void set_has_turnmaxscore();
  inline void clear_has_turnmaxscore();
  inline void set_has_bankeruser();
  inline void clear_has_bankeruser();
  inline void set_has_oxcard();
  inline void clear_has_oxcard();
  inline void set_has_gameroomname();
  inline void clear_has_gameroomname();
  inline void set_has_gameoption();
  inline void clear_has_gameoption();
  inline void set_has_calltime();
  inline void clear_has_calltime();
  inline void set_has_bettime();
  inline void clear_has_bettime();
  inline void set_has_opentime();
  inline void clear_has_opentime();

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playstatus_;
  ::google::protobuf::int64 turnmaxscore_;
  ::google::protobuf::int32 dynamicjoin_;
  ::google::protobuf::int32 bankeruser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > tablescore_;
  ::google::protobuf::RepeatedPtrField< ::std::string> handcarddata_;
  ::std::string* oxcard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > turnscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > collectscore_;
  ::std::string* gameroomname_;
  bool gameoption_;
  ::google::protobuf::int32 calltime_;
  ::google::protobuf::int32 bettime_;
  ::google::protobuf::int32 opentime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_StatusPlay* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_CallBanker : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_CallBanker();
  virtual ~CMD_S2C_CallBanker();

  CMD_S2C_CallBanker(const CMD_S2C_CallBanker& from);

  inline CMD_S2C_CallBanker& operator=(const CMD_S2C_CallBanker& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_CallBanker& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_CallBanker* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_CallBanker* other);

  // implements Message ----------------------------------------------

  CMD_S2C_CallBanker* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_CallBanker& from);
  void MergeFrom(const CMD_S2C_CallBanker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 callBanker = 1;
  inline bool has_callbanker() const;
  inline void clear_callbanker();
  static const int kCallBankerFieldNumber = 1;
  inline ::google::protobuf::int32 callbanker() const;
  inline void set_callbanker(::google::protobuf::int32 value);

  // required int32 firstTimes = 2;
  inline bool has_firsttimes() const;
  inline void clear_firsttimes();
  static const int kFirstTimesFieldNumber = 2;
  inline ::google::protobuf::int32 firsttimes() const;
  inline void set_firsttimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_CallBanker)
 private:
  inline void set_has_callbanker();
  inline void clear_has_callbanker();
  inline void set_has_firsttimes();
  inline void clear_has_firsttimes();

  ::google::protobuf::int32 callbanker_;
  ::google::protobuf::int32 firsttimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_CallBanker* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_GameStart : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_GameStart();
  virtual ~CMD_S2C_GameStart();

  CMD_S2C_GameStart(const CMD_S2C_GameStart& from);

  inline CMD_S2C_GameStart& operator=(const CMD_S2C_GameStart& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_GameStart& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_GameStart* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_GameStart* other);

  // implements Message ----------------------------------------------

  CMD_S2C_GameStart* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_GameStart& from);
  void MergeFrom(const CMD_S2C_GameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 turnMaxScore = 1;
  inline bool has_turnmaxscore() const;
  inline void clear_turnmaxscore();
  static const int kTurnMaxScoreFieldNumber = 1;
  inline ::google::protobuf::int64 turnmaxscore() const;
  inline void set_turnmaxscore(::google::protobuf::int64 value);

  // required int32 bankerUser = 2;
  inline bool has_bankeruser() const;
  inline void clear_bankeruser();
  static const int kBankerUserFieldNumber = 2;
  inline ::google::protobuf::int32 bankeruser() const;
  inline void set_bankeruser(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_GameStart)
 private:
  inline void set_has_turnmaxscore();
  inline void clear_has_turnmaxscore();
  inline void set_has_bankeruser();
  inline void clear_has_bankeruser();

  ::google::protobuf::int64 turnmaxscore_;
  ::google::protobuf::int32 bankeruser_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_GameStart* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_AddScore : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_AddScore();
  virtual ~CMD_S2C_AddScore();

  CMD_S2C_AddScore(const CMD_S2C_AddScore& from);

  inline CMD_S2C_AddScore& operator=(const CMD_S2C_AddScore& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_AddScore& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_AddScore* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_AddScore* other);

  // implements Message ----------------------------------------------

  CMD_S2C_AddScore* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_AddScore& from);
  void MergeFrom(const CMD_S2C_AddScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 addScoreUser = 1;
  inline bool has_addscoreuser() const;
  inline void clear_addscoreuser();
  static const int kAddScoreUserFieldNumber = 1;
  inline ::google::protobuf::int32 addscoreuser() const;
  inline void set_addscoreuser(::google::protobuf::int32 value);

  // required int64 addScoreCount = 2;
  inline bool has_addscorecount() const;
  inline void clear_addscorecount();
  static const int kAddScoreCountFieldNumber = 2;
  inline ::google::protobuf::int64 addscorecount() const;
  inline void set_addscorecount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_AddScore)
 private:
  inline void set_has_addscoreuser();
  inline void clear_has_addscoreuser();
  inline void set_has_addscorecount();
  inline void clear_has_addscorecount();

  ::google::protobuf::int64 addscorecount_;
  ::google::protobuf::int32 addscoreuser_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_AddScore* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_GameEnd : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_GameEnd();
  virtual ~CMD_S2C_GameEnd();

  CMD_S2C_GameEnd(const CMD_S2C_GameEnd& from);

  inline CMD_S2C_GameEnd& operator=(const CMD_S2C_GameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_GameEnd& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_GameEnd* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_GameEnd* other);

  // implements Message ----------------------------------------------

  CMD_S2C_GameEnd* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_GameEnd& from);
  void MergeFrom(const CMD_S2C_GameEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 gameTax = 1;
  inline int gametax_size() const;
  inline void clear_gametax();
  static const int kGameTaxFieldNumber = 1;
  inline ::google::protobuf::int64 gametax(int index) const;
  inline void set_gametax(int index, ::google::protobuf::int64 value);
  inline void add_gametax(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      gametax() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_gametax();

  // repeated int64 gameScore = 2;
  inline int gamescore_size() const;
  inline void clear_gamescore();
  static const int kGameScoreFieldNumber = 2;
  inline ::google::protobuf::int64 gamescore(int index) const;
  inline void set_gamescore(int index, ::google::protobuf::int64 value);
  inline void add_gamescore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      gamescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_gamescore();

  // required int64 userGold = 3;
  inline bool has_usergold() const;
  inline void clear_usergold();
  static const int kUserGoldFieldNumber = 3;
  inline ::google::protobuf::int64 usergold() const;
  inline void set_usergold(::google::protobuf::int64 value);

  // required int64 moneyScore = 4;
  inline bool has_moneyscore() const;
  inline void clear_moneyscore();
  static const int kMoneyScoreFieldNumber = 4;
  inline ::google::protobuf::int64 moneyscore() const;
  inline void set_moneyscore(::google::protobuf::int64 value);

  // repeated int32 lookTable = 5;
  inline int looktable_size() const;
  inline void clear_looktable();
  static const int kLookTableFieldNumber = 5;
  inline ::google::protobuf::int32 looktable(int index) const;
  inline void set_looktable(int index, ::google::protobuf::int32 value);
  inline void add_looktable(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      looktable() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_looktable();

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_GameEnd)
 private:
  inline void set_has_usergold();
  inline void clear_has_usergold();
  inline void set_has_moneyscore();
  inline void clear_has_moneyscore();

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > gametax_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > gamescore_;
  ::google::protobuf::int64 usergold_;
  ::google::protobuf::int64 moneyscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > looktable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_GameEnd* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_SendCard : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_SendCard();
  virtual ~CMD_S2C_SendCard();

  CMD_S2C_SendCard(const CMD_S2C_SendCard& from);

  inline CMD_S2C_SendCard& operator=(const CMD_S2C_SendCard& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_SendCard& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_SendCard* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_SendCard* other);

  // implements Message ----------------------------------------------

  CMD_S2C_SendCard* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_SendCard& from);
  void MergeFrom(const CMD_S2C_SendCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes cardData = 1;
  inline int carddata_size() const;
  inline void clear_carddata();
  static const int kCardDataFieldNumber = 1;
  inline const ::std::string& carddata(int index) const;
  inline ::std::string* mutable_carddata(int index);
  inline void set_carddata(int index, const ::std::string& value);
  inline void set_carddata(int index, const char* value);
  inline void set_carddata(int index, const void* value, size_t size);
  inline ::std::string* add_carddata();
  inline void add_carddata(const ::std::string& value);
  inline void add_carddata(const char* value);
  inline void add_carddata(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& carddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_carddata();

  // required int32 playerCount = 2;
  inline bool has_playercount() const;
  inline void clear_playercount();
  static const int kPlayerCountFieldNumber = 2;
  inline ::google::protobuf::int32 playercount() const;
  inline void set_playercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_SendCard)
 private:
  inline void set_has_playercount();
  inline void clear_has_playercount();

  ::google::protobuf::RepeatedPtrField< ::std::string> carddata_;
  ::google::protobuf::int32 playercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_SendCard* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_PlayerExit : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_PlayerExit();
  virtual ~CMD_S2C_PlayerExit();

  CMD_S2C_PlayerExit(const CMD_S2C_PlayerExit& from);

  inline CMD_S2C_PlayerExit& operator=(const CMD_S2C_PlayerExit& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_PlayerExit& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_PlayerExit* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_PlayerExit* other);

  // implements Message ----------------------------------------------

  CMD_S2C_PlayerExit* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_PlayerExit& from);
  void MergeFrom(const CMD_S2C_PlayerExit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_PlayerExit)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_PlayerExit* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_OpenCard : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_OpenCard();
  virtual ~CMD_S2C_OpenCard();

  CMD_S2C_OpenCard(const CMD_S2C_OpenCard& from);

  inline CMD_S2C_OpenCard& operator=(const CMD_S2C_OpenCard& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_OpenCard& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_OpenCard* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_OpenCard* other);

  // implements Message ----------------------------------------------

  CMD_S2C_OpenCard* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_OpenCard& from);
  void MergeFrom(const CMD_S2C_OpenCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required int32 open = 2;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 2;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_OpenCard)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_OpenCard* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_ReceiveEmotion : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_ReceiveEmotion();
  virtual ~CMD_S2C_ReceiveEmotion();

  CMD_S2C_ReceiveEmotion(const CMD_S2C_ReceiveEmotion& from);

  inline CMD_S2C_ReceiveEmotion& operator=(const CMD_S2C_ReceiveEmotion& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_ReceiveEmotion& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_ReceiveEmotion* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_ReceiveEmotion* other);

  // implements Message ----------------------------------------------

  CMD_S2C_ReceiveEmotion* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_ReceiveEmotion& from);
  void MergeFrom(const CMD_S2C_ReceiveEmotion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 emotionId = 3;
  inline bool has_emotionid() const;
  inline void clear_emotionid();
  static const int kEmotionIdFieldNumber = 3;
  inline ::google::protobuf::int32 emotionid() const;
  inline void set_emotionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_ReceiveEmotion)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_emotionid();
  inline void clear_has_emotionid();

  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 emotionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_ReceiveEmotion* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_PostServiceCharge : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_PostServiceCharge();
  virtual ~CMD_S2C_PostServiceCharge();

  CMD_S2C_PostServiceCharge(const CMD_S2C_PostServiceCharge& from);

  inline CMD_S2C_PostServiceCharge& operator=(const CMD_S2C_PostServiceCharge& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_PostServiceCharge& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_PostServiceCharge* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_PostServiceCharge* other);

  // implements Message ----------------------------------------------

  CMD_S2C_PostServiceCharge* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_PostServiceCharge& from);
  void MergeFrom(const CMD_S2C_PostServiceCharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required int32 serviceCharge = 2;
  inline bool has_servicecharge() const;
  inline void clear_servicecharge();
  static const int kServiceChargeFieldNumber = 2;
  inline ::google::protobuf::int32 servicecharge() const;
  inline void set_servicecharge(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.oxchange.s2c.CMD_S2C_PostServiceCharge)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_servicecharge();
  inline void clear_has_servicecharge();

  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 servicecharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_PostServiceCharge* default_instance_;
};
// ===================================================================


// ===================================================================

// CMD_S2C_StatusFree

// required int64 cellScore = 1;
inline bool CMD_S2C_StatusFree::has_cellscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_StatusFree::set_has_cellscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_StatusFree::clear_has_cellscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_StatusFree::clear_cellscore() {
  cellscore_ = GOOGLE_LONGLONG(0);
  clear_has_cellscore();
}
inline ::google::protobuf::int64 CMD_S2C_StatusFree::cellscore() const {
  return cellscore_;
}
inline void CMD_S2C_StatusFree::set_cellscore(::google::protobuf::int64 value) {
  set_has_cellscore();
  cellscore_ = value;
}

// repeated int64 turnScore = 2;
inline int CMD_S2C_StatusFree::turnscore_size() const {
  return turnscore_.size();
}
inline void CMD_S2C_StatusFree::clear_turnscore() {
  turnscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusFree::turnscore(int index) const {
  return turnscore_.Get(index);
}
inline void CMD_S2C_StatusFree::set_turnscore(int index, ::google::protobuf::int64 value) {
  turnscore_.Set(index, value);
}
inline void CMD_S2C_StatusFree::add_turnscore(::google::protobuf::int64 value) {
  turnscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusFree::turnscore() const {
  return turnscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusFree::mutable_turnscore() {
  return &turnscore_;
}

// repeated int64 collectScore = 3;
inline int CMD_S2C_StatusFree::collectscore_size() const {
  return collectscore_.size();
}
inline void CMD_S2C_StatusFree::clear_collectscore() {
  collectscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusFree::collectscore(int index) const {
  return collectscore_.Get(index);
}
inline void CMD_S2C_StatusFree::set_collectscore(int index, ::google::protobuf::int64 value) {
  collectscore_.Set(index, value);
}
inline void CMD_S2C_StatusFree::add_collectscore(::google::protobuf::int64 value) {
  collectscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusFree::collectscore() const {
  return collectscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusFree::mutable_collectscore() {
  return &collectscore_;
}

// required string gameRoomName = 4;
inline bool CMD_S2C_StatusFree::has_gameroomname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_StatusFree::set_has_gameroomname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_StatusFree::clear_has_gameroomname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_StatusFree::clear_gameroomname() {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    gameroomname_->clear();
  }
  clear_has_gameroomname();
}
inline const ::std::string& CMD_S2C_StatusFree::gameroomname() const {
  return *gameroomname_;
}
inline void CMD_S2C_StatusFree::set_gameroomname(const ::std::string& value) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(value);
}
inline void CMD_S2C_StatusFree::set_gameroomname(const char* value) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(value);
}
inline void CMD_S2C_StatusFree::set_gameroomname(const char* value, size_t size) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_S2C_StatusFree::mutable_gameroomname() {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  return gameroomname_;
}
inline ::std::string* CMD_S2C_StatusFree::release_gameroomname() {
  clear_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameroomname_;
    gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_S2C_StatusFree::set_allocated_gameroomname(::std::string* gameroomname) {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroomname_;
  }
  if (gameroomname) {
    set_has_gameroomname();
    gameroomname_ = gameroomname;
  } else {
    clear_has_gameroomname();
    gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool gameOption = 5;
inline bool CMD_S2C_StatusFree::has_gameoption() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_S2C_StatusFree::set_has_gameoption() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_S2C_StatusFree::clear_has_gameoption() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_S2C_StatusFree::clear_gameoption() {
  gameoption_ = false;
  clear_has_gameoption();
}
inline bool CMD_S2C_StatusFree::gameoption() const {
  return gameoption_;
}
inline void CMD_S2C_StatusFree::set_gameoption(bool value) {
  set_has_gameoption();
  gameoption_ = value;
}

// required int32 callTime = 6;
inline bool CMD_S2C_StatusFree::has_calltime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_S2C_StatusFree::set_has_calltime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_S2C_StatusFree::clear_has_calltime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_S2C_StatusFree::clear_calltime() {
  calltime_ = 0;
  clear_has_calltime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusFree::calltime() const {
  return calltime_;
}
inline void CMD_S2C_StatusFree::set_calltime(::google::protobuf::int32 value) {
  set_has_calltime();
  calltime_ = value;
}

// required int32 betTime = 7;
inline bool CMD_S2C_StatusFree::has_bettime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_S2C_StatusFree::set_has_bettime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_S2C_StatusFree::clear_has_bettime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_S2C_StatusFree::clear_bettime() {
  bettime_ = 0;
  clear_has_bettime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusFree::bettime() const {
  return bettime_;
}
inline void CMD_S2C_StatusFree::set_bettime(::google::protobuf::int32 value) {
  set_has_bettime();
  bettime_ = value;
}

// required int32 openTime = 8;
inline bool CMD_S2C_StatusFree::has_opentime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_S2C_StatusFree::set_has_opentime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_S2C_StatusFree::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_S2C_StatusFree::clear_opentime() {
  opentime_ = 0;
  clear_has_opentime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusFree::opentime() const {
  return opentime_;
}
inline void CMD_S2C_StatusFree::set_opentime(::google::protobuf::int32 value) {
  set_has_opentime();
  opentime_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_StatusCall

// required int32 callBanker = 1;
inline bool CMD_S2C_StatusCall::has_callbanker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_StatusCall::set_has_callbanker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_StatusCall::clear_has_callbanker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_StatusCall::clear_callbanker() {
  callbanker_ = 0;
  clear_has_callbanker();
}
inline ::google::protobuf::int32 CMD_S2C_StatusCall::callbanker() const {
  return callbanker_;
}
inline void CMD_S2C_StatusCall::set_callbanker(::google::protobuf::int32 value) {
  set_has_callbanker();
  callbanker_ = value;
}

// required int32 dynamicJoin = 2;
inline bool CMD_S2C_StatusCall::has_dynamicjoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_StatusCall::set_has_dynamicjoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_StatusCall::clear_has_dynamicjoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_StatusCall::clear_dynamicjoin() {
  dynamicjoin_ = 0;
  clear_has_dynamicjoin();
}
inline ::google::protobuf::int32 CMD_S2C_StatusCall::dynamicjoin() const {
  return dynamicjoin_;
}
inline void CMD_S2C_StatusCall::set_dynamicjoin(::google::protobuf::int32 value) {
  set_has_dynamicjoin();
  dynamicjoin_ = value;
}

// repeated int32 playStatus = 3;
inline int CMD_S2C_StatusCall::playstatus_size() const {
  return playstatus_.size();
}
inline void CMD_S2C_StatusCall::clear_playstatus() {
  playstatus_.Clear();
}
inline ::google::protobuf::int32 CMD_S2C_StatusCall::playstatus(int index) const {
  return playstatus_.Get(index);
}
inline void CMD_S2C_StatusCall::set_playstatus(int index, ::google::protobuf::int32 value) {
  playstatus_.Set(index, value);
}
inline void CMD_S2C_StatusCall::add_playstatus(::google::protobuf::int32 value) {
  playstatus_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMD_S2C_StatusCall::playstatus() const {
  return playstatus_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMD_S2C_StatusCall::mutable_playstatus() {
  return &playstatus_;
}

// repeated int64 turnScore = 4;
inline int CMD_S2C_StatusCall::turnscore_size() const {
  return turnscore_.size();
}
inline void CMD_S2C_StatusCall::clear_turnscore() {
  turnscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusCall::turnscore(int index) const {
  return turnscore_.Get(index);
}
inline void CMD_S2C_StatusCall::set_turnscore(int index, ::google::protobuf::int64 value) {
  turnscore_.Set(index, value);
}
inline void CMD_S2C_StatusCall::add_turnscore(::google::protobuf::int64 value) {
  turnscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusCall::turnscore() const {
  return turnscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusCall::mutable_turnscore() {
  return &turnscore_;
}

// repeated int64 collectScore = 5;
inline int CMD_S2C_StatusCall::collectscore_size() const {
  return collectscore_.size();
}
inline void CMD_S2C_StatusCall::clear_collectscore() {
  collectscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusCall::collectscore(int index) const {
  return collectscore_.Get(index);
}
inline void CMD_S2C_StatusCall::set_collectscore(int index, ::google::protobuf::int64 value) {
  collectscore_.Set(index, value);
}
inline void CMD_S2C_StatusCall::add_collectscore(::google::protobuf::int64 value) {
  collectscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusCall::collectscore() const {
  return collectscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusCall::mutable_collectscore() {
  return &collectscore_;
}

// required string gameRoomName = 6;
inline bool CMD_S2C_StatusCall::has_gameroomname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_S2C_StatusCall::set_has_gameroomname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_S2C_StatusCall::clear_has_gameroomname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_S2C_StatusCall::clear_gameroomname() {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    gameroomname_->clear();
  }
  clear_has_gameroomname();
}
inline const ::std::string& CMD_S2C_StatusCall::gameroomname() const {
  return *gameroomname_;
}
inline void CMD_S2C_StatusCall::set_gameroomname(const ::std::string& value) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(value);
}
inline void CMD_S2C_StatusCall::set_gameroomname(const char* value) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(value);
}
inline void CMD_S2C_StatusCall::set_gameroomname(const char* value, size_t size) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_S2C_StatusCall::mutable_gameroomname() {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  return gameroomname_;
}
inline ::std::string* CMD_S2C_StatusCall::release_gameroomname() {
  clear_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameroomname_;
    gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_S2C_StatusCall::set_allocated_gameroomname(::std::string* gameroomname) {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroomname_;
  }
  if (gameroomname) {
    set_has_gameroomname();
    gameroomname_ = gameroomname;
  } else {
    clear_has_gameroomname();
    gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool gameOption = 7;
inline bool CMD_S2C_StatusCall::has_gameoption() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_S2C_StatusCall::set_has_gameoption() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_S2C_StatusCall::clear_has_gameoption() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_S2C_StatusCall::clear_gameoption() {
  gameoption_ = false;
  clear_has_gameoption();
}
inline bool CMD_S2C_StatusCall::gameoption() const {
  return gameoption_;
}
inline void CMD_S2C_StatusCall::set_gameoption(bool value) {
  set_has_gameoption();
  gameoption_ = value;
}

// required int32 callTime = 8;
inline bool CMD_S2C_StatusCall::has_calltime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_S2C_StatusCall::set_has_calltime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_S2C_StatusCall::clear_has_calltime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_S2C_StatusCall::clear_calltime() {
  calltime_ = 0;
  clear_has_calltime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusCall::calltime() const {
  return calltime_;
}
inline void CMD_S2C_StatusCall::set_calltime(::google::protobuf::int32 value) {
  set_has_calltime();
  calltime_ = value;
}

// required int32 betTime = 9;
inline bool CMD_S2C_StatusCall::has_bettime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_S2C_StatusCall::set_has_bettime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_S2C_StatusCall::clear_has_bettime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_S2C_StatusCall::clear_bettime() {
  bettime_ = 0;
  clear_has_bettime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusCall::bettime() const {
  return bettime_;
}
inline void CMD_S2C_StatusCall::set_bettime(::google::protobuf::int32 value) {
  set_has_bettime();
  bettime_ = value;
}

// required int32 openTime = 10;
inline bool CMD_S2C_StatusCall::has_opentime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_S2C_StatusCall::set_has_opentime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_S2C_StatusCall::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_S2C_StatusCall::clear_opentime() {
  opentime_ = 0;
  clear_has_opentime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusCall::opentime() const {
  return opentime_;
}
inline void CMD_S2C_StatusCall::set_opentime(::google::protobuf::int32 value) {
  set_has_opentime();
  opentime_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_StatusScore

// repeated int32 playStatus = 1;
inline int CMD_S2C_StatusScore::playstatus_size() const {
  return playstatus_.size();
}
inline void CMD_S2C_StatusScore::clear_playstatus() {
  playstatus_.Clear();
}
inline ::google::protobuf::int32 CMD_S2C_StatusScore::playstatus(int index) const {
  return playstatus_.Get(index);
}
inline void CMD_S2C_StatusScore::set_playstatus(int index, ::google::protobuf::int32 value) {
  playstatus_.Set(index, value);
}
inline void CMD_S2C_StatusScore::add_playstatus(::google::protobuf::int32 value) {
  playstatus_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMD_S2C_StatusScore::playstatus() const {
  return playstatus_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMD_S2C_StatusScore::mutable_playstatus() {
  return &playstatus_;
}

// required int32 dynamicJoin = 2;
inline bool CMD_S2C_StatusScore::has_dynamicjoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_StatusScore::set_has_dynamicjoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_StatusScore::clear_has_dynamicjoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_StatusScore::clear_dynamicjoin() {
  dynamicjoin_ = 0;
  clear_has_dynamicjoin();
}
inline ::google::protobuf::int32 CMD_S2C_StatusScore::dynamicjoin() const {
  return dynamicjoin_;
}
inline void CMD_S2C_StatusScore::set_dynamicjoin(::google::protobuf::int32 value) {
  set_has_dynamicjoin();
  dynamicjoin_ = value;
}

// required int64 turnMaxScore = 3;
inline bool CMD_S2C_StatusScore::has_turnmaxscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_StatusScore::set_has_turnmaxscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_StatusScore::clear_has_turnmaxscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_StatusScore::clear_turnmaxscore() {
  turnmaxscore_ = GOOGLE_LONGLONG(0);
  clear_has_turnmaxscore();
}
inline ::google::protobuf::int64 CMD_S2C_StatusScore::turnmaxscore() const {
  return turnmaxscore_;
}
inline void CMD_S2C_StatusScore::set_turnmaxscore(::google::protobuf::int64 value) {
  set_has_turnmaxscore();
  turnmaxscore_ = value;
}

// repeated int64 tableScore = 4;
inline int CMD_S2C_StatusScore::tablescore_size() const {
  return tablescore_.size();
}
inline void CMD_S2C_StatusScore::clear_tablescore() {
  tablescore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusScore::tablescore(int index) const {
  return tablescore_.Get(index);
}
inline void CMD_S2C_StatusScore::set_tablescore(int index, ::google::protobuf::int64 value) {
  tablescore_.Set(index, value);
}
inline void CMD_S2C_StatusScore::add_tablescore(::google::protobuf::int64 value) {
  tablescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusScore::tablescore() const {
  return tablescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusScore::mutable_tablescore() {
  return &tablescore_;
}

// required int32 bankerUser = 5;
inline bool CMD_S2C_StatusScore::has_bankeruser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_S2C_StatusScore::set_has_bankeruser() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_S2C_StatusScore::clear_has_bankeruser() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_S2C_StatusScore::clear_bankeruser() {
  bankeruser_ = 0;
  clear_has_bankeruser();
}
inline ::google::protobuf::int32 CMD_S2C_StatusScore::bankeruser() const {
  return bankeruser_;
}
inline void CMD_S2C_StatusScore::set_bankeruser(::google::protobuf::int32 value) {
  set_has_bankeruser();
  bankeruser_ = value;
}

// required string gameRoomName = 6;
inline bool CMD_S2C_StatusScore::has_gameroomname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_S2C_StatusScore::set_has_gameroomname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_S2C_StatusScore::clear_has_gameroomname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_S2C_StatusScore::clear_gameroomname() {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    gameroomname_->clear();
  }
  clear_has_gameroomname();
}
inline const ::std::string& CMD_S2C_StatusScore::gameroomname() const {
  return *gameroomname_;
}
inline void CMD_S2C_StatusScore::set_gameroomname(const ::std::string& value) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(value);
}
inline void CMD_S2C_StatusScore::set_gameroomname(const char* value) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(value);
}
inline void CMD_S2C_StatusScore::set_gameroomname(const char* value, size_t size) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_S2C_StatusScore::mutable_gameroomname() {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  return gameroomname_;
}
inline ::std::string* CMD_S2C_StatusScore::release_gameroomname() {
  clear_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameroomname_;
    gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_S2C_StatusScore::set_allocated_gameroomname(::std::string* gameroomname) {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroomname_;
  }
  if (gameroomname) {
    set_has_gameroomname();
    gameroomname_ = gameroomname;
  } else {
    clear_has_gameroomname();
    gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int64 turnScore = 7;
inline int CMD_S2C_StatusScore::turnscore_size() const {
  return turnscore_.size();
}
inline void CMD_S2C_StatusScore::clear_turnscore() {
  turnscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusScore::turnscore(int index) const {
  return turnscore_.Get(index);
}
inline void CMD_S2C_StatusScore::set_turnscore(int index, ::google::protobuf::int64 value) {
  turnscore_.Set(index, value);
}
inline void CMD_S2C_StatusScore::add_turnscore(::google::protobuf::int64 value) {
  turnscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusScore::turnscore() const {
  return turnscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusScore::mutable_turnscore() {
  return &turnscore_;
}

// repeated int64 collectScore = 8;
inline int CMD_S2C_StatusScore::collectscore_size() const {
  return collectscore_.size();
}
inline void CMD_S2C_StatusScore::clear_collectscore() {
  collectscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusScore::collectscore(int index) const {
  return collectscore_.Get(index);
}
inline void CMD_S2C_StatusScore::set_collectscore(int index, ::google::protobuf::int64 value) {
  collectscore_.Set(index, value);
}
inline void CMD_S2C_StatusScore::add_collectscore(::google::protobuf::int64 value) {
  collectscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusScore::collectscore() const {
  return collectscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusScore::mutable_collectscore() {
  return &collectscore_;
}

// required bool gameOption = 9;
inline bool CMD_S2C_StatusScore::has_gameoption() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_S2C_StatusScore::set_has_gameoption() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_S2C_StatusScore::clear_has_gameoption() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_S2C_StatusScore::clear_gameoption() {
  gameoption_ = false;
  clear_has_gameoption();
}
inline bool CMD_S2C_StatusScore::gameoption() const {
  return gameoption_;
}
inline void CMD_S2C_StatusScore::set_gameoption(bool value) {
  set_has_gameoption();
  gameoption_ = value;
}

// required int32 callTime = 10;
inline bool CMD_S2C_StatusScore::has_calltime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_S2C_StatusScore::set_has_calltime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_S2C_StatusScore::clear_has_calltime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_S2C_StatusScore::clear_calltime() {
  calltime_ = 0;
  clear_has_calltime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusScore::calltime() const {
  return calltime_;
}
inline void CMD_S2C_StatusScore::set_calltime(::google::protobuf::int32 value) {
  set_has_calltime();
  calltime_ = value;
}

// required int32 betTime = 11;
inline bool CMD_S2C_StatusScore::has_bettime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMD_S2C_StatusScore::set_has_bettime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMD_S2C_StatusScore::clear_has_bettime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMD_S2C_StatusScore::clear_bettime() {
  bettime_ = 0;
  clear_has_bettime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusScore::bettime() const {
  return bettime_;
}
inline void CMD_S2C_StatusScore::set_bettime(::google::protobuf::int32 value) {
  set_has_bettime();
  bettime_ = value;
}

// required int32 openTime = 12;
inline bool CMD_S2C_StatusScore::has_opentime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMD_S2C_StatusScore::set_has_opentime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMD_S2C_StatusScore::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMD_S2C_StatusScore::clear_opentime() {
  opentime_ = 0;
  clear_has_opentime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusScore::opentime() const {
  return opentime_;
}
inline void CMD_S2C_StatusScore::set_opentime(::google::protobuf::int32 value) {
  set_has_opentime();
  opentime_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_StatusPlay

// repeated int32 playStatus = 1;
inline int CMD_S2C_StatusPlay::playstatus_size() const {
  return playstatus_.size();
}
inline void CMD_S2C_StatusPlay::clear_playstatus() {
  playstatus_.Clear();
}
inline ::google::protobuf::int32 CMD_S2C_StatusPlay::playstatus(int index) const {
  return playstatus_.Get(index);
}
inline void CMD_S2C_StatusPlay::set_playstatus(int index, ::google::protobuf::int32 value) {
  playstatus_.Set(index, value);
}
inline void CMD_S2C_StatusPlay::add_playstatus(::google::protobuf::int32 value) {
  playstatus_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMD_S2C_StatusPlay::playstatus() const {
  return playstatus_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMD_S2C_StatusPlay::mutable_playstatus() {
  return &playstatus_;
}

// required int32 dynamicJoin = 2;
inline bool CMD_S2C_StatusPlay::has_dynamicjoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_StatusPlay::set_has_dynamicjoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_StatusPlay::clear_has_dynamicjoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_StatusPlay::clear_dynamicjoin() {
  dynamicjoin_ = 0;
  clear_has_dynamicjoin();
}
inline ::google::protobuf::int32 CMD_S2C_StatusPlay::dynamicjoin() const {
  return dynamicjoin_;
}
inline void CMD_S2C_StatusPlay::set_dynamicjoin(::google::protobuf::int32 value) {
  set_has_dynamicjoin();
  dynamicjoin_ = value;
}

// required int64 turnMaxScore = 3;
inline bool CMD_S2C_StatusPlay::has_turnmaxscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_StatusPlay::set_has_turnmaxscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_StatusPlay::clear_has_turnmaxscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_StatusPlay::clear_turnmaxscore() {
  turnmaxscore_ = GOOGLE_LONGLONG(0);
  clear_has_turnmaxscore();
}
inline ::google::protobuf::int64 CMD_S2C_StatusPlay::turnmaxscore() const {
  return turnmaxscore_;
}
inline void CMD_S2C_StatusPlay::set_turnmaxscore(::google::protobuf::int64 value) {
  set_has_turnmaxscore();
  turnmaxscore_ = value;
}

// repeated int64 tableScore = 4;
inline int CMD_S2C_StatusPlay::tablescore_size() const {
  return tablescore_.size();
}
inline void CMD_S2C_StatusPlay::clear_tablescore() {
  tablescore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusPlay::tablescore(int index) const {
  return tablescore_.Get(index);
}
inline void CMD_S2C_StatusPlay::set_tablescore(int index, ::google::protobuf::int64 value) {
  tablescore_.Set(index, value);
}
inline void CMD_S2C_StatusPlay::add_tablescore(::google::protobuf::int64 value) {
  tablescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusPlay::tablescore() const {
  return tablescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusPlay::mutable_tablescore() {
  return &tablescore_;
}

// required int32 bankerUser = 5;
inline bool CMD_S2C_StatusPlay::has_bankeruser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_S2C_StatusPlay::set_has_bankeruser() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_S2C_StatusPlay::clear_has_bankeruser() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_S2C_StatusPlay::clear_bankeruser() {
  bankeruser_ = 0;
  clear_has_bankeruser();
}
inline ::google::protobuf::int32 CMD_S2C_StatusPlay::bankeruser() const {
  return bankeruser_;
}
inline void CMD_S2C_StatusPlay::set_bankeruser(::google::protobuf::int32 value) {
  set_has_bankeruser();
  bankeruser_ = value;
}

// repeated bytes handCardData = 6;
inline int CMD_S2C_StatusPlay::handcarddata_size() const {
  return handcarddata_.size();
}
inline void CMD_S2C_StatusPlay::clear_handcarddata() {
  handcarddata_.Clear();
}
inline const ::std::string& CMD_S2C_StatusPlay::handcarddata(int index) const {
  return handcarddata_.Get(index);
}
inline ::std::string* CMD_S2C_StatusPlay::mutable_handcarddata(int index) {
  return handcarddata_.Mutable(index);
}
inline void CMD_S2C_StatusPlay::set_handcarddata(int index, const ::std::string& value) {
  handcarddata_.Mutable(index)->assign(value);
}
inline void CMD_S2C_StatusPlay::set_handcarddata(int index, const char* value) {
  handcarddata_.Mutable(index)->assign(value);
}
inline void CMD_S2C_StatusPlay::set_handcarddata(int index, const void* value, size_t size) {
  handcarddata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_S2C_StatusPlay::add_handcarddata() {
  return handcarddata_.Add();
}
inline void CMD_S2C_StatusPlay::add_handcarddata(const ::std::string& value) {
  handcarddata_.Add()->assign(value);
}
inline void CMD_S2C_StatusPlay::add_handcarddata(const char* value) {
  handcarddata_.Add()->assign(value);
}
inline void CMD_S2C_StatusPlay::add_handcarddata(const void* value, size_t size) {
  handcarddata_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMD_S2C_StatusPlay::handcarddata() const {
  return handcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMD_S2C_StatusPlay::mutable_handcarddata() {
  return &handcarddata_;
}

// required bytes oxCard = 7;
inline bool CMD_S2C_StatusPlay::has_oxcard() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_S2C_StatusPlay::set_has_oxcard() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_S2C_StatusPlay::clear_has_oxcard() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_S2C_StatusPlay::clear_oxcard() {
  if (oxcard_ != &::google::protobuf::internal::kEmptyString) {
    oxcard_->clear();
  }
  clear_has_oxcard();
}
inline const ::std::string& CMD_S2C_StatusPlay::oxcard() const {
  return *oxcard_;
}
inline void CMD_S2C_StatusPlay::set_oxcard(const ::std::string& value) {
  set_has_oxcard();
  if (oxcard_ == &::google::protobuf::internal::kEmptyString) {
    oxcard_ = new ::std::string;
  }
  oxcard_->assign(value);
}
inline void CMD_S2C_StatusPlay::set_oxcard(const char* value) {
  set_has_oxcard();
  if (oxcard_ == &::google::protobuf::internal::kEmptyString) {
    oxcard_ = new ::std::string;
  }
  oxcard_->assign(value);
}
inline void CMD_S2C_StatusPlay::set_oxcard(const void* value, size_t size) {
  set_has_oxcard();
  if (oxcard_ == &::google::protobuf::internal::kEmptyString) {
    oxcard_ = new ::std::string;
  }
  oxcard_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_S2C_StatusPlay::mutable_oxcard() {
  set_has_oxcard();
  if (oxcard_ == &::google::protobuf::internal::kEmptyString) {
    oxcard_ = new ::std::string;
  }
  return oxcard_;
}
inline ::std::string* CMD_S2C_StatusPlay::release_oxcard() {
  clear_has_oxcard();
  if (oxcard_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oxcard_;
    oxcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_S2C_StatusPlay::set_allocated_oxcard(::std::string* oxcard) {
  if (oxcard_ != &::google::protobuf::internal::kEmptyString) {
    delete oxcard_;
  }
  if (oxcard) {
    set_has_oxcard();
    oxcard_ = oxcard;
  } else {
    clear_has_oxcard();
    oxcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int64 turnScore = 8;
inline int CMD_S2C_StatusPlay::turnscore_size() const {
  return turnscore_.size();
}
inline void CMD_S2C_StatusPlay::clear_turnscore() {
  turnscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusPlay::turnscore(int index) const {
  return turnscore_.Get(index);
}
inline void CMD_S2C_StatusPlay::set_turnscore(int index, ::google::protobuf::int64 value) {
  turnscore_.Set(index, value);
}
inline void CMD_S2C_StatusPlay::add_turnscore(::google::protobuf::int64 value) {
  turnscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusPlay::turnscore() const {
  return turnscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusPlay::mutable_turnscore() {
  return &turnscore_;
}

// repeated int64 collectScore = 9;
inline int CMD_S2C_StatusPlay::collectscore_size() const {
  return collectscore_.size();
}
inline void CMD_S2C_StatusPlay::clear_collectscore() {
  collectscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_StatusPlay::collectscore(int index) const {
  return collectscore_.Get(index);
}
inline void CMD_S2C_StatusPlay::set_collectscore(int index, ::google::protobuf::int64 value) {
  collectscore_.Set(index, value);
}
inline void CMD_S2C_StatusPlay::add_collectscore(::google::protobuf::int64 value) {
  collectscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_StatusPlay::collectscore() const {
  return collectscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_StatusPlay::mutable_collectscore() {
  return &collectscore_;
}

// required string gameRoomName = 10;
inline bool CMD_S2C_StatusPlay::has_gameroomname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_S2C_StatusPlay::set_has_gameroomname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_S2C_StatusPlay::clear_has_gameroomname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_S2C_StatusPlay::clear_gameroomname() {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    gameroomname_->clear();
  }
  clear_has_gameroomname();
}
inline const ::std::string& CMD_S2C_StatusPlay::gameroomname() const {
  return *gameroomname_;
}
inline void CMD_S2C_StatusPlay::set_gameroomname(const ::std::string& value) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(value);
}
inline void CMD_S2C_StatusPlay::set_gameroomname(const char* value) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(value);
}
inline void CMD_S2C_StatusPlay::set_gameroomname(const char* value, size_t size) {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  gameroomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_S2C_StatusPlay::mutable_gameroomname() {
  set_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    gameroomname_ = new ::std::string;
  }
  return gameroomname_;
}
inline ::std::string* CMD_S2C_StatusPlay::release_gameroomname() {
  clear_has_gameroomname();
  if (gameroomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameroomname_;
    gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_S2C_StatusPlay::set_allocated_gameroomname(::std::string* gameroomname) {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroomname_;
  }
  if (gameroomname) {
    set_has_gameroomname();
    gameroomname_ = gameroomname;
  } else {
    clear_has_gameroomname();
    gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool gameOption = 11;
inline bool CMD_S2C_StatusPlay::has_gameoption() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMD_S2C_StatusPlay::set_has_gameoption() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMD_S2C_StatusPlay::clear_has_gameoption() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMD_S2C_StatusPlay::clear_gameoption() {
  gameoption_ = false;
  clear_has_gameoption();
}
inline bool CMD_S2C_StatusPlay::gameoption() const {
  return gameoption_;
}
inline void CMD_S2C_StatusPlay::set_gameoption(bool value) {
  set_has_gameoption();
  gameoption_ = value;
}

// required int32 callTime = 12;
inline bool CMD_S2C_StatusPlay::has_calltime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMD_S2C_StatusPlay::set_has_calltime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMD_S2C_StatusPlay::clear_has_calltime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMD_S2C_StatusPlay::clear_calltime() {
  calltime_ = 0;
  clear_has_calltime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusPlay::calltime() const {
  return calltime_;
}
inline void CMD_S2C_StatusPlay::set_calltime(::google::protobuf::int32 value) {
  set_has_calltime();
  calltime_ = value;
}

// required int32 betTime = 13;
inline bool CMD_S2C_StatusPlay::has_bettime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMD_S2C_StatusPlay::set_has_bettime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMD_S2C_StatusPlay::clear_has_bettime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMD_S2C_StatusPlay::clear_bettime() {
  bettime_ = 0;
  clear_has_bettime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusPlay::bettime() const {
  return bettime_;
}
inline void CMD_S2C_StatusPlay::set_bettime(::google::protobuf::int32 value) {
  set_has_bettime();
  bettime_ = value;
}

// required int32 openTime = 14;
inline bool CMD_S2C_StatusPlay::has_opentime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMD_S2C_StatusPlay::set_has_opentime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMD_S2C_StatusPlay::clear_has_opentime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMD_S2C_StatusPlay::clear_opentime() {
  opentime_ = 0;
  clear_has_opentime();
}
inline ::google::protobuf::int32 CMD_S2C_StatusPlay::opentime() const {
  return opentime_;
}
inline void CMD_S2C_StatusPlay::set_opentime(::google::protobuf::int32 value) {
  set_has_opentime();
  opentime_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_CallBanker

// required int32 callBanker = 1;
inline bool CMD_S2C_CallBanker::has_callbanker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_CallBanker::set_has_callbanker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_CallBanker::clear_has_callbanker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_CallBanker::clear_callbanker() {
  callbanker_ = 0;
  clear_has_callbanker();
}
inline ::google::protobuf::int32 CMD_S2C_CallBanker::callbanker() const {
  return callbanker_;
}
inline void CMD_S2C_CallBanker::set_callbanker(::google::protobuf::int32 value) {
  set_has_callbanker();
  callbanker_ = value;
}

// required int32 firstTimes = 2;
inline bool CMD_S2C_CallBanker::has_firsttimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_CallBanker::set_has_firsttimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_CallBanker::clear_has_firsttimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_CallBanker::clear_firsttimes() {
  firsttimes_ = 0;
  clear_has_firsttimes();
}
inline ::google::protobuf::int32 CMD_S2C_CallBanker::firsttimes() const {
  return firsttimes_;
}
inline void CMD_S2C_CallBanker::set_firsttimes(::google::protobuf::int32 value) {
  set_has_firsttimes();
  firsttimes_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_GameStart

// required int64 turnMaxScore = 1;
inline bool CMD_S2C_GameStart::has_turnmaxscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_GameStart::set_has_turnmaxscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_GameStart::clear_has_turnmaxscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_GameStart::clear_turnmaxscore() {
  turnmaxscore_ = GOOGLE_LONGLONG(0);
  clear_has_turnmaxscore();
}
inline ::google::protobuf::int64 CMD_S2C_GameStart::turnmaxscore() const {
  return turnmaxscore_;
}
inline void CMD_S2C_GameStart::set_turnmaxscore(::google::protobuf::int64 value) {
  set_has_turnmaxscore();
  turnmaxscore_ = value;
}

// required int32 bankerUser = 2;
inline bool CMD_S2C_GameStart::has_bankeruser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_GameStart::set_has_bankeruser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_GameStart::clear_has_bankeruser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_GameStart::clear_bankeruser() {
  bankeruser_ = 0;
  clear_has_bankeruser();
}
inline ::google::protobuf::int32 CMD_S2C_GameStart::bankeruser() const {
  return bankeruser_;
}
inline void CMD_S2C_GameStart::set_bankeruser(::google::protobuf::int32 value) {
  set_has_bankeruser();
  bankeruser_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_AddScore

// required int32 addScoreUser = 1;
inline bool CMD_S2C_AddScore::has_addscoreuser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_AddScore::set_has_addscoreuser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_AddScore::clear_has_addscoreuser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_AddScore::clear_addscoreuser() {
  addscoreuser_ = 0;
  clear_has_addscoreuser();
}
inline ::google::protobuf::int32 CMD_S2C_AddScore::addscoreuser() const {
  return addscoreuser_;
}
inline void CMD_S2C_AddScore::set_addscoreuser(::google::protobuf::int32 value) {
  set_has_addscoreuser();
  addscoreuser_ = value;
}

// required int64 addScoreCount = 2;
inline bool CMD_S2C_AddScore::has_addscorecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_AddScore::set_has_addscorecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_AddScore::clear_has_addscorecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_AddScore::clear_addscorecount() {
  addscorecount_ = GOOGLE_LONGLONG(0);
  clear_has_addscorecount();
}
inline ::google::protobuf::int64 CMD_S2C_AddScore::addscorecount() const {
  return addscorecount_;
}
inline void CMD_S2C_AddScore::set_addscorecount(::google::protobuf::int64 value) {
  set_has_addscorecount();
  addscorecount_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_GameEnd

// repeated int64 gameTax = 1;
inline int CMD_S2C_GameEnd::gametax_size() const {
  return gametax_.size();
}
inline void CMD_S2C_GameEnd::clear_gametax() {
  gametax_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_GameEnd::gametax(int index) const {
  return gametax_.Get(index);
}
inline void CMD_S2C_GameEnd::set_gametax(int index, ::google::protobuf::int64 value) {
  gametax_.Set(index, value);
}
inline void CMD_S2C_GameEnd::add_gametax(::google::protobuf::int64 value) {
  gametax_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_GameEnd::gametax() const {
  return gametax_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_GameEnd::mutable_gametax() {
  return &gametax_;
}

// repeated int64 gameScore = 2;
inline int CMD_S2C_GameEnd::gamescore_size() const {
  return gamescore_.size();
}
inline void CMD_S2C_GameEnd::clear_gamescore() {
  gamescore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_GameEnd::gamescore(int index) const {
  return gamescore_.Get(index);
}
inline void CMD_S2C_GameEnd::set_gamescore(int index, ::google::protobuf::int64 value) {
  gamescore_.Set(index, value);
}
inline void CMD_S2C_GameEnd::add_gamescore(::google::protobuf::int64 value) {
  gamescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_GameEnd::gamescore() const {
  return gamescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_GameEnd::mutable_gamescore() {
  return &gamescore_;
}

// required int64 userGold = 3;
inline bool CMD_S2C_GameEnd::has_usergold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_GameEnd::set_has_usergold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_GameEnd::clear_has_usergold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_GameEnd::clear_usergold() {
  usergold_ = GOOGLE_LONGLONG(0);
  clear_has_usergold();
}
inline ::google::protobuf::int64 CMD_S2C_GameEnd::usergold() const {
  return usergold_;
}
inline void CMD_S2C_GameEnd::set_usergold(::google::protobuf::int64 value) {
  set_has_usergold();
  usergold_ = value;
}

// required int64 moneyScore = 4;
inline bool CMD_S2C_GameEnd::has_moneyscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_GameEnd::set_has_moneyscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_GameEnd::clear_has_moneyscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_GameEnd::clear_moneyscore() {
  moneyscore_ = GOOGLE_LONGLONG(0);
  clear_has_moneyscore();
}
inline ::google::protobuf::int64 CMD_S2C_GameEnd::moneyscore() const {
  return moneyscore_;
}
inline void CMD_S2C_GameEnd::set_moneyscore(::google::protobuf::int64 value) {
  set_has_moneyscore();
  moneyscore_ = value;
}

// repeated int32 lookTable = 5;
inline int CMD_S2C_GameEnd::looktable_size() const {
  return looktable_.size();
}
inline void CMD_S2C_GameEnd::clear_looktable() {
  looktable_.Clear();
}
inline ::google::protobuf::int32 CMD_S2C_GameEnd::looktable(int index) const {
  return looktable_.Get(index);
}
inline void CMD_S2C_GameEnd::set_looktable(int index, ::google::protobuf::int32 value) {
  looktable_.Set(index, value);
}
inline void CMD_S2C_GameEnd::add_looktable(::google::protobuf::int32 value) {
  looktable_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMD_S2C_GameEnd::looktable() const {
  return looktable_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMD_S2C_GameEnd::mutable_looktable() {
  return &looktable_;
}

// -------------------------------------------------------------------

// CMD_S2C_SendCard

// repeated bytes cardData = 1;
inline int CMD_S2C_SendCard::carddata_size() const {
  return carddata_.size();
}
inline void CMD_S2C_SendCard::clear_carddata() {
  carddata_.Clear();
}
inline const ::std::string& CMD_S2C_SendCard::carddata(int index) const {
  return carddata_.Get(index);
}
inline ::std::string* CMD_S2C_SendCard::mutable_carddata(int index) {
  return carddata_.Mutable(index);
}
inline void CMD_S2C_SendCard::set_carddata(int index, const ::std::string& value) {
  carddata_.Mutable(index)->assign(value);
}
inline void CMD_S2C_SendCard::set_carddata(int index, const char* value) {
  carddata_.Mutable(index)->assign(value);
}
inline void CMD_S2C_SendCard::set_carddata(int index, const void* value, size_t size) {
  carddata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_S2C_SendCard::add_carddata() {
  return carddata_.Add();
}
inline void CMD_S2C_SendCard::add_carddata(const ::std::string& value) {
  carddata_.Add()->assign(value);
}
inline void CMD_S2C_SendCard::add_carddata(const char* value) {
  carddata_.Add()->assign(value);
}
inline void CMD_S2C_SendCard::add_carddata(const void* value, size_t size) {
  carddata_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMD_S2C_SendCard::carddata() const {
  return carddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMD_S2C_SendCard::mutable_carddata() {
  return &carddata_;
}

// required int32 playerCount = 2;
inline bool CMD_S2C_SendCard::has_playercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_SendCard::set_has_playercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_SendCard::clear_has_playercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_SendCard::clear_playercount() {
  playercount_ = 0;
  clear_has_playercount();
}
inline ::google::protobuf::int32 CMD_S2C_SendCard::playercount() const {
  return playercount_;
}
inline void CMD_S2C_SendCard::set_playercount(::google::protobuf::int32 value) {
  set_has_playercount();
  playercount_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_PlayerExit

// required int32 playerId = 1;
inline bool CMD_S2C_PlayerExit::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_PlayerExit::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_PlayerExit::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_PlayerExit::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 CMD_S2C_PlayerExit::playerid() const {
  return playerid_;
}
inline void CMD_S2C_PlayerExit::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_OpenCard

// required int32 playerId = 1;
inline bool CMD_S2C_OpenCard::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_OpenCard::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_OpenCard::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_OpenCard::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 CMD_S2C_OpenCard::playerid() const {
  return playerid_;
}
inline void CMD_S2C_OpenCard::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 open = 2;
inline bool CMD_S2C_OpenCard::has_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_OpenCard::set_has_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_OpenCard::clear_has_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_OpenCard::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 CMD_S2C_OpenCard::open() const {
  return open_;
}
inline void CMD_S2C_OpenCard::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_ReceiveEmotion

// required int32 playerId = 1;
inline bool CMD_S2C_ReceiveEmotion::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_ReceiveEmotion::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_ReceiveEmotion::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_ReceiveEmotion::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 CMD_S2C_ReceiveEmotion::playerid() const {
  return playerid_;
}
inline void CMD_S2C_ReceiveEmotion::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 type = 2;
inline bool CMD_S2C_ReceiveEmotion::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_ReceiveEmotion::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_ReceiveEmotion::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_ReceiveEmotion::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CMD_S2C_ReceiveEmotion::type() const {
  return type_;
}
inline void CMD_S2C_ReceiveEmotion::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 emotionId = 3;
inline bool CMD_S2C_ReceiveEmotion::has_emotionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_ReceiveEmotion::set_has_emotionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_ReceiveEmotion::clear_has_emotionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_ReceiveEmotion::clear_emotionid() {
  emotionid_ = 0;
  clear_has_emotionid();
}
inline ::google::protobuf::int32 CMD_S2C_ReceiveEmotion::emotionid() const {
  return emotionid_;
}
inline void CMD_S2C_ReceiveEmotion::set_emotionid(::google::protobuf::int32 value) {
  set_has_emotionid();
  emotionid_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_PostServiceCharge

// required int32 playerId = 1;
inline bool CMD_S2C_PostServiceCharge::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_PostServiceCharge::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_PostServiceCharge::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_PostServiceCharge::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 CMD_S2C_PostServiceCharge::playerid() const {
  return playerid_;
}
inline void CMD_S2C_PostServiceCharge::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 serviceCharge = 2;
inline bool CMD_S2C_PostServiceCharge::has_servicecharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_PostServiceCharge::set_has_servicecharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_PostServiceCharge::clear_has_servicecharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_PostServiceCharge::clear_servicecharge() {
  servicecharge_ = 0;
  clear_has_servicecharge();
}
inline ::google::protobuf::int32 CMD_S2C_PostServiceCharge::servicecharge() const {
  return servicecharge_;
}
inline void CMD_S2C_PostServiceCharge::set_servicecharge(::google::protobuf::int32 value) {
  set_has_servicecharge();
  servicecharge_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2c
}  // namespace oxchange
}  // namespace game

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Game_2fOxChange_2foxchange_5fs2c_2eproto__INCLUDED

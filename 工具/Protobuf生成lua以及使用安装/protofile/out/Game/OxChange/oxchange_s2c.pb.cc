// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/OxChange/oxchange_s2c.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Game/OxChange/oxchange_s2c.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace oxchange {
namespace s2c {

void protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto() {
  delete CMD_S2C_StatusFree::default_instance_;
  delete CMD_S2C_StatusCall::default_instance_;
  delete CMD_S2C_StatusScore::default_instance_;
  delete CMD_S2C_StatusPlay::default_instance_;
  delete CMD_S2C_CallBanker::default_instance_;
  delete CMD_S2C_GameStart::default_instance_;
  delete CMD_S2C_AddScore::default_instance_;
  delete CMD_S2C_GameEnd::default_instance_;
  delete CMD_S2C_SendCard::default_instance_;
  delete CMD_S2C_PlayerExit::default_instance_;
  delete CMD_S2C_OpenCard::default_instance_;
  delete CMD_S2C_ReceiveEmotion::default_instance_;
  delete CMD_S2C_PostServiceCharge::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CMD_S2C_StatusFree::default_instance_ = new CMD_S2C_StatusFree();
  CMD_S2C_StatusCall::default_instance_ = new CMD_S2C_StatusCall();
  CMD_S2C_StatusScore::default_instance_ = new CMD_S2C_StatusScore();
  CMD_S2C_StatusPlay::default_instance_ = new CMD_S2C_StatusPlay();
  CMD_S2C_CallBanker::default_instance_ = new CMD_S2C_CallBanker();
  CMD_S2C_GameStart::default_instance_ = new CMD_S2C_GameStart();
  CMD_S2C_AddScore::default_instance_ = new CMD_S2C_AddScore();
  CMD_S2C_GameEnd::default_instance_ = new CMD_S2C_GameEnd();
  CMD_S2C_SendCard::default_instance_ = new CMD_S2C_SendCard();
  CMD_S2C_PlayerExit::default_instance_ = new CMD_S2C_PlayerExit();
  CMD_S2C_OpenCard::default_instance_ = new CMD_S2C_OpenCard();
  CMD_S2C_ReceiveEmotion::default_instance_ = new CMD_S2C_ReceiveEmotion();
  CMD_S2C_PostServiceCharge::default_instance_ = new CMD_S2C_PostServiceCharge();
  CMD_S2C_StatusFree::default_instance_->InitAsDefaultInstance();
  CMD_S2C_StatusCall::default_instance_->InitAsDefaultInstance();
  CMD_S2C_StatusScore::default_instance_->InitAsDefaultInstance();
  CMD_S2C_StatusPlay::default_instance_->InitAsDefaultInstance();
  CMD_S2C_CallBanker::default_instance_->InitAsDefaultInstance();
  CMD_S2C_GameStart::default_instance_->InitAsDefaultInstance();
  CMD_S2C_AddScore::default_instance_->InitAsDefaultInstance();
  CMD_S2C_GameEnd::default_instance_->InitAsDefaultInstance();
  CMD_S2C_SendCard::default_instance_->InitAsDefaultInstance();
  CMD_S2C_PlayerExit::default_instance_->InitAsDefaultInstance();
  CMD_S2C_OpenCard::default_instance_->InitAsDefaultInstance();
  CMD_S2C_ReceiveEmotion::default_instance_->InitAsDefaultInstance();
  CMD_S2C_PostServiceCharge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Game_2fOxChange_2foxchange_5fs2c_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_once_);
void protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_once_,
                 &protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Game_2fOxChange_2foxchange_5fs2c_2eproto {
  StaticDescriptorInitializer_Game_2fOxChange_2foxchange_5fs2c_2eproto() {
    protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
  }
} static_descriptor_initializer_Game_2fOxChange_2foxchange_5fs2c_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_StatusFree::kCellScoreFieldNumber;
const int CMD_S2C_StatusFree::kTurnScoreFieldNumber;
const int CMD_S2C_StatusFree::kCollectScoreFieldNumber;
const int CMD_S2C_StatusFree::kGameRoomNameFieldNumber;
const int CMD_S2C_StatusFree::kGameOptionFieldNumber;
const int CMD_S2C_StatusFree::kCallTimeFieldNumber;
const int CMD_S2C_StatusFree::kBetTimeFieldNumber;
const int CMD_S2C_StatusFree::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_StatusFree::CMD_S2C_StatusFree()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_StatusFree::InitAsDefaultInstance() {
}

CMD_S2C_StatusFree::CMD_S2C_StatusFree(const CMD_S2C_StatusFree& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_StatusFree::SharedCtor() {
  _cached_size_ = 0;
  cellscore_ = GOOGLE_LONGLONG(0);
  gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameoption_ = false;
  calltime_ = 0;
  bettime_ = 0;
  opentime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_StatusFree::~CMD_S2C_StatusFree() {
  SharedDtor();
}

void CMD_S2C_StatusFree::SharedDtor() {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroomname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_StatusFree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_StatusFree& CMD_S2C_StatusFree::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_StatusFree* CMD_S2C_StatusFree::default_instance_ = NULL;

CMD_S2C_StatusFree* CMD_S2C_StatusFree::New() const {
  return new CMD_S2C_StatusFree;
}

void CMD_S2C_StatusFree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellscore_ = GOOGLE_LONGLONG(0);
    if (has_gameroomname()) {
      if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
        gameroomname_->clear();
      }
    }
    gameoption_ = false;
    calltime_ = 0;
    bettime_ = 0;
    opentime_ = 0;
  }
  turnscore_.Clear();
  collectscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_StatusFree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 cellScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cellscore_)));
          set_has_cellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_turnScore;
        break;
      }

      // repeated int64 turnScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_turnscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_turnscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_turnScore;
        if (input->ExpectTag(24)) goto parse_collectScore;
        break;
      }

      // repeated int64 collectScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_collectscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_collectscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_collectScore;
        if (input->ExpectTag(34)) goto parse_gameRoomName;
        break;
      }

      // required string gameRoomName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameRoomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameroomname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gameOption;
        break;
      }

      // required bool gameOption = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameOption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gameoption_)));
          set_has_gameoption();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_callTime;
        break;
      }

      // required int32 callTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calltime_)));
          set_has_calltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_betTime;
        break;
      }

      // required int32 betTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettime_)));
          set_has_bettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_openTime;
        break;
      }

      // required int32 openTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_StatusFree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 cellScore = 1;
  if (has_cellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cellscore(), output);
  }

  // repeated int64 turnScore = 2;
  for (int i = 0; i < this->turnscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->turnscore(i), output);
  }

  // repeated int64 collectScore = 3;
  for (int i = 0; i < this->collectscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->collectscore(i), output);
  }

  // required string gameRoomName = 4;
  if (has_gameroomname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gameroomname(), output);
  }

  // required bool gameOption = 5;
  if (has_gameoption()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->gameoption(), output);
  }

  // required int32 callTime = 6;
  if (has_calltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->calltime(), output);
  }

  // required int32 betTime = 7;
  if (has_bettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bettime(), output);
  }

  // required int32 openTime = 8;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->opentime(), output);
  }

}

int CMD_S2C_StatusFree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 cellScore = 1;
    if (has_cellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cellscore());
    }

    // required string gameRoomName = 4;
    if (has_gameroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameroomname());
    }

    // required bool gameOption = 5;
    if (has_gameoption()) {
      total_size += 1 + 1;
    }

    // required int32 callTime = 6;
    if (has_calltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calltime());
    }

    // required int32 betTime = 7;
    if (has_bettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettime());
    }

    // required int32 openTime = 8;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentime());
    }

  }
  // repeated int64 turnScore = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->turnscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->turnscore(i));
    }
    total_size += 1 * this->turnscore_size() + data_size;
  }

  // repeated int64 collectScore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->collectscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->collectscore(i));
    }
    total_size += 1 * this->collectscore_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_StatusFree::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_StatusFree*>(&from));
}

void CMD_S2C_StatusFree::MergeFrom(const CMD_S2C_StatusFree& from) {
  GOOGLE_CHECK_NE(&from, this);
  turnscore_.MergeFrom(from.turnscore_);
  collectscore_.MergeFrom(from.collectscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellscore()) {
      set_cellscore(from.cellscore());
    }
    if (from.has_gameroomname()) {
      set_gameroomname(from.gameroomname());
    }
    if (from.has_gameoption()) {
      set_gameoption(from.gameoption());
    }
    if (from.has_calltime()) {
      set_calltime(from.calltime());
    }
    if (from.has_bettime()) {
      set_bettime(from.bettime());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
}

void CMD_S2C_StatusFree::CopyFrom(const CMD_S2C_StatusFree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_StatusFree::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f9) != 0x000000f9) return false;

  return true;
}

void CMD_S2C_StatusFree::Swap(CMD_S2C_StatusFree* other) {
  if (other != this) {
    std::swap(cellscore_, other->cellscore_);
    turnscore_.Swap(&other->turnscore_);
    collectscore_.Swap(&other->collectscore_);
    std::swap(gameroomname_, other->gameroomname_);
    std::swap(gameoption_, other->gameoption_);
    std::swap(calltime_, other->calltime_);
    std::swap(bettime_, other->bettime_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_StatusFree::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_StatusFree";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_StatusCall::kCallBankerFieldNumber;
const int CMD_S2C_StatusCall::kDynamicJoinFieldNumber;
const int CMD_S2C_StatusCall::kPlayStatusFieldNumber;
const int CMD_S2C_StatusCall::kTurnScoreFieldNumber;
const int CMD_S2C_StatusCall::kCollectScoreFieldNumber;
const int CMD_S2C_StatusCall::kGameRoomNameFieldNumber;
const int CMD_S2C_StatusCall::kGameOptionFieldNumber;
const int CMD_S2C_StatusCall::kCallTimeFieldNumber;
const int CMD_S2C_StatusCall::kBetTimeFieldNumber;
const int CMD_S2C_StatusCall::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_StatusCall::CMD_S2C_StatusCall()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_StatusCall::InitAsDefaultInstance() {
}

CMD_S2C_StatusCall::CMD_S2C_StatusCall(const CMD_S2C_StatusCall& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_StatusCall::SharedCtor() {
  _cached_size_ = 0;
  callbanker_ = 0;
  dynamicjoin_ = 0;
  gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameoption_ = false;
  calltime_ = 0;
  bettime_ = 0;
  opentime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_StatusCall::~CMD_S2C_StatusCall() {
  SharedDtor();
}

void CMD_S2C_StatusCall::SharedDtor() {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroomname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_StatusCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_StatusCall& CMD_S2C_StatusCall::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_StatusCall* CMD_S2C_StatusCall::default_instance_ = NULL;

CMD_S2C_StatusCall* CMD_S2C_StatusCall::New() const {
  return new CMD_S2C_StatusCall;
}

void CMD_S2C_StatusCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    callbanker_ = 0;
    dynamicjoin_ = 0;
    if (has_gameroomname()) {
      if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
        gameroomname_->clear();
      }
    }
    gameoption_ = false;
    calltime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bettime_ = 0;
    opentime_ = 0;
  }
  playstatus_.Clear();
  turnscore_.Clear();
  collectscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_StatusCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 callBanker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callbanker_)));
          set_has_callbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynamicJoin;
        break;
      }

      // required int32 dynamicJoin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dynamicjoin_)));
          set_has_dynamicjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playStatus;
        break;
      }

      // repeated int32 playStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_playstatus())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playstatus())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playStatus;
        if (input->ExpectTag(32)) goto parse_turnScore;
        break;
      }

      // repeated int64 turnScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_turnscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_turnscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_turnScore;
        if (input->ExpectTag(40)) goto parse_collectScore;
        break;
      }

      // repeated int64 collectScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_collectscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_collectscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_collectScore;
        if (input->ExpectTag(50)) goto parse_gameRoomName;
        break;
      }

      // required string gameRoomName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameRoomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameroomname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gameOption;
        break;
      }

      // required bool gameOption = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameOption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gameoption_)));
          set_has_gameoption();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_callTime;
        break;
      }

      // required int32 callTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calltime_)));
          set_has_calltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_betTime;
        break;
      }

      // required int32 betTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettime_)));
          set_has_bettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_openTime;
        break;
      }

      // required int32 openTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_StatusCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 callBanker = 1;
  if (has_callbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callbanker(), output);
  }

  // required int32 dynamicJoin = 2;
  if (has_dynamicjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dynamicjoin(), output);
  }

  // repeated int32 playStatus = 3;
  for (int i = 0; i < this->playstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->playstatus(i), output);
  }

  // repeated int64 turnScore = 4;
  for (int i = 0; i < this->turnscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->turnscore(i), output);
  }

  // repeated int64 collectScore = 5;
  for (int i = 0; i < this->collectscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->collectscore(i), output);
  }

  // required string gameRoomName = 6;
  if (has_gameroomname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gameroomname(), output);
  }

  // required bool gameOption = 7;
  if (has_gameoption()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->gameoption(), output);
  }

  // required int32 callTime = 8;
  if (has_calltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->calltime(), output);
  }

  // required int32 betTime = 9;
  if (has_bettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bettime(), output);
  }

  // required int32 openTime = 10;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->opentime(), output);
  }

}

int CMD_S2C_StatusCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 callBanker = 1;
    if (has_callbanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callbanker());
    }

    // required int32 dynamicJoin = 2;
    if (has_dynamicjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dynamicjoin());
    }

    // required string gameRoomName = 6;
    if (has_gameroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameroomname());
    }

    // required bool gameOption = 7;
    if (has_gameoption()) {
      total_size += 1 + 1;
    }

    // required int32 callTime = 8;
    if (has_calltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calltime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 betTime = 9;
    if (has_bettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettime());
    }

    // required int32 openTime = 10;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentime());
    }

  }
  // repeated int32 playStatus = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->playstatus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->playstatus(i));
    }
    total_size += 1 * this->playstatus_size() + data_size;
  }

  // repeated int64 turnScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->turnscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->turnscore(i));
    }
    total_size += 1 * this->turnscore_size() + data_size;
  }

  // repeated int64 collectScore = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->collectscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->collectscore(i));
    }
    total_size += 1 * this->collectscore_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_StatusCall::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_StatusCall*>(&from));
}

void CMD_S2C_StatusCall::MergeFrom(const CMD_S2C_StatusCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  playstatus_.MergeFrom(from.playstatus_);
  turnscore_.MergeFrom(from.turnscore_);
  collectscore_.MergeFrom(from.collectscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callbanker()) {
      set_callbanker(from.callbanker());
    }
    if (from.has_dynamicjoin()) {
      set_dynamicjoin(from.dynamicjoin());
    }
    if (from.has_gameroomname()) {
      set_gameroomname(from.gameroomname());
    }
    if (from.has_gameoption()) {
      set_gameoption(from.gameoption());
    }
    if (from.has_calltime()) {
      set_calltime(from.calltime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bettime()) {
      set_bettime(from.bettime());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
}

void CMD_S2C_StatusCall::CopyFrom(const CMD_S2C_StatusCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_StatusCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003e3) != 0x000003e3) return false;

  return true;
}

void CMD_S2C_StatusCall::Swap(CMD_S2C_StatusCall* other) {
  if (other != this) {
    std::swap(callbanker_, other->callbanker_);
    std::swap(dynamicjoin_, other->dynamicjoin_);
    playstatus_.Swap(&other->playstatus_);
    turnscore_.Swap(&other->turnscore_);
    collectscore_.Swap(&other->collectscore_);
    std::swap(gameroomname_, other->gameroomname_);
    std::swap(gameoption_, other->gameoption_);
    std::swap(calltime_, other->calltime_);
    std::swap(bettime_, other->bettime_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_StatusCall::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_StatusCall";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_StatusScore::kPlayStatusFieldNumber;
const int CMD_S2C_StatusScore::kDynamicJoinFieldNumber;
const int CMD_S2C_StatusScore::kTurnMaxScoreFieldNumber;
const int CMD_S2C_StatusScore::kTableScoreFieldNumber;
const int CMD_S2C_StatusScore::kBankerUserFieldNumber;
const int CMD_S2C_StatusScore::kGameRoomNameFieldNumber;
const int CMD_S2C_StatusScore::kTurnScoreFieldNumber;
const int CMD_S2C_StatusScore::kCollectScoreFieldNumber;
const int CMD_S2C_StatusScore::kGameOptionFieldNumber;
const int CMD_S2C_StatusScore::kCallTimeFieldNumber;
const int CMD_S2C_StatusScore::kBetTimeFieldNumber;
const int CMD_S2C_StatusScore::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_StatusScore::CMD_S2C_StatusScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_StatusScore::InitAsDefaultInstance() {
}

CMD_S2C_StatusScore::CMD_S2C_StatusScore(const CMD_S2C_StatusScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_StatusScore::SharedCtor() {
  _cached_size_ = 0;
  dynamicjoin_ = 0;
  turnmaxscore_ = GOOGLE_LONGLONG(0);
  bankeruser_ = 0;
  gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameoption_ = false;
  calltime_ = 0;
  bettime_ = 0;
  opentime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_StatusScore::~CMD_S2C_StatusScore() {
  SharedDtor();
}

void CMD_S2C_StatusScore::SharedDtor() {
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroomname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_StatusScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_StatusScore& CMD_S2C_StatusScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_StatusScore* CMD_S2C_StatusScore::default_instance_ = NULL;

CMD_S2C_StatusScore* CMD_S2C_StatusScore::New() const {
  return new CMD_S2C_StatusScore;
}

void CMD_S2C_StatusScore::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dynamicjoin_ = 0;
    turnmaxscore_ = GOOGLE_LONGLONG(0);
    bankeruser_ = 0;
    if (has_gameroomname()) {
      if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
        gameroomname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gameoption_ = false;
    calltime_ = 0;
    bettime_ = 0;
    opentime_ = 0;
  }
  playstatus_.Clear();
  tablescore_.Clear();
  turnscore_.Clear();
  collectscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_StatusScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 playStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_playstatus())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playstatus())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playStatus;
        if (input->ExpectTag(16)) goto parse_dynamicJoin;
        break;
      }

      // required int32 dynamicJoin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dynamicjoin_)));
          set_has_dynamicjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turnMaxScore;
        break;
      }

      // required int64 turnMaxScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnMaxScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turnmaxscore_)));
          set_has_turnmaxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tableScore;
        break;
      }

      // repeated int64 tableScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_tablescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_tablescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tableScore;
        if (input->ExpectTag(40)) goto parse_bankerUser;
        break;
      }

      // required int32 bankerUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankeruser_)));
          set_has_bankeruser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gameRoomName;
        break;
      }

      // required string gameRoomName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameRoomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameroomname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_turnScore;
        break;
      }

      // repeated int64 turnScore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_turnscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_turnscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_turnScore;
        if (input->ExpectTag(64)) goto parse_collectScore;
        break;
      }

      // repeated int64 collectScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64, input, this->mutable_collectscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_collectscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_collectScore;
        if (input->ExpectTag(72)) goto parse_gameOption;
        break;
      }

      // required bool gameOption = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameOption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gameoption_)));
          set_has_gameoption();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_callTime;
        break;
      }

      // required int32 callTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calltime_)));
          set_has_calltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_betTime;
        break;
      }

      // required int32 betTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettime_)));
          set_has_bettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_openTime;
        break;
      }

      // required int32 openTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_StatusScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 playStatus = 1;
  for (int i = 0; i < this->playstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->playstatus(i), output);
  }

  // required int32 dynamicJoin = 2;
  if (has_dynamicjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dynamicjoin(), output);
  }

  // required int64 turnMaxScore = 3;
  if (has_turnmaxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->turnmaxscore(), output);
  }

  // repeated int64 tableScore = 4;
  for (int i = 0; i < this->tablescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->tablescore(i), output);
  }

  // required int32 bankerUser = 5;
  if (has_bankeruser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bankeruser(), output);
  }

  // required string gameRoomName = 6;
  if (has_gameroomname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gameroomname(), output);
  }

  // repeated int64 turnScore = 7;
  for (int i = 0; i < this->turnscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->turnscore(i), output);
  }

  // repeated int64 collectScore = 8;
  for (int i = 0; i < this->collectscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->collectscore(i), output);
  }

  // required bool gameOption = 9;
  if (has_gameoption()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->gameoption(), output);
  }

  // required int32 callTime = 10;
  if (has_calltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->calltime(), output);
  }

  // required int32 betTime = 11;
  if (has_bettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bettime(), output);
  }

  // required int32 openTime = 12;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->opentime(), output);
  }

}

int CMD_S2C_StatusScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 dynamicJoin = 2;
    if (has_dynamicjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dynamicjoin());
    }

    // required int64 turnMaxScore = 3;
    if (has_turnmaxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turnmaxscore());
    }

    // required int32 bankerUser = 5;
    if (has_bankeruser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankeruser());
    }

    // required string gameRoomName = 6;
    if (has_gameroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameroomname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool gameOption = 9;
    if (has_gameoption()) {
      total_size += 1 + 1;
    }

    // required int32 callTime = 10;
    if (has_calltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calltime());
    }

    // required int32 betTime = 11;
    if (has_bettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettime());
    }

    // required int32 openTime = 12;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentime());
    }

  }
  // repeated int32 playStatus = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playstatus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->playstatus(i));
    }
    total_size += 1 * this->playstatus_size() + data_size;
  }

  // repeated int64 tableScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->tablescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->tablescore(i));
    }
    total_size += 1 * this->tablescore_size() + data_size;
  }

  // repeated int64 turnScore = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->turnscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->turnscore(i));
    }
    total_size += 1 * this->turnscore_size() + data_size;
  }

  // repeated int64 collectScore = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->collectscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->collectscore(i));
    }
    total_size += 1 * this->collectscore_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_StatusScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_StatusScore*>(&from));
}

void CMD_S2C_StatusScore::MergeFrom(const CMD_S2C_StatusScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  playstatus_.MergeFrom(from.playstatus_);
  tablescore_.MergeFrom(from.tablescore_);
  turnscore_.MergeFrom(from.turnscore_);
  collectscore_.MergeFrom(from.collectscore_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dynamicjoin()) {
      set_dynamicjoin(from.dynamicjoin());
    }
    if (from.has_turnmaxscore()) {
      set_turnmaxscore(from.turnmaxscore());
    }
    if (from.has_bankeruser()) {
      set_bankeruser(from.bankeruser());
    }
    if (from.has_gameroomname()) {
      set_gameroomname(from.gameroomname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gameoption()) {
      set_gameoption(from.gameoption());
    }
    if (from.has_calltime()) {
      set_calltime(from.calltime());
    }
    if (from.has_bettime()) {
      set_bettime(from.bettime());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
}

void CMD_S2C_StatusScore::CopyFrom(const CMD_S2C_StatusScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_StatusScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000f36) != 0x00000f36) return false;

  return true;
}

void CMD_S2C_StatusScore::Swap(CMD_S2C_StatusScore* other) {
  if (other != this) {
    playstatus_.Swap(&other->playstatus_);
    std::swap(dynamicjoin_, other->dynamicjoin_);
    std::swap(turnmaxscore_, other->turnmaxscore_);
    tablescore_.Swap(&other->tablescore_);
    std::swap(bankeruser_, other->bankeruser_);
    std::swap(gameroomname_, other->gameroomname_);
    turnscore_.Swap(&other->turnscore_);
    collectscore_.Swap(&other->collectscore_);
    std::swap(gameoption_, other->gameoption_);
    std::swap(calltime_, other->calltime_);
    std::swap(bettime_, other->bettime_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_StatusScore::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_StatusScore";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_StatusPlay::kPlayStatusFieldNumber;
const int CMD_S2C_StatusPlay::kDynamicJoinFieldNumber;
const int CMD_S2C_StatusPlay::kTurnMaxScoreFieldNumber;
const int CMD_S2C_StatusPlay::kTableScoreFieldNumber;
const int CMD_S2C_StatusPlay::kBankerUserFieldNumber;
const int CMD_S2C_StatusPlay::kHandCardDataFieldNumber;
const int CMD_S2C_StatusPlay::kOxCardFieldNumber;
const int CMD_S2C_StatusPlay::kTurnScoreFieldNumber;
const int CMD_S2C_StatusPlay::kCollectScoreFieldNumber;
const int CMD_S2C_StatusPlay::kGameRoomNameFieldNumber;
const int CMD_S2C_StatusPlay::kGameOptionFieldNumber;
const int CMD_S2C_StatusPlay::kCallTimeFieldNumber;
const int CMD_S2C_StatusPlay::kBetTimeFieldNumber;
const int CMD_S2C_StatusPlay::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_StatusPlay::CMD_S2C_StatusPlay()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_StatusPlay::InitAsDefaultInstance() {
}

CMD_S2C_StatusPlay::CMD_S2C_StatusPlay(const CMD_S2C_StatusPlay& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_StatusPlay::SharedCtor() {
  _cached_size_ = 0;
  dynamicjoin_ = 0;
  turnmaxscore_ = GOOGLE_LONGLONG(0);
  bankeruser_ = 0;
  oxcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameroomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameoption_ = false;
  calltime_ = 0;
  bettime_ = 0;
  opentime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_StatusPlay::~CMD_S2C_StatusPlay() {
  SharedDtor();
}

void CMD_S2C_StatusPlay::SharedDtor() {
  if (oxcard_ != &::google::protobuf::internal::kEmptyString) {
    delete oxcard_;
  }
  if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroomname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_StatusPlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_StatusPlay& CMD_S2C_StatusPlay::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_StatusPlay* CMD_S2C_StatusPlay::default_instance_ = NULL;

CMD_S2C_StatusPlay* CMD_S2C_StatusPlay::New() const {
  return new CMD_S2C_StatusPlay;
}

void CMD_S2C_StatusPlay::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dynamicjoin_ = 0;
    turnmaxscore_ = GOOGLE_LONGLONG(0);
    bankeruser_ = 0;
    if (has_oxcard()) {
      if (oxcard_ != &::google::protobuf::internal::kEmptyString) {
        oxcard_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_gameroomname()) {
      if (gameroomname_ != &::google::protobuf::internal::kEmptyString) {
        gameroomname_->clear();
      }
    }
    gameoption_ = false;
    calltime_ = 0;
    bettime_ = 0;
    opentime_ = 0;
  }
  playstatus_.Clear();
  tablescore_.Clear();
  handcarddata_.Clear();
  turnscore_.Clear();
  collectscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_StatusPlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 playStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_playstatus())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playstatus())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playStatus;
        if (input->ExpectTag(16)) goto parse_dynamicJoin;
        break;
      }

      // required int32 dynamicJoin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dynamicjoin_)));
          set_has_dynamicjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turnMaxScore;
        break;
      }

      // required int64 turnMaxScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnMaxScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turnmaxscore_)));
          set_has_turnmaxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tableScore;
        break;
      }

      // repeated int64 tableScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_tablescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_tablescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tableScore;
        if (input->ExpectTag(40)) goto parse_bankerUser;
        break;
      }

      // required int32 bankerUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankeruser_)));
          set_has_bankeruser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_handCardData;
        break;
      }

      // repeated bytes handCardData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_handcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_handCardData;
        if (input->ExpectTag(58)) goto parse_oxCard;
        break;
      }

      // required bytes oxCard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oxCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oxcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_turnScore;
        break;
      }

      // repeated int64 turnScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64, input, this->mutable_turnscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_turnscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_turnScore;
        if (input->ExpectTag(72)) goto parse_collectScore;
        break;
      }

      // repeated int64 collectScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collectScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 72, input, this->mutable_collectscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_collectscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_collectScore;
        if (input->ExpectTag(82)) goto parse_gameRoomName;
        break;
      }

      // required string gameRoomName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameRoomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameroomname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gameOption;
        break;
      }

      // required bool gameOption = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameOption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gameoption_)));
          set_has_gameoption();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_callTime;
        break;
      }

      // required int32 callTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calltime_)));
          set_has_calltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_betTime;
        break;
      }

      // required int32 betTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettime_)));
          set_has_bettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_openTime;
        break;
      }

      // required int32 openTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_StatusPlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 playStatus = 1;
  for (int i = 0; i < this->playstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->playstatus(i), output);
  }

  // required int32 dynamicJoin = 2;
  if (has_dynamicjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dynamicjoin(), output);
  }

  // required int64 turnMaxScore = 3;
  if (has_turnmaxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->turnmaxscore(), output);
  }

  // repeated int64 tableScore = 4;
  for (int i = 0; i < this->tablescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->tablescore(i), output);
  }

  // required int32 bankerUser = 5;
  if (has_bankeruser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bankeruser(), output);
  }

  // repeated bytes handCardData = 6;
  for (int i = 0; i < this->handcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->handcarddata(i), output);
  }

  // required bytes oxCard = 7;
  if (has_oxcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->oxcard(), output);
  }

  // repeated int64 turnScore = 8;
  for (int i = 0; i < this->turnscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->turnscore(i), output);
  }

  // repeated int64 collectScore = 9;
  for (int i = 0; i < this->collectscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      9, this->collectscore(i), output);
  }

  // required string gameRoomName = 10;
  if (has_gameroomname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->gameroomname(), output);
  }

  // required bool gameOption = 11;
  if (has_gameoption()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->gameoption(), output);
  }

  // required int32 callTime = 12;
  if (has_calltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->calltime(), output);
  }

  // required int32 betTime = 13;
  if (has_bettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bettime(), output);
  }

  // required int32 openTime = 14;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->opentime(), output);
  }

}

int CMD_S2C_StatusPlay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 dynamicJoin = 2;
    if (has_dynamicjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dynamicjoin());
    }

    // required int64 turnMaxScore = 3;
    if (has_turnmaxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turnmaxscore());
    }

    // required int32 bankerUser = 5;
    if (has_bankeruser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankeruser());
    }

    // required bytes oxCard = 7;
    if (has_oxcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oxcard());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required string gameRoomName = 10;
    if (has_gameroomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameroomname());
    }

    // required bool gameOption = 11;
    if (has_gameoption()) {
      total_size += 1 + 1;
    }

    // required int32 callTime = 12;
    if (has_calltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calltime());
    }

    // required int32 betTime = 13;
    if (has_bettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettime());
    }

    // required int32 openTime = 14;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentime());
    }

  }
  // repeated int32 playStatus = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playstatus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->playstatus(i));
    }
    total_size += 1 * this->playstatus_size() + data_size;
  }

  // repeated int64 tableScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->tablescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->tablescore(i));
    }
    total_size += 1 * this->tablescore_size() + data_size;
  }

  // repeated bytes handCardData = 6;
  total_size += 1 * this->handcarddata_size();
  for (int i = 0; i < this->handcarddata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->handcarddata(i));
  }

  // repeated int64 turnScore = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->turnscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->turnscore(i));
    }
    total_size += 1 * this->turnscore_size() + data_size;
  }

  // repeated int64 collectScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->collectscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->collectscore(i));
    }
    total_size += 1 * this->collectscore_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_StatusPlay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_StatusPlay*>(&from));
}

void CMD_S2C_StatusPlay::MergeFrom(const CMD_S2C_StatusPlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  playstatus_.MergeFrom(from.playstatus_);
  tablescore_.MergeFrom(from.tablescore_);
  handcarddata_.MergeFrom(from.handcarddata_);
  turnscore_.MergeFrom(from.turnscore_);
  collectscore_.MergeFrom(from.collectscore_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dynamicjoin()) {
      set_dynamicjoin(from.dynamicjoin());
    }
    if (from.has_turnmaxscore()) {
      set_turnmaxscore(from.turnmaxscore());
    }
    if (from.has_bankeruser()) {
      set_bankeruser(from.bankeruser());
    }
    if (from.has_oxcard()) {
      set_oxcard(from.oxcard());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_gameroomname()) {
      set_gameroomname(from.gameroomname());
    }
    if (from.has_gameoption()) {
      set_gameoption(from.gameoption());
    }
    if (from.has_calltime()) {
      set_calltime(from.calltime());
    }
    if (from.has_bettime()) {
      set_bettime(from.bettime());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
}

void CMD_S2C_StatusPlay::CopyFrom(const CMD_S2C_StatusPlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_StatusPlay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003e56) != 0x00003e56) return false;

  return true;
}

void CMD_S2C_StatusPlay::Swap(CMD_S2C_StatusPlay* other) {
  if (other != this) {
    playstatus_.Swap(&other->playstatus_);
    std::swap(dynamicjoin_, other->dynamicjoin_);
    std::swap(turnmaxscore_, other->turnmaxscore_);
    tablescore_.Swap(&other->tablescore_);
    std::swap(bankeruser_, other->bankeruser_);
    handcarddata_.Swap(&other->handcarddata_);
    std::swap(oxcard_, other->oxcard_);
    turnscore_.Swap(&other->turnscore_);
    collectscore_.Swap(&other->collectscore_);
    std::swap(gameroomname_, other->gameroomname_);
    std::swap(gameoption_, other->gameoption_);
    std::swap(calltime_, other->calltime_);
    std::swap(bettime_, other->bettime_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_StatusPlay::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_StatusPlay";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_CallBanker::kCallBankerFieldNumber;
const int CMD_S2C_CallBanker::kFirstTimesFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_CallBanker::CMD_S2C_CallBanker()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_CallBanker::InitAsDefaultInstance() {
}

CMD_S2C_CallBanker::CMD_S2C_CallBanker(const CMD_S2C_CallBanker& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_CallBanker::SharedCtor() {
  _cached_size_ = 0;
  callbanker_ = 0;
  firsttimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_CallBanker::~CMD_S2C_CallBanker() {
  SharedDtor();
}

void CMD_S2C_CallBanker::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_CallBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_CallBanker& CMD_S2C_CallBanker::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_CallBanker* CMD_S2C_CallBanker::default_instance_ = NULL;

CMD_S2C_CallBanker* CMD_S2C_CallBanker::New() const {
  return new CMD_S2C_CallBanker;
}

void CMD_S2C_CallBanker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    callbanker_ = 0;
    firsttimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_CallBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 callBanker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callbanker_)));
          set_has_callbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_firstTimes;
        break;
      }

      // required int32 firstTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firsttimes_)));
          set_has_firsttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_CallBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 callBanker = 1;
  if (has_callbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callbanker(), output);
  }

  // required int32 firstTimes = 2;
  if (has_firsttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->firsttimes(), output);
  }

}

int CMD_S2C_CallBanker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 callBanker = 1;
    if (has_callbanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callbanker());
    }

    // required int32 firstTimes = 2;
    if (has_firsttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firsttimes());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_CallBanker::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_CallBanker*>(&from));
}

void CMD_S2C_CallBanker::MergeFrom(const CMD_S2C_CallBanker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callbanker()) {
      set_callbanker(from.callbanker());
    }
    if (from.has_firsttimes()) {
      set_firsttimes(from.firsttimes());
    }
  }
}

void CMD_S2C_CallBanker::CopyFrom(const CMD_S2C_CallBanker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_CallBanker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_CallBanker::Swap(CMD_S2C_CallBanker* other) {
  if (other != this) {
    std::swap(callbanker_, other->callbanker_);
    std::swap(firsttimes_, other->firsttimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_CallBanker::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_CallBanker";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_GameStart::kTurnMaxScoreFieldNumber;
const int CMD_S2C_GameStart::kBankerUserFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_GameStart::CMD_S2C_GameStart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_GameStart::InitAsDefaultInstance() {
}

CMD_S2C_GameStart::CMD_S2C_GameStart(const CMD_S2C_GameStart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_GameStart::SharedCtor() {
  _cached_size_ = 0;
  turnmaxscore_ = GOOGLE_LONGLONG(0);
  bankeruser_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_GameStart::~CMD_S2C_GameStart() {
  SharedDtor();
}

void CMD_S2C_GameStart::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_GameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_GameStart& CMD_S2C_GameStart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_GameStart* CMD_S2C_GameStart::default_instance_ = NULL;

CMD_S2C_GameStart* CMD_S2C_GameStart::New() const {
  return new CMD_S2C_GameStart;
}

void CMD_S2C_GameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    turnmaxscore_ = GOOGLE_LONGLONG(0);
    bankeruser_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_GameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 turnMaxScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turnmaxscore_)));
          set_has_turnmaxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bankerUser;
        break;
      }

      // required int32 bankerUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankeruser_)));
          set_has_bankeruser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_GameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 turnMaxScore = 1;
  if (has_turnmaxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->turnmaxscore(), output);
  }

  // required int32 bankerUser = 2;
  if (has_bankeruser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankeruser(), output);
  }

}

int CMD_S2C_GameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 turnMaxScore = 1;
    if (has_turnmaxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turnmaxscore());
    }

    // required int32 bankerUser = 2;
    if (has_bankeruser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankeruser());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_GameStart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_GameStart*>(&from));
}

void CMD_S2C_GameStart::MergeFrom(const CMD_S2C_GameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_turnmaxscore()) {
      set_turnmaxscore(from.turnmaxscore());
    }
    if (from.has_bankeruser()) {
      set_bankeruser(from.bankeruser());
    }
  }
}

void CMD_S2C_GameStart::CopyFrom(const CMD_S2C_GameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_GameStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_GameStart::Swap(CMD_S2C_GameStart* other) {
  if (other != this) {
    std::swap(turnmaxscore_, other->turnmaxscore_);
    std::swap(bankeruser_, other->bankeruser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_GameStart::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_GameStart";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_AddScore::kAddScoreUserFieldNumber;
const int CMD_S2C_AddScore::kAddScoreCountFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_AddScore::CMD_S2C_AddScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_AddScore::InitAsDefaultInstance() {
}

CMD_S2C_AddScore::CMD_S2C_AddScore(const CMD_S2C_AddScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_AddScore::SharedCtor() {
  _cached_size_ = 0;
  addscoreuser_ = 0;
  addscorecount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_AddScore::~CMD_S2C_AddScore() {
  SharedDtor();
}

void CMD_S2C_AddScore::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_AddScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_AddScore& CMD_S2C_AddScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_AddScore* CMD_S2C_AddScore::default_instance_ = NULL;

CMD_S2C_AddScore* CMD_S2C_AddScore::New() const {
  return new CMD_S2C_AddScore;
}

void CMD_S2C_AddScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addscoreuser_ = 0;
    addscorecount_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_AddScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 addScoreUser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addscoreuser_)));
          set_has_addscoreuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addScoreCount;
        break;
      }

      // required int64 addScoreCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addScoreCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addscorecount_)));
          set_has_addscorecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_AddScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 addScoreUser = 1;
  if (has_addscoreuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addscoreuser(), output);
  }

  // required int64 addScoreCount = 2;
  if (has_addscorecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->addscorecount(), output);
  }

}

int CMD_S2C_AddScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 addScoreUser = 1;
    if (has_addscoreuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addscoreuser());
    }

    // required int64 addScoreCount = 2;
    if (has_addscorecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addscorecount());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_AddScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_AddScore*>(&from));
}

void CMD_S2C_AddScore::MergeFrom(const CMD_S2C_AddScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addscoreuser()) {
      set_addscoreuser(from.addscoreuser());
    }
    if (from.has_addscorecount()) {
      set_addscorecount(from.addscorecount());
    }
  }
}

void CMD_S2C_AddScore::CopyFrom(const CMD_S2C_AddScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_AddScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_AddScore::Swap(CMD_S2C_AddScore* other) {
  if (other != this) {
    std::swap(addscoreuser_, other->addscoreuser_);
    std::swap(addscorecount_, other->addscorecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_AddScore::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_AddScore";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_GameEnd::kGameTaxFieldNumber;
const int CMD_S2C_GameEnd::kGameScoreFieldNumber;
const int CMD_S2C_GameEnd::kUserGoldFieldNumber;
const int CMD_S2C_GameEnd::kMoneyScoreFieldNumber;
const int CMD_S2C_GameEnd::kLookTableFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_GameEnd::CMD_S2C_GameEnd()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_GameEnd::InitAsDefaultInstance() {
}

CMD_S2C_GameEnd::CMD_S2C_GameEnd(const CMD_S2C_GameEnd& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_GameEnd::SharedCtor() {
  _cached_size_ = 0;
  usergold_ = GOOGLE_LONGLONG(0);
  moneyscore_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_GameEnd::~CMD_S2C_GameEnd() {
  SharedDtor();
}

void CMD_S2C_GameEnd::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_GameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_GameEnd& CMD_S2C_GameEnd::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_GameEnd* CMD_S2C_GameEnd::default_instance_ = NULL;

CMD_S2C_GameEnd* CMD_S2C_GameEnd::New() const {
  return new CMD_S2C_GameEnd;
}

void CMD_S2C_GameEnd::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    usergold_ = GOOGLE_LONGLONG(0);
    moneyscore_ = GOOGLE_LONGLONG(0);
  }
  gametax_.Clear();
  gamescore_.Clear();
  looktable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_GameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 gameTax = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameTax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_gametax())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_gametax())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_gameTax;
        if (input->ExpectTag(16)) goto parse_gameScore;
        break;
      }

      // repeated int64 gameScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_gamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_gamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameScore;
        if (input->ExpectTag(24)) goto parse_userGold;
        break;
      }

      // required int64 userGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usergold_)));
          set_has_usergold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moneyScore;
        break;
      }

      // required int64 moneyScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &moneyscore_)));
          set_has_moneyscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lookTable;
        break;
      }

      // repeated int32 lookTable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lookTable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_looktable())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_looktable())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lookTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_GameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 gameTax = 1;
  for (int i = 0; i < this->gametax_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->gametax(i), output);
  }

  // repeated int64 gameScore = 2;
  for (int i = 0; i < this->gamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->gamescore(i), output);
  }

  // required int64 userGold = 3;
  if (has_usergold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->usergold(), output);
  }

  // required int64 moneyScore = 4;
  if (has_moneyscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->moneyscore(), output);
  }

  // repeated int32 lookTable = 5;
  for (int i = 0; i < this->looktable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->looktable(i), output);
  }

}

int CMD_S2C_GameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int64 userGold = 3;
    if (has_usergold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usergold());
    }

    // required int64 moneyScore = 4;
    if (has_moneyscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->moneyscore());
    }

  }
  // repeated int64 gameTax = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->gametax_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->gametax(i));
    }
    total_size += 1 * this->gametax_size() + data_size;
  }

  // repeated int64 gameScore = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->gamescore(i));
    }
    total_size += 1 * this->gamescore_size() + data_size;
  }

  // repeated int32 lookTable = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->looktable_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->looktable(i));
    }
    total_size += 1 * this->looktable_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_GameEnd::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_GameEnd*>(&from));
}

void CMD_S2C_GameEnd::MergeFrom(const CMD_S2C_GameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  gametax_.MergeFrom(from.gametax_);
  gamescore_.MergeFrom(from.gamescore_);
  looktable_.MergeFrom(from.looktable_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_usergold()) {
      set_usergold(from.usergold());
    }
    if (from.has_moneyscore()) {
      set_moneyscore(from.moneyscore());
    }
  }
}

void CMD_S2C_GameEnd::CopyFrom(const CMD_S2C_GameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_GameEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void CMD_S2C_GameEnd::Swap(CMD_S2C_GameEnd* other) {
  if (other != this) {
    gametax_.Swap(&other->gametax_);
    gamescore_.Swap(&other->gamescore_);
    std::swap(usergold_, other->usergold_);
    std::swap(moneyscore_, other->moneyscore_);
    looktable_.Swap(&other->looktable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_GameEnd::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_GameEnd";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_SendCard::kCardDataFieldNumber;
const int CMD_S2C_SendCard::kPlayerCountFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_SendCard::CMD_S2C_SendCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_SendCard::InitAsDefaultInstance() {
}

CMD_S2C_SendCard::CMD_S2C_SendCard(const CMD_S2C_SendCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_SendCard::SharedCtor() {
  _cached_size_ = 0;
  playercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_SendCard::~CMD_S2C_SendCard() {
  SharedDtor();
}

void CMD_S2C_SendCard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_SendCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_SendCard& CMD_S2C_SendCard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_SendCard* CMD_S2C_SendCard::default_instance_ = NULL;

CMD_S2C_SendCard* CMD_S2C_SendCard::New() const {
  return new CMD_S2C_SendCard;
}

void CMD_S2C_SendCard::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    playercount_ = 0;
  }
  carddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_SendCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes cardData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_carddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cardData;
        if (input->ExpectTag(16)) goto parse_playerCount;
        break;
      }

      // required int32 playerCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercount_)));
          set_has_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_SendCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes cardData = 1;
  for (int i = 0; i < this->carddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->carddata(i), output);
  }

  // required int32 playerCount = 2;
  if (has_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playercount(), output);
  }

}

int CMD_S2C_SendCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 playerCount = 2;
    if (has_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercount());
    }

  }
  // repeated bytes cardData = 1;
  total_size += 1 * this->carddata_size();
  for (int i = 0; i < this->carddata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->carddata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_SendCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_SendCard*>(&from));
}

void CMD_S2C_SendCard::MergeFrom(const CMD_S2C_SendCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  carddata_.MergeFrom(from.carddata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_playercount()) {
      set_playercount(from.playercount());
    }
  }
}

void CMD_S2C_SendCard::CopyFrom(const CMD_S2C_SendCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_SendCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CMD_S2C_SendCard::Swap(CMD_S2C_SendCard* other) {
  if (other != this) {
    carddata_.Swap(&other->carddata_);
    std::swap(playercount_, other->playercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_SendCard::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_SendCard";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_PlayerExit::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_PlayerExit::CMD_S2C_PlayerExit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_PlayerExit::InitAsDefaultInstance() {
}

CMD_S2C_PlayerExit::CMD_S2C_PlayerExit(const CMD_S2C_PlayerExit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_PlayerExit::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_PlayerExit::~CMD_S2C_PlayerExit() {
  SharedDtor();
}

void CMD_S2C_PlayerExit::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_PlayerExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_PlayerExit& CMD_S2C_PlayerExit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_PlayerExit* CMD_S2C_PlayerExit::default_instance_ = NULL;

CMD_S2C_PlayerExit* CMD_S2C_PlayerExit::New() const {
  return new CMD_S2C_PlayerExit;
}

void CMD_S2C_PlayerExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_PlayerExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_PlayerExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

}

int CMD_S2C_PlayerExit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_PlayerExit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_PlayerExit*>(&from));
}

void CMD_S2C_PlayerExit::MergeFrom(const CMD_S2C_PlayerExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
}

void CMD_S2C_PlayerExit::CopyFrom(const CMD_S2C_PlayerExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_PlayerExit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_S2C_PlayerExit::Swap(CMD_S2C_PlayerExit* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_PlayerExit::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_PlayerExit";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_OpenCard::kPlayerIdFieldNumber;
const int CMD_S2C_OpenCard::kOpenFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_OpenCard::CMD_S2C_OpenCard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_OpenCard::InitAsDefaultInstance() {
}

CMD_S2C_OpenCard::CMD_S2C_OpenCard(const CMD_S2C_OpenCard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_OpenCard::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_OpenCard::~CMD_S2C_OpenCard() {
  SharedDtor();
}

void CMD_S2C_OpenCard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_OpenCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_OpenCard& CMD_S2C_OpenCard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_OpenCard* CMD_S2C_OpenCard::default_instance_ = NULL;

CMD_S2C_OpenCard* CMD_S2C_OpenCard::New() const {
  return new CMD_S2C_OpenCard;
}

void CMD_S2C_OpenCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    open_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_OpenCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open;
        break;
      }

      // required int32 open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_OpenCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required int32 open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open(), output);
  }

}

int CMD_S2C_OpenCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 open = 2;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_OpenCard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_OpenCard*>(&from));
}

void CMD_S2C_OpenCard::MergeFrom(const CMD_S2C_OpenCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
}

void CMD_S2C_OpenCard::CopyFrom(const CMD_S2C_OpenCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_OpenCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_OpenCard::Swap(CMD_S2C_OpenCard* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_OpenCard::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_OpenCard";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_ReceiveEmotion::kPlayerIdFieldNumber;
const int CMD_S2C_ReceiveEmotion::kTypeFieldNumber;
const int CMD_S2C_ReceiveEmotion::kEmotionIdFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_ReceiveEmotion::CMD_S2C_ReceiveEmotion()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_ReceiveEmotion::InitAsDefaultInstance() {
}

CMD_S2C_ReceiveEmotion::CMD_S2C_ReceiveEmotion(const CMD_S2C_ReceiveEmotion& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_ReceiveEmotion::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  type_ = 0;
  emotionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_ReceiveEmotion::~CMD_S2C_ReceiveEmotion() {
  SharedDtor();
}

void CMD_S2C_ReceiveEmotion::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_ReceiveEmotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_ReceiveEmotion& CMD_S2C_ReceiveEmotion::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_ReceiveEmotion* CMD_S2C_ReceiveEmotion::default_instance_ = NULL;

CMD_S2C_ReceiveEmotion* CMD_S2C_ReceiveEmotion::New() const {
  return new CMD_S2C_ReceiveEmotion;
}

void CMD_S2C_ReceiveEmotion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    type_ = 0;
    emotionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_ReceiveEmotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_emotionId;
        break;
      }

      // required int32 emotionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emotionid_)));
          set_has_emotionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_ReceiveEmotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 emotionId = 3;
  if (has_emotionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->emotionid(), output);
  }

}

int CMD_S2C_ReceiveEmotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 emotionId = 3;
    if (has_emotionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emotionid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_ReceiveEmotion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_ReceiveEmotion*>(&from));
}

void CMD_S2C_ReceiveEmotion::MergeFrom(const CMD_S2C_ReceiveEmotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_emotionid()) {
      set_emotionid(from.emotionid());
    }
  }
}

void CMD_S2C_ReceiveEmotion::CopyFrom(const CMD_S2C_ReceiveEmotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_ReceiveEmotion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_S2C_ReceiveEmotion::Swap(CMD_S2C_ReceiveEmotion* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(type_, other->type_);
    std::swap(emotionid_, other->emotionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_ReceiveEmotion::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_ReceiveEmotion";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_PostServiceCharge::kPlayerIdFieldNumber;
const int CMD_S2C_PostServiceCharge::kServiceChargeFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_PostServiceCharge::CMD_S2C_PostServiceCharge()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_PostServiceCharge::InitAsDefaultInstance() {
}

CMD_S2C_PostServiceCharge::CMD_S2C_PostServiceCharge(const CMD_S2C_PostServiceCharge& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_PostServiceCharge::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  servicecharge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_PostServiceCharge::~CMD_S2C_PostServiceCharge() {
  SharedDtor();
}

void CMD_S2C_PostServiceCharge::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_PostServiceCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_PostServiceCharge& CMD_S2C_PostServiceCharge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fOxChange_2foxchange_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_PostServiceCharge* CMD_S2C_PostServiceCharge::default_instance_ = NULL;

CMD_S2C_PostServiceCharge* CMD_S2C_PostServiceCharge::New() const {
  return new CMD_S2C_PostServiceCharge;
}

void CMD_S2C_PostServiceCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    servicecharge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_PostServiceCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serviceCharge;
        break;
      }

      // required int32 serviceCharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceCharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicecharge_)));
          set_has_servicecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_PostServiceCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required int32 serviceCharge = 2;
  if (has_servicecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->servicecharge(), output);
  }

}

int CMD_S2C_PostServiceCharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 serviceCharge = 2;
    if (has_servicecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servicecharge());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_PostServiceCharge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_PostServiceCharge*>(&from));
}

void CMD_S2C_PostServiceCharge::MergeFrom(const CMD_S2C_PostServiceCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_servicecharge()) {
      set_servicecharge(from.servicecharge());
    }
  }
}

void CMD_S2C_PostServiceCharge::CopyFrom(const CMD_S2C_PostServiceCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_PostServiceCharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_PostServiceCharge::Swap(CMD_S2C_PostServiceCharge* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(servicecharge_, other->servicecharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_PostServiceCharge::GetTypeName() const {
  return "game.oxchange.s2c.CMD_S2C_PostServiceCharge";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2c
}  // namespace oxchange
}  // namespace game

// @@protoc_insertion_point(global_scope)

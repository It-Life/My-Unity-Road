// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/Fish3D/fish3d_c2s.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Game/Fish3D/fish3d_c2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace fish3d {
namespace c2s {

void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto() {
  delete CMD_C2S_ChangeGunMulti::default_instance_;
  delete CMD_C2S_ChangeGunType::default_instance_;
  delete CMD_C2S_ShootBullet::default_instance_;
  delete CMD_C2S_HitFish::default_instance_;
  delete CMD_C2S_HitFormFish::default_instance_;
  delete CMD_C2S_UseFishProperty::default_instance_;
  delete CMD_C2S_CancelFishProperty::default_instance_;
  delete CMD_C2S_ChooseAimFish::default_instance_;
  delete CMD_C2S_AddUserSilver::default_instance_;
  delete CMD_C2S_AndroidStandUp::default_instance_;
  delete CMD_C2S_AndroidShoot::default_instance_;
  delete CMD_C2S_CheckClientVer::default_instance_;
  delete CMD_C2S_Outboard::default_instance_;
  delete CMD_C2S_AutoFire::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CMD_C2S_ChangeGunMulti::default_instance_ = new CMD_C2S_ChangeGunMulti();
  CMD_C2S_ChangeGunType::default_instance_ = new CMD_C2S_ChangeGunType();
  CMD_C2S_ShootBullet::default_instance_ = new CMD_C2S_ShootBullet();
  CMD_C2S_HitFish::default_instance_ = new CMD_C2S_HitFish();
  CMD_C2S_HitFormFish::default_instance_ = new CMD_C2S_HitFormFish();
  CMD_C2S_UseFishProperty::default_instance_ = new CMD_C2S_UseFishProperty();
  CMD_C2S_CancelFishProperty::default_instance_ = new CMD_C2S_CancelFishProperty();
  CMD_C2S_ChooseAimFish::default_instance_ = new CMD_C2S_ChooseAimFish();
  CMD_C2S_AddUserSilver::default_instance_ = new CMD_C2S_AddUserSilver();
  CMD_C2S_AndroidStandUp::default_instance_ = new CMD_C2S_AndroidStandUp();
  CMD_C2S_AndroidShoot::default_instance_ = new CMD_C2S_AndroidShoot();
  CMD_C2S_CheckClientVer::default_instance_ = new CMD_C2S_CheckClientVer();
  CMD_C2S_Outboard::default_instance_ = new CMD_C2S_Outboard();
  CMD_C2S_AutoFire::default_instance_ = new CMD_C2S_AutoFire();
  CMD_C2S_ChangeGunMulti::default_instance_->InitAsDefaultInstance();
  CMD_C2S_ChangeGunType::default_instance_->InitAsDefaultInstance();
  CMD_C2S_ShootBullet::default_instance_->InitAsDefaultInstance();
  CMD_C2S_HitFish::default_instance_->InitAsDefaultInstance();
  CMD_C2S_HitFormFish::default_instance_->InitAsDefaultInstance();
  CMD_C2S_UseFishProperty::default_instance_->InitAsDefaultInstance();
  CMD_C2S_CancelFishProperty::default_instance_->InitAsDefaultInstance();
  CMD_C2S_ChooseAimFish::default_instance_->InitAsDefaultInstance();
  CMD_C2S_AddUserSilver::default_instance_->InitAsDefaultInstance();
  CMD_C2S_AndroidStandUp::default_instance_->InitAsDefaultInstance();
  CMD_C2S_AndroidShoot::default_instance_->InitAsDefaultInstance();
  CMD_C2S_CheckClientVer::default_instance_->InitAsDefaultInstance();
  CMD_C2S_Outboard::default_instance_->InitAsDefaultInstance();
  CMD_C2S_AutoFire::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_once_);
void protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_once_,
                 &protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Game_2fFish3D_2ffish3d_5fc2s_2eproto {
  StaticDescriptorInitializer_Game_2fFish3D_2ffish3d_5fc2s_2eproto() {
    protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  }
} static_descriptor_initializer_Game_2fFish3D_2ffish3d_5fc2s_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_ChangeGunMulti::kNewGunIdFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_ChangeGunMulti::CMD_C2S_ChangeGunMulti()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_ChangeGunMulti::InitAsDefaultInstance() {
}

CMD_C2S_ChangeGunMulti::CMD_C2S_ChangeGunMulti(const CMD_C2S_ChangeGunMulti& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_ChangeGunMulti::SharedCtor() {
  _cached_size_ = 0;
  newgunid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_ChangeGunMulti::~CMD_C2S_ChangeGunMulti() {
  SharedDtor();
}

void CMD_C2S_ChangeGunMulti::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_ChangeGunMulti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_ChangeGunMulti& CMD_C2S_ChangeGunMulti::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_ChangeGunMulti* CMD_C2S_ChangeGunMulti::default_instance_ = NULL;

CMD_C2S_ChangeGunMulti* CMD_C2S_ChangeGunMulti::New() const {
  return new CMD_C2S_ChangeGunMulti;
}

void CMD_C2S_ChangeGunMulti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newgunid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_ChangeGunMulti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 newGunId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newgunid_)));
          set_has_newgunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_ChangeGunMulti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 newGunId = 1;
  if (has_newgunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->newgunid(), output);
  }

}

int CMD_C2S_ChangeGunMulti::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 newGunId = 1;
    if (has_newgunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newgunid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_ChangeGunMulti::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_ChangeGunMulti*>(&from));
}

void CMD_C2S_ChangeGunMulti::MergeFrom(const CMD_C2S_ChangeGunMulti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newgunid()) {
      set_newgunid(from.newgunid());
    }
  }
}

void CMD_C2S_ChangeGunMulti::CopyFrom(const CMD_C2S_ChangeGunMulti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_ChangeGunMulti::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_ChangeGunMulti::Swap(CMD_C2S_ChangeGunMulti* other) {
  if (other != this) {
    std::swap(newgunid_, other->newgunid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_ChangeGunMulti::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_ChangeGunMulti";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_ChangeGunType::kGunTypeFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_ChangeGunType::CMD_C2S_ChangeGunType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_ChangeGunType::InitAsDefaultInstance() {
}

CMD_C2S_ChangeGunType::CMD_C2S_ChangeGunType(const CMD_C2S_ChangeGunType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_ChangeGunType::SharedCtor() {
  _cached_size_ = 0;
  guntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_ChangeGunType::~CMD_C2S_ChangeGunType() {
  SharedDtor();
}

void CMD_C2S_ChangeGunType::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_ChangeGunType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_ChangeGunType& CMD_C2S_ChangeGunType::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_ChangeGunType* CMD_C2S_ChangeGunType::default_instance_ = NULL;

CMD_C2S_ChangeGunType* CMD_C2S_ChangeGunType::New() const {
  return new CMD_C2S_ChangeGunType;
}

void CMD_C2S_ChangeGunType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_ChangeGunType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gunType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guntype_)));
          set_has_guntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_ChangeGunType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gunType = 1;
  if (has_guntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guntype(), output);
  }

}

int CMD_C2S_ChangeGunType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gunType = 1;
    if (has_guntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guntype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_ChangeGunType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_ChangeGunType*>(&from));
}

void CMD_C2S_ChangeGunType::MergeFrom(const CMD_C2S_ChangeGunType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guntype()) {
      set_guntype(from.guntype());
    }
  }
}

void CMD_C2S_ChangeGunType::CopyFrom(const CMD_C2S_ChangeGunType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_ChangeGunType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_ChangeGunType::Swap(CMD_C2S_ChangeGunType* other) {
  if (other != this) {
    std::swap(guntype_, other->guntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_ChangeGunType::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_ChangeGunType";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_ShootBullet::kShootTimeFieldNumber;
const int CMD_C2S_ShootBullet::kPosXFieldNumber;
const int CMD_C2S_ShootBullet::kPosYFieldNumber;
const int CMD_C2S_ShootBullet::kUniqIdFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_ShootBullet::CMD_C2S_ShootBullet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_ShootBullet::InitAsDefaultInstance() {
}

CMD_C2S_ShootBullet::CMD_C2S_ShootBullet(const CMD_C2S_ShootBullet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_ShootBullet::SharedCtor() {
  _cached_size_ = 0;
  shoottime_ = GOOGLE_LONGLONG(0);
  posx_ = 0;
  posy_ = 0;
  uniqid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_ShootBullet::~CMD_C2S_ShootBullet() {
  SharedDtor();
}

void CMD_C2S_ShootBullet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_ShootBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_ShootBullet& CMD_C2S_ShootBullet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_ShootBullet* CMD_C2S_ShootBullet::default_instance_ = NULL;

CMD_C2S_ShootBullet* CMD_C2S_ShootBullet::New() const {
  return new CMD_C2S_ShootBullet;
}

void CMD_C2S_ShootBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shoottime_ = GOOGLE_LONGLONG(0);
    posx_ = 0;
    posy_ = 0;
    uniqid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_ShootBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 shootTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shoottime_)));
          set_has_shoottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posX;
        break;
      }

      // required float posX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posY;
        break;
      }

      // required float posY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uniqId;
        break;
      }

      // required int32 uniqId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqid_)));
          set_has_uniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_ShootBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 shootTime = 1;
  if (has_shoottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->shoottime(), output);
  }

  // required float posX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posx(), output);
  }

  // required float posY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posy(), output);
  }

  // required int32 uniqId = 4;
  if (has_uniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uniqid(), output);
  }

}

int CMD_C2S_ShootBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 shootTime = 1;
    if (has_shoottime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shoottime());
    }

    // required float posX = 2;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 3;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required int32 uniqId = 4;
    if (has_uniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_ShootBullet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_ShootBullet*>(&from));
}

void CMD_C2S_ShootBullet::MergeFrom(const CMD_C2S_ShootBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shoottime()) {
      set_shoottime(from.shoottime());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_uniqid()) {
      set_uniqid(from.uniqid());
    }
  }
}

void CMD_C2S_ShootBullet::CopyFrom(const CMD_C2S_ShootBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_ShootBullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_C2S_ShootBullet::Swap(CMD_C2S_ShootBullet* other) {
  if (other != this) {
    std::swap(shoottime_, other->shoottime_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(uniqid_, other->uniqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_ShootBullet::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_ShootBullet";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_HitFish::kHitTimeFieldNumber;
const int CMD_C2S_HitFish::kBulletUniqIdFieldNumber;
const int CMD_C2S_HitFish::kFishUniqIdFieldNumber;
const int CMD_C2S_HitFish::kFishIndexFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_HitFish::CMD_C2S_HitFish()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_HitFish::InitAsDefaultInstance() {
}

CMD_C2S_HitFish::CMD_C2S_HitFish(const CMD_C2S_HitFish& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_HitFish::SharedCtor() {
  _cached_size_ = 0;
  hittime_ = GOOGLE_LONGLONG(0);
  bulletuniqid_ = 0;
  fishuniqid_ = 0;
  fishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_HitFish::~CMD_C2S_HitFish() {
  SharedDtor();
}

void CMD_C2S_HitFish::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_HitFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_HitFish& CMD_C2S_HitFish::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_HitFish* CMD_C2S_HitFish::default_instance_ = NULL;

CMD_C2S_HitFish* CMD_C2S_HitFish::New() const {
  return new CMD_C2S_HitFish;
}

void CMD_C2S_HitFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hittime_ = GOOGLE_LONGLONG(0);
    bulletuniqid_ = 0;
    fishuniqid_ = 0;
    fishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_HitFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 hitTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hittime_)));
          set_has_hittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bulletUniqId;
        break;
      }

      // required int32 bulletUniqId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletUniqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletuniqid_)));
          set_has_bulletuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fishUniqId;
        break;
      }

      // required int32 fishUniqId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishUniqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishuniqid_)));
          set_has_fishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fishIndex;
        break;
      }

      // required int32 fishIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishindex_)));
          set_has_fishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_HitFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 hitTime = 1;
  if (has_hittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hittime(), output);
  }

  // required int32 bulletUniqId = 2;
  if (has_bulletuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bulletuniqid(), output);
  }

  // required int32 fishUniqId = 3;
  if (has_fishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fishuniqid(), output);
  }

  // required int32 fishIndex = 4;
  if (has_fishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fishindex(), output);
  }

}

int CMD_C2S_HitFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 hitTime = 1;
    if (has_hittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hittime());
    }

    // required int32 bulletUniqId = 2;
    if (has_bulletuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletuniqid());
    }

    // required int32 fishUniqId = 3;
    if (has_fishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishuniqid());
    }

    // required int32 fishIndex = 4;
    if (has_fishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishindex());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_HitFish::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_HitFish*>(&from));
}

void CMD_C2S_HitFish::MergeFrom(const CMD_C2S_HitFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hittime()) {
      set_hittime(from.hittime());
    }
    if (from.has_bulletuniqid()) {
      set_bulletuniqid(from.bulletuniqid());
    }
    if (from.has_fishuniqid()) {
      set_fishuniqid(from.fishuniqid());
    }
    if (from.has_fishindex()) {
      set_fishindex(from.fishindex());
    }
  }
}

void CMD_C2S_HitFish::CopyFrom(const CMD_C2S_HitFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_HitFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_C2S_HitFish::Swap(CMD_C2S_HitFish* other) {
  if (other != this) {
    std::swap(hittime_, other->hittime_);
    std::swap(bulletuniqid_, other->bulletuniqid_);
    std::swap(fishuniqid_, other->fishuniqid_);
    std::swap(fishindex_, other->fishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_HitFish::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_HitFish";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_HitFormFish::kHitTimeFieldNumber;
const int CMD_C2S_HitFormFish::kBulletUniqIdFieldNumber;
const int CMD_C2S_HitFormFish::kFormOutIDFieldNumber;
const int CMD_C2S_HitFormFish::kFishIndexFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_HitFormFish::CMD_C2S_HitFormFish()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_HitFormFish::InitAsDefaultInstance() {
}

CMD_C2S_HitFormFish::CMD_C2S_HitFormFish(const CMD_C2S_HitFormFish& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_HitFormFish::SharedCtor() {
  _cached_size_ = 0;
  hittime_ = GOOGLE_LONGLONG(0);
  bulletuniqid_ = 0;
  formoutid_ = 0;
  fishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_HitFormFish::~CMD_C2S_HitFormFish() {
  SharedDtor();
}

void CMD_C2S_HitFormFish::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_HitFormFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_HitFormFish& CMD_C2S_HitFormFish::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_HitFormFish* CMD_C2S_HitFormFish::default_instance_ = NULL;

CMD_C2S_HitFormFish* CMD_C2S_HitFormFish::New() const {
  return new CMD_C2S_HitFormFish;
}

void CMD_C2S_HitFormFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hittime_ = GOOGLE_LONGLONG(0);
    bulletuniqid_ = 0;
    formoutid_ = 0;
    fishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_HitFormFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 hitTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hittime_)));
          set_has_hittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bulletUniqId;
        break;
      }

      // required int32 bulletUniqId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletUniqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletuniqid_)));
          set_has_bulletuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_formOutID;
        break;
      }

      // required int32 formOutID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formOutID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formoutid_)));
          set_has_formoutid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fishIndex;
        break;
      }

      // required int32 fishIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishindex_)));
          set_has_fishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_HitFormFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 hitTime = 1;
  if (has_hittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hittime(), output);
  }

  // required int32 bulletUniqId = 2;
  if (has_bulletuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bulletuniqid(), output);
  }

  // required int32 formOutID = 3;
  if (has_formoutid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->formoutid(), output);
  }

  // required int32 fishIndex = 4;
  if (has_fishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fishindex(), output);
  }

}

int CMD_C2S_HitFormFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 hitTime = 1;
    if (has_hittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hittime());
    }

    // required int32 bulletUniqId = 2;
    if (has_bulletuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletuniqid());
    }

    // required int32 formOutID = 3;
    if (has_formoutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formoutid());
    }

    // required int32 fishIndex = 4;
    if (has_fishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishindex());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_HitFormFish::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_HitFormFish*>(&from));
}

void CMD_C2S_HitFormFish::MergeFrom(const CMD_C2S_HitFormFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hittime()) {
      set_hittime(from.hittime());
    }
    if (from.has_bulletuniqid()) {
      set_bulletuniqid(from.bulletuniqid());
    }
    if (from.has_formoutid()) {
      set_formoutid(from.formoutid());
    }
    if (from.has_fishindex()) {
      set_fishindex(from.fishindex());
    }
  }
}

void CMD_C2S_HitFormFish::CopyFrom(const CMD_C2S_HitFormFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_HitFormFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_C2S_HitFormFish::Swap(CMD_C2S_HitFormFish* other) {
  if (other != this) {
    std::swap(hittime_, other->hittime_);
    std::swap(bulletuniqid_, other->bulletuniqid_);
    std::swap(formoutid_, other->formoutid_);
    std::swap(fishindex_, other->fishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_HitFormFish::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_HitFormFish";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_UseFishProperty::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_UseFishProperty::CMD_C2S_UseFishProperty()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_UseFishProperty::InitAsDefaultInstance() {
}

CMD_C2S_UseFishProperty::CMD_C2S_UseFishProperty(const CMD_C2S_UseFishProperty& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_UseFishProperty::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_UseFishProperty::~CMD_C2S_UseFishProperty() {
  SharedDtor();
}

void CMD_C2S_UseFishProperty::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_UseFishProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_UseFishProperty& CMD_C2S_UseFishProperty::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_UseFishProperty* CMD_C2S_UseFishProperty::default_instance_ = NULL;

CMD_C2S_UseFishProperty* CMD_C2S_UseFishProperty::New() const {
  return new CMD_C2S_UseFishProperty;
}

void CMD_C2S_UseFishProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_UseFishProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_UseFishProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

}

int CMD_C2S_UseFishProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_UseFishProperty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_UseFishProperty*>(&from));
}

void CMD_C2S_UseFishProperty::MergeFrom(const CMD_C2S_UseFishProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
}

void CMD_C2S_UseFishProperty::CopyFrom(const CMD_C2S_UseFishProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_UseFishProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_UseFishProperty::Swap(CMD_C2S_UseFishProperty* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_UseFishProperty::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_UseFishProperty";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_CancelFishProperty::kItemIdFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_CancelFishProperty::CMD_C2S_CancelFishProperty()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_CancelFishProperty::InitAsDefaultInstance() {
}

CMD_C2S_CancelFishProperty::CMD_C2S_CancelFishProperty(const CMD_C2S_CancelFishProperty& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_CancelFishProperty::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_CancelFishProperty::~CMD_C2S_CancelFishProperty() {
  SharedDtor();
}

void CMD_C2S_CancelFishProperty::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_CancelFishProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_CancelFishProperty& CMD_C2S_CancelFishProperty::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_CancelFishProperty* CMD_C2S_CancelFishProperty::default_instance_ = NULL;

CMD_C2S_CancelFishProperty* CMD_C2S_CancelFishProperty::New() const {
  return new CMD_C2S_CancelFishProperty;
}

void CMD_C2S_CancelFishProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_CancelFishProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_CancelFishProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

}

int CMD_C2S_CancelFishProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_CancelFishProperty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_CancelFishProperty*>(&from));
}

void CMD_C2S_CancelFishProperty::MergeFrom(const CMD_C2S_CancelFishProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
}

void CMD_C2S_CancelFishProperty::CopyFrom(const CMD_C2S_CancelFishProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_CancelFishProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_CancelFishProperty::Swap(CMD_C2S_CancelFishProperty* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_CancelFishProperty::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_CancelFishProperty";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_ChooseAimFish::kFishUniqIdFieldNumber;
const int CMD_C2S_ChooseAimFish::kIsFormFishFieldNumber;
const int CMD_C2S_ChooseAimFish::kFishIndexFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_ChooseAimFish::CMD_C2S_ChooseAimFish()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_ChooseAimFish::InitAsDefaultInstance() {
}

CMD_C2S_ChooseAimFish::CMD_C2S_ChooseAimFish(const CMD_C2S_ChooseAimFish& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_ChooseAimFish::SharedCtor() {
  _cached_size_ = 0;
  fishuniqid_ = 0;
  isformfish_ = 0;
  fishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_ChooseAimFish::~CMD_C2S_ChooseAimFish() {
  SharedDtor();
}

void CMD_C2S_ChooseAimFish::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_ChooseAimFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_ChooseAimFish& CMD_C2S_ChooseAimFish::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_ChooseAimFish* CMD_C2S_ChooseAimFish::default_instance_ = NULL;

CMD_C2S_ChooseAimFish* CMD_C2S_ChooseAimFish::New() const {
  return new CMD_C2S_ChooseAimFish;
}

void CMD_C2S_ChooseAimFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fishuniqid_ = 0;
    isformfish_ = 0;
    fishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_ChooseAimFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fishUniqId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishuniqid_)));
          set_has_fishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isFormFish;
        break;
      }

      // required int32 isFormFish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFormFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isformfish_)));
          set_has_isformfish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fishIndex;
        break;
      }

      // required int32 fishIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishindex_)));
          set_has_fishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_ChooseAimFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fishUniqId = 1;
  if (has_fishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishuniqid(), output);
  }

  // required int32 isFormFish = 2;
  if (has_isformfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isformfish(), output);
  }

  // required int32 fishIndex = 3;
  if (has_fishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fishindex(), output);
  }

}

int CMD_C2S_ChooseAimFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fishUniqId = 1;
    if (has_fishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishuniqid());
    }

    // required int32 isFormFish = 2;
    if (has_isformfish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isformfish());
    }

    // required int32 fishIndex = 3;
    if (has_fishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishindex());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_ChooseAimFish::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_ChooseAimFish*>(&from));
}

void CMD_C2S_ChooseAimFish::MergeFrom(const CMD_C2S_ChooseAimFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fishuniqid()) {
      set_fishuniqid(from.fishuniqid());
    }
    if (from.has_isformfish()) {
      set_isformfish(from.isformfish());
    }
    if (from.has_fishindex()) {
      set_fishindex(from.fishindex());
    }
  }
}

void CMD_C2S_ChooseAimFish::CopyFrom(const CMD_C2S_ChooseAimFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_ChooseAimFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_C2S_ChooseAimFish::Swap(CMD_C2S_ChooseAimFish* other) {
  if (other != this) {
    std::swap(fishuniqid_, other->fishuniqid_);
    std::swap(isformfish_, other->isformfish_);
    std::swap(fishindex_, other->fishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_ChooseAimFish::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_ChooseAimFish";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_AddUserSilver::kAddSilverFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_AddUserSilver::CMD_C2S_AddUserSilver()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_AddUserSilver::InitAsDefaultInstance() {
}

CMD_C2S_AddUserSilver::CMD_C2S_AddUserSilver(const CMD_C2S_AddUserSilver& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_AddUserSilver::SharedCtor() {
  _cached_size_ = 0;
  addsilver_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_AddUserSilver::~CMD_C2S_AddUserSilver() {
  SharedDtor();
}

void CMD_C2S_AddUserSilver::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_AddUserSilver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_AddUserSilver& CMD_C2S_AddUserSilver::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_AddUserSilver* CMD_C2S_AddUserSilver::default_instance_ = NULL;

CMD_C2S_AddUserSilver* CMD_C2S_AddUserSilver::New() const {
  return new CMD_C2S_AddUserSilver;
}

void CMD_C2S_AddUserSilver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addsilver_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_AddUserSilver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 addSilver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addsilver_)));
          set_has_addsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_AddUserSilver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 addSilver = 1;
  if (has_addsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->addsilver(), output);
  }

}

int CMD_C2S_AddUserSilver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 addSilver = 1;
    if (has_addsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addsilver());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_AddUserSilver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_AddUserSilver*>(&from));
}

void CMD_C2S_AddUserSilver::MergeFrom(const CMD_C2S_AddUserSilver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addsilver()) {
      set_addsilver(from.addsilver());
    }
  }
}

void CMD_C2S_AddUserSilver::CopyFrom(const CMD_C2S_AddUserSilver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_AddUserSilver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_AddUserSilver::Swap(CMD_C2S_AddUserSilver* other) {
  if (other != this) {
    std::swap(addsilver_, other->addsilver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_AddUserSilver::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_AddUserSilver";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_AndroidStandUp::kServerTimeFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_AndroidStandUp::CMD_C2S_AndroidStandUp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_AndroidStandUp::InitAsDefaultInstance() {
}

CMD_C2S_AndroidStandUp::CMD_C2S_AndroidStandUp(const CMD_C2S_AndroidStandUp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_AndroidStandUp::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_AndroidStandUp::~CMD_C2S_AndroidStandUp() {
  SharedDtor();
}

void CMD_C2S_AndroidStandUp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_AndroidStandUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_AndroidStandUp& CMD_C2S_AndroidStandUp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_AndroidStandUp* CMD_C2S_AndroidStandUp::default_instance_ = NULL;

CMD_C2S_AndroidStandUp* CMD_C2S_AndroidStandUp::New() const {
  return new CMD_C2S_AndroidStandUp;
}

void CMD_C2S_AndroidStandUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_AndroidStandUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_AndroidStandUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverTime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servertime(), output);
  }

}

int CMD_C2S_AndroidStandUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverTime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_AndroidStandUp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_AndroidStandUp*>(&from));
}

void CMD_C2S_AndroidStandUp::MergeFrom(const CMD_C2S_AndroidStandUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
}

void CMD_C2S_AndroidStandUp::CopyFrom(const CMD_C2S_AndroidStandUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_AndroidStandUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_AndroidStandUp::Swap(CMD_C2S_AndroidStandUp* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_AndroidStandUp::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_AndroidStandUp";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_AndroidShoot::kFishUniqIdFieldNumber;
const int CMD_C2S_AndroidShoot::kShootTimeFieldNumber;
const int CMD_C2S_AndroidShoot::kPosXFieldNumber;
const int CMD_C2S_AndroidShoot::kPosYFieldNumber;
const int CMD_C2S_AndroidShoot::kBulletLiveTimeFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_AndroidShoot::CMD_C2S_AndroidShoot()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_AndroidShoot::InitAsDefaultInstance() {
}

CMD_C2S_AndroidShoot::CMD_C2S_AndroidShoot(const CMD_C2S_AndroidShoot& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_AndroidShoot::SharedCtor() {
  _cached_size_ = 0;
  fishuniqid_ = 0;
  shoottime_ = GOOGLE_LONGLONG(0);
  posx_ = 0;
  posy_ = 0;
  bulletlivetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_AndroidShoot::~CMD_C2S_AndroidShoot() {
  SharedDtor();
}

void CMD_C2S_AndroidShoot::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_AndroidShoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_AndroidShoot& CMD_C2S_AndroidShoot::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_AndroidShoot* CMD_C2S_AndroidShoot::default_instance_ = NULL;

CMD_C2S_AndroidShoot* CMD_C2S_AndroidShoot::New() const {
  return new CMD_C2S_AndroidShoot;
}

void CMD_C2S_AndroidShoot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fishuniqid_ = 0;
    shoottime_ = GOOGLE_LONGLONG(0);
    posx_ = 0;
    posy_ = 0;
    bulletlivetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_AndroidShoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fishUniqId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishuniqid_)));
          set_has_fishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shootTime;
        break;
      }

      // required int64 shootTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shootTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shoottime_)));
          set_has_shoottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posX;
        break;
      }

      // required int32 posX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posY;
        break;
      }

      // required int32 posY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bulletLiveTime;
        break;
      }

      // required int32 bulletLiveTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletLiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletlivetime_)));
          set_has_bulletlivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_AndroidShoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fishUniqId = 1;
  if (has_fishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishuniqid(), output);
  }

  // required int64 shootTime = 2;
  if (has_shoottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->shoottime(), output);
  }

  // required int32 posX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // required int32 posY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // required int32 bulletLiveTime = 5;
  if (has_bulletlivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bulletlivetime(), output);
  }

}

int CMD_C2S_AndroidShoot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fishUniqId = 1;
    if (has_fishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishuniqid());
    }

    // required int64 shootTime = 2;
    if (has_shoottime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shoottime());
    }

    // required int32 posX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // required int32 bulletLiveTime = 5;
    if (has_bulletlivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletlivetime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_AndroidShoot::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_AndroidShoot*>(&from));
}

void CMD_C2S_AndroidShoot::MergeFrom(const CMD_C2S_AndroidShoot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fishuniqid()) {
      set_fishuniqid(from.fishuniqid());
    }
    if (from.has_shoottime()) {
      set_shoottime(from.shoottime());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_bulletlivetime()) {
      set_bulletlivetime(from.bulletlivetime());
    }
  }
}

void CMD_C2S_AndroidShoot::CopyFrom(const CMD_C2S_AndroidShoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_AndroidShoot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CMD_C2S_AndroidShoot::Swap(CMD_C2S_AndroidShoot* other) {
  if (other != this) {
    std::swap(fishuniqid_, other->fishuniqid_);
    std::swap(shoottime_, other->shoottime_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(bulletlivetime_, other->bulletlivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_AndroidShoot::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_AndroidShoot";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_CheckClientVer::kClientVerFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_CheckClientVer::CMD_C2S_CheckClientVer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_CheckClientVer::InitAsDefaultInstance() {
}

CMD_C2S_CheckClientVer::CMD_C2S_CheckClientVer(const CMD_C2S_CheckClientVer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_CheckClientVer::SharedCtor() {
  _cached_size_ = 0;
  clientver_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_CheckClientVer::~CMD_C2S_CheckClientVer() {
  SharedDtor();
}

void CMD_C2S_CheckClientVer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_CheckClientVer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_CheckClientVer& CMD_C2S_CheckClientVer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_CheckClientVer* CMD_C2S_CheckClientVer::default_instance_ = NULL;

CMD_C2S_CheckClientVer* CMD_C2S_CheckClientVer::New() const {
  return new CMD_C2S_CheckClientVer;
}

void CMD_C2S_CheckClientVer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientver_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_CheckClientVer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clientVer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientver_)));
          set_has_clientver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_CheckClientVer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 clientVer = 1;
  if (has_clientver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientver(), output);
  }

}

int CMD_C2S_CheckClientVer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 clientVer = 1;
    if (has_clientver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientver());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_CheckClientVer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_CheckClientVer*>(&from));
}

void CMD_C2S_CheckClientVer::MergeFrom(const CMD_C2S_CheckClientVer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientver()) {
      set_clientver(from.clientver());
    }
  }
}

void CMD_C2S_CheckClientVer::CopyFrom(const CMD_C2S_CheckClientVer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_CheckClientVer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_CheckClientVer::Swap(CMD_C2S_CheckClientVer* other) {
  if (other != this) {
    std::swap(clientver_, other->clientver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_CheckClientVer::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_CheckClientVer";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_Outboard::kIsOutboardFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_Outboard::CMD_C2S_Outboard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_Outboard::InitAsDefaultInstance() {
}

CMD_C2S_Outboard::CMD_C2S_Outboard(const CMD_C2S_Outboard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_Outboard::SharedCtor() {
  _cached_size_ = 0;
  isoutboard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_Outboard::~CMD_C2S_Outboard() {
  SharedDtor();
}

void CMD_C2S_Outboard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_Outboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_Outboard& CMD_C2S_Outboard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_Outboard* CMD_C2S_Outboard::default_instance_ = NULL;

CMD_C2S_Outboard* CMD_C2S_Outboard::New() const {
  return new CMD_C2S_Outboard;
}

void CMD_C2S_Outboard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isoutboard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_Outboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isOutboard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isoutboard_)));
          set_has_isoutboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_Outboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isOutboard = 1;
  if (has_isoutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isoutboard(), output);
  }

}

int CMD_C2S_Outboard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isOutboard = 1;
    if (has_isoutboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isoutboard());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_Outboard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_Outboard*>(&from));
}

void CMD_C2S_Outboard::MergeFrom(const CMD_C2S_Outboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isoutboard()) {
      set_isoutboard(from.isoutboard());
    }
  }
}

void CMD_C2S_Outboard::CopyFrom(const CMD_C2S_Outboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_Outboard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_Outboard::Swap(CMD_C2S_Outboard* other) {
  if (other != this) {
    std::swap(isoutboard_, other->isoutboard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_Outboard::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_Outboard";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_C2S_AutoFire::kIsAutoFireFieldNumber;
#endif  // !_MSC_VER

CMD_C2S_AutoFire::CMD_C2S_AutoFire()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_C2S_AutoFire::InitAsDefaultInstance() {
}

CMD_C2S_AutoFire::CMD_C2S_AutoFire(const CMD_C2S_AutoFire& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_C2S_AutoFire::SharedCtor() {
  _cached_size_ = 0;
  isautofire_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_C2S_AutoFire::~CMD_C2S_AutoFire() {
  SharedDtor();
}

void CMD_C2S_AutoFire::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_C2S_AutoFire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_C2S_AutoFire& CMD_C2S_AutoFire::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_C2S_AutoFire* CMD_C2S_AutoFire::default_instance_ = NULL;

CMD_C2S_AutoFire* CMD_C2S_AutoFire::New() const {
  return new CMD_C2S_AutoFire;
}

void CMD_C2S_AutoFire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isautofire_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_C2S_AutoFire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAutoFire = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isautofire_)));
          set_has_isautofire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_C2S_AutoFire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAutoFire = 1;
  if (has_isautofire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isautofire(), output);
  }

}

int CMD_C2S_AutoFire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAutoFire = 1;
    if (has_isautofire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isautofire());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_C2S_AutoFire::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_C2S_AutoFire*>(&from));
}

void CMD_C2S_AutoFire::MergeFrom(const CMD_C2S_AutoFire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isautofire()) {
      set_isautofire(from.isautofire());
    }
  }
}

void CMD_C2S_AutoFire::CopyFrom(const CMD_C2S_AutoFire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_C2S_AutoFire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_C2S_AutoFire::Swap(CMD_C2S_AutoFire* other) {
  if (other != this) {
    std::swap(isautofire_, other->isautofire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_C2S_AutoFire::GetTypeName() const {
  return "game.fish3d.c2s.CMD_C2S_AutoFire";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace c2s
}  // namespace fish3d
}  // namespace game

// @@protoc_insertion_point(global_scope)

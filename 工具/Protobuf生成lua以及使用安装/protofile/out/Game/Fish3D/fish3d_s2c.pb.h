// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/Fish3D/fish3d_s2c.proto

#ifndef PROTOBUF_Game_2fFish3D_2ffish3d_5fs2c_2eproto__INCLUDED
#define PROTOBUF_Game_2fFish3D_2ffish3d_5fs2c_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace fish3d {
namespace s2c {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

class CMD_S2C_AndroidUpdate;
class CMD_S2C_SyncServerTime;
class CMD_S2C_FormTimeInfo;
class tagFormFishOutInfo;
class CMD_S2C_FishFormInfo;
class tagSeatUserInfo;
class CMD_S2C_FishpondPlayer;
class tagFishInfo;
class CMD_S2C_FishpondFish;
class tagFISHPOS;
class tagBulletInfo;
class CMD_S2C_FishpondBullet;
class tagFreezeInfo;
class CMD_S2C_FreezeFishInfo;
class CMD_S2C_NewFishData;
class CMD_S2C_SeatUserData;
class CMD_S2C_GlobalInfo;
class CMD_S2C_BulletInfo;
class CMD_S2C_HitFishInfo;
class CMD_S2C_SkillHitFishInfo;
class CMD_S2C_ErrorInfo;
class CMD_S2C_ItemEffect;
class CMD_S2C_AimFishInfo;
class CMD_S2C_AddSilverInfo;
class CMD_S2C_BoomFishInfo;
class CMD_S2C_ServerVersion;
class CMD_S2C_AddPhoneTicketInfo;
class CMD_S2C_SpecialBulletInfo;
class CMD_S2C_Reward;
class CMD_S2C_Aim;
class CMD_S2C_OctoposMultiple;
class CMD_S2C_TriggerFireProgress;

// ===================================================================

class CMD_S2C_AndroidUpdate : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_AndroidUpdate();
  virtual ~CMD_S2C_AndroidUpdate();

  CMD_S2C_AndroidUpdate(const CMD_S2C_AndroidUpdate& from);

  inline CMD_S2C_AndroidUpdate& operator=(const CMD_S2C_AndroidUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_AndroidUpdate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_AndroidUpdate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_AndroidUpdate* other);

  // implements Message ----------------------------------------------

  CMD_S2C_AndroidUpdate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_AndroidUpdate& from);
  void MergeFrom(const CMD_S2C_AndroidUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 serverTime = 1;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::int64 servertime() const;
  inline void set_servertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_AndroidUpdate)
 private:
  inline void set_has_servertime();
  inline void clear_has_servertime();

  ::google::protobuf::int64 servertime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_AndroidUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_SyncServerTime : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_SyncServerTime();
  virtual ~CMD_S2C_SyncServerTime();

  CMD_S2C_SyncServerTime(const CMD_S2C_SyncServerTime& from);

  inline CMD_S2C_SyncServerTime& operator=(const CMD_S2C_SyncServerTime& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_SyncServerTime& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_SyncServerTime* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_SyncServerTime* other);

  // implements Message ----------------------------------------------

  CMD_S2C_SyncServerTime* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_SyncServerTime& from);
  void MergeFrom(const CMD_S2C_SyncServerTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 serverTime = 1;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::int64 servertime() const;
  inline void set_servertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_SyncServerTime)
 private:
  inline void set_has_servertime();
  inline void clear_has_servertime();

  ::google::protobuf::int64 servertime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_SyncServerTime* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_FormTimeInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_FormTimeInfo();
  virtual ~CMD_S2C_FormTimeInfo();

  CMD_S2C_FormTimeInfo(const CMD_S2C_FormTimeInfo& from);

  inline CMD_S2C_FormTimeInfo& operator=(const CMD_S2C_FormTimeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_FormTimeInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_FormTimeInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_FormTimeInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_FormTimeInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_FormTimeInfo& from);
  void MergeFrom(const CMD_S2C_FormTimeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 isBegin = 1;
  inline bool has_isbegin() const;
  inline void clear_isbegin();
  static const int kIsBeginFieldNumber = 1;
  inline ::google::protobuf::int32 isbegin() const;
  inline void set_isbegin(::google::protobuf::int32 value);

  // required int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_FormTimeInfo)
 private:
  inline void set_has_isbegin();
  inline void clear_has_isbegin();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 isbegin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_FormTimeInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagFormFishOutInfo : public ::google::protobuf::MessageLite {
 public:
  tagFormFishOutInfo();
  virtual ~tagFormFishOutInfo();

  tagFormFishOutInfo(const tagFormFishOutInfo& from);

  inline tagFormFishOutInfo& operator=(const tagFormFishOutInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const tagFormFishOutInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const tagFormFishOutInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(tagFormFishOutInfo* other);

  // implements Message ----------------------------------------------

  tagFormFishOutInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const tagFormFishOutInfo& from);
  void MergeFrom(const tagFormFishOutInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 outId = 1;
  inline bool has_outid() const;
  inline void clear_outid();
  static const int kOutIdFieldNumber = 1;
  inline ::google::protobuf::int32 outid() const;
  inline void set_outid(::google::protobuf::int32 value);

  // required int32 fishId = 2;
  inline bool has_fishid() const;
  inline void clear_fishid();
  static const int kFishIdFieldNumber = 2;
  inline ::google::protobuf::int32 fishid() const;
  inline void set_fishid(::google::protobuf::int32 value);

  // required int32 fishSeqId = 3;
  inline bool has_fishseqid() const;
  inline void clear_fishseqid();
  static const int kFishSeqIdFieldNumber = 3;
  inline ::google::protobuf::int32 fishseqid() const;
  inline void set_fishseqid(::google::protobuf::int32 value);

  // required int32 traceId = 4;
  inline bool has_traceid() const;
  inline void clear_traceid();
  static const int kTraceIdFieldNumber = 4;
  inline ::google::protobuf::int32 traceid() const;
  inline void set_traceid(::google::protobuf::int32 value);

  // required int64 beginTime = 5;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 5;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // required int32 remainNum = 6;
  inline bool has_remainnum() const;
  inline void clear_remainnum();
  static const int kRemainNumFieldNumber = 6;
  inline ::google::protobuf::int32 remainnum() const;
  inline void set_remainnum(::google::protobuf::int32 value);

  // required int32 interval = 7;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 7;
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);

  // repeated int64 aliveFish = 8;
  inline int alivefish_size() const;
  inline void clear_alivefish();
  static const int kAliveFishFieldNumber = 8;
  inline ::google::protobuf::int64 alivefish(int index) const;
  inline void set_alivefish(int index, ::google::protobuf::int64 value);
  inline void add_alivefish(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      alivefish() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_alivefish();

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.tagFormFishOutInfo)
 private:
  inline void set_has_outid();
  inline void clear_has_outid();
  inline void set_has_fishid();
  inline void clear_has_fishid();
  inline void set_has_fishseqid();
  inline void clear_has_fishseqid();
  inline void set_has_traceid();
  inline void clear_has_traceid();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_remainnum();
  inline void clear_has_remainnum();
  inline void set_has_interval();
  inline void clear_has_interval();

  ::google::protobuf::int32 outid_;
  ::google::protobuf::int32 fishid_;
  ::google::protobuf::int32 fishseqid_;
  ::google::protobuf::int32 traceid_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int32 remainnum_;
  ::google::protobuf::int32 interval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > alivefish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static tagFormFishOutInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_FishFormInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_FishFormInfo();
  virtual ~CMD_S2C_FishFormInfo();

  CMD_S2C_FishFormInfo(const CMD_S2C_FishFormInfo& from);

  inline CMD_S2C_FishFormInfo& operator=(const CMD_S2C_FishFormInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_FishFormInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_FishFormInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_FishFormInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_FishFormInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_FishFormInfo& from);
  void MergeFrom(const CMD_S2C_FishFormInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.fish3d.s2c.tagFormFishOutInfo outInfo = 1;
  inline int outinfo_size() const;
  inline void clear_outinfo();
  static const int kOutInfoFieldNumber = 1;
  inline const ::game::fish3d::s2c::tagFormFishOutInfo& outinfo(int index) const;
  inline ::game::fish3d::s2c::tagFormFishOutInfo* mutable_outinfo(int index);
  inline ::game::fish3d::s2c::tagFormFishOutInfo* add_outinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFormFishOutInfo >&
      outinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFormFishOutInfo >*
      mutable_outinfo();

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_FishFormInfo)
 private:

  ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFormFishOutInfo > outinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_FishFormInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagSeatUserInfo : public ::google::protobuf::MessageLite {
 public:
  tagSeatUserInfo();
  virtual ~tagSeatUserInfo();

  tagSeatUserInfo(const tagSeatUserInfo& from);

  inline tagSeatUserInfo& operator=(const tagSeatUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const tagSeatUserInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const tagSeatUserInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(tagSeatUserInfo* other);

  // implements Message ----------------------------------------------

  tagSeatUserInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const tagSeatUserInfo& from);
  void MergeFrom(const tagSeatUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hasPlayer = 1;
  inline bool has_hasplayer() const;
  inline void clear_hasplayer();
  static const int kHasPlayerFieldNumber = 1;
  inline ::google::protobuf::int32 hasplayer() const;
  inline void set_hasplayer(::google::protobuf::int32 value);

  // required int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required int32 gunID = 3;
  inline bool has_gunid() const;
  inline void clear_gunid();
  static const int kGunIDFieldNumber = 3;
  inline ::google::protobuf::int32 gunid() const;
  inline void set_gunid(::google::protobuf::int32 value);

  // required int32 gunType = 4;
  inline bool has_guntype() const;
  inline void clear_guntype();
  static const int kGunTypeFieldNumber = 4;
  inline ::google::protobuf::int32 guntype() const;
  inline void set_guntype(::google::protobuf::int32 value);

  // required int64 silver = 5;
  inline bool has_silver() const;
  inline void clear_silver();
  static const int kSilverFieldNumber = 5;
  inline ::google::protobuf::int64 silver() const;
  inline void set_silver(::google::protobuf::int64 value);

  // required int64 totalSilver = 6;
  inline bool has_totalsilver() const;
  inline void clear_totalsilver();
  static const int kTotalSilverFieldNumber = 6;
  inline ::google::protobuf::int64 totalsilver() const;
  inline void set_totalsilver(::google::protobuf::int64 value);

  // required int64 bullets = 7;
  inline bool has_bullets() const;
  inline void clear_bullets();
  static const int kBulletsFieldNumber = 7;
  inline ::google::protobuf::int64 bullets() const;
  inline void set_bullets(::google::protobuf::int64 value);

  // required int32 numId = 8;
  inline bool has_numid() const;
  inline void clear_numid();
  static const int kNumIdFieldNumber = 8;
  inline ::google::protobuf::int32 numid() const;
  inline void set_numid(::google::protobuf::int32 value);

  // required int32 isRobot = 9;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsRobotFieldNumber = 9;
  inline ::google::protobuf::int32 isrobot() const;
  inline void set_isrobot(::google::protobuf::int32 value);

  // required int32 isOutboard = 10;
  inline bool has_isoutboard() const;
  inline void clear_isoutboard();
  static const int kIsOutboardFieldNumber = 10;
  inline ::google::protobuf::int32 isoutboard() const;
  inline void set_isoutboard(::google::protobuf::int32 value);

  // required int32 isAim = 11;
  inline bool has_isaim() const;
  inline void clear_isaim();
  static const int kIsAimFieldNumber = 11;
  inline ::google::protobuf::int32 isaim() const;
  inline void set_isaim(::google::protobuf::int32 value);

  // required int32 isAutoFire = 12;
  inline bool has_isautofire() const;
  inline void clear_isautofire();
  static const int kIsAutoFireFieldNumber = 12;
  inline ::google::protobuf::int32 isautofire() const;
  inline void set_isautofire(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.tagSeatUserInfo)
 private:
  inline void set_has_hasplayer();
  inline void clear_has_hasplayer();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_gunid();
  inline void clear_has_gunid();
  inline void set_has_guntype();
  inline void clear_has_guntype();
  inline void set_has_silver();
  inline void clear_has_silver();
  inline void set_has_totalsilver();
  inline void clear_has_totalsilver();
  inline void set_has_bullets();
  inline void clear_has_bullets();
  inline void set_has_numid();
  inline void clear_has_numid();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();
  inline void set_has_isoutboard();
  inline void clear_has_isoutboard();
  inline void set_has_isaim();
  inline void clear_has_isaim();
  inline void set_has_isautofire();
  inline void clear_has_isautofire();

  ::google::protobuf::int32 hasplayer_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 gunid_;
  ::google::protobuf::int32 guntype_;
  ::google::protobuf::int64 silver_;
  ::google::protobuf::int64 totalsilver_;
  ::google::protobuf::int64 bullets_;
  ::google::protobuf::int32 numid_;
  ::google::protobuf::int32 isrobot_;
  ::google::protobuf::int32 isoutboard_;
  ::google::protobuf::int32 isaim_;
  ::google::protobuf::int32 isautofire_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static tagSeatUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_FishpondPlayer : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_FishpondPlayer();
  virtual ~CMD_S2C_FishpondPlayer();

  CMD_S2C_FishpondPlayer(const CMD_S2C_FishpondPlayer& from);

  inline CMD_S2C_FishpondPlayer& operator=(const CMD_S2C_FishpondPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_FishpondPlayer& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_FishpondPlayer* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_FishpondPlayer* other);

  // implements Message ----------------------------------------------

  CMD_S2C_FishpondPlayer* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_FishpondPlayer& from);
  void MergeFrom(const CMD_S2C_FishpondPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.fish3d.s2c.tagSeatUserInfo userInfo = 1;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  inline const ::game::fish3d::s2c::tagSeatUserInfo& userinfo(int index) const;
  inline ::game::fish3d::s2c::tagSeatUserInfo* mutable_userinfo(int index);
  inline ::game::fish3d::s2c::tagSeatUserInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagSeatUserInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagSeatUserInfo >*
      mutable_userinfo();

  // repeated string nickName = 2;
  inline int nickname_size() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname(int index) const;
  inline ::std::string* mutable_nickname(int index);
  inline void set_nickname(int index, const ::std::string& value);
  inline void set_nickname(int index, const char* value);
  inline void set_nickname(int index, const char* value, size_t size);
  inline ::std::string* add_nickname();
  inline void add_nickname(const ::std::string& value);
  inline void add_nickname(const char* value);
  inline void add_nickname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nickname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nickname();

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_FishpondPlayer)
 private:

  ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagSeatUserInfo > userinfo_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_FishpondPlayer* default_instance_;
};
// -------------------------------------------------------------------

class tagFishInfo : public ::google::protobuf::MessageLite {
 public:
  tagFishInfo();
  virtual ~tagFishInfo();

  tagFishInfo(const tagFishInfo& from);

  inline tagFishInfo& operator=(const tagFishInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const tagFishInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const tagFishInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(tagFishInfo* other);

  // implements Message ----------------------------------------------

  tagFishInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const tagFishInfo& from);
  void MergeFrom(const tagFishInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fishUniqId = 1;
  inline bool has_fishuniqid() const;
  inline void clear_fishuniqid();
  static const int kFishUniqIdFieldNumber = 1;
  inline ::google::protobuf::int32 fishuniqid() const;
  inline void set_fishuniqid(::google::protobuf::int32 value);

  // required int32 fishId = 2;
  inline bool has_fishid() const;
  inline void clear_fishid();
  static const int kFishIdFieldNumber = 2;
  inline ::google::protobuf::int32 fishid() const;
  inline void set_fishid(::google::protobuf::int32 value);

  // required int32 traceId = 3;
  inline bool has_traceid() const;
  inline void clear_traceid();
  static const int kTraceIdFieldNumber = 3;
  inline ::google::protobuf::int32 traceid() const;
  inline void set_traceid(::google::protobuf::int32 value);

  // required int64 bornTime = 4;
  inline bool has_borntime() const;
  inline void clear_borntime();
  static const int kBornTimeFieldNumber = 4;
  inline ::google::protobuf::int64 borntime() const;
  inline void set_borntime(::google::protobuf::int64 value);

  // required int64 deadTime = 5;
  inline bool has_deadtime() const;
  inline void clear_deadtime();
  static const int kDeadTimeFieldNumber = 5;
  inline ::google::protobuf::int64 deadtime() const;
  inline void set_deadtime(::google::protobuf::int64 value);

  // required int32 totalFreezeTime = 6;
  inline bool has_totalfreezetime() const;
  inline void clear_totalfreezetime();
  static const int kTotalFreezeTimeFieldNumber = 6;
  inline ::google::protobuf::int32 totalfreezetime() const;
  inline void set_totalfreezetime(::google::protobuf::int32 value);

  // required int32 index = 7;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 7;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.tagFishInfo)
 private:
  inline void set_has_fishuniqid();
  inline void clear_has_fishuniqid();
  inline void set_has_fishid();
  inline void clear_has_fishid();
  inline void set_has_traceid();
  inline void clear_has_traceid();
  inline void set_has_borntime();
  inline void clear_has_borntime();
  inline void set_has_deadtime();
  inline void clear_has_deadtime();
  inline void set_has_totalfreezetime();
  inline void clear_has_totalfreezetime();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::int32 fishuniqid_;
  ::google::protobuf::int32 fishid_;
  ::google::protobuf::int64 borntime_;
  ::google::protobuf::int32 traceid_;
  ::google::protobuf::int32 totalfreezetime_;
  ::google::protobuf::int64 deadtime_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static tagFishInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_FishpondFish : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_FishpondFish();
  virtual ~CMD_S2C_FishpondFish();

  CMD_S2C_FishpondFish(const CMD_S2C_FishpondFish& from);

  inline CMD_S2C_FishpondFish& operator=(const CMD_S2C_FishpondFish& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_FishpondFish& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_FishpondFish* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_FishpondFish* other);

  // implements Message ----------------------------------------------

  CMD_S2C_FishpondFish* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_FishpondFish& from);
  void MergeFrom(const CMD_S2C_FishpondFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
  inline int fishinfo_size() const;
  inline void clear_fishinfo();
  static const int kFishInfoFieldNumber = 1;
  inline const ::game::fish3d::s2c::tagFishInfo& fishinfo(int index) const;
  inline ::game::fish3d::s2c::tagFishInfo* mutable_fishinfo(int index);
  inline ::game::fish3d::s2c::tagFishInfo* add_fishinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo >&
      fishinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo >*
      mutable_fishinfo();

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_FishpondFish)
 private:

  ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo > fishinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_FishpondFish* default_instance_;
};
// -------------------------------------------------------------------

class tagFISHPOS : public ::google::protobuf::MessageLite {
 public:
  tagFISHPOS();
  virtual ~tagFISHPOS();

  tagFISHPOS(const tagFISHPOS& from);

  inline tagFISHPOS& operator=(const tagFISHPOS& from) {
    CopyFrom(from);
    return *this;
  }

  static const tagFISHPOS& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const tagFISHPOS* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(tagFISHPOS* other);

  // implements Message ----------------------------------------------

  tagFISHPOS* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const tagFISHPOS& from);
  void MergeFrom(const tagFISHPOS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.tagFISHPOS)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static tagFISHPOS* default_instance_;
};
// -------------------------------------------------------------------

class tagBulletInfo : public ::google::protobuf::MessageLite {
 public:
  tagBulletInfo();
  virtual ~tagBulletInfo();

  tagBulletInfo(const tagBulletInfo& from);

  inline tagBulletInfo& operator=(const tagBulletInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const tagBulletInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const tagBulletInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(tagBulletInfo* other);

  // implements Message ----------------------------------------------

  tagBulletInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const tagBulletInfo& from);
  void MergeFrom(const tagBulletInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uniqueID = 1;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIDFieldNumber = 1;
  inline ::google::protobuf::int32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::int32 value);

  // required int32 gunID = 2;
  inline bool has_gunid() const;
  inline void clear_gunid();
  static const int kGunIDFieldNumber = 2;
  inline ::google::protobuf::int32 gunid() const;
  inline void set_gunid(::google::protobuf::int32 value);

  // required int32 seat = 3;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 3;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required .game.fish3d.s2c.tagFISHPOS targetPos = 4;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 4;
  inline const ::game::fish3d::s2c::tagFISHPOS& targetpos() const;
  inline ::game::fish3d::s2c::tagFISHPOS* mutable_targetpos();
  inline ::game::fish3d::s2c::tagFISHPOS* release_targetpos();
  inline void set_allocated_targetpos(::game::fish3d::s2c::tagFISHPOS* targetpos);

  // required int64 shootTime = 5;
  inline bool has_shoottime() const;
  inline void clear_shoottime();
  static const int kShootTimeFieldNumber = 5;
  inline ::google::protobuf::int64 shoottime() const;
  inline void set_shoottime(::google::protobuf::int64 value);

  // required int32 costSilver = 6;
  inline bool has_costsilver() const;
  inline void clear_costsilver();
  static const int kCostSilverFieldNumber = 6;
  inline ::google::protobuf::int32 costsilver() const;
  inline void set_costsilver(::google::protobuf::int32 value);

  // required int32 fishUniqID = 7;
  inline bool has_fishuniqid() const;
  inline void clear_fishuniqid();
  static const int kFishUniqIDFieldNumber = 7;
  inline ::google::protobuf::int32 fishuniqid() const;
  inline void set_fishuniqid(::google::protobuf::int32 value);

  // required int32 isAimFormFish = 8;
  inline bool has_isaimformfish() const;
  inline void clear_isaimformfish();
  static const int kIsAimFormFishFieldNumber = 8;
  inline ::google::protobuf::int32 isaimformfish() const;
  inline void set_isaimformfish(::google::protobuf::int32 value);

  // required int32 fishIndex = 9;
  inline bool has_fishindex() const;
  inline void clear_fishindex();
  static const int kFishIndexFieldNumber = 9;
  inline ::google::protobuf::int32 fishindex() const;
  inline void set_fishindex(::google::protobuf::int32 value);

  // required int32 isWildBullet = 10;
  inline bool has_iswildbullet() const;
  inline void clear_iswildbullet();
  static const int kIsWildBulletFieldNumber = 10;
  inline ::google::protobuf::int32 iswildbullet() const;
  inline void set_iswildbullet(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.tagBulletInfo)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_gunid();
  inline void clear_has_gunid();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_targetpos();
  inline void clear_has_targetpos();
  inline void set_has_shoottime();
  inline void clear_has_shoottime();
  inline void set_has_costsilver();
  inline void clear_has_costsilver();
  inline void set_has_fishuniqid();
  inline void clear_has_fishuniqid();
  inline void set_has_isaimformfish();
  inline void clear_has_isaimformfish();
  inline void set_has_fishindex();
  inline void clear_has_fishindex();
  inline void set_has_iswildbullet();
  inline void clear_has_iswildbullet();

  ::google::protobuf::int32 uniqueid_;
  ::google::protobuf::int32 gunid_;
  ::game::fish3d::s2c::tagFISHPOS* targetpos_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 costsilver_;
  ::google::protobuf::int64 shoottime_;
  ::google::protobuf::int32 fishuniqid_;
  ::google::protobuf::int32 isaimformfish_;
  ::google::protobuf::int32 fishindex_;
  ::google::protobuf::int32 iswildbullet_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static tagBulletInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_FishpondBullet : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_FishpondBullet();
  virtual ~CMD_S2C_FishpondBullet();

  CMD_S2C_FishpondBullet(const CMD_S2C_FishpondBullet& from);

  inline CMD_S2C_FishpondBullet& operator=(const CMD_S2C_FishpondBullet& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_FishpondBullet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_FishpondBullet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_FishpondBullet* other);

  // implements Message ----------------------------------------------

  CMD_S2C_FishpondBullet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_FishpondBullet& from);
  void MergeFrom(const CMD_S2C_FishpondBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
  inline int bulletinfo_size() const;
  inline void clear_bulletinfo();
  static const int kBulletInfoFieldNumber = 1;
  inline const ::game::fish3d::s2c::tagBulletInfo& bulletinfo(int index) const;
  inline ::game::fish3d::s2c::tagBulletInfo* mutable_bulletinfo(int index);
  inline ::game::fish3d::s2c::tagBulletInfo* add_bulletinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagBulletInfo >&
      bulletinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagBulletInfo >*
      mutable_bulletinfo();

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_FishpondBullet)
 private:

  ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagBulletInfo > bulletinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_FishpondBullet* default_instance_;
};
// -------------------------------------------------------------------

class tagFreezeInfo : public ::google::protobuf::MessageLite {
 public:
  tagFreezeInfo();
  virtual ~tagFreezeInfo();

  tagFreezeInfo(const tagFreezeInfo& from);

  inline tagFreezeInfo& operator=(const tagFreezeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const tagFreezeInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const tagFreezeInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(tagFreezeInfo* other);

  // implements Message ----------------------------------------------

  tagFreezeInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const tagFreezeInfo& from);
  void MergeFrom(const tagFreezeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uniqId = 1;
  inline bool has_uniqid() const;
  inline void clear_uniqid();
  static const int kUniqIdFieldNumber = 1;
  inline ::google::protobuf::int32 uniqid() const;
  inline void set_uniqid(::google::protobuf::int32 value);

  // required int64 freezeBeginTime = 2;
  inline bool has_freezebegintime() const;
  inline void clear_freezebegintime();
  static const int kFreezeBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int64 freezebegintime() const;
  inline void set_freezebegintime(::google::protobuf::int64 value);

  // required int32 freezeContTime = 3;
  inline bool has_freezeconttime() const;
  inline void clear_freezeconttime();
  static const int kFreezeContTimeFieldNumber = 3;
  inline ::google::protobuf::int32 freezeconttime() const;
  inline void set_freezeconttime(::google::protobuf::int32 value);

  // required int32 totalFreezeTime = 4;
  inline bool has_totalfreezetime() const;
  inline void clear_totalfreezetime();
  static const int kTotalFreezeTimeFieldNumber = 4;
  inline ::google::protobuf::int32 totalfreezetime() const;
  inline void set_totalfreezetime(::google::protobuf::int32 value);

  // required int32 isFormFish = 5;
  inline bool has_isformfish() const;
  inline void clear_isformfish();
  static const int kIsFormFishFieldNumber = 5;
  inline ::google::protobuf::int32 isformfish() const;
  inline void set_isformfish(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.tagFreezeInfo)
 private:
  inline void set_has_uniqid();
  inline void clear_has_uniqid();
  inline void set_has_freezebegintime();
  inline void clear_has_freezebegintime();
  inline void set_has_freezeconttime();
  inline void clear_has_freezeconttime();
  inline void set_has_totalfreezetime();
  inline void clear_has_totalfreezetime();
  inline void set_has_isformfish();
  inline void clear_has_isformfish();

  ::google::protobuf::int64 freezebegintime_;
  ::google::protobuf::int32 uniqid_;
  ::google::protobuf::int32 freezeconttime_;
  ::google::protobuf::int32 totalfreezetime_;
  ::google::protobuf::int32 isformfish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static tagFreezeInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_FreezeFishInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_FreezeFishInfo();
  virtual ~CMD_S2C_FreezeFishInfo();

  CMD_S2C_FreezeFishInfo(const CMD_S2C_FreezeFishInfo& from);

  inline CMD_S2C_FreezeFishInfo& operator=(const CMD_S2C_FreezeFishInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_FreezeFishInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_FreezeFishInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_FreezeFishInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_FreezeFishInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_FreezeFishInfo& from);
  void MergeFrom(const CMD_S2C_FreezeFishInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated .game.fish3d.s2c.tagFreezeInfo freezeInfo = 2;
  inline int freezeinfo_size() const;
  inline void clear_freezeinfo();
  static const int kFreezeInfoFieldNumber = 2;
  inline const ::game::fish3d::s2c::tagFreezeInfo& freezeinfo(int index) const;
  inline ::game::fish3d::s2c::tagFreezeInfo* mutable_freezeinfo(int index);
  inline ::game::fish3d::s2c::tagFreezeInfo* add_freezeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFreezeInfo >&
      freezeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFreezeInfo >*
      mutable_freezeinfo();

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_FreezeFishInfo)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFreezeInfo > freezeinfo_;
  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_FreezeFishInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_NewFishData : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_NewFishData();
  virtual ~CMD_S2C_NewFishData();

  CMD_S2C_NewFishData(const CMD_S2C_NewFishData& from);

  inline CMD_S2C_NewFishData& operator=(const CMD_S2C_NewFishData& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_NewFishData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_NewFishData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_NewFishData* other);

  // implements Message ----------------------------------------------

  CMD_S2C_NewFishData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_NewFishData& from);
  void MergeFrom(const CMD_S2C_NewFishData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
  inline int fishinfo_size() const;
  inline void clear_fishinfo();
  static const int kFishInfoFieldNumber = 1;
  inline const ::game::fish3d::s2c::tagFishInfo& fishinfo(int index) const;
  inline ::game::fish3d::s2c::tagFishInfo* mutable_fishinfo(int index);
  inline ::game::fish3d::s2c::tagFishInfo* add_fishinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo >&
      fishinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo >*
      mutable_fishinfo();

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_NewFishData)
 private:

  ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo > fishinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_NewFishData* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_SeatUserData : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_SeatUserData();
  virtual ~CMD_S2C_SeatUserData();

  CMD_S2C_SeatUserData(const CMD_S2C_SeatUserData& from);

  inline CMD_S2C_SeatUserData& operator=(const CMD_S2C_SeatUserData& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_SeatUserData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_SeatUserData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_SeatUserData* other);

  // implements Message ----------------------------------------------

  CMD_S2C_SeatUserData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_SeatUserData& from);
  void MergeFrom(const CMD_S2C_SeatUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .game.fish3d.s2c.tagSeatUserInfo seatInfo = 1;
  inline bool has_seatinfo() const;
  inline void clear_seatinfo();
  static const int kSeatInfoFieldNumber = 1;
  inline const ::game::fish3d::s2c::tagSeatUserInfo& seatinfo() const;
  inline ::game::fish3d::s2c::tagSeatUserInfo* mutable_seatinfo();
  inline ::game::fish3d::s2c::tagSeatUserInfo* release_seatinfo();
  inline void set_allocated_seatinfo(::game::fish3d::s2c::tagSeatUserInfo* seatinfo);

  // required string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_SeatUserData)
 private:
  inline void set_has_seatinfo();
  inline void clear_has_seatinfo();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::game::fish3d::s2c::tagSeatUserInfo* seatinfo_;
  ::std::string* nickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_SeatUserData* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_GlobalInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_GlobalInfo();
  virtual ~CMD_S2C_GlobalInfo();

  CMD_S2C_GlobalInfo(const CMD_S2C_GlobalInfo& from);

  inline CMD_S2C_GlobalInfo& operator=(const CMD_S2C_GlobalInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_GlobalInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_GlobalInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_GlobalInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_GlobalInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_GlobalInfo& from);
  void MergeFrom(const CMD_S2C_GlobalInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 minCannonMulti = 1;
  inline bool has_mincannonmulti() const;
  inline void clear_mincannonmulti();
  static const int kMinCannonMultiFieldNumber = 1;
  inline ::google::protobuf::int32 mincannonmulti() const;
  inline void set_mincannonmulti(::google::protobuf::int32 value);

  // required int32 maxCannonMulti = 2;
  inline bool has_maxcannonmulti() const;
  inline void clear_maxcannonmulti();
  static const int kMaxCannonMultiFieldNumber = 2;
  inline ::google::protobuf::int32 maxcannonmulti() const;
  inline void set_maxcannonmulti(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_GlobalInfo)
 private:
  inline void set_has_mincannonmulti();
  inline void clear_has_mincannonmulti();
  inline void set_has_maxcannonmulti();
  inline void clear_has_maxcannonmulti();

  ::google::protobuf::int32 mincannonmulti_;
  ::google::protobuf::int32 maxcannonmulti_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_GlobalInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_BulletInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_BulletInfo();
  virtual ~CMD_S2C_BulletInfo();

  CMD_S2C_BulletInfo(const CMD_S2C_BulletInfo& from);

  inline CMD_S2C_BulletInfo& operator=(const CMD_S2C_BulletInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_BulletInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_BulletInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_BulletInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_BulletInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_BulletInfo& from);
  void MergeFrom(const CMD_S2C_BulletInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
  inline bool has_bulletinfo() const;
  inline void clear_bulletinfo();
  static const int kBulletInfoFieldNumber = 1;
  inline const ::game::fish3d::s2c::tagBulletInfo& bulletinfo() const;
  inline ::game::fish3d::s2c::tagBulletInfo* mutable_bulletinfo();
  inline ::game::fish3d::s2c::tagBulletInfo* release_bulletinfo();
  inline void set_allocated_bulletinfo(::game::fish3d::s2c::tagBulletInfo* bulletinfo);

  // required int32 clientUniqId = 2;
  inline bool has_clientuniqid() const;
  inline void clear_clientuniqid();
  static const int kClientUniqIdFieldNumber = 2;
  inline ::google::protobuf::int32 clientuniqid() const;
  inline void set_clientuniqid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_BulletInfo)
 private:
  inline void set_has_bulletinfo();
  inline void clear_has_bulletinfo();
  inline void set_has_clientuniqid();
  inline void clear_has_clientuniqid();

  ::game::fish3d::s2c::tagBulletInfo* bulletinfo_;
  ::google::protobuf::int32 clientuniqid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_BulletInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_HitFishInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_HitFishInfo();
  virtual ~CMD_S2C_HitFishInfo();

  CMD_S2C_HitFishInfo(const CMD_S2C_HitFishInfo& from);

  inline CMD_S2C_HitFishInfo& operator=(const CMD_S2C_HitFishInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_HitFishInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_HitFishInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_HitFishInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_HitFishInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_HitFishInfo& from);
  void MergeFrom(const CMD_S2C_HitFishInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bulletUniqId = 1;
  inline bool has_bulletuniqid() const;
  inline void clear_bulletuniqid();
  static const int kBulletUniqIdFieldNumber = 1;
  inline ::google::protobuf::int32 bulletuniqid() const;
  inline void set_bulletuniqid(::google::protobuf::int32 value);

  // required int32 fishUniqId = 2;
  inline bool has_fishuniqid() const;
  inline void clear_fishuniqid();
  static const int kFishUniqIdFieldNumber = 2;
  inline ::google::protobuf::int32 fishuniqid() const;
  inline void set_fishuniqid(::google::protobuf::int32 value);

  // required int32 seat = 3;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 3;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required int32 rewardSilver = 4;
  inline bool has_rewardsilver() const;
  inline void clear_rewardsilver();
  static const int kRewardSilverFieldNumber = 4;
  inline ::google::protobuf::int32 rewardsilver() const;
  inline void set_rewardsilver(::google::protobuf::int32 value);

  // required int32 isForm = 5;
  inline bool has_isform() const;
  inline void clear_isform();
  static const int kIsFormFieldNumber = 5;
  inline ::google::protobuf::int32 isform() const;
  inline void set_isform(::google::protobuf::int32 value);

  // required int32 fishIndex = 6;
  inline bool has_fishindex() const;
  inline void clear_fishindex();
  static const int kFishIndexFieldNumber = 6;
  inline ::google::protobuf::int32 fishindex() const;
  inline void set_fishindex(::google::protobuf::int32 value);

  // required int32 bulletLiveTime = 7;
  inline bool has_bulletlivetime() const;
  inline void clear_bulletlivetime();
  static const int kBulletLiveTimeFieldNumber = 7;
  inline ::google::protobuf::int32 bulletlivetime() const;
  inline void set_bulletlivetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_HitFishInfo)
 private:
  inline void set_has_bulletuniqid();
  inline void clear_has_bulletuniqid();
  inline void set_has_fishuniqid();
  inline void clear_has_fishuniqid();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_rewardsilver();
  inline void clear_has_rewardsilver();
  inline void set_has_isform();
  inline void clear_has_isform();
  inline void set_has_fishindex();
  inline void clear_has_fishindex();
  inline void set_has_bulletlivetime();
  inline void clear_has_bulletlivetime();

  ::google::protobuf::int32 bulletuniqid_;
  ::google::protobuf::int32 fishuniqid_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 rewardsilver_;
  ::google::protobuf::int32 isform_;
  ::google::protobuf::int32 fishindex_;
  ::google::protobuf::int32 bulletlivetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_HitFishInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_SkillHitFishInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_SkillHitFishInfo();
  virtual ~CMD_S2C_SkillHitFishInfo();

  CMD_S2C_SkillHitFishInfo(const CMD_S2C_SkillHitFishInfo& from);

  inline CMD_S2C_SkillHitFishInfo& operator=(const CMD_S2C_SkillHitFishInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_SkillHitFishInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_SkillHitFishInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_SkillHitFishInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_SkillHitFishInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_SkillHitFishInfo& from);
  void MergeFrom(const CMD_S2C_SkillHitFishInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 skillId = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // required int32 fishUniqId = 2;
  inline bool has_fishuniqid() const;
  inline void clear_fishuniqid();
  static const int kFishUniqIdFieldNumber = 2;
  inline ::google::protobuf::int32 fishuniqid() const;
  inline void set_fishuniqid(::google::protobuf::int32 value);

  // required int32 seat = 3;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 3;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required int32 rewardSilver = 4;
  inline bool has_rewardsilver() const;
  inline void clear_rewardsilver();
  static const int kRewardSilverFieldNumber = 4;
  inline ::google::protobuf::int32 rewardsilver() const;
  inline void set_rewardsilver(::google::protobuf::int32 value);

  // required int32 isForm = 5;
  inline bool has_isform() const;
  inline void clear_isform();
  static const int kIsFormFieldNumber = 5;
  inline ::google::protobuf::int32 isform() const;
  inline void set_isform(::google::protobuf::int32 value);

  // required int32 fishIndex = 6;
  inline bool has_fishindex() const;
  inline void clear_fishindex();
  static const int kFishIndexFieldNumber = 6;
  inline ::google::protobuf::int32 fishindex() const;
  inline void set_fishindex(::google::protobuf::int32 value);

  // required int32 excludeFish = 7;
  inline bool has_excludefish() const;
  inline void clear_excludefish();
  static const int kExcludeFishFieldNumber = 7;
  inline ::google::protobuf::int32 excludefish() const;
  inline void set_excludefish(::google::protobuf::int32 value);

  // required int32 excludeFishIndex = 8;
  inline bool has_excludefishindex() const;
  inline void clear_excludefishindex();
  static const int kExcludeFishIndexFieldNumber = 8;
  inline ::google::protobuf::int32 excludefishindex() const;
  inline void set_excludefishindex(::google::protobuf::int32 value);

  // required int32 delay = 9;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 9;
  inline ::google::protobuf::int32 delay() const;
  inline void set_delay(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_SkillHitFishInfo)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_fishuniqid();
  inline void clear_has_fishuniqid();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_rewardsilver();
  inline void clear_has_rewardsilver();
  inline void set_has_isform();
  inline void clear_has_isform();
  inline void set_has_fishindex();
  inline void clear_has_fishindex();
  inline void set_has_excludefish();
  inline void clear_has_excludefish();
  inline void set_has_excludefishindex();
  inline void clear_has_excludefishindex();
  inline void set_has_delay();
  inline void clear_has_delay();

  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 fishuniqid_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 rewardsilver_;
  ::google::protobuf::int32 isform_;
  ::google::protobuf::int32 fishindex_;
  ::google::protobuf::int32 excludefish_;
  ::google::protobuf::int32 excludefishindex_;
  ::google::protobuf::int32 delay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_SkillHitFishInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_ErrorInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_ErrorInfo();
  virtual ~CMD_S2C_ErrorInfo();

  CMD_S2C_ErrorInfo(const CMD_S2C_ErrorInfo& from);

  inline CMD_S2C_ErrorInfo& operator=(const CMD_S2C_ErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_ErrorInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_ErrorInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_ErrorInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_ErrorInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_ErrorInfo& from);
  void MergeFrom(const CMD_S2C_ErrorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 errorNo = 1;
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 1;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_ErrorInfo)
 private:
  inline void set_has_errorno();
  inline void clear_has_errorno();

  ::google::protobuf::int32 errorno_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_ErrorInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_ItemEffect : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_ItemEffect();
  virtual ~CMD_S2C_ItemEffect();

  CMD_S2C_ItemEffect(const CMD_S2C_ItemEffect& from);

  inline CMD_S2C_ItemEffect& operator=(const CMD_S2C_ItemEffect& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_ItemEffect& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_ItemEffect* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_ItemEffect* other);

  // implements Message ----------------------------------------------

  CMD_S2C_ItemEffect* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_ItemEffect& from);
  void MergeFrom(const CMD_S2C_ItemEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 effectType = 2;
  inline bool has_effecttype() const;
  inline void clear_effecttype();
  static const int kEffectTypeFieldNumber = 2;
  inline ::google::protobuf::int32 effecttype() const;
  inline void set_effecttype(::google::protobuf::int32 value);

  // required int32 seat = 3;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 3;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required int64 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_ItemEffect)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_effecttype();
  inline void clear_has_effecttype();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 effecttype_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_ItemEffect* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_AimFishInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_AimFishInfo();
  virtual ~CMD_S2C_AimFishInfo();

  CMD_S2C_AimFishInfo(const CMD_S2C_AimFishInfo& from);

  inline CMD_S2C_AimFishInfo& operator=(const CMD_S2C_AimFishInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_AimFishInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_AimFishInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_AimFishInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_AimFishInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_AimFishInfo& from);
  void MergeFrom(const CMD_S2C_AimFishInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required int32 fishUniqId = 2;
  inline bool has_fishuniqid() const;
  inline void clear_fishuniqid();
  static const int kFishUniqIdFieldNumber = 2;
  inline ::google::protobuf::int32 fishuniqid() const;
  inline void set_fishuniqid(::google::protobuf::int32 value);

  // required int32 isFormFish = 3;
  inline bool has_isformfish() const;
  inline void clear_isformfish();
  static const int kIsFormFishFieldNumber = 3;
  inline ::google::protobuf::int32 isformfish() const;
  inline void set_isformfish(::google::protobuf::int32 value);

  // required int32 fishIndex = 4;
  inline bool has_fishindex() const;
  inline void clear_fishindex();
  static const int kFishIndexFieldNumber = 4;
  inline ::google::protobuf::int32 fishindex() const;
  inline void set_fishindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_AimFishInfo)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_fishuniqid();
  inline void clear_has_fishuniqid();
  inline void set_has_isformfish();
  inline void clear_has_isformfish();
  inline void set_has_fishindex();
  inline void clear_has_fishindex();

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 fishuniqid_;
  ::google::protobuf::int32 isformfish_;
  ::google::protobuf::int32 fishindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_AimFishInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_AddSilverInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_AddSilverInfo();
  virtual ~CMD_S2C_AddSilverInfo();

  CMD_S2C_AddSilverInfo(const CMD_S2C_AddSilverInfo& from);

  inline CMD_S2C_AddSilverInfo& operator=(const CMD_S2C_AddSilverInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_AddSilverInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_AddSilverInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_AddSilverInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_AddSilverInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_AddSilverInfo& from);
  void MergeFrom(const CMD_S2C_AddSilverInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required int64 addSilver = 2;
  inline bool has_addsilver() const;
  inline void clear_addsilver();
  static const int kAddSilverFieldNumber = 2;
  inline ::google::protobuf::int64 addsilver() const;
  inline void set_addsilver(::google::protobuf::int64 value);

  // required int64 addToken = 3;
  inline bool has_addtoken() const;
  inline void clear_addtoken();
  static const int kAddTokenFieldNumber = 3;
  inline ::google::protobuf::int64 addtoken() const;
  inline void set_addtoken(::google::protobuf::int64 value);

  // required int32 isManual = 4;
  inline bool has_ismanual() const;
  inline void clear_ismanual();
  static const int kIsManualFieldNumber = 4;
  inline ::google::protobuf::int32 ismanual() const;
  inline void set_ismanual(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_AddSilverInfo)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_addsilver();
  inline void clear_has_addsilver();
  inline void set_has_addtoken();
  inline void clear_has_addtoken();
  inline void set_has_ismanual();
  inline void clear_has_ismanual();

  ::google::protobuf::int64 addsilver_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 ismanual_;
  ::google::protobuf::int64 addtoken_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_AddSilverInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_BoomFishInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_BoomFishInfo();
  virtual ~CMD_S2C_BoomFishInfo();

  CMD_S2C_BoomFishInfo(const CMD_S2C_BoomFishInfo& from);

  inline CMD_S2C_BoomFishInfo& operator=(const CMD_S2C_BoomFishInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_BoomFishInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_BoomFishInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_BoomFishInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_BoomFishInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_BoomFishInfo& from);
  void MergeFrom(const CMD_S2C_BoomFishInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 fishUniqIDs = 1;
  inline int fishuniqids_size() const;
  inline void clear_fishuniqids();
  static const int kFishUniqIDsFieldNumber = 1;
  inline ::google::protobuf::int32 fishuniqids(int index) const;
  inline void set_fishuniqids(int index, ::google::protobuf::int32 value);
  inline void add_fishuniqids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fishuniqids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fishuniqids();

  // repeated int32 smallFishIndex = 2;
  inline int smallfishindex_size() const;
  inline void clear_smallfishindex();
  static const int kSmallFishIndexFieldNumber = 2;
  inline ::google::protobuf::int32 smallfishindex(int index) const;
  inline void set_smallfishindex(int index, ::google::protobuf::int32 value);
  inline void add_smallfishindex(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      smallfishindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_smallfishindex();

  // repeated int32 formUniqIDs = 3;
  inline int formuniqids_size() const;
  inline void clear_formuniqids();
  static const int kFormUniqIDsFieldNumber = 3;
  inline ::google::protobuf::int32 formuniqids(int index) const;
  inline void set_formuniqids(int index, ::google::protobuf::int32 value);
  inline void add_formuniqids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      formuniqids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_formuniqids();

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_BoomFishInfo)
 private:

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fishuniqids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > smallfishindex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > formuniqids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_BoomFishInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_ServerVersion : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_ServerVersion();
  virtual ~CMD_S2C_ServerVersion();

  CMD_S2C_ServerVersion(const CMD_S2C_ServerVersion& from);

  inline CMD_S2C_ServerVersion& operator=(const CMD_S2C_ServerVersion& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_ServerVersion& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_ServerVersion* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_ServerVersion* other);

  // implements Message ----------------------------------------------

  CMD_S2C_ServerVersion* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_ServerVersion& from);
  void MergeFrom(const CMD_S2C_ServerVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 serverVer = 1;
  inline bool has_serverver() const;
  inline void clear_serverver();
  static const int kServerVerFieldNumber = 1;
  inline ::google::protobuf::int32 serverver() const;
  inline void set_serverver(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_ServerVersion)
 private:
  inline void set_has_serverver();
  inline void clear_has_serverver();

  ::google::protobuf::int32 serverver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_ServerVersion* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_AddPhoneTicketInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_AddPhoneTicketInfo();
  virtual ~CMD_S2C_AddPhoneTicketInfo();

  CMD_S2C_AddPhoneTicketInfo(const CMD_S2C_AddPhoneTicketInfo& from);

  inline CMD_S2C_AddPhoneTicketInfo& operator=(const CMD_S2C_AddPhoneTicketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_AddPhoneTicketInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_AddPhoneTicketInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_AddPhoneTicketInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_AddPhoneTicketInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_AddPhoneTicketInfo& from);
  void MergeFrom(const CMD_S2C_AddPhoneTicketInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required int32 fishUniqId = 2;
  inline bool has_fishuniqid() const;
  inline void clear_fishuniqid();
  static const int kFishUniqIdFieldNumber = 2;
  inline ::google::protobuf::int32 fishuniqid() const;
  inline void set_fishuniqid(::google::protobuf::int32 value);

  // required int32 isFormFish = 3;
  inline bool has_isformfish() const;
  inline void clear_isformfish();
  static const int kIsFormFishFieldNumber = 3;
  inline ::google::protobuf::int32 isformfish() const;
  inline void set_isformfish(::google::protobuf::int32 value);

  // required int32 addNum = 4;
  inline bool has_addnum() const;
  inline void clear_addnum();
  static const int kAddNumFieldNumber = 4;
  inline ::google::protobuf::int32 addnum() const;
  inline void set_addnum(::google::protobuf::int32 value);

  // required int32 fishIndex = 5;
  inline bool has_fishindex() const;
  inline void clear_fishindex();
  static const int kFishIndexFieldNumber = 5;
  inline ::google::protobuf::int32 fishindex() const;
  inline void set_fishindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_AddPhoneTicketInfo)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_fishuniqid();
  inline void clear_has_fishuniqid();
  inline void set_has_isformfish();
  inline void clear_has_isformfish();
  inline void set_has_addnum();
  inline void clear_has_addnum();
  inline void set_has_fishindex();
  inline void clear_has_fishindex();

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 fishuniqid_;
  ::google::protobuf::int32 isformfish_;
  ::google::protobuf::int32 addnum_;
  ::google::protobuf::int32 fishindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_AddPhoneTicketInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_SpecialBulletInfo : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_SpecialBulletInfo();
  virtual ~CMD_S2C_SpecialBulletInfo();

  CMD_S2C_SpecialBulletInfo(const CMD_S2C_SpecialBulletInfo& from);

  inline CMD_S2C_SpecialBulletInfo& operator=(const CMD_S2C_SpecialBulletInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_SpecialBulletInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_SpecialBulletInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_SpecialBulletInfo* other);

  // implements Message ----------------------------------------------

  CMD_S2C_SpecialBulletInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_SpecialBulletInfo& from);
  void MergeFrom(const CMD_S2C_SpecialBulletInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fishNum = 1;
  inline bool has_fishnum() const;
  inline void clear_fishnum();
  static const int kFishNumFieldNumber = 1;
  inline ::google::protobuf::int32 fishnum() const;
  inline void set_fishnum(::google::protobuf::int32 value);

  // required int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required int32 returnSilver = 3;
  inline bool has_returnsilver() const;
  inline void clear_returnsilver();
  static const int kReturnSilverFieldNumber = 3;
  inline ::google::protobuf::int32 returnsilver() const;
  inline void set_returnsilver(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_SpecialBulletInfo)
 private:
  inline void set_has_fishnum();
  inline void clear_has_fishnum();
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_returnsilver();
  inline void clear_has_returnsilver();

  ::google::protobuf::int32 fishnum_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 returnsilver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_SpecialBulletInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_Reward : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_Reward();
  virtual ~CMD_S2C_Reward();

  CMD_S2C_Reward(const CMD_S2C_Reward& from);

  inline CMD_S2C_Reward& operator=(const CMD_S2C_Reward& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_Reward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_Reward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_Reward* other);

  // implements Message ----------------------------------------------

  CMD_S2C_Reward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_Reward& from);
  void MergeFrom(const CMD_S2C_Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required int64 rewardSilver = 2;
  inline bool has_rewardsilver() const;
  inline void clear_rewardsilver();
  static const int kRewardSilverFieldNumber = 2;
  inline ::google::protobuf::int64 rewardsilver() const;
  inline void set_rewardsilver(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_Reward)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_rewardsilver();
  inline void clear_has_rewardsilver();

  ::google::protobuf::int64 rewardsilver_;
  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_Reward* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_Aim : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_Aim();
  virtual ~CMD_S2C_Aim();

  CMD_S2C_Aim(const CMD_S2C_Aim& from);

  inline CMD_S2C_Aim& operator=(const CMD_S2C_Aim& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_Aim& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_Aim* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_Aim* other);

  // implements Message ----------------------------------------------

  CMD_S2C_Aim* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_Aim& from);
  void MergeFrom(const CMD_S2C_Aim& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 isAim = 1;
  inline bool has_isaim() const;
  inline void clear_isaim();
  static const int kIsAimFieldNumber = 1;
  inline ::google::protobuf::int32 isaim() const;
  inline void set_isaim(::google::protobuf::int32 value);

  // required int32 seatId = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_Aim)
 private:
  inline void set_has_isaim();
  inline void clear_has_isaim();
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::int32 isaim_;
  ::google::protobuf::int32 seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_Aim* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_OctoposMultiple : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_OctoposMultiple();
  virtual ~CMD_S2C_OctoposMultiple();

  CMD_S2C_OctoposMultiple(const CMD_S2C_OctoposMultiple& from);

  inline CMD_S2C_OctoposMultiple& operator=(const CMD_S2C_OctoposMultiple& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_OctoposMultiple& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_OctoposMultiple* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_OctoposMultiple* other);

  // implements Message ----------------------------------------------

  CMD_S2C_OctoposMultiple* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_OctoposMultiple& from);
  void MergeFrom(const CMD_S2C_OctoposMultiple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 octoposMultiple = 1;
  inline bool has_octoposmultiple() const;
  inline void clear_octoposmultiple();
  static const int kOctoposMultipleFieldNumber = 1;
  inline ::google::protobuf::int32 octoposmultiple() const;
  inline void set_octoposmultiple(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_OctoposMultiple)
 private:
  inline void set_has_octoposmultiple();
  inline void clear_has_octoposmultiple();

  ::google::protobuf::int32 octoposmultiple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_OctoposMultiple* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_TriggerFireProgress : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_TriggerFireProgress();
  virtual ~CMD_S2C_TriggerFireProgress();

  CMD_S2C_TriggerFireProgress(const CMD_S2C_TriggerFireProgress& from);

  inline CMD_S2C_TriggerFireProgress& operator=(const CMD_S2C_TriggerFireProgress& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_TriggerFireProgress& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_TriggerFireProgress* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_TriggerFireProgress* other);

  // implements Message ----------------------------------------------

  CMD_S2C_TriggerFireProgress* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_TriggerFireProgress& from);
  void MergeFrom(const CMD_S2C_TriggerFireProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // required float progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline float progress() const;
  inline void set_progress(float value);

  // @@protoc_insertion_point(class_scope:game.fish3d.s2c.CMD_S2C_TriggerFireProgress)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::int32 seat_;
  float progress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_TriggerFireProgress* default_instance_;
};
// ===================================================================


// ===================================================================

// CMD_S2C_AndroidUpdate

// required int64 serverTime = 1;
inline bool CMD_S2C_AndroidUpdate::has_servertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_AndroidUpdate::set_has_servertime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_AndroidUpdate::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_AndroidUpdate::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::int64 CMD_S2C_AndroidUpdate::servertime() const {
  return servertime_;
}
inline void CMD_S2C_AndroidUpdate::set_servertime(::google::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_SyncServerTime

// required int64 serverTime = 1;
inline bool CMD_S2C_SyncServerTime::has_servertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_SyncServerTime::set_has_servertime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_SyncServerTime::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_SyncServerTime::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::int64 CMD_S2C_SyncServerTime::servertime() const {
  return servertime_;
}
inline void CMD_S2C_SyncServerTime::set_servertime(::google::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_FormTimeInfo

// required int32 isBegin = 1;
inline bool CMD_S2C_FormTimeInfo::has_isbegin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_FormTimeInfo::set_has_isbegin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_FormTimeInfo::clear_has_isbegin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_FormTimeInfo::clear_isbegin() {
  isbegin_ = 0;
  clear_has_isbegin();
}
inline ::google::protobuf::int32 CMD_S2C_FormTimeInfo::isbegin() const {
  return isbegin_;
}
inline void CMD_S2C_FormTimeInfo::set_isbegin(::google::protobuf::int32 value) {
  set_has_isbegin();
  isbegin_ = value;
}

// required int64 time = 2;
inline bool CMD_S2C_FormTimeInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_FormTimeInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_FormTimeInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_FormTimeInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 CMD_S2C_FormTimeInfo::time() const {
  return time_;
}
inline void CMD_S2C_FormTimeInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// tagFormFishOutInfo

// required int32 outId = 1;
inline bool tagFormFishOutInfo::has_outid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagFormFishOutInfo::set_has_outid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagFormFishOutInfo::clear_has_outid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagFormFishOutInfo::clear_outid() {
  outid_ = 0;
  clear_has_outid();
}
inline ::google::protobuf::int32 tagFormFishOutInfo::outid() const {
  return outid_;
}
inline void tagFormFishOutInfo::set_outid(::google::protobuf::int32 value) {
  set_has_outid();
  outid_ = value;
}

// required int32 fishId = 2;
inline bool tagFormFishOutInfo::has_fishid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagFormFishOutInfo::set_has_fishid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagFormFishOutInfo::clear_has_fishid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagFormFishOutInfo::clear_fishid() {
  fishid_ = 0;
  clear_has_fishid();
}
inline ::google::protobuf::int32 tagFormFishOutInfo::fishid() const {
  return fishid_;
}
inline void tagFormFishOutInfo::set_fishid(::google::protobuf::int32 value) {
  set_has_fishid();
  fishid_ = value;
}

// required int32 fishSeqId = 3;
inline bool tagFormFishOutInfo::has_fishseqid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagFormFishOutInfo::set_has_fishseqid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagFormFishOutInfo::clear_has_fishseqid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagFormFishOutInfo::clear_fishseqid() {
  fishseqid_ = 0;
  clear_has_fishseqid();
}
inline ::google::protobuf::int32 tagFormFishOutInfo::fishseqid() const {
  return fishseqid_;
}
inline void tagFormFishOutInfo::set_fishseqid(::google::protobuf::int32 value) {
  set_has_fishseqid();
  fishseqid_ = value;
}

// required int32 traceId = 4;
inline bool tagFormFishOutInfo::has_traceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagFormFishOutInfo::set_has_traceid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagFormFishOutInfo::clear_has_traceid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagFormFishOutInfo::clear_traceid() {
  traceid_ = 0;
  clear_has_traceid();
}
inline ::google::protobuf::int32 tagFormFishOutInfo::traceid() const {
  return traceid_;
}
inline void tagFormFishOutInfo::set_traceid(::google::protobuf::int32 value) {
  set_has_traceid();
  traceid_ = value;
}

// required int64 beginTime = 5;
inline bool tagFormFishOutInfo::has_begintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagFormFishOutInfo::set_has_begintime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagFormFishOutInfo::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagFormFishOutInfo::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 tagFormFishOutInfo::begintime() const {
  return begintime_;
}
inline void tagFormFishOutInfo::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// required int32 remainNum = 6;
inline bool tagFormFishOutInfo::has_remainnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagFormFishOutInfo::set_has_remainnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagFormFishOutInfo::clear_has_remainnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagFormFishOutInfo::clear_remainnum() {
  remainnum_ = 0;
  clear_has_remainnum();
}
inline ::google::protobuf::int32 tagFormFishOutInfo::remainnum() const {
  return remainnum_;
}
inline void tagFormFishOutInfo::set_remainnum(::google::protobuf::int32 value) {
  set_has_remainnum();
  remainnum_ = value;
}

// required int32 interval = 7;
inline bool tagFormFishOutInfo::has_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tagFormFishOutInfo::set_has_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tagFormFishOutInfo::clear_has_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tagFormFishOutInfo::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 tagFormFishOutInfo::interval() const {
  return interval_;
}
inline void tagFormFishOutInfo::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
}

// repeated int64 aliveFish = 8;
inline int tagFormFishOutInfo::alivefish_size() const {
  return alivefish_.size();
}
inline void tagFormFishOutInfo::clear_alivefish() {
  alivefish_.Clear();
}
inline ::google::protobuf::int64 tagFormFishOutInfo::alivefish(int index) const {
  return alivefish_.Get(index);
}
inline void tagFormFishOutInfo::set_alivefish(int index, ::google::protobuf::int64 value) {
  alivefish_.Set(index, value);
}
inline void tagFormFishOutInfo::add_alivefish(::google::protobuf::int64 value) {
  alivefish_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
tagFormFishOutInfo::alivefish() const {
  return alivefish_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
tagFormFishOutInfo::mutable_alivefish() {
  return &alivefish_;
}

// -------------------------------------------------------------------

// CMD_S2C_FishFormInfo

// repeated .game.fish3d.s2c.tagFormFishOutInfo outInfo = 1;
inline int CMD_S2C_FishFormInfo::outinfo_size() const {
  return outinfo_.size();
}
inline void CMD_S2C_FishFormInfo::clear_outinfo() {
  outinfo_.Clear();
}
inline const ::game::fish3d::s2c::tagFormFishOutInfo& CMD_S2C_FishFormInfo::outinfo(int index) const {
  return outinfo_.Get(index);
}
inline ::game::fish3d::s2c::tagFormFishOutInfo* CMD_S2C_FishFormInfo::mutable_outinfo(int index) {
  return outinfo_.Mutable(index);
}
inline ::game::fish3d::s2c::tagFormFishOutInfo* CMD_S2C_FishFormInfo::add_outinfo() {
  return outinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFormFishOutInfo >&
CMD_S2C_FishFormInfo::outinfo() const {
  return outinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFormFishOutInfo >*
CMD_S2C_FishFormInfo::mutable_outinfo() {
  return &outinfo_;
}

// -------------------------------------------------------------------

// tagSeatUserInfo

// required int32 hasPlayer = 1;
inline bool tagSeatUserInfo::has_hasplayer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagSeatUserInfo::set_has_hasplayer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagSeatUserInfo::clear_has_hasplayer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagSeatUserInfo::clear_hasplayer() {
  hasplayer_ = 0;
  clear_has_hasplayer();
}
inline ::google::protobuf::int32 tagSeatUserInfo::hasplayer() const {
  return hasplayer_;
}
inline void tagSeatUserInfo::set_hasplayer(::google::protobuf::int32 value) {
  set_has_hasplayer();
  hasplayer_ = value;
}

// required int32 seat = 2;
inline bool tagSeatUserInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagSeatUserInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagSeatUserInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagSeatUserInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 tagSeatUserInfo::seat() const {
  return seat_;
}
inline void tagSeatUserInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int32 gunID = 3;
inline bool tagSeatUserInfo::has_gunid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagSeatUserInfo::set_has_gunid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagSeatUserInfo::clear_has_gunid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagSeatUserInfo::clear_gunid() {
  gunid_ = 0;
  clear_has_gunid();
}
inline ::google::protobuf::int32 tagSeatUserInfo::gunid() const {
  return gunid_;
}
inline void tagSeatUserInfo::set_gunid(::google::protobuf::int32 value) {
  set_has_gunid();
  gunid_ = value;
}

// required int32 gunType = 4;
inline bool tagSeatUserInfo::has_guntype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagSeatUserInfo::set_has_guntype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagSeatUserInfo::clear_has_guntype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagSeatUserInfo::clear_guntype() {
  guntype_ = 0;
  clear_has_guntype();
}
inline ::google::protobuf::int32 tagSeatUserInfo::guntype() const {
  return guntype_;
}
inline void tagSeatUserInfo::set_guntype(::google::protobuf::int32 value) {
  set_has_guntype();
  guntype_ = value;
}

// required int64 silver = 5;
inline bool tagSeatUserInfo::has_silver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagSeatUserInfo::set_has_silver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagSeatUserInfo::clear_has_silver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagSeatUserInfo::clear_silver() {
  silver_ = GOOGLE_LONGLONG(0);
  clear_has_silver();
}
inline ::google::protobuf::int64 tagSeatUserInfo::silver() const {
  return silver_;
}
inline void tagSeatUserInfo::set_silver(::google::protobuf::int64 value) {
  set_has_silver();
  silver_ = value;
}

// required int64 totalSilver = 6;
inline bool tagSeatUserInfo::has_totalsilver() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagSeatUserInfo::set_has_totalsilver() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagSeatUserInfo::clear_has_totalsilver() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagSeatUserInfo::clear_totalsilver() {
  totalsilver_ = GOOGLE_LONGLONG(0);
  clear_has_totalsilver();
}
inline ::google::protobuf::int64 tagSeatUserInfo::totalsilver() const {
  return totalsilver_;
}
inline void tagSeatUserInfo::set_totalsilver(::google::protobuf::int64 value) {
  set_has_totalsilver();
  totalsilver_ = value;
}

// required int64 bullets = 7;
inline bool tagSeatUserInfo::has_bullets() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tagSeatUserInfo::set_has_bullets() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tagSeatUserInfo::clear_has_bullets() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tagSeatUserInfo::clear_bullets() {
  bullets_ = GOOGLE_LONGLONG(0);
  clear_has_bullets();
}
inline ::google::protobuf::int64 tagSeatUserInfo::bullets() const {
  return bullets_;
}
inline void tagSeatUserInfo::set_bullets(::google::protobuf::int64 value) {
  set_has_bullets();
  bullets_ = value;
}

// required int32 numId = 8;
inline bool tagSeatUserInfo::has_numid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tagSeatUserInfo::set_has_numid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tagSeatUserInfo::clear_has_numid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tagSeatUserInfo::clear_numid() {
  numid_ = 0;
  clear_has_numid();
}
inline ::google::protobuf::int32 tagSeatUserInfo::numid() const {
  return numid_;
}
inline void tagSeatUserInfo::set_numid(::google::protobuf::int32 value) {
  set_has_numid();
  numid_ = value;
}

// required int32 isRobot = 9;
inline bool tagSeatUserInfo::has_isrobot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tagSeatUserInfo::set_has_isrobot() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tagSeatUserInfo::clear_has_isrobot() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tagSeatUserInfo::clear_isrobot() {
  isrobot_ = 0;
  clear_has_isrobot();
}
inline ::google::protobuf::int32 tagSeatUserInfo::isrobot() const {
  return isrobot_;
}
inline void tagSeatUserInfo::set_isrobot(::google::protobuf::int32 value) {
  set_has_isrobot();
  isrobot_ = value;
}

// required int32 isOutboard = 10;
inline bool tagSeatUserInfo::has_isoutboard() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tagSeatUserInfo::set_has_isoutboard() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tagSeatUserInfo::clear_has_isoutboard() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tagSeatUserInfo::clear_isoutboard() {
  isoutboard_ = 0;
  clear_has_isoutboard();
}
inline ::google::protobuf::int32 tagSeatUserInfo::isoutboard() const {
  return isoutboard_;
}
inline void tagSeatUserInfo::set_isoutboard(::google::protobuf::int32 value) {
  set_has_isoutboard();
  isoutboard_ = value;
}

// required int32 isAim = 11;
inline bool tagSeatUserInfo::has_isaim() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tagSeatUserInfo::set_has_isaim() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tagSeatUserInfo::clear_has_isaim() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tagSeatUserInfo::clear_isaim() {
  isaim_ = 0;
  clear_has_isaim();
}
inline ::google::protobuf::int32 tagSeatUserInfo::isaim() const {
  return isaim_;
}
inline void tagSeatUserInfo::set_isaim(::google::protobuf::int32 value) {
  set_has_isaim();
  isaim_ = value;
}

// required int32 isAutoFire = 12;
inline bool tagSeatUserInfo::has_isautofire() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tagSeatUserInfo::set_has_isautofire() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tagSeatUserInfo::clear_has_isautofire() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tagSeatUserInfo::clear_isautofire() {
  isautofire_ = 0;
  clear_has_isautofire();
}
inline ::google::protobuf::int32 tagSeatUserInfo::isautofire() const {
  return isautofire_;
}
inline void tagSeatUserInfo::set_isautofire(::google::protobuf::int32 value) {
  set_has_isautofire();
  isautofire_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_FishpondPlayer

// repeated .game.fish3d.s2c.tagSeatUserInfo userInfo = 1;
inline int CMD_S2C_FishpondPlayer::userinfo_size() const {
  return userinfo_.size();
}
inline void CMD_S2C_FishpondPlayer::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::game::fish3d::s2c::tagSeatUserInfo& CMD_S2C_FishpondPlayer::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::game::fish3d::s2c::tagSeatUserInfo* CMD_S2C_FishpondPlayer::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline ::game::fish3d::s2c::tagSeatUserInfo* CMD_S2C_FishpondPlayer::add_userinfo() {
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagSeatUserInfo >&
CMD_S2C_FishpondPlayer::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagSeatUserInfo >*
CMD_S2C_FishpondPlayer::mutable_userinfo() {
  return &userinfo_;
}

// repeated string nickName = 2;
inline int CMD_S2C_FishpondPlayer::nickname_size() const {
  return nickname_.size();
}
inline void CMD_S2C_FishpondPlayer::clear_nickname() {
  nickname_.Clear();
}
inline const ::std::string& CMD_S2C_FishpondPlayer::nickname(int index) const {
  return nickname_.Get(index);
}
inline ::std::string* CMD_S2C_FishpondPlayer::mutable_nickname(int index) {
  return nickname_.Mutable(index);
}
inline void CMD_S2C_FishpondPlayer::set_nickname(int index, const ::std::string& value) {
  nickname_.Mutable(index)->assign(value);
}
inline void CMD_S2C_FishpondPlayer::set_nickname(int index, const char* value) {
  nickname_.Mutable(index)->assign(value);
}
inline void CMD_S2C_FishpondPlayer::set_nickname(int index, const char* value, size_t size) {
  nickname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_S2C_FishpondPlayer::add_nickname() {
  return nickname_.Add();
}
inline void CMD_S2C_FishpondPlayer::add_nickname(const ::std::string& value) {
  nickname_.Add()->assign(value);
}
inline void CMD_S2C_FishpondPlayer::add_nickname(const char* value) {
  nickname_.Add()->assign(value);
}
inline void CMD_S2C_FishpondPlayer::add_nickname(const char* value, size_t size) {
  nickname_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMD_S2C_FishpondPlayer::nickname() const {
  return nickname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMD_S2C_FishpondPlayer::mutable_nickname() {
  return &nickname_;
}

// -------------------------------------------------------------------

// tagFishInfo

// required int32 fishUniqId = 1;
inline bool tagFishInfo::has_fishuniqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagFishInfo::set_has_fishuniqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagFishInfo::clear_has_fishuniqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagFishInfo::clear_fishuniqid() {
  fishuniqid_ = 0;
  clear_has_fishuniqid();
}
inline ::google::protobuf::int32 tagFishInfo::fishuniqid() const {
  return fishuniqid_;
}
inline void tagFishInfo::set_fishuniqid(::google::protobuf::int32 value) {
  set_has_fishuniqid();
  fishuniqid_ = value;
}

// required int32 fishId = 2;
inline bool tagFishInfo::has_fishid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagFishInfo::set_has_fishid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagFishInfo::clear_has_fishid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagFishInfo::clear_fishid() {
  fishid_ = 0;
  clear_has_fishid();
}
inline ::google::protobuf::int32 tagFishInfo::fishid() const {
  return fishid_;
}
inline void tagFishInfo::set_fishid(::google::protobuf::int32 value) {
  set_has_fishid();
  fishid_ = value;
}

// required int32 traceId = 3;
inline bool tagFishInfo::has_traceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagFishInfo::set_has_traceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagFishInfo::clear_has_traceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagFishInfo::clear_traceid() {
  traceid_ = 0;
  clear_has_traceid();
}
inline ::google::protobuf::int32 tagFishInfo::traceid() const {
  return traceid_;
}
inline void tagFishInfo::set_traceid(::google::protobuf::int32 value) {
  set_has_traceid();
  traceid_ = value;
}

// required int64 bornTime = 4;
inline bool tagFishInfo::has_borntime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagFishInfo::set_has_borntime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagFishInfo::clear_has_borntime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagFishInfo::clear_borntime() {
  borntime_ = GOOGLE_LONGLONG(0);
  clear_has_borntime();
}
inline ::google::protobuf::int64 tagFishInfo::borntime() const {
  return borntime_;
}
inline void tagFishInfo::set_borntime(::google::protobuf::int64 value) {
  set_has_borntime();
  borntime_ = value;
}

// required int64 deadTime = 5;
inline bool tagFishInfo::has_deadtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagFishInfo::set_has_deadtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagFishInfo::clear_has_deadtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagFishInfo::clear_deadtime() {
  deadtime_ = GOOGLE_LONGLONG(0);
  clear_has_deadtime();
}
inline ::google::protobuf::int64 tagFishInfo::deadtime() const {
  return deadtime_;
}
inline void tagFishInfo::set_deadtime(::google::protobuf::int64 value) {
  set_has_deadtime();
  deadtime_ = value;
}

// required int32 totalFreezeTime = 6;
inline bool tagFishInfo::has_totalfreezetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagFishInfo::set_has_totalfreezetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagFishInfo::clear_has_totalfreezetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagFishInfo::clear_totalfreezetime() {
  totalfreezetime_ = 0;
  clear_has_totalfreezetime();
}
inline ::google::protobuf::int32 tagFishInfo::totalfreezetime() const {
  return totalfreezetime_;
}
inline void tagFishInfo::set_totalfreezetime(::google::protobuf::int32 value) {
  set_has_totalfreezetime();
  totalfreezetime_ = value;
}

// required int32 index = 7;
inline bool tagFishInfo::has_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tagFishInfo::set_has_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tagFishInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tagFishInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 tagFishInfo::index() const {
  return index_;
}
inline void tagFishInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_FishpondFish

// repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
inline int CMD_S2C_FishpondFish::fishinfo_size() const {
  return fishinfo_.size();
}
inline void CMD_S2C_FishpondFish::clear_fishinfo() {
  fishinfo_.Clear();
}
inline const ::game::fish3d::s2c::tagFishInfo& CMD_S2C_FishpondFish::fishinfo(int index) const {
  return fishinfo_.Get(index);
}
inline ::game::fish3d::s2c::tagFishInfo* CMD_S2C_FishpondFish::mutable_fishinfo(int index) {
  return fishinfo_.Mutable(index);
}
inline ::game::fish3d::s2c::tagFishInfo* CMD_S2C_FishpondFish::add_fishinfo() {
  return fishinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo >&
CMD_S2C_FishpondFish::fishinfo() const {
  return fishinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo >*
CMD_S2C_FishpondFish::mutable_fishinfo() {
  return &fishinfo_;
}

// -------------------------------------------------------------------

// tagFISHPOS

// required float x = 1;
inline bool tagFISHPOS::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagFISHPOS::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagFISHPOS::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagFISHPOS::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float tagFISHPOS::x() const {
  return x_;
}
inline void tagFISHPOS::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool tagFISHPOS::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagFISHPOS::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagFISHPOS::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagFISHPOS::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float tagFISHPOS::y() const {
  return y_;
}
inline void tagFISHPOS::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// tagBulletInfo

// required int32 uniqueID = 1;
inline bool tagBulletInfo::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagBulletInfo::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagBulletInfo::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagBulletInfo::clear_uniqueid() {
  uniqueid_ = 0;
  clear_has_uniqueid();
}
inline ::google::protobuf::int32 tagBulletInfo::uniqueid() const {
  return uniqueid_;
}
inline void tagBulletInfo::set_uniqueid(::google::protobuf::int32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
}

// required int32 gunID = 2;
inline bool tagBulletInfo::has_gunid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagBulletInfo::set_has_gunid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagBulletInfo::clear_has_gunid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagBulletInfo::clear_gunid() {
  gunid_ = 0;
  clear_has_gunid();
}
inline ::google::protobuf::int32 tagBulletInfo::gunid() const {
  return gunid_;
}
inline void tagBulletInfo::set_gunid(::google::protobuf::int32 value) {
  set_has_gunid();
  gunid_ = value;
}

// required int32 seat = 3;
inline bool tagBulletInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagBulletInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagBulletInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagBulletInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 tagBulletInfo::seat() const {
  return seat_;
}
inline void tagBulletInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required .game.fish3d.s2c.tagFISHPOS targetPos = 4;
inline bool tagBulletInfo::has_targetpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagBulletInfo::set_has_targetpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagBulletInfo::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagBulletInfo::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::game::fish3d::s2c::tagFISHPOS::Clear();
  clear_has_targetpos();
}
inline const ::game::fish3d::s2c::tagFISHPOS& tagBulletInfo::targetpos() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return targetpos_ != NULL ? *targetpos_ : *default_instance().targetpos_;
#else
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
#endif
}
inline ::game::fish3d::s2c::tagFISHPOS* tagBulletInfo::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::game::fish3d::s2c::tagFISHPOS;
  return targetpos_;
}
inline ::game::fish3d::s2c::tagFISHPOS* tagBulletInfo::release_targetpos() {
  clear_has_targetpos();
  ::game::fish3d::s2c::tagFISHPOS* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void tagBulletInfo::set_allocated_targetpos(::game::fish3d::s2c::tagFISHPOS* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
}

// required int64 shootTime = 5;
inline bool tagBulletInfo::has_shoottime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagBulletInfo::set_has_shoottime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagBulletInfo::clear_has_shoottime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagBulletInfo::clear_shoottime() {
  shoottime_ = GOOGLE_LONGLONG(0);
  clear_has_shoottime();
}
inline ::google::protobuf::int64 tagBulletInfo::shoottime() const {
  return shoottime_;
}
inline void tagBulletInfo::set_shoottime(::google::protobuf::int64 value) {
  set_has_shoottime();
  shoottime_ = value;
}

// required int32 costSilver = 6;
inline bool tagBulletInfo::has_costsilver() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagBulletInfo::set_has_costsilver() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagBulletInfo::clear_has_costsilver() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagBulletInfo::clear_costsilver() {
  costsilver_ = 0;
  clear_has_costsilver();
}
inline ::google::protobuf::int32 tagBulletInfo::costsilver() const {
  return costsilver_;
}
inline void tagBulletInfo::set_costsilver(::google::protobuf::int32 value) {
  set_has_costsilver();
  costsilver_ = value;
}

// required int32 fishUniqID = 7;
inline bool tagBulletInfo::has_fishuniqid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tagBulletInfo::set_has_fishuniqid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tagBulletInfo::clear_has_fishuniqid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tagBulletInfo::clear_fishuniqid() {
  fishuniqid_ = 0;
  clear_has_fishuniqid();
}
inline ::google::protobuf::int32 tagBulletInfo::fishuniqid() const {
  return fishuniqid_;
}
inline void tagBulletInfo::set_fishuniqid(::google::protobuf::int32 value) {
  set_has_fishuniqid();
  fishuniqid_ = value;
}

// required int32 isAimFormFish = 8;
inline bool tagBulletInfo::has_isaimformfish() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tagBulletInfo::set_has_isaimformfish() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tagBulletInfo::clear_has_isaimformfish() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tagBulletInfo::clear_isaimformfish() {
  isaimformfish_ = 0;
  clear_has_isaimformfish();
}
inline ::google::protobuf::int32 tagBulletInfo::isaimformfish() const {
  return isaimformfish_;
}
inline void tagBulletInfo::set_isaimformfish(::google::protobuf::int32 value) {
  set_has_isaimformfish();
  isaimformfish_ = value;
}

// required int32 fishIndex = 9;
inline bool tagBulletInfo::has_fishindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tagBulletInfo::set_has_fishindex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tagBulletInfo::clear_has_fishindex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tagBulletInfo::clear_fishindex() {
  fishindex_ = 0;
  clear_has_fishindex();
}
inline ::google::protobuf::int32 tagBulletInfo::fishindex() const {
  return fishindex_;
}
inline void tagBulletInfo::set_fishindex(::google::protobuf::int32 value) {
  set_has_fishindex();
  fishindex_ = value;
}

// required int32 isWildBullet = 10;
inline bool tagBulletInfo::has_iswildbullet() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tagBulletInfo::set_has_iswildbullet() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tagBulletInfo::clear_has_iswildbullet() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tagBulletInfo::clear_iswildbullet() {
  iswildbullet_ = 0;
  clear_has_iswildbullet();
}
inline ::google::protobuf::int32 tagBulletInfo::iswildbullet() const {
  return iswildbullet_;
}
inline void tagBulletInfo::set_iswildbullet(::google::protobuf::int32 value) {
  set_has_iswildbullet();
  iswildbullet_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_FishpondBullet

// repeated .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
inline int CMD_S2C_FishpondBullet::bulletinfo_size() const {
  return bulletinfo_.size();
}
inline void CMD_S2C_FishpondBullet::clear_bulletinfo() {
  bulletinfo_.Clear();
}
inline const ::game::fish3d::s2c::tagBulletInfo& CMD_S2C_FishpondBullet::bulletinfo(int index) const {
  return bulletinfo_.Get(index);
}
inline ::game::fish3d::s2c::tagBulletInfo* CMD_S2C_FishpondBullet::mutable_bulletinfo(int index) {
  return bulletinfo_.Mutable(index);
}
inline ::game::fish3d::s2c::tagBulletInfo* CMD_S2C_FishpondBullet::add_bulletinfo() {
  return bulletinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagBulletInfo >&
CMD_S2C_FishpondBullet::bulletinfo() const {
  return bulletinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagBulletInfo >*
CMD_S2C_FishpondBullet::mutable_bulletinfo() {
  return &bulletinfo_;
}

// -------------------------------------------------------------------

// tagFreezeInfo

// required int32 uniqId = 1;
inline bool tagFreezeInfo::has_uniqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagFreezeInfo::set_has_uniqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagFreezeInfo::clear_has_uniqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagFreezeInfo::clear_uniqid() {
  uniqid_ = 0;
  clear_has_uniqid();
}
inline ::google::protobuf::int32 tagFreezeInfo::uniqid() const {
  return uniqid_;
}
inline void tagFreezeInfo::set_uniqid(::google::protobuf::int32 value) {
  set_has_uniqid();
  uniqid_ = value;
}

// required int64 freezeBeginTime = 2;
inline bool tagFreezeInfo::has_freezebegintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagFreezeInfo::set_has_freezebegintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagFreezeInfo::clear_has_freezebegintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagFreezeInfo::clear_freezebegintime() {
  freezebegintime_ = GOOGLE_LONGLONG(0);
  clear_has_freezebegintime();
}
inline ::google::protobuf::int64 tagFreezeInfo::freezebegintime() const {
  return freezebegintime_;
}
inline void tagFreezeInfo::set_freezebegintime(::google::protobuf::int64 value) {
  set_has_freezebegintime();
  freezebegintime_ = value;
}

// required int32 freezeContTime = 3;
inline bool tagFreezeInfo::has_freezeconttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagFreezeInfo::set_has_freezeconttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagFreezeInfo::clear_has_freezeconttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagFreezeInfo::clear_freezeconttime() {
  freezeconttime_ = 0;
  clear_has_freezeconttime();
}
inline ::google::protobuf::int32 tagFreezeInfo::freezeconttime() const {
  return freezeconttime_;
}
inline void tagFreezeInfo::set_freezeconttime(::google::protobuf::int32 value) {
  set_has_freezeconttime();
  freezeconttime_ = value;
}

// required int32 totalFreezeTime = 4;
inline bool tagFreezeInfo::has_totalfreezetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagFreezeInfo::set_has_totalfreezetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagFreezeInfo::clear_has_totalfreezetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagFreezeInfo::clear_totalfreezetime() {
  totalfreezetime_ = 0;
  clear_has_totalfreezetime();
}
inline ::google::protobuf::int32 tagFreezeInfo::totalfreezetime() const {
  return totalfreezetime_;
}
inline void tagFreezeInfo::set_totalfreezetime(::google::protobuf::int32 value) {
  set_has_totalfreezetime();
  totalfreezetime_ = value;
}

// required int32 isFormFish = 5;
inline bool tagFreezeInfo::has_isformfish() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagFreezeInfo::set_has_isformfish() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagFreezeInfo::clear_has_isformfish() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagFreezeInfo::clear_isformfish() {
  isformfish_ = 0;
  clear_has_isformfish();
}
inline ::google::protobuf::int32 tagFreezeInfo::isformfish() const {
  return isformfish_;
}
inline void tagFreezeInfo::set_isformfish(::google::protobuf::int32 value) {
  set_has_isformfish();
  isformfish_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_FreezeFishInfo

// required int32 seat = 1;
inline bool CMD_S2C_FreezeFishInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_FreezeFishInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_FreezeFishInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_FreezeFishInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_FreezeFishInfo::seat() const {
  return seat_;
}
inline void CMD_S2C_FreezeFishInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated .game.fish3d.s2c.tagFreezeInfo freezeInfo = 2;
inline int CMD_S2C_FreezeFishInfo::freezeinfo_size() const {
  return freezeinfo_.size();
}
inline void CMD_S2C_FreezeFishInfo::clear_freezeinfo() {
  freezeinfo_.Clear();
}
inline const ::game::fish3d::s2c::tagFreezeInfo& CMD_S2C_FreezeFishInfo::freezeinfo(int index) const {
  return freezeinfo_.Get(index);
}
inline ::game::fish3d::s2c::tagFreezeInfo* CMD_S2C_FreezeFishInfo::mutable_freezeinfo(int index) {
  return freezeinfo_.Mutable(index);
}
inline ::game::fish3d::s2c::tagFreezeInfo* CMD_S2C_FreezeFishInfo::add_freezeinfo() {
  return freezeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFreezeInfo >&
CMD_S2C_FreezeFishInfo::freezeinfo() const {
  return freezeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFreezeInfo >*
CMD_S2C_FreezeFishInfo::mutable_freezeinfo() {
  return &freezeinfo_;
}

// -------------------------------------------------------------------

// CMD_S2C_NewFishData

// repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
inline int CMD_S2C_NewFishData::fishinfo_size() const {
  return fishinfo_.size();
}
inline void CMD_S2C_NewFishData::clear_fishinfo() {
  fishinfo_.Clear();
}
inline const ::game::fish3d::s2c::tagFishInfo& CMD_S2C_NewFishData::fishinfo(int index) const {
  return fishinfo_.Get(index);
}
inline ::game::fish3d::s2c::tagFishInfo* CMD_S2C_NewFishData::mutable_fishinfo(int index) {
  return fishinfo_.Mutable(index);
}
inline ::game::fish3d::s2c::tagFishInfo* CMD_S2C_NewFishData::add_fishinfo() {
  return fishinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo >&
CMD_S2C_NewFishData::fishinfo() const {
  return fishinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::fish3d::s2c::tagFishInfo >*
CMD_S2C_NewFishData::mutable_fishinfo() {
  return &fishinfo_;
}

// -------------------------------------------------------------------

// CMD_S2C_SeatUserData

// required .game.fish3d.s2c.tagSeatUserInfo seatInfo = 1;
inline bool CMD_S2C_SeatUserData::has_seatinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_SeatUserData::set_has_seatinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_SeatUserData::clear_has_seatinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_SeatUserData::clear_seatinfo() {
  if (seatinfo_ != NULL) seatinfo_->::game::fish3d::s2c::tagSeatUserInfo::Clear();
  clear_has_seatinfo();
}
inline const ::game::fish3d::s2c::tagSeatUserInfo& CMD_S2C_SeatUserData::seatinfo() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return seatinfo_ != NULL ? *seatinfo_ : *default_instance().seatinfo_;
#else
  return seatinfo_ != NULL ? *seatinfo_ : *default_instance_->seatinfo_;
#endif
}
inline ::game::fish3d::s2c::tagSeatUserInfo* CMD_S2C_SeatUserData::mutable_seatinfo() {
  set_has_seatinfo();
  if (seatinfo_ == NULL) seatinfo_ = new ::game::fish3d::s2c::tagSeatUserInfo;
  return seatinfo_;
}
inline ::game::fish3d::s2c::tagSeatUserInfo* CMD_S2C_SeatUserData::release_seatinfo() {
  clear_has_seatinfo();
  ::game::fish3d::s2c::tagSeatUserInfo* temp = seatinfo_;
  seatinfo_ = NULL;
  return temp;
}
inline void CMD_S2C_SeatUserData::set_allocated_seatinfo(::game::fish3d::s2c::tagSeatUserInfo* seatinfo) {
  delete seatinfo_;
  seatinfo_ = seatinfo;
  if (seatinfo) {
    set_has_seatinfo();
  } else {
    clear_has_seatinfo();
  }
}

// required string nickName = 2;
inline bool CMD_S2C_SeatUserData::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_SeatUserData::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_SeatUserData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_SeatUserData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CMD_S2C_SeatUserData::nickname() const {
  return *nickname_;
}
inline void CMD_S2C_SeatUserData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMD_S2C_SeatUserData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMD_S2C_SeatUserData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_S2C_SeatUserData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CMD_S2C_SeatUserData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_S2C_SeatUserData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_S2C_GlobalInfo

// required int32 minCannonMulti = 1;
inline bool CMD_S2C_GlobalInfo::has_mincannonmulti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_GlobalInfo::set_has_mincannonmulti() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_GlobalInfo::clear_has_mincannonmulti() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_GlobalInfo::clear_mincannonmulti() {
  mincannonmulti_ = 0;
  clear_has_mincannonmulti();
}
inline ::google::protobuf::int32 CMD_S2C_GlobalInfo::mincannonmulti() const {
  return mincannonmulti_;
}
inline void CMD_S2C_GlobalInfo::set_mincannonmulti(::google::protobuf::int32 value) {
  set_has_mincannonmulti();
  mincannonmulti_ = value;
}

// required int32 maxCannonMulti = 2;
inline bool CMD_S2C_GlobalInfo::has_maxcannonmulti() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_GlobalInfo::set_has_maxcannonmulti() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_GlobalInfo::clear_has_maxcannonmulti() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_GlobalInfo::clear_maxcannonmulti() {
  maxcannonmulti_ = 0;
  clear_has_maxcannonmulti();
}
inline ::google::protobuf::int32 CMD_S2C_GlobalInfo::maxcannonmulti() const {
  return maxcannonmulti_;
}
inline void CMD_S2C_GlobalInfo::set_maxcannonmulti(::google::protobuf::int32 value) {
  set_has_maxcannonmulti();
  maxcannonmulti_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_BulletInfo

// required .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
inline bool CMD_S2C_BulletInfo::has_bulletinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_BulletInfo::set_has_bulletinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_BulletInfo::clear_has_bulletinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_BulletInfo::clear_bulletinfo() {
  if (bulletinfo_ != NULL) bulletinfo_->::game::fish3d::s2c::tagBulletInfo::Clear();
  clear_has_bulletinfo();
}
inline const ::game::fish3d::s2c::tagBulletInfo& CMD_S2C_BulletInfo::bulletinfo() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bulletinfo_ != NULL ? *bulletinfo_ : *default_instance().bulletinfo_;
#else
  return bulletinfo_ != NULL ? *bulletinfo_ : *default_instance_->bulletinfo_;
#endif
}
inline ::game::fish3d::s2c::tagBulletInfo* CMD_S2C_BulletInfo::mutable_bulletinfo() {
  set_has_bulletinfo();
  if (bulletinfo_ == NULL) bulletinfo_ = new ::game::fish3d::s2c::tagBulletInfo;
  return bulletinfo_;
}
inline ::game::fish3d::s2c::tagBulletInfo* CMD_S2C_BulletInfo::release_bulletinfo() {
  clear_has_bulletinfo();
  ::game::fish3d::s2c::tagBulletInfo* temp = bulletinfo_;
  bulletinfo_ = NULL;
  return temp;
}
inline void CMD_S2C_BulletInfo::set_allocated_bulletinfo(::game::fish3d::s2c::tagBulletInfo* bulletinfo) {
  delete bulletinfo_;
  bulletinfo_ = bulletinfo;
  if (bulletinfo) {
    set_has_bulletinfo();
  } else {
    clear_has_bulletinfo();
  }
}

// required int32 clientUniqId = 2;
inline bool CMD_S2C_BulletInfo::has_clientuniqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_BulletInfo::set_has_clientuniqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_BulletInfo::clear_has_clientuniqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_BulletInfo::clear_clientuniqid() {
  clientuniqid_ = 0;
  clear_has_clientuniqid();
}
inline ::google::protobuf::int32 CMD_S2C_BulletInfo::clientuniqid() const {
  return clientuniqid_;
}
inline void CMD_S2C_BulletInfo::set_clientuniqid(::google::protobuf::int32 value) {
  set_has_clientuniqid();
  clientuniqid_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_HitFishInfo

// required int32 bulletUniqId = 1;
inline bool CMD_S2C_HitFishInfo::has_bulletuniqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_HitFishInfo::set_has_bulletuniqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_HitFishInfo::clear_has_bulletuniqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_HitFishInfo::clear_bulletuniqid() {
  bulletuniqid_ = 0;
  clear_has_bulletuniqid();
}
inline ::google::protobuf::int32 CMD_S2C_HitFishInfo::bulletuniqid() const {
  return bulletuniqid_;
}
inline void CMD_S2C_HitFishInfo::set_bulletuniqid(::google::protobuf::int32 value) {
  set_has_bulletuniqid();
  bulletuniqid_ = value;
}

// required int32 fishUniqId = 2;
inline bool CMD_S2C_HitFishInfo::has_fishuniqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_HitFishInfo::set_has_fishuniqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_HitFishInfo::clear_has_fishuniqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_HitFishInfo::clear_fishuniqid() {
  fishuniqid_ = 0;
  clear_has_fishuniqid();
}
inline ::google::protobuf::int32 CMD_S2C_HitFishInfo::fishuniqid() const {
  return fishuniqid_;
}
inline void CMD_S2C_HitFishInfo::set_fishuniqid(::google::protobuf::int32 value) {
  set_has_fishuniqid();
  fishuniqid_ = value;
}

// required int32 seat = 3;
inline bool CMD_S2C_HitFishInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_HitFishInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_HitFishInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_HitFishInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_HitFishInfo::seat() const {
  return seat_;
}
inline void CMD_S2C_HitFishInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int32 rewardSilver = 4;
inline bool CMD_S2C_HitFishInfo::has_rewardsilver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_HitFishInfo::set_has_rewardsilver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_HitFishInfo::clear_has_rewardsilver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_HitFishInfo::clear_rewardsilver() {
  rewardsilver_ = 0;
  clear_has_rewardsilver();
}
inline ::google::protobuf::int32 CMD_S2C_HitFishInfo::rewardsilver() const {
  return rewardsilver_;
}
inline void CMD_S2C_HitFishInfo::set_rewardsilver(::google::protobuf::int32 value) {
  set_has_rewardsilver();
  rewardsilver_ = value;
}

// required int32 isForm = 5;
inline bool CMD_S2C_HitFishInfo::has_isform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_S2C_HitFishInfo::set_has_isform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_S2C_HitFishInfo::clear_has_isform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_S2C_HitFishInfo::clear_isform() {
  isform_ = 0;
  clear_has_isform();
}
inline ::google::protobuf::int32 CMD_S2C_HitFishInfo::isform() const {
  return isform_;
}
inline void CMD_S2C_HitFishInfo::set_isform(::google::protobuf::int32 value) {
  set_has_isform();
  isform_ = value;
}

// required int32 fishIndex = 6;
inline bool CMD_S2C_HitFishInfo::has_fishindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_S2C_HitFishInfo::set_has_fishindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_S2C_HitFishInfo::clear_has_fishindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_S2C_HitFishInfo::clear_fishindex() {
  fishindex_ = 0;
  clear_has_fishindex();
}
inline ::google::protobuf::int32 CMD_S2C_HitFishInfo::fishindex() const {
  return fishindex_;
}
inline void CMD_S2C_HitFishInfo::set_fishindex(::google::protobuf::int32 value) {
  set_has_fishindex();
  fishindex_ = value;
}

// required int32 bulletLiveTime = 7;
inline bool CMD_S2C_HitFishInfo::has_bulletlivetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_S2C_HitFishInfo::set_has_bulletlivetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_S2C_HitFishInfo::clear_has_bulletlivetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_S2C_HitFishInfo::clear_bulletlivetime() {
  bulletlivetime_ = 0;
  clear_has_bulletlivetime();
}
inline ::google::protobuf::int32 CMD_S2C_HitFishInfo::bulletlivetime() const {
  return bulletlivetime_;
}
inline void CMD_S2C_HitFishInfo::set_bulletlivetime(::google::protobuf::int32 value) {
  set_has_bulletlivetime();
  bulletlivetime_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_SkillHitFishInfo

// required int32 skillId = 1;
inline bool CMD_S2C_SkillHitFishInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_SkillHitFishInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 CMD_S2C_SkillHitFishInfo::skillid() const {
  return skillid_;
}
inline void CMD_S2C_SkillHitFishInfo::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// required int32 fishUniqId = 2;
inline bool CMD_S2C_SkillHitFishInfo::has_fishuniqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_SkillHitFishInfo::set_has_fishuniqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_has_fishuniqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_fishuniqid() {
  fishuniqid_ = 0;
  clear_has_fishuniqid();
}
inline ::google::protobuf::int32 CMD_S2C_SkillHitFishInfo::fishuniqid() const {
  return fishuniqid_;
}
inline void CMD_S2C_SkillHitFishInfo::set_fishuniqid(::google::protobuf::int32 value) {
  set_has_fishuniqid();
  fishuniqid_ = value;
}

// required int32 seat = 3;
inline bool CMD_S2C_SkillHitFishInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_SkillHitFishInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_SkillHitFishInfo::seat() const {
  return seat_;
}
inline void CMD_S2C_SkillHitFishInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int32 rewardSilver = 4;
inline bool CMD_S2C_SkillHitFishInfo::has_rewardsilver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_SkillHitFishInfo::set_has_rewardsilver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_has_rewardsilver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_rewardsilver() {
  rewardsilver_ = 0;
  clear_has_rewardsilver();
}
inline ::google::protobuf::int32 CMD_S2C_SkillHitFishInfo::rewardsilver() const {
  return rewardsilver_;
}
inline void CMD_S2C_SkillHitFishInfo::set_rewardsilver(::google::protobuf::int32 value) {
  set_has_rewardsilver();
  rewardsilver_ = value;
}

// required int32 isForm = 5;
inline bool CMD_S2C_SkillHitFishInfo::has_isform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_S2C_SkillHitFishInfo::set_has_isform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_has_isform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_isform() {
  isform_ = 0;
  clear_has_isform();
}
inline ::google::protobuf::int32 CMD_S2C_SkillHitFishInfo::isform() const {
  return isform_;
}
inline void CMD_S2C_SkillHitFishInfo::set_isform(::google::protobuf::int32 value) {
  set_has_isform();
  isform_ = value;
}

// required int32 fishIndex = 6;
inline bool CMD_S2C_SkillHitFishInfo::has_fishindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_S2C_SkillHitFishInfo::set_has_fishindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_has_fishindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_fishindex() {
  fishindex_ = 0;
  clear_has_fishindex();
}
inline ::google::protobuf::int32 CMD_S2C_SkillHitFishInfo::fishindex() const {
  return fishindex_;
}
inline void CMD_S2C_SkillHitFishInfo::set_fishindex(::google::protobuf::int32 value) {
  set_has_fishindex();
  fishindex_ = value;
}

// required int32 excludeFish = 7;
inline bool CMD_S2C_SkillHitFishInfo::has_excludefish() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_S2C_SkillHitFishInfo::set_has_excludefish() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_has_excludefish() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_excludefish() {
  excludefish_ = 0;
  clear_has_excludefish();
}
inline ::google::protobuf::int32 CMD_S2C_SkillHitFishInfo::excludefish() const {
  return excludefish_;
}
inline void CMD_S2C_SkillHitFishInfo::set_excludefish(::google::protobuf::int32 value) {
  set_has_excludefish();
  excludefish_ = value;
}

// required int32 excludeFishIndex = 8;
inline bool CMD_S2C_SkillHitFishInfo::has_excludefishindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMD_S2C_SkillHitFishInfo::set_has_excludefishindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_has_excludefishindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_excludefishindex() {
  excludefishindex_ = 0;
  clear_has_excludefishindex();
}
inline ::google::protobuf::int32 CMD_S2C_SkillHitFishInfo::excludefishindex() const {
  return excludefishindex_;
}
inline void CMD_S2C_SkillHitFishInfo::set_excludefishindex(::google::protobuf::int32 value) {
  set_has_excludefishindex();
  excludefishindex_ = value;
}

// required int32 delay = 9;
inline bool CMD_S2C_SkillHitFishInfo::has_delay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_S2C_SkillHitFishInfo::set_has_delay() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_has_delay() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_S2C_SkillHitFishInfo::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::google::protobuf::int32 CMD_S2C_SkillHitFishInfo::delay() const {
  return delay_;
}
inline void CMD_S2C_SkillHitFishInfo::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_ErrorInfo

// required int32 errorNo = 1;
inline bool CMD_S2C_ErrorInfo::has_errorno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_ErrorInfo::set_has_errorno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_ErrorInfo::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_ErrorInfo::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 CMD_S2C_ErrorInfo::errorno() const {
  return errorno_;
}
inline void CMD_S2C_ErrorInfo::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_ItemEffect

// required int32 itemId = 1;
inline bool CMD_S2C_ItemEffect::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_ItemEffect::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_ItemEffect::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_ItemEffect::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 CMD_S2C_ItemEffect::itemid() const {
  return itemid_;
}
inline void CMD_S2C_ItemEffect::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 effectType = 2;
inline bool CMD_S2C_ItemEffect::has_effecttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_ItemEffect::set_has_effecttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_ItemEffect::clear_has_effecttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_ItemEffect::clear_effecttype() {
  effecttype_ = 0;
  clear_has_effecttype();
}
inline ::google::protobuf::int32 CMD_S2C_ItemEffect::effecttype() const {
  return effecttype_;
}
inline void CMD_S2C_ItemEffect::set_effecttype(::google::protobuf::int32 value) {
  set_has_effecttype();
  effecttype_ = value;
}

// required int32 seat = 3;
inline bool CMD_S2C_ItemEffect::has_seat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_ItemEffect::set_has_seat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_ItemEffect::clear_has_seat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_ItemEffect::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_ItemEffect::seat() const {
  return seat_;
}
inline void CMD_S2C_ItemEffect::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int64 param1 = 4;
inline bool CMD_S2C_ItemEffect::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_ItemEffect::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_ItemEffect::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_ItemEffect::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 CMD_S2C_ItemEffect::param1() const {
  return param1_;
}
inline void CMD_S2C_ItemEffect::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_AimFishInfo

// required int32 seat = 1;
inline bool CMD_S2C_AimFishInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_AimFishInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_AimFishInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_AimFishInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_AimFishInfo::seat() const {
  return seat_;
}
inline void CMD_S2C_AimFishInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int32 fishUniqId = 2;
inline bool CMD_S2C_AimFishInfo::has_fishuniqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_AimFishInfo::set_has_fishuniqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_AimFishInfo::clear_has_fishuniqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_AimFishInfo::clear_fishuniqid() {
  fishuniqid_ = 0;
  clear_has_fishuniqid();
}
inline ::google::protobuf::int32 CMD_S2C_AimFishInfo::fishuniqid() const {
  return fishuniqid_;
}
inline void CMD_S2C_AimFishInfo::set_fishuniqid(::google::protobuf::int32 value) {
  set_has_fishuniqid();
  fishuniqid_ = value;
}

// required int32 isFormFish = 3;
inline bool CMD_S2C_AimFishInfo::has_isformfish() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_AimFishInfo::set_has_isformfish() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_AimFishInfo::clear_has_isformfish() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_AimFishInfo::clear_isformfish() {
  isformfish_ = 0;
  clear_has_isformfish();
}
inline ::google::protobuf::int32 CMD_S2C_AimFishInfo::isformfish() const {
  return isformfish_;
}
inline void CMD_S2C_AimFishInfo::set_isformfish(::google::protobuf::int32 value) {
  set_has_isformfish();
  isformfish_ = value;
}

// required int32 fishIndex = 4;
inline bool CMD_S2C_AimFishInfo::has_fishindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_AimFishInfo::set_has_fishindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_AimFishInfo::clear_has_fishindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_AimFishInfo::clear_fishindex() {
  fishindex_ = 0;
  clear_has_fishindex();
}
inline ::google::protobuf::int32 CMD_S2C_AimFishInfo::fishindex() const {
  return fishindex_;
}
inline void CMD_S2C_AimFishInfo::set_fishindex(::google::protobuf::int32 value) {
  set_has_fishindex();
  fishindex_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_AddSilverInfo

// required int32 seat = 1;
inline bool CMD_S2C_AddSilverInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_AddSilverInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_AddSilverInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_AddSilverInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_AddSilverInfo::seat() const {
  return seat_;
}
inline void CMD_S2C_AddSilverInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int64 addSilver = 2;
inline bool CMD_S2C_AddSilverInfo::has_addsilver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_AddSilverInfo::set_has_addsilver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_AddSilverInfo::clear_has_addsilver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_AddSilverInfo::clear_addsilver() {
  addsilver_ = GOOGLE_LONGLONG(0);
  clear_has_addsilver();
}
inline ::google::protobuf::int64 CMD_S2C_AddSilverInfo::addsilver() const {
  return addsilver_;
}
inline void CMD_S2C_AddSilverInfo::set_addsilver(::google::protobuf::int64 value) {
  set_has_addsilver();
  addsilver_ = value;
}

// required int64 addToken = 3;
inline bool CMD_S2C_AddSilverInfo::has_addtoken() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_AddSilverInfo::set_has_addtoken() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_AddSilverInfo::clear_has_addtoken() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_AddSilverInfo::clear_addtoken() {
  addtoken_ = GOOGLE_LONGLONG(0);
  clear_has_addtoken();
}
inline ::google::protobuf::int64 CMD_S2C_AddSilverInfo::addtoken() const {
  return addtoken_;
}
inline void CMD_S2C_AddSilverInfo::set_addtoken(::google::protobuf::int64 value) {
  set_has_addtoken();
  addtoken_ = value;
}

// required int32 isManual = 4;
inline bool CMD_S2C_AddSilverInfo::has_ismanual() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_AddSilverInfo::set_has_ismanual() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_AddSilverInfo::clear_has_ismanual() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_AddSilverInfo::clear_ismanual() {
  ismanual_ = 0;
  clear_has_ismanual();
}
inline ::google::protobuf::int32 CMD_S2C_AddSilverInfo::ismanual() const {
  return ismanual_;
}
inline void CMD_S2C_AddSilverInfo::set_ismanual(::google::protobuf::int32 value) {
  set_has_ismanual();
  ismanual_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_BoomFishInfo

// repeated int32 fishUniqIDs = 1;
inline int CMD_S2C_BoomFishInfo::fishuniqids_size() const {
  return fishuniqids_.size();
}
inline void CMD_S2C_BoomFishInfo::clear_fishuniqids() {
  fishuniqids_.Clear();
}
inline ::google::protobuf::int32 CMD_S2C_BoomFishInfo::fishuniqids(int index) const {
  return fishuniqids_.Get(index);
}
inline void CMD_S2C_BoomFishInfo::set_fishuniqids(int index, ::google::protobuf::int32 value) {
  fishuniqids_.Set(index, value);
}
inline void CMD_S2C_BoomFishInfo::add_fishuniqids(::google::protobuf::int32 value) {
  fishuniqids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMD_S2C_BoomFishInfo::fishuniqids() const {
  return fishuniqids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMD_S2C_BoomFishInfo::mutable_fishuniqids() {
  return &fishuniqids_;
}

// repeated int32 smallFishIndex = 2;
inline int CMD_S2C_BoomFishInfo::smallfishindex_size() const {
  return smallfishindex_.size();
}
inline void CMD_S2C_BoomFishInfo::clear_smallfishindex() {
  smallfishindex_.Clear();
}
inline ::google::protobuf::int32 CMD_S2C_BoomFishInfo::smallfishindex(int index) const {
  return smallfishindex_.Get(index);
}
inline void CMD_S2C_BoomFishInfo::set_smallfishindex(int index, ::google::protobuf::int32 value) {
  smallfishindex_.Set(index, value);
}
inline void CMD_S2C_BoomFishInfo::add_smallfishindex(::google::protobuf::int32 value) {
  smallfishindex_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMD_S2C_BoomFishInfo::smallfishindex() const {
  return smallfishindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMD_S2C_BoomFishInfo::mutable_smallfishindex() {
  return &smallfishindex_;
}

// repeated int32 formUniqIDs = 3;
inline int CMD_S2C_BoomFishInfo::formuniqids_size() const {
  return formuniqids_.size();
}
inline void CMD_S2C_BoomFishInfo::clear_formuniqids() {
  formuniqids_.Clear();
}
inline ::google::protobuf::int32 CMD_S2C_BoomFishInfo::formuniqids(int index) const {
  return formuniqids_.Get(index);
}
inline void CMD_S2C_BoomFishInfo::set_formuniqids(int index, ::google::protobuf::int32 value) {
  formuniqids_.Set(index, value);
}
inline void CMD_S2C_BoomFishInfo::add_formuniqids(::google::protobuf::int32 value) {
  formuniqids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMD_S2C_BoomFishInfo::formuniqids() const {
  return formuniqids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMD_S2C_BoomFishInfo::mutable_formuniqids() {
  return &formuniqids_;
}

// -------------------------------------------------------------------

// CMD_S2C_ServerVersion

// required int32 serverVer = 1;
inline bool CMD_S2C_ServerVersion::has_serverver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_ServerVersion::set_has_serverver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_ServerVersion::clear_has_serverver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_ServerVersion::clear_serverver() {
  serverver_ = 0;
  clear_has_serverver();
}
inline ::google::protobuf::int32 CMD_S2C_ServerVersion::serverver() const {
  return serverver_;
}
inline void CMD_S2C_ServerVersion::set_serverver(::google::protobuf::int32 value) {
  set_has_serverver();
  serverver_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_AddPhoneTicketInfo

// required int32 seat = 1;
inline bool CMD_S2C_AddPhoneTicketInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_AddPhoneTicketInfo::seat() const {
  return seat_;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int32 fishUniqId = 2;
inline bool CMD_S2C_AddPhoneTicketInfo::has_fishuniqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_has_fishuniqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_has_fishuniqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_fishuniqid() {
  fishuniqid_ = 0;
  clear_has_fishuniqid();
}
inline ::google::protobuf::int32 CMD_S2C_AddPhoneTicketInfo::fishuniqid() const {
  return fishuniqid_;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_fishuniqid(::google::protobuf::int32 value) {
  set_has_fishuniqid();
  fishuniqid_ = value;
}

// required int32 isFormFish = 3;
inline bool CMD_S2C_AddPhoneTicketInfo::has_isformfish() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_has_isformfish() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_has_isformfish() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_isformfish() {
  isformfish_ = 0;
  clear_has_isformfish();
}
inline ::google::protobuf::int32 CMD_S2C_AddPhoneTicketInfo::isformfish() const {
  return isformfish_;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_isformfish(::google::protobuf::int32 value) {
  set_has_isformfish();
  isformfish_ = value;
}

// required int32 addNum = 4;
inline bool CMD_S2C_AddPhoneTicketInfo::has_addnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_has_addnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_addnum() {
  addnum_ = 0;
  clear_has_addnum();
}
inline ::google::protobuf::int32 CMD_S2C_AddPhoneTicketInfo::addnum() const {
  return addnum_;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_addnum(::google::protobuf::int32 value) {
  set_has_addnum();
  addnum_ = value;
}

// required int32 fishIndex = 5;
inline bool CMD_S2C_AddPhoneTicketInfo::has_fishindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_has_fishindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_has_fishindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_S2C_AddPhoneTicketInfo::clear_fishindex() {
  fishindex_ = 0;
  clear_has_fishindex();
}
inline ::google::protobuf::int32 CMD_S2C_AddPhoneTicketInfo::fishindex() const {
  return fishindex_;
}
inline void CMD_S2C_AddPhoneTicketInfo::set_fishindex(::google::protobuf::int32 value) {
  set_has_fishindex();
  fishindex_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_SpecialBulletInfo

// required int32 fishNum = 1;
inline bool CMD_S2C_SpecialBulletInfo::has_fishnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_SpecialBulletInfo::set_has_fishnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_SpecialBulletInfo::clear_has_fishnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_SpecialBulletInfo::clear_fishnum() {
  fishnum_ = 0;
  clear_has_fishnum();
}
inline ::google::protobuf::int32 CMD_S2C_SpecialBulletInfo::fishnum() const {
  return fishnum_;
}
inline void CMD_S2C_SpecialBulletInfo::set_fishnum(::google::protobuf::int32 value) {
  set_has_fishnum();
  fishnum_ = value;
}

// required int32 seat = 2;
inline bool CMD_S2C_SpecialBulletInfo::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_SpecialBulletInfo::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_SpecialBulletInfo::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_SpecialBulletInfo::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_SpecialBulletInfo::seat() const {
  return seat_;
}
inline void CMD_S2C_SpecialBulletInfo::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int32 returnSilver = 3;
inline bool CMD_S2C_SpecialBulletInfo::has_returnsilver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_SpecialBulletInfo::set_has_returnsilver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_SpecialBulletInfo::clear_has_returnsilver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_SpecialBulletInfo::clear_returnsilver() {
  returnsilver_ = 0;
  clear_has_returnsilver();
}
inline ::google::protobuf::int32 CMD_S2C_SpecialBulletInfo::returnsilver() const {
  return returnsilver_;
}
inline void CMD_S2C_SpecialBulletInfo::set_returnsilver(::google::protobuf::int32 value) {
  set_has_returnsilver();
  returnsilver_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_Reward

// required int32 seat = 1;
inline bool CMD_S2C_Reward::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_Reward::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_Reward::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_Reward::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_Reward::seat() const {
  return seat_;
}
inline void CMD_S2C_Reward::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required int64 rewardSilver = 2;
inline bool CMD_S2C_Reward::has_rewardsilver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_Reward::set_has_rewardsilver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_Reward::clear_has_rewardsilver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_Reward::clear_rewardsilver() {
  rewardsilver_ = GOOGLE_LONGLONG(0);
  clear_has_rewardsilver();
}
inline ::google::protobuf::int64 CMD_S2C_Reward::rewardsilver() const {
  return rewardsilver_;
}
inline void CMD_S2C_Reward::set_rewardsilver(::google::protobuf::int64 value) {
  set_has_rewardsilver();
  rewardsilver_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_Aim

// required int32 isAim = 1;
inline bool CMD_S2C_Aim::has_isaim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_Aim::set_has_isaim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_Aim::clear_has_isaim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_Aim::clear_isaim() {
  isaim_ = 0;
  clear_has_isaim();
}
inline ::google::protobuf::int32 CMD_S2C_Aim::isaim() const {
  return isaim_;
}
inline void CMD_S2C_Aim::set_isaim(::google::protobuf::int32 value) {
  set_has_isaim();
  isaim_ = value;
}

// required int32 seatId = 2;
inline bool CMD_S2C_Aim::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_Aim::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_Aim::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_Aim::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 CMD_S2C_Aim::seatid() const {
  return seatid_;
}
inline void CMD_S2C_Aim::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_OctoposMultiple

// required int32 octoposMultiple = 1;
inline bool CMD_S2C_OctoposMultiple::has_octoposmultiple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_OctoposMultiple::set_has_octoposmultiple() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_OctoposMultiple::clear_has_octoposmultiple() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_OctoposMultiple::clear_octoposmultiple() {
  octoposmultiple_ = 0;
  clear_has_octoposmultiple();
}
inline ::google::protobuf::int32 CMD_S2C_OctoposMultiple::octoposmultiple() const {
  return octoposmultiple_;
}
inline void CMD_S2C_OctoposMultiple::set_octoposmultiple(::google::protobuf::int32 value) {
  set_has_octoposmultiple();
  octoposmultiple_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_TriggerFireProgress

// required int32 seat = 1;
inline bool CMD_S2C_TriggerFireProgress::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_TriggerFireProgress::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_TriggerFireProgress::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_TriggerFireProgress::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 CMD_S2C_TriggerFireProgress::seat() const {
  return seat_;
}
inline void CMD_S2C_TriggerFireProgress::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// required float progress = 2;
inline bool CMD_S2C_TriggerFireProgress::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_TriggerFireProgress::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_TriggerFireProgress::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_TriggerFireProgress::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
inline float CMD_S2C_TriggerFireProgress::progress() const {
  return progress_;
}
inline void CMD_S2C_TriggerFireProgress::set_progress(float value) {
  set_has_progress();
  progress_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2c
}  // namespace fish3d
}  // namespace game

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Game_2fFish3D_2ffish3d_5fs2c_2eproto__INCLUDED

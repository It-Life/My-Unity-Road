// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/Fish3D/fish3d_s2c.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Game/Fish3D/fish3d_s2c.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace fish3d {
namespace s2c {

void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto() {
  delete CMD_S2C_AndroidUpdate::default_instance_;
  delete CMD_S2C_SyncServerTime::default_instance_;
  delete CMD_S2C_FormTimeInfo::default_instance_;
  delete tagFormFishOutInfo::default_instance_;
  delete CMD_S2C_FishFormInfo::default_instance_;
  delete tagSeatUserInfo::default_instance_;
  delete CMD_S2C_FishpondPlayer::default_instance_;
  delete tagFishInfo::default_instance_;
  delete CMD_S2C_FishpondFish::default_instance_;
  delete tagFISHPOS::default_instance_;
  delete tagBulletInfo::default_instance_;
  delete CMD_S2C_FishpondBullet::default_instance_;
  delete tagFreezeInfo::default_instance_;
  delete CMD_S2C_FreezeFishInfo::default_instance_;
  delete CMD_S2C_NewFishData::default_instance_;
  delete CMD_S2C_SeatUserData::default_instance_;
  delete CMD_S2C_GlobalInfo::default_instance_;
  delete CMD_S2C_BulletInfo::default_instance_;
  delete CMD_S2C_HitFishInfo::default_instance_;
  delete CMD_S2C_SkillHitFishInfo::default_instance_;
  delete CMD_S2C_ErrorInfo::default_instance_;
  delete CMD_S2C_ItemEffect::default_instance_;
  delete CMD_S2C_AimFishInfo::default_instance_;
  delete CMD_S2C_AddSilverInfo::default_instance_;
  delete CMD_S2C_BoomFishInfo::default_instance_;
  delete CMD_S2C_ServerVersion::default_instance_;
  delete CMD_S2C_AddPhoneTicketInfo::default_instance_;
  delete CMD_S2C_SpecialBulletInfo::default_instance_;
  delete CMD_S2C_Reward::default_instance_;
  delete CMD_S2C_Aim::default_instance_;
  delete CMD_S2C_OctoposMultiple::default_instance_;
  delete CMD_S2C_TriggerFireProgress::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CMD_S2C_AndroidUpdate::default_instance_ = new CMD_S2C_AndroidUpdate();
  CMD_S2C_SyncServerTime::default_instance_ = new CMD_S2C_SyncServerTime();
  CMD_S2C_FormTimeInfo::default_instance_ = new CMD_S2C_FormTimeInfo();
  tagFormFishOutInfo::default_instance_ = new tagFormFishOutInfo();
  CMD_S2C_FishFormInfo::default_instance_ = new CMD_S2C_FishFormInfo();
  tagSeatUserInfo::default_instance_ = new tagSeatUserInfo();
  CMD_S2C_FishpondPlayer::default_instance_ = new CMD_S2C_FishpondPlayer();
  tagFishInfo::default_instance_ = new tagFishInfo();
  CMD_S2C_FishpondFish::default_instance_ = new CMD_S2C_FishpondFish();
  tagFISHPOS::default_instance_ = new tagFISHPOS();
  tagBulletInfo::default_instance_ = new tagBulletInfo();
  CMD_S2C_FishpondBullet::default_instance_ = new CMD_S2C_FishpondBullet();
  tagFreezeInfo::default_instance_ = new tagFreezeInfo();
  CMD_S2C_FreezeFishInfo::default_instance_ = new CMD_S2C_FreezeFishInfo();
  CMD_S2C_NewFishData::default_instance_ = new CMD_S2C_NewFishData();
  CMD_S2C_SeatUserData::default_instance_ = new CMD_S2C_SeatUserData();
  CMD_S2C_GlobalInfo::default_instance_ = new CMD_S2C_GlobalInfo();
  CMD_S2C_BulletInfo::default_instance_ = new CMD_S2C_BulletInfo();
  CMD_S2C_HitFishInfo::default_instance_ = new CMD_S2C_HitFishInfo();
  CMD_S2C_SkillHitFishInfo::default_instance_ = new CMD_S2C_SkillHitFishInfo();
  CMD_S2C_ErrorInfo::default_instance_ = new CMD_S2C_ErrorInfo();
  CMD_S2C_ItemEffect::default_instance_ = new CMD_S2C_ItemEffect();
  CMD_S2C_AimFishInfo::default_instance_ = new CMD_S2C_AimFishInfo();
  CMD_S2C_AddSilverInfo::default_instance_ = new CMD_S2C_AddSilverInfo();
  CMD_S2C_BoomFishInfo::default_instance_ = new CMD_S2C_BoomFishInfo();
  CMD_S2C_ServerVersion::default_instance_ = new CMD_S2C_ServerVersion();
  CMD_S2C_AddPhoneTicketInfo::default_instance_ = new CMD_S2C_AddPhoneTicketInfo();
  CMD_S2C_SpecialBulletInfo::default_instance_ = new CMD_S2C_SpecialBulletInfo();
  CMD_S2C_Reward::default_instance_ = new CMD_S2C_Reward();
  CMD_S2C_Aim::default_instance_ = new CMD_S2C_Aim();
  CMD_S2C_OctoposMultiple::default_instance_ = new CMD_S2C_OctoposMultiple();
  CMD_S2C_TriggerFireProgress::default_instance_ = new CMD_S2C_TriggerFireProgress();
  CMD_S2C_AndroidUpdate::default_instance_->InitAsDefaultInstance();
  CMD_S2C_SyncServerTime::default_instance_->InitAsDefaultInstance();
  CMD_S2C_FormTimeInfo::default_instance_->InitAsDefaultInstance();
  tagFormFishOutInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_FishFormInfo::default_instance_->InitAsDefaultInstance();
  tagSeatUserInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_FishpondPlayer::default_instance_->InitAsDefaultInstance();
  tagFishInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_FishpondFish::default_instance_->InitAsDefaultInstance();
  tagFISHPOS::default_instance_->InitAsDefaultInstance();
  tagBulletInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_FishpondBullet::default_instance_->InitAsDefaultInstance();
  tagFreezeInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_FreezeFishInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_NewFishData::default_instance_->InitAsDefaultInstance();
  CMD_S2C_SeatUserData::default_instance_->InitAsDefaultInstance();
  CMD_S2C_GlobalInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_BulletInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_HitFishInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_SkillHitFishInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_ErrorInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_ItemEffect::default_instance_->InitAsDefaultInstance();
  CMD_S2C_AimFishInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_AddSilverInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_BoomFishInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_ServerVersion::default_instance_->InitAsDefaultInstance();
  CMD_S2C_AddPhoneTicketInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_SpecialBulletInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_Reward::default_instance_->InitAsDefaultInstance();
  CMD_S2C_Aim::default_instance_->InitAsDefaultInstance();
  CMD_S2C_OctoposMultiple::default_instance_->InitAsDefaultInstance();
  CMD_S2C_TriggerFireProgress::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fs2c_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_once_);
void protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_once_,
                 &protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Game_2fFish3D_2ffish3d_5fs2c_2eproto {
  StaticDescriptorInitializer_Game_2fFish3D_2ffish3d_5fs2c_2eproto() {
    protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
  }
} static_descriptor_initializer_Game_2fFish3D_2ffish3d_5fs2c_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_AndroidUpdate::kServerTimeFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_AndroidUpdate::CMD_S2C_AndroidUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_AndroidUpdate::InitAsDefaultInstance() {
}

CMD_S2C_AndroidUpdate::CMD_S2C_AndroidUpdate(const CMD_S2C_AndroidUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_AndroidUpdate::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_AndroidUpdate::~CMD_S2C_AndroidUpdate() {
  SharedDtor();
}

void CMD_S2C_AndroidUpdate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_AndroidUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_AndroidUpdate& CMD_S2C_AndroidUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_AndroidUpdate* CMD_S2C_AndroidUpdate::default_instance_ = NULL;

CMD_S2C_AndroidUpdate* CMD_S2C_AndroidUpdate::New() const {
  return new CMD_S2C_AndroidUpdate;
}

void CMD_S2C_AndroidUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_AndroidUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 serverTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_AndroidUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 serverTime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->servertime(), output);
  }

}

int CMD_S2C_AndroidUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 serverTime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_AndroidUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_AndroidUpdate*>(&from));
}

void CMD_S2C_AndroidUpdate::MergeFrom(const CMD_S2C_AndroidUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
}

void CMD_S2C_AndroidUpdate::CopyFrom(const CMD_S2C_AndroidUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_AndroidUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_S2C_AndroidUpdate::Swap(CMD_S2C_AndroidUpdate* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_AndroidUpdate::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_AndroidUpdate";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_SyncServerTime::kServerTimeFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_SyncServerTime::CMD_S2C_SyncServerTime()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_SyncServerTime::InitAsDefaultInstance() {
}

CMD_S2C_SyncServerTime::CMD_S2C_SyncServerTime(const CMD_S2C_SyncServerTime& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_SyncServerTime::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_SyncServerTime::~CMD_S2C_SyncServerTime() {
  SharedDtor();
}

void CMD_S2C_SyncServerTime::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_SyncServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_SyncServerTime& CMD_S2C_SyncServerTime::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_SyncServerTime* CMD_S2C_SyncServerTime::default_instance_ = NULL;

CMD_S2C_SyncServerTime* CMD_S2C_SyncServerTime::New() const {
  return new CMD_S2C_SyncServerTime;
}

void CMD_S2C_SyncServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_SyncServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 serverTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_SyncServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 serverTime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->servertime(), output);
  }

}

int CMD_S2C_SyncServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 serverTime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_SyncServerTime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_SyncServerTime*>(&from));
}

void CMD_S2C_SyncServerTime::MergeFrom(const CMD_S2C_SyncServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
}

void CMD_S2C_SyncServerTime::CopyFrom(const CMD_S2C_SyncServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_SyncServerTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_S2C_SyncServerTime::Swap(CMD_S2C_SyncServerTime* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_SyncServerTime::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_SyncServerTime";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_FormTimeInfo::kIsBeginFieldNumber;
const int CMD_S2C_FormTimeInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_FormTimeInfo::CMD_S2C_FormTimeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_FormTimeInfo::InitAsDefaultInstance() {
}

CMD_S2C_FormTimeInfo::CMD_S2C_FormTimeInfo(const CMD_S2C_FormTimeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_FormTimeInfo::SharedCtor() {
  _cached_size_ = 0;
  isbegin_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_FormTimeInfo::~CMD_S2C_FormTimeInfo() {
  SharedDtor();
}

void CMD_S2C_FormTimeInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_FormTimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_FormTimeInfo& CMD_S2C_FormTimeInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_FormTimeInfo* CMD_S2C_FormTimeInfo::default_instance_ = NULL;

CMD_S2C_FormTimeInfo* CMD_S2C_FormTimeInfo::New() const {
  return new CMD_S2C_FormTimeInfo;
}

void CMD_S2C_FormTimeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isbegin_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_FormTimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isBegin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbegin_)));
          set_has_isbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_FormTimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isBegin = 1;
  if (has_isbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isbegin(), output);
  }

  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

}

int CMD_S2C_FormTimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isBegin = 1;
    if (has_isbegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbegin());
    }

    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_FormTimeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_FormTimeInfo*>(&from));
}

void CMD_S2C_FormTimeInfo::MergeFrom(const CMD_S2C_FormTimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isbegin()) {
      set_isbegin(from.isbegin());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void CMD_S2C_FormTimeInfo::CopyFrom(const CMD_S2C_FormTimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_FormTimeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_FormTimeInfo::Swap(CMD_S2C_FormTimeInfo* other) {
  if (other != this) {
    std::swap(isbegin_, other->isbegin_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_FormTimeInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_FormTimeInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int tagFormFishOutInfo::kOutIdFieldNumber;
const int tagFormFishOutInfo::kFishIdFieldNumber;
const int tagFormFishOutInfo::kFishSeqIdFieldNumber;
const int tagFormFishOutInfo::kTraceIdFieldNumber;
const int tagFormFishOutInfo::kBeginTimeFieldNumber;
const int tagFormFishOutInfo::kRemainNumFieldNumber;
const int tagFormFishOutInfo::kIntervalFieldNumber;
const int tagFormFishOutInfo::kAliveFishFieldNumber;
#endif  // !_MSC_VER

tagFormFishOutInfo::tagFormFishOutInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagFormFishOutInfo::InitAsDefaultInstance() {
}

tagFormFishOutInfo::tagFormFishOutInfo(const tagFormFishOutInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagFormFishOutInfo::SharedCtor() {
  _cached_size_ = 0;
  outid_ = 0;
  fishid_ = 0;
  fishseqid_ = 0;
  traceid_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  remainnum_ = 0;
  interval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagFormFishOutInfo::~tagFormFishOutInfo() {
  SharedDtor();
}

void tagFormFishOutInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void tagFormFishOutInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagFormFishOutInfo& tagFormFishOutInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagFormFishOutInfo* tagFormFishOutInfo::default_instance_ = NULL;

tagFormFishOutInfo* tagFormFishOutInfo::New() const {
  return new tagFormFishOutInfo;
}

void tagFormFishOutInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outid_ = 0;
    fishid_ = 0;
    fishseqid_ = 0;
    traceid_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    remainnum_ = 0;
    interval_ = 0;
  }
  alivefish_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagFormFishOutInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 outId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outid_)));
          set_has_outid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishId;
        break;
      }

      // required int32 fishId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fishSeqId;
        break;
      }

      // required int32 fishSeqId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishSeqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishseqid_)));
          set_has_fishseqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_traceId;
        break;
      }

      // required int32 traceId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traceid_)));
          set_has_traceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_beginTime;
        break;
      }

      // required int64 beginTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remainNum;
        break;
      }

      // required int32 remainNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainnum_)));
          set_has_remainnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_interval;
        break;
      }

      // required int32 interval = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_aliveFish;
        break;
      }

      // repeated int64 aliveFish = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aliveFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64, input, this->mutable_alivefish())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_alivefish())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_aliveFish;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagFormFishOutInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 outId = 1;
  if (has_outid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outid(), output);
  }

  // required int32 fishId = 2;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishid(), output);
  }

  // required int32 fishSeqId = 3;
  if (has_fishseqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fishseqid(), output);
  }

  // required int32 traceId = 4;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->traceid(), output);
  }

  // required int64 beginTime = 5;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->begintime(), output);
  }

  // required int32 remainNum = 6;
  if (has_remainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remainnum(), output);
  }

  // required int32 interval = 7;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->interval(), output);
  }

  // repeated int64 aliveFish = 8;
  for (int i = 0; i < this->alivefish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->alivefish(i), output);
  }

}

int tagFormFishOutInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 outId = 1;
    if (has_outid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outid());
    }

    // required int32 fishId = 2;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }

    // required int32 fishSeqId = 3;
    if (has_fishseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishseqid());
    }

    // required int32 traceId = 4;
    if (has_traceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traceid());
    }

    // required int64 beginTime = 5;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // required int32 remainNum = 6;
    if (has_remainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainnum());
    }

    // required int32 interval = 7;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

  }
  // repeated int64 aliveFish = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->alivefish_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->alivefish(i));
    }
    total_size += 1 * this->alivefish_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagFormFishOutInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagFormFishOutInfo*>(&from));
}

void tagFormFishOutInfo::MergeFrom(const tagFormFishOutInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  alivefish_.MergeFrom(from.alivefish_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outid()) {
      set_outid(from.outid());
    }
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_fishseqid()) {
      set_fishseqid(from.fishseqid());
    }
    if (from.has_traceid()) {
      set_traceid(from.traceid());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_remainnum()) {
      set_remainnum(from.remainnum());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
}

void tagFormFishOutInfo::CopyFrom(const tagFormFishOutInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagFormFishOutInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void tagFormFishOutInfo::Swap(tagFormFishOutInfo* other) {
  if (other != this) {
    std::swap(outid_, other->outid_);
    std::swap(fishid_, other->fishid_);
    std::swap(fishseqid_, other->fishseqid_);
    std::swap(traceid_, other->traceid_);
    std::swap(begintime_, other->begintime_);
    std::swap(remainnum_, other->remainnum_);
    std::swap(interval_, other->interval_);
    alivefish_.Swap(&other->alivefish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagFormFishOutInfo::GetTypeName() const {
  return "game.fish3d.s2c.tagFormFishOutInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_FishFormInfo::kOutInfoFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_FishFormInfo::CMD_S2C_FishFormInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_FishFormInfo::InitAsDefaultInstance() {
}

CMD_S2C_FishFormInfo::CMD_S2C_FishFormInfo(const CMD_S2C_FishFormInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_FishFormInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_FishFormInfo::~CMD_S2C_FishFormInfo() {
  SharedDtor();
}

void CMD_S2C_FishFormInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_FishFormInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_FishFormInfo& CMD_S2C_FishFormInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_FishFormInfo* CMD_S2C_FishFormInfo::default_instance_ = NULL;

CMD_S2C_FishFormInfo* CMD_S2C_FishFormInfo::New() const {
  return new CMD_S2C_FishFormInfo;
}

void CMD_S2C_FishFormInfo::Clear() {
  outinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_FishFormInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.fish3d.s2c.tagFormFishOutInfo outInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_outInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_FishFormInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .game.fish3d.s2c.tagFormFishOutInfo outInfo = 1;
  for (int i = 0; i < this->outinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->outinfo(i), output);
  }

}

int CMD_S2C_FishFormInfo::ByteSize() const {
  int total_size = 0;

  // repeated .game.fish3d.s2c.tagFormFishOutInfo outInfo = 1;
  total_size += 1 * this->outinfo_size();
  for (int i = 0; i < this->outinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_FishFormInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_FishFormInfo*>(&from));
}

void CMD_S2C_FishFormInfo::MergeFrom(const CMD_S2C_FishFormInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  outinfo_.MergeFrom(from.outinfo_);
}

void CMD_S2C_FishFormInfo::CopyFrom(const CMD_S2C_FishFormInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_FishFormInfo::IsInitialized() const {

  for (int i = 0; i < outinfo_size(); i++) {
    if (!this->outinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_FishFormInfo::Swap(CMD_S2C_FishFormInfo* other) {
  if (other != this) {
    outinfo_.Swap(&other->outinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_FishFormInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_FishFormInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int tagSeatUserInfo::kHasPlayerFieldNumber;
const int tagSeatUserInfo::kSeatFieldNumber;
const int tagSeatUserInfo::kGunIDFieldNumber;
const int tagSeatUserInfo::kGunTypeFieldNumber;
const int tagSeatUserInfo::kSilverFieldNumber;
const int tagSeatUserInfo::kTotalSilverFieldNumber;
const int tagSeatUserInfo::kBulletsFieldNumber;
const int tagSeatUserInfo::kNumIdFieldNumber;
const int tagSeatUserInfo::kIsRobotFieldNumber;
const int tagSeatUserInfo::kIsOutboardFieldNumber;
const int tagSeatUserInfo::kIsAimFieldNumber;
const int tagSeatUserInfo::kIsAutoFireFieldNumber;
#endif  // !_MSC_VER

tagSeatUserInfo::tagSeatUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagSeatUserInfo::InitAsDefaultInstance() {
}

tagSeatUserInfo::tagSeatUserInfo(const tagSeatUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagSeatUserInfo::SharedCtor() {
  _cached_size_ = 0;
  hasplayer_ = 0;
  seat_ = 0;
  gunid_ = 0;
  guntype_ = 0;
  silver_ = GOOGLE_LONGLONG(0);
  totalsilver_ = GOOGLE_LONGLONG(0);
  bullets_ = GOOGLE_LONGLONG(0);
  numid_ = 0;
  isrobot_ = 0;
  isoutboard_ = 0;
  isaim_ = 0;
  isautofire_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagSeatUserInfo::~tagSeatUserInfo() {
  SharedDtor();
}

void tagSeatUserInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void tagSeatUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagSeatUserInfo& tagSeatUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagSeatUserInfo* tagSeatUserInfo::default_instance_ = NULL;

tagSeatUserInfo* tagSeatUserInfo::New() const {
  return new tagSeatUserInfo;
}

void tagSeatUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasplayer_ = 0;
    seat_ = 0;
    gunid_ = 0;
    guntype_ = 0;
    silver_ = GOOGLE_LONGLONG(0);
    totalsilver_ = GOOGLE_LONGLONG(0);
    bullets_ = GOOGLE_LONGLONG(0);
    numid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isrobot_ = 0;
    isoutboard_ = 0;
    isaim_ = 0;
    isautofire_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagSeatUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hasPlayer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasplayer_)));
          set_has_hasplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }

      // required int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gunID;
        break;
      }

      // required int32 gunID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunid_)));
          set_has_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gunType;
        break;
      }

      // required int32 gunType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gunType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guntype_)));
          set_has_guntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_silver;
        break;
      }

      // required int64 silver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalSilver;
        break;
      }

      // required int64 totalSilver = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalsilver_)));
          set_has_totalsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bullets;
        break;
      }

      // required int64 bullets = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bullets_)));
          set_has_bullets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_numId;
        break;
      }

      // required int32 numId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numid_)));
          set_has_numid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isRobot;
        break;
      }

      // required int32 isRobot = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isOutboard;
        break;
      }

      // required int32 isOutboard = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOutboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isoutboard_)));
          set_has_isoutboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isAim;
        break;
      }

      // required int32 isAim = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isaim_)));
          set_has_isaim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isAutoFire;
        break;
      }

      // required int32 isAutoFire = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoFire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isautofire_)));
          set_has_isautofire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagSeatUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hasPlayer = 1;
  if (has_hasplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hasplayer(), output);
  }

  // required int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // required int32 gunID = 3;
  if (has_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gunid(), output);
  }

  // required int32 gunType = 4;
  if (has_guntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guntype(), output);
  }

  // required int64 silver = 5;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->silver(), output);
  }

  // required int64 totalSilver = 6;
  if (has_totalsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->totalsilver(), output);
  }

  // required int64 bullets = 7;
  if (has_bullets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->bullets(), output);
  }

  // required int32 numId = 8;
  if (has_numid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->numid(), output);
  }

  // required int32 isRobot = 9;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isrobot(), output);
  }

  // required int32 isOutboard = 10;
  if (has_isoutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isoutboard(), output);
  }

  // required int32 isAim = 11;
  if (has_isaim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isaim(), output);
  }

  // required int32 isAutoFire = 12;
  if (has_isautofire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->isautofire(), output);
  }

}

int tagSeatUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hasPlayer = 1;
    if (has_hasplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasplayer());
    }

    // required int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 gunID = 3;
    if (has_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunid());
    }

    // required int32 gunType = 4;
    if (has_guntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guntype());
    }

    // required int64 silver = 5;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->silver());
    }

    // required int64 totalSilver = 6;
    if (has_totalsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalsilver());
    }

    // required int64 bullets = 7;
    if (has_bullets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bullets());
    }

    // required int32 numId = 8;
    if (has_numid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 isRobot = 9;
    if (has_isrobot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrobot());
    }

    // required int32 isOutboard = 10;
    if (has_isoutboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isoutboard());
    }

    // required int32 isAim = 11;
    if (has_isaim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isaim());
    }

    // required int32 isAutoFire = 12;
    if (has_isautofire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isautofire());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagSeatUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagSeatUserInfo*>(&from));
}

void tagSeatUserInfo::MergeFrom(const tagSeatUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasplayer()) {
      set_hasplayer(from.hasplayer());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_gunid()) {
      set_gunid(from.gunid());
    }
    if (from.has_guntype()) {
      set_guntype(from.guntype());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_totalsilver()) {
      set_totalsilver(from.totalsilver());
    }
    if (from.has_bullets()) {
      set_bullets(from.bullets());
    }
    if (from.has_numid()) {
      set_numid(from.numid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_isoutboard()) {
      set_isoutboard(from.isoutboard());
    }
    if (from.has_isaim()) {
      set_isaim(from.isaim());
    }
    if (from.has_isautofire()) {
      set_isautofire(from.isautofire());
    }
  }
}

void tagSeatUserInfo::CopyFrom(const tagSeatUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagSeatUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void tagSeatUserInfo::Swap(tagSeatUserInfo* other) {
  if (other != this) {
    std::swap(hasplayer_, other->hasplayer_);
    std::swap(seat_, other->seat_);
    std::swap(gunid_, other->gunid_);
    std::swap(guntype_, other->guntype_);
    std::swap(silver_, other->silver_);
    std::swap(totalsilver_, other->totalsilver_);
    std::swap(bullets_, other->bullets_);
    std::swap(numid_, other->numid_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(isoutboard_, other->isoutboard_);
    std::swap(isaim_, other->isaim_);
    std::swap(isautofire_, other->isautofire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagSeatUserInfo::GetTypeName() const {
  return "game.fish3d.s2c.tagSeatUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_FishpondPlayer::kUserInfoFieldNumber;
const int CMD_S2C_FishpondPlayer::kNickNameFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_FishpondPlayer::CMD_S2C_FishpondPlayer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_FishpondPlayer::InitAsDefaultInstance() {
}

CMD_S2C_FishpondPlayer::CMD_S2C_FishpondPlayer(const CMD_S2C_FishpondPlayer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_FishpondPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_FishpondPlayer::~CMD_S2C_FishpondPlayer() {
  SharedDtor();
}

void CMD_S2C_FishpondPlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_FishpondPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_FishpondPlayer& CMD_S2C_FishpondPlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_FishpondPlayer* CMD_S2C_FishpondPlayer::default_instance_ = NULL;

CMD_S2C_FishpondPlayer* CMD_S2C_FishpondPlayer::New() const {
  return new CMD_S2C_FishpondPlayer;
}

void CMD_S2C_FishpondPlayer::Clear() {
  userinfo_.Clear();
  nickname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_FishpondPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.fish3d.s2c.tagSeatUserInfo userInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userInfo;
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // repeated string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_FishpondPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .game.fish3d.s2c.tagSeatUserInfo userInfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->userinfo(i), output);
  }

  // repeated string nickName = 2;
  for (int i = 0; i < this->nickname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(i), output);
  }

}

int CMD_S2C_FishpondPlayer::ByteSize() const {
  int total_size = 0;

  // repeated .game.fish3d.s2c.tagSeatUserInfo userInfo = 1;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  // repeated string nickName = 2;
  total_size += 1 * this->nickname_size();
  for (int i = 0; i < this->nickname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nickname(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_FishpondPlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_FishpondPlayer*>(&from));
}

void CMD_S2C_FishpondPlayer::MergeFrom(const CMD_S2C_FishpondPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  nickname_.MergeFrom(from.nickname_);
}

void CMD_S2C_FishpondPlayer::CopyFrom(const CMD_S2C_FishpondPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_FishpondPlayer::IsInitialized() const {

  for (int i = 0; i < userinfo_size(); i++) {
    if (!this->userinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_FishpondPlayer::Swap(CMD_S2C_FishpondPlayer* other) {
  if (other != this) {
    userinfo_.Swap(&other->userinfo_);
    nickname_.Swap(&other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_FishpondPlayer::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_FishpondPlayer";
}


// ===================================================================

#ifndef _MSC_VER
const int tagFishInfo::kFishUniqIdFieldNumber;
const int tagFishInfo::kFishIdFieldNumber;
const int tagFishInfo::kTraceIdFieldNumber;
const int tagFishInfo::kBornTimeFieldNumber;
const int tagFishInfo::kDeadTimeFieldNumber;
const int tagFishInfo::kTotalFreezeTimeFieldNumber;
const int tagFishInfo::kIndexFieldNumber;
#endif  // !_MSC_VER

tagFishInfo::tagFishInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagFishInfo::InitAsDefaultInstance() {
}

tagFishInfo::tagFishInfo(const tagFishInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagFishInfo::SharedCtor() {
  _cached_size_ = 0;
  fishuniqid_ = 0;
  fishid_ = 0;
  traceid_ = 0;
  borntime_ = GOOGLE_LONGLONG(0);
  deadtime_ = GOOGLE_LONGLONG(0);
  totalfreezetime_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagFishInfo::~tagFishInfo() {
  SharedDtor();
}

void tagFishInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void tagFishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagFishInfo& tagFishInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagFishInfo* tagFishInfo::default_instance_ = NULL;

tagFishInfo* tagFishInfo::New() const {
  return new tagFishInfo;
}

void tagFishInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fishuniqid_ = 0;
    fishid_ = 0;
    traceid_ = 0;
    borntime_ = GOOGLE_LONGLONG(0);
    deadtime_ = GOOGLE_LONGLONG(0);
    totalfreezetime_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagFishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fishUniqId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishuniqid_)));
          set_has_fishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishId;
        break;
      }

      // required int32 fishId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_traceId;
        break;
      }

      // required int32 traceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traceid_)));
          set_has_traceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bornTime;
        break;
      }

      // required int64 bornTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &borntime_)));
          set_has_borntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deadTime;
        break;
      }

      // required int64 deadTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadtime_)));
          set_has_deadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalFreezeTime;
        break;
      }

      // required int32 totalFreezeTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalFreezeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalfreezetime_)));
          set_has_totalfreezetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_index;
        break;
      }

      // required int32 index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagFishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fishUniqId = 1;
  if (has_fishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishuniqid(), output);
  }

  // required int32 fishId = 2;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishid(), output);
  }

  // required int32 traceId = 3;
  if (has_traceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->traceid(), output);
  }

  // required int64 bornTime = 4;
  if (has_borntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->borntime(), output);
  }

  // required int64 deadTime = 5;
  if (has_deadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->deadtime(), output);
  }

  // required int32 totalFreezeTime = 6;
  if (has_totalfreezetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalfreezetime(), output);
  }

  // required int32 index = 7;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->index(), output);
  }

}

int tagFishInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fishUniqId = 1;
    if (has_fishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishuniqid());
    }

    // required int32 fishId = 2;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }

    // required int32 traceId = 3;
    if (has_traceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traceid());
    }

    // required int64 bornTime = 4;
    if (has_borntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->borntime());
    }

    // required int64 deadTime = 5;
    if (has_deadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deadtime());
    }

    // required int32 totalFreezeTime = 6;
    if (has_totalfreezetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalfreezetime());
    }

    // required int32 index = 7;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagFishInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagFishInfo*>(&from));
}

void tagFishInfo::MergeFrom(const tagFishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fishuniqid()) {
      set_fishuniqid(from.fishuniqid());
    }
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_traceid()) {
      set_traceid(from.traceid());
    }
    if (from.has_borntime()) {
      set_borntime(from.borntime());
    }
    if (from.has_deadtime()) {
      set_deadtime(from.deadtime());
    }
    if (from.has_totalfreezetime()) {
      set_totalfreezetime(from.totalfreezetime());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
}

void tagFishInfo::CopyFrom(const tagFishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagFishInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void tagFishInfo::Swap(tagFishInfo* other) {
  if (other != this) {
    std::swap(fishuniqid_, other->fishuniqid_);
    std::swap(fishid_, other->fishid_);
    std::swap(traceid_, other->traceid_);
    std::swap(borntime_, other->borntime_);
    std::swap(deadtime_, other->deadtime_);
    std::swap(totalfreezetime_, other->totalfreezetime_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagFishInfo::GetTypeName() const {
  return "game.fish3d.s2c.tagFishInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_FishpondFish::kFishInfoFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_FishpondFish::CMD_S2C_FishpondFish()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_FishpondFish::InitAsDefaultInstance() {
}

CMD_S2C_FishpondFish::CMD_S2C_FishpondFish(const CMD_S2C_FishpondFish& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_FishpondFish::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_FishpondFish::~CMD_S2C_FishpondFish() {
  SharedDtor();
}

void CMD_S2C_FishpondFish::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_FishpondFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_FishpondFish& CMD_S2C_FishpondFish::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_FishpondFish* CMD_S2C_FishpondFish::default_instance_ = NULL;

CMD_S2C_FishpondFish* CMD_S2C_FishpondFish::New() const {
  return new CMD_S2C_FishpondFish;
}

void CMD_S2C_FishpondFish::Clear() {
  fishinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_FishpondFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fishInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_FishpondFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
  for (int i = 0; i < this->fishinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->fishinfo(i), output);
  }

}

int CMD_S2C_FishpondFish::ByteSize() const {
  int total_size = 0;

  // repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
  total_size += 1 * this->fishinfo_size();
  for (int i = 0; i < this->fishinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_FishpondFish::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_FishpondFish*>(&from));
}

void CMD_S2C_FishpondFish::MergeFrom(const CMD_S2C_FishpondFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishinfo_.MergeFrom(from.fishinfo_);
}

void CMD_S2C_FishpondFish::CopyFrom(const CMD_S2C_FishpondFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_FishpondFish::IsInitialized() const {

  for (int i = 0; i < fishinfo_size(); i++) {
    if (!this->fishinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_FishpondFish::Swap(CMD_S2C_FishpondFish* other) {
  if (other != this) {
    fishinfo_.Swap(&other->fishinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_FishpondFish::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_FishpondFish";
}


// ===================================================================

#ifndef _MSC_VER
const int tagFISHPOS::kXFieldNumber;
const int tagFISHPOS::kYFieldNumber;
#endif  // !_MSC_VER

tagFISHPOS::tagFISHPOS()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagFISHPOS::InitAsDefaultInstance() {
}

tagFISHPOS::tagFISHPOS(const tagFISHPOS& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagFISHPOS::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagFISHPOS::~tagFISHPOS() {
  SharedDtor();
}

void tagFISHPOS::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void tagFISHPOS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagFISHPOS& tagFISHPOS::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagFISHPOS* tagFISHPOS::default_instance_ = NULL;

tagFISHPOS* tagFISHPOS::New() const {
  return new tagFISHPOS;
}

void tagFISHPOS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagFISHPOS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagFISHPOS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

}

int tagFISHPOS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagFISHPOS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagFISHPOS*>(&from));
}

void tagFISHPOS::MergeFrom(const tagFISHPOS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void tagFISHPOS::CopyFrom(const tagFISHPOS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagFISHPOS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tagFISHPOS::Swap(tagFISHPOS* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagFISHPOS::GetTypeName() const {
  return "game.fish3d.s2c.tagFISHPOS";
}


// ===================================================================

#ifndef _MSC_VER
const int tagBulletInfo::kUniqueIDFieldNumber;
const int tagBulletInfo::kGunIDFieldNumber;
const int tagBulletInfo::kSeatFieldNumber;
const int tagBulletInfo::kTargetPosFieldNumber;
const int tagBulletInfo::kShootTimeFieldNumber;
const int tagBulletInfo::kCostSilverFieldNumber;
const int tagBulletInfo::kFishUniqIDFieldNumber;
const int tagBulletInfo::kIsAimFormFishFieldNumber;
const int tagBulletInfo::kFishIndexFieldNumber;
const int tagBulletInfo::kIsWildBulletFieldNumber;
#endif  // !_MSC_VER

tagBulletInfo::tagBulletInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagBulletInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  targetpos_ = const_cast< ::game::fish3d::s2c::tagFISHPOS*>(
      ::game::fish3d::s2c::tagFISHPOS::internal_default_instance());
#else
  targetpos_ = const_cast< ::game::fish3d::s2c::tagFISHPOS*>(&::game::fish3d::s2c::tagFISHPOS::default_instance());
#endif
}

tagBulletInfo::tagBulletInfo(const tagBulletInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagBulletInfo::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = 0;
  gunid_ = 0;
  seat_ = 0;
  targetpos_ = NULL;
  shoottime_ = GOOGLE_LONGLONG(0);
  costsilver_ = 0;
  fishuniqid_ = 0;
  isaimformfish_ = 0;
  fishindex_ = 0;
  iswildbullet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagBulletInfo::~tagBulletInfo() {
  SharedDtor();
}

void tagBulletInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete targetpos_;
  }
}

void tagBulletInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagBulletInfo& tagBulletInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagBulletInfo* tagBulletInfo::default_instance_ = NULL;

tagBulletInfo* tagBulletInfo::New() const {
  return new tagBulletInfo;
}

void tagBulletInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uniqueid_ = 0;
    gunid_ = 0;
    seat_ = 0;
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::game::fish3d::s2c::tagFISHPOS::Clear();
    }
    shoottime_ = GOOGLE_LONGLONG(0);
    costsilver_ = 0;
    fishuniqid_ = 0;
    isaimformfish_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fishindex_ = 0;
    iswildbullet_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagBulletInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uniqueID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gunID;
        break;
      }

      // required int32 gunID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gunid_)));
          set_has_gunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat;
        break;
      }

      // required int32 seat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetPos;
        break;
      }

      // required .game.fish3d.s2c.tagFISHPOS targetPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shootTime;
        break;
      }

      // required int64 shootTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shootTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shoottime_)));
          set_has_shoottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_costSilver;
        break;
      }

      // required int32 costSilver = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costsilver_)));
          set_has_costsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fishUniqID;
        break;
      }

      // required int32 fishUniqID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishuniqid_)));
          set_has_fishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isAimFormFish;
        break;
      }

      // required int32 isAimFormFish = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAimFormFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isaimformfish_)));
          set_has_isaimformfish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fishIndex;
        break;
      }

      // required int32 fishIndex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishindex_)));
          set_has_fishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isWildBullet;
        break;
      }

      // required int32 isWildBullet = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isWildBullet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iswildbullet_)));
          set_has_iswildbullet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagBulletInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uniqueID = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uniqueid(), output);
  }

  // required int32 gunID = 2;
  if (has_gunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gunid(), output);
  }

  // required int32 seat = 3;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  // required .game.fish3d.s2c.tagFISHPOS targetPos = 4;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->targetpos(), output);
  }

  // required int64 shootTime = 5;
  if (has_shoottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->shoottime(), output);
  }

  // required int32 costSilver = 6;
  if (has_costsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->costsilver(), output);
  }

  // required int32 fishUniqID = 7;
  if (has_fishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fishuniqid(), output);
  }

  // required int32 isAimFormFish = 8;
  if (has_isaimformfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isaimformfish(), output);
  }

  // required int32 fishIndex = 9;
  if (has_fishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fishindex(), output);
  }

  // required int32 isWildBullet = 10;
  if (has_iswildbullet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->iswildbullet(), output);
  }

}

int tagBulletInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uniqueID = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

    // required int32 gunID = 2;
    if (has_gunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gunid());
    }

    // required int32 seat = 3;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required .game.fish3d.s2c.tagFISHPOS targetPos = 4;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // required int64 shootTime = 5;
    if (has_shoottime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shoottime());
    }

    // required int32 costSilver = 6;
    if (has_costsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costsilver());
    }

    // required int32 fishUniqID = 7;
    if (has_fishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishuniqid());
    }

    // required int32 isAimFormFish = 8;
    if (has_isaimformfish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isaimformfish());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 fishIndex = 9;
    if (has_fishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishindex());
    }

    // required int32 isWildBullet = 10;
    if (has_iswildbullet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iswildbullet());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagBulletInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagBulletInfo*>(&from));
}

void tagBulletInfo::MergeFrom(const tagBulletInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_gunid()) {
      set_gunid(from.gunid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::game::fish3d::s2c::tagFISHPOS::MergeFrom(from.targetpos());
    }
    if (from.has_shoottime()) {
      set_shoottime(from.shoottime());
    }
    if (from.has_costsilver()) {
      set_costsilver(from.costsilver());
    }
    if (from.has_fishuniqid()) {
      set_fishuniqid(from.fishuniqid());
    }
    if (from.has_isaimformfish()) {
      set_isaimformfish(from.isaimformfish());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fishindex()) {
      set_fishindex(from.fishindex());
    }
    if (from.has_iswildbullet()) {
      set_iswildbullet(from.iswildbullet());
    }
  }
}

void tagBulletInfo::CopyFrom(const tagBulletInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagBulletInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void tagBulletInfo::Swap(tagBulletInfo* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(gunid_, other->gunid_);
    std::swap(seat_, other->seat_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(shoottime_, other->shoottime_);
    std::swap(costsilver_, other->costsilver_);
    std::swap(fishuniqid_, other->fishuniqid_);
    std::swap(isaimformfish_, other->isaimformfish_);
    std::swap(fishindex_, other->fishindex_);
    std::swap(iswildbullet_, other->iswildbullet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagBulletInfo::GetTypeName() const {
  return "game.fish3d.s2c.tagBulletInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_FishpondBullet::kBulletInfoFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_FishpondBullet::CMD_S2C_FishpondBullet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_FishpondBullet::InitAsDefaultInstance() {
}

CMD_S2C_FishpondBullet::CMD_S2C_FishpondBullet(const CMD_S2C_FishpondBullet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_FishpondBullet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_FishpondBullet::~CMD_S2C_FishpondBullet() {
  SharedDtor();
}

void CMD_S2C_FishpondBullet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_FishpondBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_FishpondBullet& CMD_S2C_FishpondBullet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_FishpondBullet* CMD_S2C_FishpondBullet::default_instance_ = NULL;

CMD_S2C_FishpondBullet* CMD_S2C_FishpondBullet::New() const {
  return new CMD_S2C_FishpondBullet;
}

void CMD_S2C_FishpondBullet::Clear() {
  bulletinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_FishpondBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bulletInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bulletInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_FishpondBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
  for (int i = 0; i < this->bulletinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bulletinfo(i), output);
  }

}

int CMD_S2C_FishpondBullet::ByteSize() const {
  int total_size = 0;

  // repeated .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
  total_size += 1 * this->bulletinfo_size();
  for (int i = 0; i < this->bulletinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_FishpondBullet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_FishpondBullet*>(&from));
}

void CMD_S2C_FishpondBullet::MergeFrom(const CMD_S2C_FishpondBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  bulletinfo_.MergeFrom(from.bulletinfo_);
}

void CMD_S2C_FishpondBullet::CopyFrom(const CMD_S2C_FishpondBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_FishpondBullet::IsInitialized() const {

  for (int i = 0; i < bulletinfo_size(); i++) {
    if (!this->bulletinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_FishpondBullet::Swap(CMD_S2C_FishpondBullet* other) {
  if (other != this) {
    bulletinfo_.Swap(&other->bulletinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_FishpondBullet::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_FishpondBullet";
}


// ===================================================================

#ifndef _MSC_VER
const int tagFreezeInfo::kUniqIdFieldNumber;
const int tagFreezeInfo::kFreezeBeginTimeFieldNumber;
const int tagFreezeInfo::kFreezeContTimeFieldNumber;
const int tagFreezeInfo::kTotalFreezeTimeFieldNumber;
const int tagFreezeInfo::kIsFormFishFieldNumber;
#endif  // !_MSC_VER

tagFreezeInfo::tagFreezeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagFreezeInfo::InitAsDefaultInstance() {
}

tagFreezeInfo::tagFreezeInfo(const tagFreezeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagFreezeInfo::SharedCtor() {
  _cached_size_ = 0;
  uniqid_ = 0;
  freezebegintime_ = GOOGLE_LONGLONG(0);
  freezeconttime_ = 0;
  totalfreezetime_ = 0;
  isformfish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagFreezeInfo::~tagFreezeInfo() {
  SharedDtor();
}

void tagFreezeInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void tagFreezeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagFreezeInfo& tagFreezeInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagFreezeInfo* tagFreezeInfo::default_instance_ = NULL;

tagFreezeInfo* tagFreezeInfo::New() const {
  return new tagFreezeInfo;
}

void tagFreezeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uniqid_ = 0;
    freezebegintime_ = GOOGLE_LONGLONG(0);
    freezeconttime_ = 0;
    totalfreezetime_ = 0;
    isformfish_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagFreezeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uniqId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqid_)));
          set_has_uniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freezeBeginTime;
        break;
      }

      // required int64 freezeBeginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freezeBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freezebegintime_)));
          set_has_freezebegintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freezeContTime;
        break;
      }

      // required int32 freezeContTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freezeContTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freezeconttime_)));
          set_has_freezeconttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalFreezeTime;
        break;
      }

      // required int32 totalFreezeTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalFreezeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalfreezetime_)));
          set_has_totalfreezetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isFormFish;
        break;
      }

      // required int32 isFormFish = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFormFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isformfish_)));
          set_has_isformfish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagFreezeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uniqId = 1;
  if (has_uniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uniqid(), output);
  }

  // required int64 freezeBeginTime = 2;
  if (has_freezebegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->freezebegintime(), output);
  }

  // required int32 freezeContTime = 3;
  if (has_freezeconttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freezeconttime(), output);
  }

  // required int32 totalFreezeTime = 4;
  if (has_totalfreezetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalfreezetime(), output);
  }

  // required int32 isFormFish = 5;
  if (has_isformfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isformfish(), output);
  }

}

int tagFreezeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uniqId = 1;
    if (has_uniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqid());
    }

    // required int64 freezeBeginTime = 2;
    if (has_freezebegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freezebegintime());
    }

    // required int32 freezeContTime = 3;
    if (has_freezeconttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freezeconttime());
    }

    // required int32 totalFreezeTime = 4;
    if (has_totalfreezetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalfreezetime());
    }

    // required int32 isFormFish = 5;
    if (has_isformfish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isformfish());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagFreezeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagFreezeInfo*>(&from));
}

void tagFreezeInfo::MergeFrom(const tagFreezeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqid()) {
      set_uniqid(from.uniqid());
    }
    if (from.has_freezebegintime()) {
      set_freezebegintime(from.freezebegintime());
    }
    if (from.has_freezeconttime()) {
      set_freezeconttime(from.freezeconttime());
    }
    if (from.has_totalfreezetime()) {
      set_totalfreezetime(from.totalfreezetime());
    }
    if (from.has_isformfish()) {
      set_isformfish(from.isformfish());
    }
  }
}

void tagFreezeInfo::CopyFrom(const tagFreezeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagFreezeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void tagFreezeInfo::Swap(tagFreezeInfo* other) {
  if (other != this) {
    std::swap(uniqid_, other->uniqid_);
    std::swap(freezebegintime_, other->freezebegintime_);
    std::swap(freezeconttime_, other->freezeconttime_);
    std::swap(totalfreezetime_, other->totalfreezetime_);
    std::swap(isformfish_, other->isformfish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagFreezeInfo::GetTypeName() const {
  return "game.fish3d.s2c.tagFreezeInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_FreezeFishInfo::kSeatFieldNumber;
const int CMD_S2C_FreezeFishInfo::kFreezeInfoFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_FreezeFishInfo::CMD_S2C_FreezeFishInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_FreezeFishInfo::InitAsDefaultInstance() {
}

CMD_S2C_FreezeFishInfo::CMD_S2C_FreezeFishInfo(const CMD_S2C_FreezeFishInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_FreezeFishInfo::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_FreezeFishInfo::~CMD_S2C_FreezeFishInfo() {
  SharedDtor();
}

void CMD_S2C_FreezeFishInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_FreezeFishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_FreezeFishInfo& CMD_S2C_FreezeFishInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_FreezeFishInfo* CMD_S2C_FreezeFishInfo::default_instance_ = NULL;

CMD_S2C_FreezeFishInfo* CMD_S2C_FreezeFishInfo::New() const {
  return new CMD_S2C_FreezeFishInfo;
}

void CMD_S2C_FreezeFishInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  freezeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_FreezeFishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_freezeInfo;
        break;
      }

      // repeated .game.fish3d.s2c.tagFreezeInfo freezeInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_freezeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freezeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_freezeInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_FreezeFishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated .game.fish3d.s2c.tagFreezeInfo freezeInfo = 2;
  for (int i = 0; i < this->freezeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->freezeinfo(i), output);
  }

}

int CMD_S2C_FreezeFishInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated .game.fish3d.s2c.tagFreezeInfo freezeInfo = 2;
  total_size += 1 * this->freezeinfo_size();
  for (int i = 0; i < this->freezeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freezeinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_FreezeFishInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_FreezeFishInfo*>(&from));
}

void CMD_S2C_FreezeFishInfo::MergeFrom(const CMD_S2C_FreezeFishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  freezeinfo_.MergeFrom(from.freezeinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
}

void CMD_S2C_FreezeFishInfo::CopyFrom(const CMD_S2C_FreezeFishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_FreezeFishInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < freezeinfo_size(); i++) {
    if (!this->freezeinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_FreezeFishInfo::Swap(CMD_S2C_FreezeFishInfo* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    freezeinfo_.Swap(&other->freezeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_FreezeFishInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_FreezeFishInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_NewFishData::kFishInfoFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_NewFishData::CMD_S2C_NewFishData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_NewFishData::InitAsDefaultInstance() {
}

CMD_S2C_NewFishData::CMD_S2C_NewFishData(const CMD_S2C_NewFishData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_NewFishData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_NewFishData::~CMD_S2C_NewFishData() {
  SharedDtor();
}

void CMD_S2C_NewFishData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_NewFishData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_NewFishData& CMD_S2C_NewFishData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_NewFishData* CMD_S2C_NewFishData::default_instance_ = NULL;

CMD_S2C_NewFishData* CMD_S2C_NewFishData::New() const {
  return new CMD_S2C_NewFishData;
}

void CMD_S2C_NewFishData::Clear() {
  fishinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_NewFishData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fishInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_NewFishData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
  for (int i = 0; i < this->fishinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->fishinfo(i), output);
  }

}

int CMD_S2C_NewFishData::ByteSize() const {
  int total_size = 0;

  // repeated .game.fish3d.s2c.tagFishInfo fishInfo = 1;
  total_size += 1 * this->fishinfo_size();
  for (int i = 0; i < this->fishinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_NewFishData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_NewFishData*>(&from));
}

void CMD_S2C_NewFishData::MergeFrom(const CMD_S2C_NewFishData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishinfo_.MergeFrom(from.fishinfo_);
}

void CMD_S2C_NewFishData::CopyFrom(const CMD_S2C_NewFishData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_NewFishData::IsInitialized() const {

  for (int i = 0; i < fishinfo_size(); i++) {
    if (!this->fishinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_NewFishData::Swap(CMD_S2C_NewFishData* other) {
  if (other != this) {
    fishinfo_.Swap(&other->fishinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_NewFishData::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_NewFishData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_SeatUserData::kSeatInfoFieldNumber;
const int CMD_S2C_SeatUserData::kNickNameFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_SeatUserData::CMD_S2C_SeatUserData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_SeatUserData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  seatinfo_ = const_cast< ::game::fish3d::s2c::tagSeatUserInfo*>(
      ::game::fish3d::s2c::tagSeatUserInfo::internal_default_instance());
#else
  seatinfo_ = const_cast< ::game::fish3d::s2c::tagSeatUserInfo*>(&::game::fish3d::s2c::tagSeatUserInfo::default_instance());
#endif
}

CMD_S2C_SeatUserData::CMD_S2C_SeatUserData(const CMD_S2C_SeatUserData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_SeatUserData::SharedCtor() {
  _cached_size_ = 0;
  seatinfo_ = NULL;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_SeatUserData::~CMD_S2C_SeatUserData() {
  SharedDtor();
}

void CMD_S2C_SeatUserData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete seatinfo_;
  }
}

void CMD_S2C_SeatUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_SeatUserData& CMD_S2C_SeatUserData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_SeatUserData* CMD_S2C_SeatUserData::default_instance_ = NULL;

CMD_S2C_SeatUserData* CMD_S2C_SeatUserData::New() const {
  return new CMD_S2C_SeatUserData;
}

void CMD_S2C_SeatUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seatinfo()) {
      if (seatinfo_ != NULL) seatinfo_->::game::fish3d::s2c::tagSeatUserInfo::Clear();
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_SeatUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .game.fish3d.s2c.tagSeatUserInfo seatInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // required string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_SeatUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .game.fish3d.s2c.tagSeatUserInfo seatInfo = 1;
  if (has_seatinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->seatinfo(), output);
  }

  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

}

int CMD_S2C_SeatUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .game.fish3d.s2c.tagSeatUserInfo seatInfo = 1;
    if (has_seatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seatinfo());
    }

    // required string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_SeatUserData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_SeatUserData*>(&from));
}

void CMD_S2C_SeatUserData::MergeFrom(const CMD_S2C_SeatUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatinfo()) {
      mutable_seatinfo()->::game::fish3d::s2c::tagSeatUserInfo::MergeFrom(from.seatinfo());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
}

void CMD_S2C_SeatUserData::CopyFrom(const CMD_S2C_SeatUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_SeatUserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_seatinfo()) {
    if (!this->seatinfo().IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_SeatUserData::Swap(CMD_S2C_SeatUserData* other) {
  if (other != this) {
    std::swap(seatinfo_, other->seatinfo_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_SeatUserData::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_SeatUserData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_GlobalInfo::kMinCannonMultiFieldNumber;
const int CMD_S2C_GlobalInfo::kMaxCannonMultiFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_GlobalInfo::CMD_S2C_GlobalInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_GlobalInfo::InitAsDefaultInstance() {
}

CMD_S2C_GlobalInfo::CMD_S2C_GlobalInfo(const CMD_S2C_GlobalInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_GlobalInfo::SharedCtor() {
  _cached_size_ = 0;
  mincannonmulti_ = 0;
  maxcannonmulti_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_GlobalInfo::~CMD_S2C_GlobalInfo() {
  SharedDtor();
}

void CMD_S2C_GlobalInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_GlobalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_GlobalInfo& CMD_S2C_GlobalInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_GlobalInfo* CMD_S2C_GlobalInfo::default_instance_ = NULL;

CMD_S2C_GlobalInfo* CMD_S2C_GlobalInfo::New() const {
  return new CMD_S2C_GlobalInfo;
}

void CMD_S2C_GlobalInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mincannonmulti_ = 0;
    maxcannonmulti_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_GlobalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 minCannonMulti = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mincannonmulti_)));
          set_has_mincannonmulti();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxCannonMulti;
        break;
      }

      // required int32 maxCannonMulti = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCannonMulti:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcannonmulti_)));
          set_has_maxcannonmulti();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_GlobalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 minCannonMulti = 1;
  if (has_mincannonmulti()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mincannonmulti(), output);
  }

  // required int32 maxCannonMulti = 2;
  if (has_maxcannonmulti()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxcannonmulti(), output);
  }

}

int CMD_S2C_GlobalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 minCannonMulti = 1;
    if (has_mincannonmulti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mincannonmulti());
    }

    // required int32 maxCannonMulti = 2;
    if (has_maxcannonmulti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcannonmulti());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_GlobalInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_GlobalInfo*>(&from));
}

void CMD_S2C_GlobalInfo::MergeFrom(const CMD_S2C_GlobalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mincannonmulti()) {
      set_mincannonmulti(from.mincannonmulti());
    }
    if (from.has_maxcannonmulti()) {
      set_maxcannonmulti(from.maxcannonmulti());
    }
  }
}

void CMD_S2C_GlobalInfo::CopyFrom(const CMD_S2C_GlobalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_GlobalInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_GlobalInfo::Swap(CMD_S2C_GlobalInfo* other) {
  if (other != this) {
    std::swap(mincannonmulti_, other->mincannonmulti_);
    std::swap(maxcannonmulti_, other->maxcannonmulti_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_GlobalInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_GlobalInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_BulletInfo::kBulletInfoFieldNumber;
const int CMD_S2C_BulletInfo::kClientUniqIdFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_BulletInfo::CMD_S2C_BulletInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_BulletInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bulletinfo_ = const_cast< ::game::fish3d::s2c::tagBulletInfo*>(
      ::game::fish3d::s2c::tagBulletInfo::internal_default_instance());
#else
  bulletinfo_ = const_cast< ::game::fish3d::s2c::tagBulletInfo*>(&::game::fish3d::s2c::tagBulletInfo::default_instance());
#endif
}

CMD_S2C_BulletInfo::CMD_S2C_BulletInfo(const CMD_S2C_BulletInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_BulletInfo::SharedCtor() {
  _cached_size_ = 0;
  bulletinfo_ = NULL;
  clientuniqid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_BulletInfo::~CMD_S2C_BulletInfo() {
  SharedDtor();
}

void CMD_S2C_BulletInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bulletinfo_;
  }
}

void CMD_S2C_BulletInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_BulletInfo& CMD_S2C_BulletInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_BulletInfo* CMD_S2C_BulletInfo::default_instance_ = NULL;

CMD_S2C_BulletInfo* CMD_S2C_BulletInfo::New() const {
  return new CMD_S2C_BulletInfo;
}

void CMD_S2C_BulletInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bulletinfo()) {
      if (bulletinfo_ != NULL) bulletinfo_->::game::fish3d::s2c::tagBulletInfo::Clear();
    }
    clientuniqid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_BulletInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bulletinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientUniqId;
        break;
      }

      // required int32 clientUniqId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientUniqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientuniqid_)));
          set_has_clientuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_BulletInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
  if (has_bulletinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bulletinfo(), output);
  }

  // required int32 clientUniqId = 2;
  if (has_clientuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clientuniqid(), output);
  }

}

int CMD_S2C_BulletInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .game.fish3d.s2c.tagBulletInfo bulletInfo = 1;
    if (has_bulletinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bulletinfo());
    }

    // required int32 clientUniqId = 2;
    if (has_clientuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientuniqid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_BulletInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_BulletInfo*>(&from));
}

void CMD_S2C_BulletInfo::MergeFrom(const CMD_S2C_BulletInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bulletinfo()) {
      mutable_bulletinfo()->::game::fish3d::s2c::tagBulletInfo::MergeFrom(from.bulletinfo());
    }
    if (from.has_clientuniqid()) {
      set_clientuniqid(from.clientuniqid());
    }
  }
}

void CMD_S2C_BulletInfo::CopyFrom(const CMD_S2C_BulletInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_BulletInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_bulletinfo()) {
    if (!this->bulletinfo().IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_BulletInfo::Swap(CMD_S2C_BulletInfo* other) {
  if (other != this) {
    std::swap(bulletinfo_, other->bulletinfo_);
    std::swap(clientuniqid_, other->clientuniqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_BulletInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_BulletInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_HitFishInfo::kBulletUniqIdFieldNumber;
const int CMD_S2C_HitFishInfo::kFishUniqIdFieldNumber;
const int CMD_S2C_HitFishInfo::kSeatFieldNumber;
const int CMD_S2C_HitFishInfo::kRewardSilverFieldNumber;
const int CMD_S2C_HitFishInfo::kIsFormFieldNumber;
const int CMD_S2C_HitFishInfo::kFishIndexFieldNumber;
const int CMD_S2C_HitFishInfo::kBulletLiveTimeFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_HitFishInfo::CMD_S2C_HitFishInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_HitFishInfo::InitAsDefaultInstance() {
}

CMD_S2C_HitFishInfo::CMD_S2C_HitFishInfo(const CMD_S2C_HitFishInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_HitFishInfo::SharedCtor() {
  _cached_size_ = 0;
  bulletuniqid_ = 0;
  fishuniqid_ = 0;
  seat_ = 0;
  rewardsilver_ = 0;
  isform_ = 0;
  fishindex_ = 0;
  bulletlivetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_HitFishInfo::~CMD_S2C_HitFishInfo() {
  SharedDtor();
}

void CMD_S2C_HitFishInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_HitFishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_HitFishInfo& CMD_S2C_HitFishInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_HitFishInfo* CMD_S2C_HitFishInfo::default_instance_ = NULL;

CMD_S2C_HitFishInfo* CMD_S2C_HitFishInfo::New() const {
  return new CMD_S2C_HitFishInfo;
}

void CMD_S2C_HitFishInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bulletuniqid_ = 0;
    fishuniqid_ = 0;
    seat_ = 0;
    rewardsilver_ = 0;
    isform_ = 0;
    fishindex_ = 0;
    bulletlivetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_HitFishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bulletUniqId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletuniqid_)));
          set_has_bulletuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishUniqId;
        break;
      }

      // required int32 fishUniqId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishUniqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishuniqid_)));
          set_has_fishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat;
        break;
      }

      // required int32 seat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardSilver;
        break;
      }

      // required int32 rewardSilver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardsilver_)));
          set_has_rewardsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isForm;
        break;
      }

      // required int32 isForm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isForm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isform_)));
          set_has_isform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fishIndex;
        break;
      }

      // required int32 fishIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishindex_)));
          set_has_fishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bulletLiveTime;
        break;
      }

      // required int32 bulletLiveTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletLiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletlivetime_)));
          set_has_bulletlivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_HitFishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bulletUniqId = 1;
  if (has_bulletuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bulletuniqid(), output);
  }

  // required int32 fishUniqId = 2;
  if (has_fishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishuniqid(), output);
  }

  // required int32 seat = 3;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  // required int32 rewardSilver = 4;
  if (has_rewardsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rewardsilver(), output);
  }

  // required int32 isForm = 5;
  if (has_isform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isform(), output);
  }

  // required int32 fishIndex = 6;
  if (has_fishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fishindex(), output);
  }

  // required int32 bulletLiveTime = 7;
  if (has_bulletlivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bulletlivetime(), output);
  }

}

int CMD_S2C_HitFishInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bulletUniqId = 1;
    if (has_bulletuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletuniqid());
    }

    // required int32 fishUniqId = 2;
    if (has_fishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishuniqid());
    }

    // required int32 seat = 3;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 rewardSilver = 4;
    if (has_rewardsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardsilver());
    }

    // required int32 isForm = 5;
    if (has_isform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isform());
    }

    // required int32 fishIndex = 6;
    if (has_fishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishindex());
    }

    // required int32 bulletLiveTime = 7;
    if (has_bulletlivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletlivetime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_HitFishInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_HitFishInfo*>(&from));
}

void CMD_S2C_HitFishInfo::MergeFrom(const CMD_S2C_HitFishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bulletuniqid()) {
      set_bulletuniqid(from.bulletuniqid());
    }
    if (from.has_fishuniqid()) {
      set_fishuniqid(from.fishuniqid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_rewardsilver()) {
      set_rewardsilver(from.rewardsilver());
    }
    if (from.has_isform()) {
      set_isform(from.isform());
    }
    if (from.has_fishindex()) {
      set_fishindex(from.fishindex());
    }
    if (from.has_bulletlivetime()) {
      set_bulletlivetime(from.bulletlivetime());
    }
  }
}

void CMD_S2C_HitFishInfo::CopyFrom(const CMD_S2C_HitFishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_HitFishInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void CMD_S2C_HitFishInfo::Swap(CMD_S2C_HitFishInfo* other) {
  if (other != this) {
    std::swap(bulletuniqid_, other->bulletuniqid_);
    std::swap(fishuniqid_, other->fishuniqid_);
    std::swap(seat_, other->seat_);
    std::swap(rewardsilver_, other->rewardsilver_);
    std::swap(isform_, other->isform_);
    std::swap(fishindex_, other->fishindex_);
    std::swap(bulletlivetime_, other->bulletlivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_HitFishInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_HitFishInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_SkillHitFishInfo::kSkillIdFieldNumber;
const int CMD_S2C_SkillHitFishInfo::kFishUniqIdFieldNumber;
const int CMD_S2C_SkillHitFishInfo::kSeatFieldNumber;
const int CMD_S2C_SkillHitFishInfo::kRewardSilverFieldNumber;
const int CMD_S2C_SkillHitFishInfo::kIsFormFieldNumber;
const int CMD_S2C_SkillHitFishInfo::kFishIndexFieldNumber;
const int CMD_S2C_SkillHitFishInfo::kExcludeFishFieldNumber;
const int CMD_S2C_SkillHitFishInfo::kExcludeFishIndexFieldNumber;
const int CMD_S2C_SkillHitFishInfo::kDelayFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_SkillHitFishInfo::CMD_S2C_SkillHitFishInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_SkillHitFishInfo::InitAsDefaultInstance() {
}

CMD_S2C_SkillHitFishInfo::CMD_S2C_SkillHitFishInfo(const CMD_S2C_SkillHitFishInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_SkillHitFishInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  fishuniqid_ = 0;
  seat_ = 0;
  rewardsilver_ = 0;
  isform_ = 0;
  fishindex_ = 0;
  excludefish_ = 0;
  excludefishindex_ = 0;
  delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_SkillHitFishInfo::~CMD_S2C_SkillHitFishInfo() {
  SharedDtor();
}

void CMD_S2C_SkillHitFishInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_SkillHitFishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_SkillHitFishInfo& CMD_S2C_SkillHitFishInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_SkillHitFishInfo* CMD_S2C_SkillHitFishInfo::default_instance_ = NULL;

CMD_S2C_SkillHitFishInfo* CMD_S2C_SkillHitFishInfo::New() const {
  return new CMD_S2C_SkillHitFishInfo;
}

void CMD_S2C_SkillHitFishInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    fishuniqid_ = 0;
    seat_ = 0;
    rewardsilver_ = 0;
    isform_ = 0;
    fishindex_ = 0;
    excludefish_ = 0;
    excludefishindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    delay_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_SkillHitFishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishUniqId;
        break;
      }

      // required int32 fishUniqId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishUniqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishuniqid_)));
          set_has_fishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat;
        break;
      }

      // required int32 seat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardSilver;
        break;
      }

      // required int32 rewardSilver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardsilver_)));
          set_has_rewardsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isForm;
        break;
      }

      // required int32 isForm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isForm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isform_)));
          set_has_isform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fishIndex;
        break;
      }

      // required int32 fishIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishindex_)));
          set_has_fishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_excludeFish;
        break;
      }

      // required int32 excludeFish = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excludeFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &excludefish_)));
          set_has_excludefish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_excludeFishIndex;
        break;
      }

      // required int32 excludeFishIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excludeFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &excludefishindex_)));
          set_has_excludefishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_delay;
        break;
      }

      // required int32 delay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_SkillHitFishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // required int32 fishUniqId = 2;
  if (has_fishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishuniqid(), output);
  }

  // required int32 seat = 3;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  // required int32 rewardSilver = 4;
  if (has_rewardsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rewardsilver(), output);
  }

  // required int32 isForm = 5;
  if (has_isform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isform(), output);
  }

  // required int32 fishIndex = 6;
  if (has_fishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fishindex(), output);
  }

  // required int32 excludeFish = 7;
  if (has_excludefish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->excludefish(), output);
  }

  // required int32 excludeFishIndex = 8;
  if (has_excludefishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->excludefishindex(), output);
  }

  // required int32 delay = 9;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->delay(), output);
  }

}

int CMD_S2C_SkillHitFishInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 fishUniqId = 2;
    if (has_fishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishuniqid());
    }

    // required int32 seat = 3;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 rewardSilver = 4;
    if (has_rewardsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardsilver());
    }

    // required int32 isForm = 5;
    if (has_isform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isform());
    }

    // required int32 fishIndex = 6;
    if (has_fishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishindex());
    }

    // required int32 excludeFish = 7;
    if (has_excludefish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->excludefish());
    }

    // required int32 excludeFishIndex = 8;
    if (has_excludefishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->excludefishindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 delay = 9;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_SkillHitFishInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_SkillHitFishInfo*>(&from));
}

void CMD_S2C_SkillHitFishInfo::MergeFrom(const CMD_S2C_SkillHitFishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_fishuniqid()) {
      set_fishuniqid(from.fishuniqid());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_rewardsilver()) {
      set_rewardsilver(from.rewardsilver());
    }
    if (from.has_isform()) {
      set_isform(from.isform());
    }
    if (from.has_fishindex()) {
      set_fishindex(from.fishindex());
    }
    if (from.has_excludefish()) {
      set_excludefish(from.excludefish());
    }
    if (from.has_excludefishindex()) {
      set_excludefishindex(from.excludefishindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
}

void CMD_S2C_SkillHitFishInfo::CopyFrom(const CMD_S2C_SkillHitFishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_SkillHitFishInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CMD_S2C_SkillHitFishInfo::Swap(CMD_S2C_SkillHitFishInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(fishuniqid_, other->fishuniqid_);
    std::swap(seat_, other->seat_);
    std::swap(rewardsilver_, other->rewardsilver_);
    std::swap(isform_, other->isform_);
    std::swap(fishindex_, other->fishindex_);
    std::swap(excludefish_, other->excludefish_);
    std::swap(excludefishindex_, other->excludefishindex_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_SkillHitFishInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_SkillHitFishInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_ErrorInfo::kErrorNoFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_ErrorInfo::CMD_S2C_ErrorInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_ErrorInfo::InitAsDefaultInstance() {
}

CMD_S2C_ErrorInfo::CMD_S2C_ErrorInfo(const CMD_S2C_ErrorInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_ErrorInfo::SharedCtor() {
  _cached_size_ = 0;
  errorno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_ErrorInfo::~CMD_S2C_ErrorInfo() {
  SharedDtor();
}

void CMD_S2C_ErrorInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_ErrorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_ErrorInfo& CMD_S2C_ErrorInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_ErrorInfo* CMD_S2C_ErrorInfo::default_instance_ = NULL;

CMD_S2C_ErrorInfo* CMD_S2C_ErrorInfo::New() const {
  return new CMD_S2C_ErrorInfo;
}

void CMD_S2C_ErrorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorno_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_ErrorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_ErrorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorNo = 1;
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorno(), output);
  }

}

int CMD_S2C_ErrorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorNo = 1;
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_ErrorInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_ErrorInfo*>(&from));
}

void CMD_S2C_ErrorInfo::MergeFrom(const CMD_S2C_ErrorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
  }
}

void CMD_S2C_ErrorInfo::CopyFrom(const CMD_S2C_ErrorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_ErrorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_S2C_ErrorInfo::Swap(CMD_S2C_ErrorInfo* other) {
  if (other != this) {
    std::swap(errorno_, other->errorno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_ErrorInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_ErrorInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_ItemEffect::kItemIdFieldNumber;
const int CMD_S2C_ItemEffect::kEffectTypeFieldNumber;
const int CMD_S2C_ItemEffect::kSeatFieldNumber;
const int CMD_S2C_ItemEffect::kParam1FieldNumber;
#endif  // !_MSC_VER

CMD_S2C_ItemEffect::CMD_S2C_ItemEffect()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_ItemEffect::InitAsDefaultInstance() {
}

CMD_S2C_ItemEffect::CMD_S2C_ItemEffect(const CMD_S2C_ItemEffect& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_ItemEffect::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  effecttype_ = 0;
  seat_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_ItemEffect::~CMD_S2C_ItemEffect() {
  SharedDtor();
}

void CMD_S2C_ItemEffect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_ItemEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_ItemEffect& CMD_S2C_ItemEffect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_ItemEffect* CMD_S2C_ItemEffect::default_instance_ = NULL;

CMD_S2C_ItemEffect* CMD_S2C_ItemEffect::New() const {
  return new CMD_S2C_ItemEffect;
}

void CMD_S2C_ItemEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    effecttype_ = 0;
    seat_ = 0;
    param1_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_ItemEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effectType;
        break;
      }

      // required int32 effectType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effecttype_)));
          set_has_effecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat;
        break;
      }

      // required int32 seat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param1;
        break;
      }

      // required int64 param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_ItemEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 effectType = 2;
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effecttype(), output);
  }

  // required int32 seat = 3;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat(), output);
  }

  // required int64 param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param1(), output);
  }

}

int CMD_S2C_ItemEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 effectType = 2;
    if (has_effecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effecttype());
    }

    // required int32 seat = 3;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int64 param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_ItemEffect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_ItemEffect*>(&from));
}

void CMD_S2C_ItemEffect::MergeFrom(const CMD_S2C_ItemEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
}

void CMD_S2C_ItemEffect::CopyFrom(const CMD_S2C_ItemEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_ItemEffect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_S2C_ItemEffect::Swap(CMD_S2C_ItemEffect* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(effecttype_, other->effecttype_);
    std::swap(seat_, other->seat_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_ItemEffect::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_ItemEffect";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_AimFishInfo::kSeatFieldNumber;
const int CMD_S2C_AimFishInfo::kFishUniqIdFieldNumber;
const int CMD_S2C_AimFishInfo::kIsFormFishFieldNumber;
const int CMD_S2C_AimFishInfo::kFishIndexFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_AimFishInfo::CMD_S2C_AimFishInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_AimFishInfo::InitAsDefaultInstance() {
}

CMD_S2C_AimFishInfo::CMD_S2C_AimFishInfo(const CMD_S2C_AimFishInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_AimFishInfo::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  fishuniqid_ = 0;
  isformfish_ = 0;
  fishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_AimFishInfo::~CMD_S2C_AimFishInfo() {
  SharedDtor();
}

void CMD_S2C_AimFishInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_AimFishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_AimFishInfo& CMD_S2C_AimFishInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_AimFishInfo* CMD_S2C_AimFishInfo::default_instance_ = NULL;

CMD_S2C_AimFishInfo* CMD_S2C_AimFishInfo::New() const {
  return new CMD_S2C_AimFishInfo;
}

void CMD_S2C_AimFishInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    fishuniqid_ = 0;
    isformfish_ = 0;
    fishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_AimFishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishUniqId;
        break;
      }

      // required int32 fishUniqId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishUniqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishuniqid_)));
          set_has_fishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isFormFish;
        break;
      }

      // required int32 isFormFish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFormFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isformfish_)));
          set_has_isformfish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fishIndex;
        break;
      }

      // required int32 fishIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishindex_)));
          set_has_fishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_AimFishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // required int32 fishUniqId = 2;
  if (has_fishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishuniqid(), output);
  }

  // required int32 isFormFish = 3;
  if (has_isformfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isformfish(), output);
  }

  // required int32 fishIndex = 4;
  if (has_fishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fishindex(), output);
  }

}

int CMD_S2C_AimFishInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 fishUniqId = 2;
    if (has_fishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishuniqid());
    }

    // required int32 isFormFish = 3;
    if (has_isformfish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isformfish());
    }

    // required int32 fishIndex = 4;
    if (has_fishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishindex());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_AimFishInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_AimFishInfo*>(&from));
}

void CMD_S2C_AimFishInfo::MergeFrom(const CMD_S2C_AimFishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_fishuniqid()) {
      set_fishuniqid(from.fishuniqid());
    }
    if (from.has_isformfish()) {
      set_isformfish(from.isformfish());
    }
    if (from.has_fishindex()) {
      set_fishindex(from.fishindex());
    }
  }
}

void CMD_S2C_AimFishInfo::CopyFrom(const CMD_S2C_AimFishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_AimFishInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_S2C_AimFishInfo::Swap(CMD_S2C_AimFishInfo* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(fishuniqid_, other->fishuniqid_);
    std::swap(isformfish_, other->isformfish_);
    std::swap(fishindex_, other->fishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_AimFishInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_AimFishInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_AddSilverInfo::kSeatFieldNumber;
const int CMD_S2C_AddSilverInfo::kAddSilverFieldNumber;
const int CMD_S2C_AddSilverInfo::kAddTokenFieldNumber;
const int CMD_S2C_AddSilverInfo::kIsManualFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_AddSilverInfo::CMD_S2C_AddSilverInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_AddSilverInfo::InitAsDefaultInstance() {
}

CMD_S2C_AddSilverInfo::CMD_S2C_AddSilverInfo(const CMD_S2C_AddSilverInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_AddSilverInfo::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  addsilver_ = GOOGLE_LONGLONG(0);
  addtoken_ = GOOGLE_LONGLONG(0);
  ismanual_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_AddSilverInfo::~CMD_S2C_AddSilverInfo() {
  SharedDtor();
}

void CMD_S2C_AddSilverInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_AddSilverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_AddSilverInfo& CMD_S2C_AddSilverInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_AddSilverInfo* CMD_S2C_AddSilverInfo::default_instance_ = NULL;

CMD_S2C_AddSilverInfo* CMD_S2C_AddSilverInfo::New() const {
  return new CMD_S2C_AddSilverInfo;
}

void CMD_S2C_AddSilverInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    addsilver_ = GOOGLE_LONGLONG(0);
    addtoken_ = GOOGLE_LONGLONG(0);
    ismanual_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_AddSilverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addSilver;
        break;
      }

      // required int64 addSilver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addsilver_)));
          set_has_addsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addToken;
        break;
      }

      // required int64 addToken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addtoken_)));
          set_has_addtoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isManual;
        break;
      }

      // required int32 isManual = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isManual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismanual_)));
          set_has_ismanual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_AddSilverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // required int64 addSilver = 2;
  if (has_addsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->addsilver(), output);
  }

  // required int64 addToken = 3;
  if (has_addtoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->addtoken(), output);
  }

  // required int32 isManual = 4;
  if (has_ismanual()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ismanual(), output);
  }

}

int CMD_S2C_AddSilverInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int64 addSilver = 2;
    if (has_addsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addsilver());
    }

    // required int64 addToken = 3;
    if (has_addtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addtoken());
    }

    // required int32 isManual = 4;
    if (has_ismanual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismanual());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_AddSilverInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_AddSilverInfo*>(&from));
}

void CMD_S2C_AddSilverInfo::MergeFrom(const CMD_S2C_AddSilverInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_addsilver()) {
      set_addsilver(from.addsilver());
    }
    if (from.has_addtoken()) {
      set_addtoken(from.addtoken());
    }
    if (from.has_ismanual()) {
      set_ismanual(from.ismanual());
    }
  }
}

void CMD_S2C_AddSilverInfo::CopyFrom(const CMD_S2C_AddSilverInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_AddSilverInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_S2C_AddSilverInfo::Swap(CMD_S2C_AddSilverInfo* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(addsilver_, other->addsilver_);
    std::swap(addtoken_, other->addtoken_);
    std::swap(ismanual_, other->ismanual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_AddSilverInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_AddSilverInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_BoomFishInfo::kFishUniqIDsFieldNumber;
const int CMD_S2C_BoomFishInfo::kSmallFishIndexFieldNumber;
const int CMD_S2C_BoomFishInfo::kFormUniqIDsFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_BoomFishInfo::CMD_S2C_BoomFishInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_BoomFishInfo::InitAsDefaultInstance() {
}

CMD_S2C_BoomFishInfo::CMD_S2C_BoomFishInfo(const CMD_S2C_BoomFishInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_BoomFishInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_BoomFishInfo::~CMD_S2C_BoomFishInfo() {
  SharedDtor();
}

void CMD_S2C_BoomFishInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_BoomFishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_BoomFishInfo& CMD_S2C_BoomFishInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_BoomFishInfo* CMD_S2C_BoomFishInfo::default_instance_ = NULL;

CMD_S2C_BoomFishInfo* CMD_S2C_BoomFishInfo::New() const {
  return new CMD_S2C_BoomFishInfo;
}

void CMD_S2C_BoomFishInfo::Clear() {
  fishuniqids_.Clear();
  smallfishindex_.Clear();
  formuniqids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_BoomFishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fishUniqIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishUniqIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fishuniqids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fishuniqids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fishUniqIDs;
        if (input->ExpectTag(16)) goto parse_smallFishIndex;
        break;
      }

      // repeated int32 smallFishIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_smallfishindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_smallfishindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_smallFishIndex;
        if (input->ExpectTag(24)) goto parse_formUniqIDs;
        break;
      }

      // repeated int32 formUniqIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formUniqIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_formuniqids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_formuniqids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_formUniqIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_BoomFishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fishUniqIDs = 1;
  for (int i = 0; i < this->fishuniqids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fishuniqids(i), output);
  }

  // repeated int32 smallFishIndex = 2;
  for (int i = 0; i < this->smallfishindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->smallfishindex(i), output);
  }

  // repeated int32 formUniqIDs = 3;
  for (int i = 0; i < this->formuniqids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->formuniqids(i), output);
  }

}

int CMD_S2C_BoomFishInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 fishUniqIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fishuniqids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fishuniqids(i));
    }
    total_size += 1 * this->fishuniqids_size() + data_size;
  }

  // repeated int32 smallFishIndex = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->smallfishindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->smallfishindex(i));
    }
    total_size += 1 * this->smallfishindex_size() + data_size;
  }

  // repeated int32 formUniqIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->formuniqids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->formuniqids(i));
    }
    total_size += 1 * this->formuniqids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_BoomFishInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_BoomFishInfo*>(&from));
}

void CMD_S2C_BoomFishInfo::MergeFrom(const CMD_S2C_BoomFishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishuniqids_.MergeFrom(from.fishuniqids_);
  smallfishindex_.MergeFrom(from.smallfishindex_);
  formuniqids_.MergeFrom(from.formuniqids_);
}

void CMD_S2C_BoomFishInfo::CopyFrom(const CMD_S2C_BoomFishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_BoomFishInfo::IsInitialized() const {

  return true;
}

void CMD_S2C_BoomFishInfo::Swap(CMD_S2C_BoomFishInfo* other) {
  if (other != this) {
    fishuniqids_.Swap(&other->fishuniqids_);
    smallfishindex_.Swap(&other->smallfishindex_);
    formuniqids_.Swap(&other->formuniqids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_BoomFishInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_BoomFishInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_ServerVersion::kServerVerFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_ServerVersion::CMD_S2C_ServerVersion()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_ServerVersion::InitAsDefaultInstance() {
}

CMD_S2C_ServerVersion::CMD_S2C_ServerVersion(const CMD_S2C_ServerVersion& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_ServerVersion::SharedCtor() {
  _cached_size_ = 0;
  serverver_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_ServerVersion::~CMD_S2C_ServerVersion() {
  SharedDtor();
}

void CMD_S2C_ServerVersion::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_ServerVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_ServerVersion& CMD_S2C_ServerVersion::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_ServerVersion* CMD_S2C_ServerVersion::default_instance_ = NULL;

CMD_S2C_ServerVersion* CMD_S2C_ServerVersion::New() const {
  return new CMD_S2C_ServerVersion;
}

void CMD_S2C_ServerVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverver_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_ServerVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverVer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverver_)));
          set_has_serverver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_ServerVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverVer = 1;
  if (has_serverver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverver(), output);
  }

}

int CMD_S2C_ServerVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverVer = 1;
    if (has_serverver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverver());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_ServerVersion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_ServerVersion*>(&from));
}

void CMD_S2C_ServerVersion::MergeFrom(const CMD_S2C_ServerVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverver()) {
      set_serverver(from.serverver());
    }
  }
}

void CMD_S2C_ServerVersion::CopyFrom(const CMD_S2C_ServerVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_ServerVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_S2C_ServerVersion::Swap(CMD_S2C_ServerVersion* other) {
  if (other != this) {
    std::swap(serverver_, other->serverver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_ServerVersion::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_ServerVersion";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_AddPhoneTicketInfo::kSeatFieldNumber;
const int CMD_S2C_AddPhoneTicketInfo::kFishUniqIdFieldNumber;
const int CMD_S2C_AddPhoneTicketInfo::kIsFormFishFieldNumber;
const int CMD_S2C_AddPhoneTicketInfo::kAddNumFieldNumber;
const int CMD_S2C_AddPhoneTicketInfo::kFishIndexFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_AddPhoneTicketInfo::CMD_S2C_AddPhoneTicketInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_AddPhoneTicketInfo::InitAsDefaultInstance() {
}

CMD_S2C_AddPhoneTicketInfo::CMD_S2C_AddPhoneTicketInfo(const CMD_S2C_AddPhoneTicketInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_AddPhoneTicketInfo::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  fishuniqid_ = 0;
  isformfish_ = 0;
  addnum_ = 0;
  fishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_AddPhoneTicketInfo::~CMD_S2C_AddPhoneTicketInfo() {
  SharedDtor();
}

void CMD_S2C_AddPhoneTicketInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_AddPhoneTicketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_AddPhoneTicketInfo& CMD_S2C_AddPhoneTicketInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_AddPhoneTicketInfo* CMD_S2C_AddPhoneTicketInfo::default_instance_ = NULL;

CMD_S2C_AddPhoneTicketInfo* CMD_S2C_AddPhoneTicketInfo::New() const {
  return new CMD_S2C_AddPhoneTicketInfo;
}

void CMD_S2C_AddPhoneTicketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    fishuniqid_ = 0;
    isformfish_ = 0;
    addnum_ = 0;
    fishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_AddPhoneTicketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishUniqId;
        break;
      }

      // required int32 fishUniqId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishUniqId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishuniqid_)));
          set_has_fishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isFormFish;
        break;
      }

      // required int32 isFormFish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFormFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isformfish_)));
          set_has_isformfish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addNum;
        break;
      }

      // required int32 addNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fishIndex;
        break;
      }

      // required int32 fishIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishindex_)));
          set_has_fishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_AddPhoneTicketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // required int32 fishUniqId = 2;
  if (has_fishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishuniqid(), output);
  }

  // required int32 isFormFish = 3;
  if (has_isformfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isformfish(), output);
  }

  // required int32 addNum = 4;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addnum(), output);
  }

  // required int32 fishIndex = 5;
  if (has_fishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fishindex(), output);
  }

}

int CMD_S2C_AddPhoneTicketInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 fishUniqId = 2;
    if (has_fishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishuniqid());
    }

    // required int32 isFormFish = 3;
    if (has_isformfish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isformfish());
    }

    // required int32 addNum = 4;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum());
    }

    // required int32 fishIndex = 5;
    if (has_fishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishindex());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_AddPhoneTicketInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_AddPhoneTicketInfo*>(&from));
}

void CMD_S2C_AddPhoneTicketInfo::MergeFrom(const CMD_S2C_AddPhoneTicketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_fishuniqid()) {
      set_fishuniqid(from.fishuniqid());
    }
    if (from.has_isformfish()) {
      set_isformfish(from.isformfish());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
    if (from.has_fishindex()) {
      set_fishindex(from.fishindex());
    }
  }
}

void CMD_S2C_AddPhoneTicketInfo::CopyFrom(const CMD_S2C_AddPhoneTicketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_AddPhoneTicketInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CMD_S2C_AddPhoneTicketInfo::Swap(CMD_S2C_AddPhoneTicketInfo* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(fishuniqid_, other->fishuniqid_);
    std::swap(isformfish_, other->isformfish_);
    std::swap(addnum_, other->addnum_);
    std::swap(fishindex_, other->fishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_AddPhoneTicketInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_AddPhoneTicketInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_SpecialBulletInfo::kFishNumFieldNumber;
const int CMD_S2C_SpecialBulletInfo::kSeatFieldNumber;
const int CMD_S2C_SpecialBulletInfo::kReturnSilverFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_SpecialBulletInfo::CMD_S2C_SpecialBulletInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_SpecialBulletInfo::InitAsDefaultInstance() {
}

CMD_S2C_SpecialBulletInfo::CMD_S2C_SpecialBulletInfo(const CMD_S2C_SpecialBulletInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_SpecialBulletInfo::SharedCtor() {
  _cached_size_ = 0;
  fishnum_ = 0;
  seat_ = 0;
  returnsilver_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_SpecialBulletInfo::~CMD_S2C_SpecialBulletInfo() {
  SharedDtor();
}

void CMD_S2C_SpecialBulletInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_SpecialBulletInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_SpecialBulletInfo& CMD_S2C_SpecialBulletInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_SpecialBulletInfo* CMD_S2C_SpecialBulletInfo::default_instance_ = NULL;

CMD_S2C_SpecialBulletInfo* CMD_S2C_SpecialBulletInfo::New() const {
  return new CMD_S2C_SpecialBulletInfo;
}

void CMD_S2C_SpecialBulletInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fishnum_ = 0;
    seat_ = 0;
    returnsilver_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_SpecialBulletInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fishNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishnum_)));
          set_has_fishnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }

      // required int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_returnSilver;
        break;
      }

      // required int32 returnSilver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_returnSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnsilver_)));
          set_has_returnsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_SpecialBulletInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fishNum = 1;
  if (has_fishnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fishnum(), output);
  }

  // required int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // required int32 returnSilver = 3;
  if (has_returnsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->returnsilver(), output);
  }

}

int CMD_S2C_SpecialBulletInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fishNum = 1;
    if (has_fishnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishnum());
    }

    // required int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int32 returnSilver = 3;
    if (has_returnsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnsilver());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_SpecialBulletInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_SpecialBulletInfo*>(&from));
}

void CMD_S2C_SpecialBulletInfo::MergeFrom(const CMD_S2C_SpecialBulletInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fishnum()) {
      set_fishnum(from.fishnum());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_returnsilver()) {
      set_returnsilver(from.returnsilver());
    }
  }
}

void CMD_S2C_SpecialBulletInfo::CopyFrom(const CMD_S2C_SpecialBulletInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_SpecialBulletInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_S2C_SpecialBulletInfo::Swap(CMD_S2C_SpecialBulletInfo* other) {
  if (other != this) {
    std::swap(fishnum_, other->fishnum_);
    std::swap(seat_, other->seat_);
    std::swap(returnsilver_, other->returnsilver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_SpecialBulletInfo::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_SpecialBulletInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_Reward::kSeatFieldNumber;
const int CMD_S2C_Reward::kRewardSilverFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_Reward::CMD_S2C_Reward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_Reward::InitAsDefaultInstance() {
}

CMD_S2C_Reward::CMD_S2C_Reward(const CMD_S2C_Reward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_Reward::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  rewardsilver_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_Reward::~CMD_S2C_Reward() {
  SharedDtor();
}

void CMD_S2C_Reward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_Reward& CMD_S2C_Reward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_Reward* CMD_S2C_Reward::default_instance_ = NULL;

CMD_S2C_Reward* CMD_S2C_Reward::New() const {
  return new CMD_S2C_Reward;
}

void CMD_S2C_Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    rewardsilver_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardSilver;
        break;
      }

      // required int64 rewardSilver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardsilver_)));
          set_has_rewardsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // required int64 rewardSilver = 2;
  if (has_rewardsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rewardsilver(), output);
  }

}

int CMD_S2C_Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required int64 rewardSilver = 2;
    if (has_rewardsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardsilver());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_Reward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_Reward*>(&from));
}

void CMD_S2C_Reward::MergeFrom(const CMD_S2C_Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_rewardsilver()) {
      set_rewardsilver(from.rewardsilver());
    }
  }
}

void CMD_S2C_Reward::CopyFrom(const CMD_S2C_Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_Reward::Swap(CMD_S2C_Reward* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(rewardsilver_, other->rewardsilver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_Reward::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_Reward";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_Aim::kIsAimFieldNumber;
const int CMD_S2C_Aim::kSeatIdFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_Aim::CMD_S2C_Aim()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_Aim::InitAsDefaultInstance() {
}

CMD_S2C_Aim::CMD_S2C_Aim(const CMD_S2C_Aim& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_Aim::SharedCtor() {
  _cached_size_ = 0;
  isaim_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_Aim::~CMD_S2C_Aim() {
  SharedDtor();
}

void CMD_S2C_Aim::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_Aim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_Aim& CMD_S2C_Aim::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_Aim* CMD_S2C_Aim::default_instance_ = NULL;

CMD_S2C_Aim* CMD_S2C_Aim::New() const {
  return new CMD_S2C_Aim;
}

void CMD_S2C_Aim::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isaim_ = 0;
    seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_Aim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAim = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isaim_)));
          set_has_isaim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatId;
        break;
      }

      // required int32 seatId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_Aim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAim = 1;
  if (has_isaim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isaim(), output);
  }

  // required int32 seatId = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

}

int CMD_S2C_Aim::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAim = 1;
    if (has_isaim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isaim());
    }

    // required int32 seatId = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_Aim::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_Aim*>(&from));
}

void CMD_S2C_Aim::MergeFrom(const CMD_S2C_Aim& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isaim()) {
      set_isaim(from.isaim());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
}

void CMD_S2C_Aim::CopyFrom(const CMD_S2C_Aim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_Aim::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_Aim::Swap(CMD_S2C_Aim* other) {
  if (other != this) {
    std::swap(isaim_, other->isaim_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_Aim::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_Aim";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_OctoposMultiple::kOctoposMultipleFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_OctoposMultiple::CMD_S2C_OctoposMultiple()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_OctoposMultiple::InitAsDefaultInstance() {
}

CMD_S2C_OctoposMultiple::CMD_S2C_OctoposMultiple(const CMD_S2C_OctoposMultiple& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_OctoposMultiple::SharedCtor() {
  _cached_size_ = 0;
  octoposmultiple_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_OctoposMultiple::~CMD_S2C_OctoposMultiple() {
  SharedDtor();
}

void CMD_S2C_OctoposMultiple::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_OctoposMultiple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_OctoposMultiple& CMD_S2C_OctoposMultiple::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_OctoposMultiple* CMD_S2C_OctoposMultiple::default_instance_ = NULL;

CMD_S2C_OctoposMultiple* CMD_S2C_OctoposMultiple::New() const {
  return new CMD_S2C_OctoposMultiple;
}

void CMD_S2C_OctoposMultiple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    octoposmultiple_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_OctoposMultiple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 octoposMultiple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &octoposmultiple_)));
          set_has_octoposmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_OctoposMultiple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 octoposMultiple = 1;
  if (has_octoposmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->octoposmultiple(), output);
  }

}

int CMD_S2C_OctoposMultiple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 octoposMultiple = 1;
    if (has_octoposmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->octoposmultiple());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_OctoposMultiple::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_OctoposMultiple*>(&from));
}

void CMD_S2C_OctoposMultiple::MergeFrom(const CMD_S2C_OctoposMultiple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_octoposmultiple()) {
      set_octoposmultiple(from.octoposmultiple());
    }
  }
}

void CMD_S2C_OctoposMultiple::CopyFrom(const CMD_S2C_OctoposMultiple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_OctoposMultiple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_S2C_OctoposMultiple::Swap(CMD_S2C_OctoposMultiple* other) {
  if (other != this) {
    std::swap(octoposmultiple_, other->octoposmultiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_OctoposMultiple::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_OctoposMultiple";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_TriggerFireProgress::kSeatFieldNumber;
const int CMD_S2C_TriggerFireProgress::kProgressFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_TriggerFireProgress::CMD_S2C_TriggerFireProgress()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_TriggerFireProgress::InitAsDefaultInstance() {
}

CMD_S2C_TriggerFireProgress::CMD_S2C_TriggerFireProgress(const CMD_S2C_TriggerFireProgress& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_TriggerFireProgress::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_TriggerFireProgress::~CMD_S2C_TriggerFireProgress() {
  SharedDtor();
}

void CMD_S2C_TriggerFireProgress::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_TriggerFireProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_TriggerFireProgress& CMD_S2C_TriggerFireProgress::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_TriggerFireProgress* CMD_S2C_TriggerFireProgress::default_instance_ = NULL;

CMD_S2C_TriggerFireProgress* CMD_S2C_TriggerFireProgress::New() const {
  return new CMD_S2C_TriggerFireProgress;
}

void CMD_S2C_TriggerFireProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_TriggerFireProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_progress;
        break;
      }

      // required float progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_TriggerFireProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // required float progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->progress(), output);
  }

}

int CMD_S2C_TriggerFireProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // required float progress = 2;
    if (has_progress()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_TriggerFireProgress::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_TriggerFireProgress*>(&from));
}

void CMD_S2C_TriggerFireProgress::MergeFrom(const CMD_S2C_TriggerFireProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
}

void CMD_S2C_TriggerFireProgress::CopyFrom(const CMD_S2C_TriggerFireProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_TriggerFireProgress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_TriggerFireProgress::Swap(CMD_S2C_TriggerFireProgress* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_TriggerFireProgress::GetTypeName() const {
  return "game.fish3d.s2c.CMD_S2C_TriggerFireProgress";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2c
}  // namespace fish3d
}  // namespace game

// @@protoc_insertion_point(global_scope)

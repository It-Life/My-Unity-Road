// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/Fish3D/fish3d_c2s.proto

#ifndef PROTOBUF_Game_2fFish3D_2ffish3d_5fc2s_2eproto__INCLUDED
#define PROTOBUF_Game_2fFish3D_2ffish3d_5fc2s_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace fish3d {
namespace c2s {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

class CMD_C2S_ChangeGunMulti;
class CMD_C2S_ChangeGunType;
class CMD_C2S_ShootBullet;
class CMD_C2S_HitFish;
class CMD_C2S_HitFormFish;
class CMD_C2S_UseFishProperty;
class CMD_C2S_CancelFishProperty;
class CMD_C2S_ChooseAimFish;
class CMD_C2S_AddUserSilver;
class CMD_C2S_AndroidStandUp;
class CMD_C2S_AndroidShoot;
class CMD_C2S_CheckClientVer;
class CMD_C2S_Outboard;
class CMD_C2S_AutoFire;

// ===================================================================

class CMD_C2S_ChangeGunMulti : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_ChangeGunMulti();
  virtual ~CMD_C2S_ChangeGunMulti();

  CMD_C2S_ChangeGunMulti(const CMD_C2S_ChangeGunMulti& from);

  inline CMD_C2S_ChangeGunMulti& operator=(const CMD_C2S_ChangeGunMulti& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_ChangeGunMulti& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_ChangeGunMulti* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_ChangeGunMulti* other);

  // implements Message ----------------------------------------------

  CMD_C2S_ChangeGunMulti* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_ChangeGunMulti& from);
  void MergeFrom(const CMD_C2S_ChangeGunMulti& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 newGunId = 1;
  inline bool has_newgunid() const;
  inline void clear_newgunid();
  static const int kNewGunIdFieldNumber = 1;
  inline ::google::protobuf::int32 newgunid() const;
  inline void set_newgunid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_ChangeGunMulti)
 private:
  inline void set_has_newgunid();
  inline void clear_has_newgunid();

  ::google::protobuf::int32 newgunid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_ChangeGunMulti* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_ChangeGunType : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_ChangeGunType();
  virtual ~CMD_C2S_ChangeGunType();

  CMD_C2S_ChangeGunType(const CMD_C2S_ChangeGunType& from);

  inline CMD_C2S_ChangeGunType& operator=(const CMD_C2S_ChangeGunType& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_ChangeGunType& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_ChangeGunType* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_ChangeGunType* other);

  // implements Message ----------------------------------------------

  CMD_C2S_ChangeGunType* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_ChangeGunType& from);
  void MergeFrom(const CMD_C2S_ChangeGunType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gunType = 1;
  inline bool has_guntype() const;
  inline void clear_guntype();
  static const int kGunTypeFieldNumber = 1;
  inline ::google::protobuf::int32 guntype() const;
  inline void set_guntype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_ChangeGunType)
 private:
  inline void set_has_guntype();
  inline void clear_has_guntype();

  ::google::protobuf::int32 guntype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_ChangeGunType* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_ShootBullet : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_ShootBullet();
  virtual ~CMD_C2S_ShootBullet();

  CMD_C2S_ShootBullet(const CMD_C2S_ShootBullet& from);

  inline CMD_C2S_ShootBullet& operator=(const CMD_C2S_ShootBullet& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_ShootBullet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_ShootBullet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_ShootBullet* other);

  // implements Message ----------------------------------------------

  CMD_C2S_ShootBullet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_ShootBullet& from);
  void MergeFrom(const CMD_C2S_ShootBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 shootTime = 1;
  inline bool has_shoottime() const;
  inline void clear_shoottime();
  static const int kShootTimeFieldNumber = 1;
  inline ::google::protobuf::int64 shoottime() const;
  inline void set_shoottime(::google::protobuf::int64 value);

  // required float posX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  inline float posx() const;
  inline void set_posx(float value);

  // required float posY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  inline float posy() const;
  inline void set_posy(float value);

  // required int32 uniqId = 4;
  inline bool has_uniqid() const;
  inline void clear_uniqid();
  static const int kUniqIdFieldNumber = 4;
  inline ::google::protobuf::int32 uniqid() const;
  inline void set_uniqid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_ShootBullet)
 private:
  inline void set_has_shoottime();
  inline void clear_has_shoottime();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_uniqid();
  inline void clear_has_uniqid();

  ::google::protobuf::int64 shoottime_;
  float posx_;
  float posy_;
  ::google::protobuf::int32 uniqid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_ShootBullet* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_HitFish : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_HitFish();
  virtual ~CMD_C2S_HitFish();

  CMD_C2S_HitFish(const CMD_C2S_HitFish& from);

  inline CMD_C2S_HitFish& operator=(const CMD_C2S_HitFish& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_HitFish& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_HitFish* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_HitFish* other);

  // implements Message ----------------------------------------------

  CMD_C2S_HitFish* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_HitFish& from);
  void MergeFrom(const CMD_C2S_HitFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 hitTime = 1;
  inline bool has_hittime() const;
  inline void clear_hittime();
  static const int kHitTimeFieldNumber = 1;
  inline ::google::protobuf::int64 hittime() const;
  inline void set_hittime(::google::protobuf::int64 value);

  // required int32 bulletUniqId = 2;
  inline bool has_bulletuniqid() const;
  inline void clear_bulletuniqid();
  static const int kBulletUniqIdFieldNumber = 2;
  inline ::google::protobuf::int32 bulletuniqid() const;
  inline void set_bulletuniqid(::google::protobuf::int32 value);

  // required int32 fishUniqId = 3;
  inline bool has_fishuniqid() const;
  inline void clear_fishuniqid();
  static const int kFishUniqIdFieldNumber = 3;
  inline ::google::protobuf::int32 fishuniqid() const;
  inline void set_fishuniqid(::google::protobuf::int32 value);

  // required int32 fishIndex = 4;
  inline bool has_fishindex() const;
  inline void clear_fishindex();
  static const int kFishIndexFieldNumber = 4;
  inline ::google::protobuf::int32 fishindex() const;
  inline void set_fishindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_HitFish)
 private:
  inline void set_has_hittime();
  inline void clear_has_hittime();
  inline void set_has_bulletuniqid();
  inline void clear_has_bulletuniqid();
  inline void set_has_fishuniqid();
  inline void clear_has_fishuniqid();
  inline void set_has_fishindex();
  inline void clear_has_fishindex();

  ::google::protobuf::int64 hittime_;
  ::google::protobuf::int32 bulletuniqid_;
  ::google::protobuf::int32 fishuniqid_;
  ::google::protobuf::int32 fishindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_HitFish* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_HitFormFish : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_HitFormFish();
  virtual ~CMD_C2S_HitFormFish();

  CMD_C2S_HitFormFish(const CMD_C2S_HitFormFish& from);

  inline CMD_C2S_HitFormFish& operator=(const CMD_C2S_HitFormFish& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_HitFormFish& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_HitFormFish* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_HitFormFish* other);

  // implements Message ----------------------------------------------

  CMD_C2S_HitFormFish* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_HitFormFish& from);
  void MergeFrom(const CMD_C2S_HitFormFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 hitTime = 1;
  inline bool has_hittime() const;
  inline void clear_hittime();
  static const int kHitTimeFieldNumber = 1;
  inline ::google::protobuf::int64 hittime() const;
  inline void set_hittime(::google::protobuf::int64 value);

  // required int32 bulletUniqId = 2;
  inline bool has_bulletuniqid() const;
  inline void clear_bulletuniqid();
  static const int kBulletUniqIdFieldNumber = 2;
  inline ::google::protobuf::int32 bulletuniqid() const;
  inline void set_bulletuniqid(::google::protobuf::int32 value);

  // required int32 formOutID = 3;
  inline bool has_formoutid() const;
  inline void clear_formoutid();
  static const int kFormOutIDFieldNumber = 3;
  inline ::google::protobuf::int32 formoutid() const;
  inline void set_formoutid(::google::protobuf::int32 value);

  // required int32 fishIndex = 4;
  inline bool has_fishindex() const;
  inline void clear_fishindex();
  static const int kFishIndexFieldNumber = 4;
  inline ::google::protobuf::int32 fishindex() const;
  inline void set_fishindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_HitFormFish)
 private:
  inline void set_has_hittime();
  inline void clear_has_hittime();
  inline void set_has_bulletuniqid();
  inline void clear_has_bulletuniqid();
  inline void set_has_formoutid();
  inline void clear_has_formoutid();
  inline void set_has_fishindex();
  inline void clear_has_fishindex();

  ::google::protobuf::int64 hittime_;
  ::google::protobuf::int32 bulletuniqid_;
  ::google::protobuf::int32 formoutid_;
  ::google::protobuf::int32 fishindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_HitFormFish* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_UseFishProperty : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_UseFishProperty();
  virtual ~CMD_C2S_UseFishProperty();

  CMD_C2S_UseFishProperty(const CMD_C2S_UseFishProperty& from);

  inline CMD_C2S_UseFishProperty& operator=(const CMD_C2S_UseFishProperty& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_UseFishProperty& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_UseFishProperty* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_UseFishProperty* other);

  // implements Message ----------------------------------------------

  CMD_C2S_UseFishProperty* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_UseFishProperty& from);
  void MergeFrom(const CMD_C2S_UseFishProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_UseFishProperty)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_UseFishProperty* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_CancelFishProperty : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_CancelFishProperty();
  virtual ~CMD_C2S_CancelFishProperty();

  CMD_C2S_CancelFishProperty(const CMD_C2S_CancelFishProperty& from);

  inline CMD_C2S_CancelFishProperty& operator=(const CMD_C2S_CancelFishProperty& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_CancelFishProperty& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_CancelFishProperty* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_CancelFishProperty* other);

  // implements Message ----------------------------------------------

  CMD_C2S_CancelFishProperty* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_CancelFishProperty& from);
  void MergeFrom(const CMD_C2S_CancelFishProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_CancelFishProperty)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_CancelFishProperty* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_ChooseAimFish : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_ChooseAimFish();
  virtual ~CMD_C2S_ChooseAimFish();

  CMD_C2S_ChooseAimFish(const CMD_C2S_ChooseAimFish& from);

  inline CMD_C2S_ChooseAimFish& operator=(const CMD_C2S_ChooseAimFish& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_ChooseAimFish& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_ChooseAimFish* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_ChooseAimFish* other);

  // implements Message ----------------------------------------------

  CMD_C2S_ChooseAimFish* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_ChooseAimFish& from);
  void MergeFrom(const CMD_C2S_ChooseAimFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fishUniqId = 1;
  inline bool has_fishuniqid() const;
  inline void clear_fishuniqid();
  static const int kFishUniqIdFieldNumber = 1;
  inline ::google::protobuf::int32 fishuniqid() const;
  inline void set_fishuniqid(::google::protobuf::int32 value);

  // required int32 isFormFish = 2;
  inline bool has_isformfish() const;
  inline void clear_isformfish();
  static const int kIsFormFishFieldNumber = 2;
  inline ::google::protobuf::int32 isformfish() const;
  inline void set_isformfish(::google::protobuf::int32 value);

  // required int32 fishIndex = 3;
  inline bool has_fishindex() const;
  inline void clear_fishindex();
  static const int kFishIndexFieldNumber = 3;
  inline ::google::protobuf::int32 fishindex() const;
  inline void set_fishindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_ChooseAimFish)
 private:
  inline void set_has_fishuniqid();
  inline void clear_has_fishuniqid();
  inline void set_has_isformfish();
  inline void clear_has_isformfish();
  inline void set_has_fishindex();
  inline void clear_has_fishindex();

  ::google::protobuf::int32 fishuniqid_;
  ::google::protobuf::int32 isformfish_;
  ::google::protobuf::int32 fishindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_ChooseAimFish* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_AddUserSilver : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_AddUserSilver();
  virtual ~CMD_C2S_AddUserSilver();

  CMD_C2S_AddUserSilver(const CMD_C2S_AddUserSilver& from);

  inline CMD_C2S_AddUserSilver& operator=(const CMD_C2S_AddUserSilver& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_AddUserSilver& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_AddUserSilver* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_AddUserSilver* other);

  // implements Message ----------------------------------------------

  CMD_C2S_AddUserSilver* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_AddUserSilver& from);
  void MergeFrom(const CMD_C2S_AddUserSilver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 addSilver = 1;
  inline bool has_addsilver() const;
  inline void clear_addsilver();
  static const int kAddSilverFieldNumber = 1;
  inline ::google::protobuf::int64 addsilver() const;
  inline void set_addsilver(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_AddUserSilver)
 private:
  inline void set_has_addsilver();
  inline void clear_has_addsilver();

  ::google::protobuf::int64 addsilver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_AddUserSilver* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_AndroidStandUp : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_AndroidStandUp();
  virtual ~CMD_C2S_AndroidStandUp();

  CMD_C2S_AndroidStandUp(const CMD_C2S_AndroidStandUp& from);

  inline CMD_C2S_AndroidStandUp& operator=(const CMD_C2S_AndroidStandUp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_AndroidStandUp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_AndroidStandUp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_AndroidStandUp* other);

  // implements Message ----------------------------------------------

  CMD_C2S_AndroidStandUp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_AndroidStandUp& from);
  void MergeFrom(const CMD_C2S_AndroidStandUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 serverTime = 1;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::int32 servertime() const;
  inline void set_servertime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_AndroidStandUp)
 private:
  inline void set_has_servertime();
  inline void clear_has_servertime();

  ::google::protobuf::int32 servertime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_AndroidStandUp* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_AndroidShoot : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_AndroidShoot();
  virtual ~CMD_C2S_AndroidShoot();

  CMD_C2S_AndroidShoot(const CMD_C2S_AndroidShoot& from);

  inline CMD_C2S_AndroidShoot& operator=(const CMD_C2S_AndroidShoot& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_AndroidShoot& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_AndroidShoot* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_AndroidShoot* other);

  // implements Message ----------------------------------------------

  CMD_C2S_AndroidShoot* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_AndroidShoot& from);
  void MergeFrom(const CMD_C2S_AndroidShoot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fishUniqId = 1;
  inline bool has_fishuniqid() const;
  inline void clear_fishuniqid();
  static const int kFishUniqIdFieldNumber = 1;
  inline ::google::protobuf::int32 fishuniqid() const;
  inline void set_fishuniqid(::google::protobuf::int32 value);

  // required int64 shootTime = 2;
  inline bool has_shoottime() const;
  inline void clear_shoottime();
  static const int kShootTimeFieldNumber = 2;
  inline ::google::protobuf::int64 shoottime() const;
  inline void set_shoottime(::google::protobuf::int64 value);

  // required int32 posX = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 3;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // required int32 posY = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 4;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // required int32 bulletLiveTime = 5;
  inline bool has_bulletlivetime() const;
  inline void clear_bulletlivetime();
  static const int kBulletLiveTimeFieldNumber = 5;
  inline ::google::protobuf::int32 bulletlivetime() const;
  inline void set_bulletlivetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_AndroidShoot)
 private:
  inline void set_has_fishuniqid();
  inline void clear_has_fishuniqid();
  inline void set_has_shoottime();
  inline void clear_has_shoottime();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_bulletlivetime();
  inline void clear_has_bulletlivetime();

  ::google::protobuf::int64 shoottime_;
  ::google::protobuf::int32 fishuniqid_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 bulletlivetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_AndroidShoot* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_CheckClientVer : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_CheckClientVer();
  virtual ~CMD_C2S_CheckClientVer();

  CMD_C2S_CheckClientVer(const CMD_C2S_CheckClientVer& from);

  inline CMD_C2S_CheckClientVer& operator=(const CMD_C2S_CheckClientVer& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_CheckClientVer& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_CheckClientVer* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_CheckClientVer* other);

  // implements Message ----------------------------------------------

  CMD_C2S_CheckClientVer* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_CheckClientVer& from);
  void MergeFrom(const CMD_C2S_CheckClientVer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 clientVer = 1;
  inline bool has_clientver() const;
  inline void clear_clientver();
  static const int kClientVerFieldNumber = 1;
  inline ::google::protobuf::int32 clientver() const;
  inline void set_clientver(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_CheckClientVer)
 private:
  inline void set_has_clientver();
  inline void clear_has_clientver();

  ::google::protobuf::int32 clientver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_CheckClientVer* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_Outboard : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_Outboard();
  virtual ~CMD_C2S_Outboard();

  CMD_C2S_Outboard(const CMD_C2S_Outboard& from);

  inline CMD_C2S_Outboard& operator=(const CMD_C2S_Outboard& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_Outboard& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_Outboard* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_Outboard* other);

  // implements Message ----------------------------------------------

  CMD_C2S_Outboard* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_Outboard& from);
  void MergeFrom(const CMD_C2S_Outboard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 isOutboard = 1;
  inline bool has_isoutboard() const;
  inline void clear_isoutboard();
  static const int kIsOutboardFieldNumber = 1;
  inline ::google::protobuf::int32 isoutboard() const;
  inline void set_isoutboard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_Outboard)
 private:
  inline void set_has_isoutboard();
  inline void clear_has_isoutboard();

  ::google::protobuf::int32 isoutboard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_Outboard* default_instance_;
};
// -------------------------------------------------------------------

class CMD_C2S_AutoFire : public ::google::protobuf::MessageLite {
 public:
  CMD_C2S_AutoFire();
  virtual ~CMD_C2S_AutoFire();

  CMD_C2S_AutoFire(const CMD_C2S_AutoFire& from);

  inline CMD_C2S_AutoFire& operator=(const CMD_C2S_AutoFire& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_C2S_AutoFire& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_C2S_AutoFire* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_C2S_AutoFire* other);

  // implements Message ----------------------------------------------

  CMD_C2S_AutoFire* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_C2S_AutoFire& from);
  void MergeFrom(const CMD_C2S_AutoFire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 isAutoFire = 1;
  inline bool has_isautofire() const;
  inline void clear_isautofire();
  static const int kIsAutoFireFieldNumber = 1;
  inline ::google::protobuf::int32 isautofire() const;
  inline void set_isautofire(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.fish3d.c2s.CMD_C2S_AutoFire)
 private:
  inline void set_has_isautofire();
  inline void clear_has_isautofire();

  ::google::protobuf::int32 isautofire_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fFish3D_2ffish3d_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Game_2fFish3D_2ffish3d_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_C2S_AutoFire* default_instance_;
};
// ===================================================================


// ===================================================================

// CMD_C2S_ChangeGunMulti

// required int32 newGunId = 1;
inline bool CMD_C2S_ChangeGunMulti::has_newgunid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_ChangeGunMulti::set_has_newgunid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_ChangeGunMulti::clear_has_newgunid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_ChangeGunMulti::clear_newgunid() {
  newgunid_ = 0;
  clear_has_newgunid();
}
inline ::google::protobuf::int32 CMD_C2S_ChangeGunMulti::newgunid() const {
  return newgunid_;
}
inline void CMD_C2S_ChangeGunMulti::set_newgunid(::google::protobuf::int32 value) {
  set_has_newgunid();
  newgunid_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_ChangeGunType

// required int32 gunType = 1;
inline bool CMD_C2S_ChangeGunType::has_guntype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_ChangeGunType::set_has_guntype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_ChangeGunType::clear_has_guntype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_ChangeGunType::clear_guntype() {
  guntype_ = 0;
  clear_has_guntype();
}
inline ::google::protobuf::int32 CMD_C2S_ChangeGunType::guntype() const {
  return guntype_;
}
inline void CMD_C2S_ChangeGunType::set_guntype(::google::protobuf::int32 value) {
  set_has_guntype();
  guntype_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_ShootBullet

// required int64 shootTime = 1;
inline bool CMD_C2S_ShootBullet::has_shoottime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_ShootBullet::set_has_shoottime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_ShootBullet::clear_has_shoottime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_ShootBullet::clear_shoottime() {
  shoottime_ = GOOGLE_LONGLONG(0);
  clear_has_shoottime();
}
inline ::google::protobuf::int64 CMD_C2S_ShootBullet::shoottime() const {
  return shoottime_;
}
inline void CMD_C2S_ShootBullet::set_shoottime(::google::protobuf::int64 value) {
  set_has_shoottime();
  shoottime_ = value;
}

// required float posX = 2;
inline bool CMD_C2S_ShootBullet::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_C2S_ShootBullet::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_C2S_ShootBullet::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_C2S_ShootBullet::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float CMD_C2S_ShootBullet::posx() const {
  return posx_;
}
inline void CMD_C2S_ShootBullet::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// required float posY = 3;
inline bool CMD_C2S_ShootBullet::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_C2S_ShootBullet::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_C2S_ShootBullet::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_C2S_ShootBullet::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float CMD_C2S_ShootBullet::posy() const {
  return posy_;
}
inline void CMD_C2S_ShootBullet::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// required int32 uniqId = 4;
inline bool CMD_C2S_ShootBullet::has_uniqid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_C2S_ShootBullet::set_has_uniqid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_C2S_ShootBullet::clear_has_uniqid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_C2S_ShootBullet::clear_uniqid() {
  uniqid_ = 0;
  clear_has_uniqid();
}
inline ::google::protobuf::int32 CMD_C2S_ShootBullet::uniqid() const {
  return uniqid_;
}
inline void CMD_C2S_ShootBullet::set_uniqid(::google::protobuf::int32 value) {
  set_has_uniqid();
  uniqid_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_HitFish

// required int64 hitTime = 1;
inline bool CMD_C2S_HitFish::has_hittime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_HitFish::set_has_hittime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_HitFish::clear_has_hittime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_HitFish::clear_hittime() {
  hittime_ = GOOGLE_LONGLONG(0);
  clear_has_hittime();
}
inline ::google::protobuf::int64 CMD_C2S_HitFish::hittime() const {
  return hittime_;
}
inline void CMD_C2S_HitFish::set_hittime(::google::protobuf::int64 value) {
  set_has_hittime();
  hittime_ = value;
}

// required int32 bulletUniqId = 2;
inline bool CMD_C2S_HitFish::has_bulletuniqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_C2S_HitFish::set_has_bulletuniqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_C2S_HitFish::clear_has_bulletuniqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_C2S_HitFish::clear_bulletuniqid() {
  bulletuniqid_ = 0;
  clear_has_bulletuniqid();
}
inline ::google::protobuf::int32 CMD_C2S_HitFish::bulletuniqid() const {
  return bulletuniqid_;
}
inline void CMD_C2S_HitFish::set_bulletuniqid(::google::protobuf::int32 value) {
  set_has_bulletuniqid();
  bulletuniqid_ = value;
}

// required int32 fishUniqId = 3;
inline bool CMD_C2S_HitFish::has_fishuniqid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_C2S_HitFish::set_has_fishuniqid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_C2S_HitFish::clear_has_fishuniqid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_C2S_HitFish::clear_fishuniqid() {
  fishuniqid_ = 0;
  clear_has_fishuniqid();
}
inline ::google::protobuf::int32 CMD_C2S_HitFish::fishuniqid() const {
  return fishuniqid_;
}
inline void CMD_C2S_HitFish::set_fishuniqid(::google::protobuf::int32 value) {
  set_has_fishuniqid();
  fishuniqid_ = value;
}

// required int32 fishIndex = 4;
inline bool CMD_C2S_HitFish::has_fishindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_C2S_HitFish::set_has_fishindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_C2S_HitFish::clear_has_fishindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_C2S_HitFish::clear_fishindex() {
  fishindex_ = 0;
  clear_has_fishindex();
}
inline ::google::protobuf::int32 CMD_C2S_HitFish::fishindex() const {
  return fishindex_;
}
inline void CMD_C2S_HitFish::set_fishindex(::google::protobuf::int32 value) {
  set_has_fishindex();
  fishindex_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_HitFormFish

// required int64 hitTime = 1;
inline bool CMD_C2S_HitFormFish::has_hittime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_HitFormFish::set_has_hittime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_HitFormFish::clear_has_hittime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_HitFormFish::clear_hittime() {
  hittime_ = GOOGLE_LONGLONG(0);
  clear_has_hittime();
}
inline ::google::protobuf::int64 CMD_C2S_HitFormFish::hittime() const {
  return hittime_;
}
inline void CMD_C2S_HitFormFish::set_hittime(::google::protobuf::int64 value) {
  set_has_hittime();
  hittime_ = value;
}

// required int32 bulletUniqId = 2;
inline bool CMD_C2S_HitFormFish::has_bulletuniqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_C2S_HitFormFish::set_has_bulletuniqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_C2S_HitFormFish::clear_has_bulletuniqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_C2S_HitFormFish::clear_bulletuniqid() {
  bulletuniqid_ = 0;
  clear_has_bulletuniqid();
}
inline ::google::protobuf::int32 CMD_C2S_HitFormFish::bulletuniqid() const {
  return bulletuniqid_;
}
inline void CMD_C2S_HitFormFish::set_bulletuniqid(::google::protobuf::int32 value) {
  set_has_bulletuniqid();
  bulletuniqid_ = value;
}

// required int32 formOutID = 3;
inline bool CMD_C2S_HitFormFish::has_formoutid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_C2S_HitFormFish::set_has_formoutid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_C2S_HitFormFish::clear_has_formoutid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_C2S_HitFormFish::clear_formoutid() {
  formoutid_ = 0;
  clear_has_formoutid();
}
inline ::google::protobuf::int32 CMD_C2S_HitFormFish::formoutid() const {
  return formoutid_;
}
inline void CMD_C2S_HitFormFish::set_formoutid(::google::protobuf::int32 value) {
  set_has_formoutid();
  formoutid_ = value;
}

// required int32 fishIndex = 4;
inline bool CMD_C2S_HitFormFish::has_fishindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_C2S_HitFormFish::set_has_fishindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_C2S_HitFormFish::clear_has_fishindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_C2S_HitFormFish::clear_fishindex() {
  fishindex_ = 0;
  clear_has_fishindex();
}
inline ::google::protobuf::int32 CMD_C2S_HitFormFish::fishindex() const {
  return fishindex_;
}
inline void CMD_C2S_HitFormFish::set_fishindex(::google::protobuf::int32 value) {
  set_has_fishindex();
  fishindex_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_UseFishProperty

// required int32 itemId = 1;
inline bool CMD_C2S_UseFishProperty::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_UseFishProperty::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_UseFishProperty::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_UseFishProperty::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 CMD_C2S_UseFishProperty::itemid() const {
  return itemid_;
}
inline void CMD_C2S_UseFishProperty::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_CancelFishProperty

// required int32 itemId = 1;
inline bool CMD_C2S_CancelFishProperty::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_CancelFishProperty::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_CancelFishProperty::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_CancelFishProperty::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 CMD_C2S_CancelFishProperty::itemid() const {
  return itemid_;
}
inline void CMD_C2S_CancelFishProperty::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_ChooseAimFish

// required int32 fishUniqId = 1;
inline bool CMD_C2S_ChooseAimFish::has_fishuniqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_ChooseAimFish::set_has_fishuniqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_ChooseAimFish::clear_has_fishuniqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_ChooseAimFish::clear_fishuniqid() {
  fishuniqid_ = 0;
  clear_has_fishuniqid();
}
inline ::google::protobuf::int32 CMD_C2S_ChooseAimFish::fishuniqid() const {
  return fishuniqid_;
}
inline void CMD_C2S_ChooseAimFish::set_fishuniqid(::google::protobuf::int32 value) {
  set_has_fishuniqid();
  fishuniqid_ = value;
}

// required int32 isFormFish = 2;
inline bool CMD_C2S_ChooseAimFish::has_isformfish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_C2S_ChooseAimFish::set_has_isformfish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_C2S_ChooseAimFish::clear_has_isformfish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_C2S_ChooseAimFish::clear_isformfish() {
  isformfish_ = 0;
  clear_has_isformfish();
}
inline ::google::protobuf::int32 CMD_C2S_ChooseAimFish::isformfish() const {
  return isformfish_;
}
inline void CMD_C2S_ChooseAimFish::set_isformfish(::google::protobuf::int32 value) {
  set_has_isformfish();
  isformfish_ = value;
}

// required int32 fishIndex = 3;
inline bool CMD_C2S_ChooseAimFish::has_fishindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_C2S_ChooseAimFish::set_has_fishindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_C2S_ChooseAimFish::clear_has_fishindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_C2S_ChooseAimFish::clear_fishindex() {
  fishindex_ = 0;
  clear_has_fishindex();
}
inline ::google::protobuf::int32 CMD_C2S_ChooseAimFish::fishindex() const {
  return fishindex_;
}
inline void CMD_C2S_ChooseAimFish::set_fishindex(::google::protobuf::int32 value) {
  set_has_fishindex();
  fishindex_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_AddUserSilver

// required int64 addSilver = 1;
inline bool CMD_C2S_AddUserSilver::has_addsilver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_AddUserSilver::set_has_addsilver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_AddUserSilver::clear_has_addsilver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_AddUserSilver::clear_addsilver() {
  addsilver_ = GOOGLE_LONGLONG(0);
  clear_has_addsilver();
}
inline ::google::protobuf::int64 CMD_C2S_AddUserSilver::addsilver() const {
  return addsilver_;
}
inline void CMD_C2S_AddUserSilver::set_addsilver(::google::protobuf::int64 value) {
  set_has_addsilver();
  addsilver_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_AndroidStandUp

// required int32 serverTime = 1;
inline bool CMD_C2S_AndroidStandUp::has_servertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_AndroidStandUp::set_has_servertime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_AndroidStandUp::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_AndroidStandUp::clear_servertime() {
  servertime_ = 0;
  clear_has_servertime();
}
inline ::google::protobuf::int32 CMD_C2S_AndroidStandUp::servertime() const {
  return servertime_;
}
inline void CMD_C2S_AndroidStandUp::set_servertime(::google::protobuf::int32 value) {
  set_has_servertime();
  servertime_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_AndroidShoot

// required int32 fishUniqId = 1;
inline bool CMD_C2S_AndroidShoot::has_fishuniqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_AndroidShoot::set_has_fishuniqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_AndroidShoot::clear_has_fishuniqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_AndroidShoot::clear_fishuniqid() {
  fishuniqid_ = 0;
  clear_has_fishuniqid();
}
inline ::google::protobuf::int32 CMD_C2S_AndroidShoot::fishuniqid() const {
  return fishuniqid_;
}
inline void CMD_C2S_AndroidShoot::set_fishuniqid(::google::protobuf::int32 value) {
  set_has_fishuniqid();
  fishuniqid_ = value;
}

// required int64 shootTime = 2;
inline bool CMD_C2S_AndroidShoot::has_shoottime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_C2S_AndroidShoot::set_has_shoottime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_C2S_AndroidShoot::clear_has_shoottime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_C2S_AndroidShoot::clear_shoottime() {
  shoottime_ = GOOGLE_LONGLONG(0);
  clear_has_shoottime();
}
inline ::google::protobuf::int64 CMD_C2S_AndroidShoot::shoottime() const {
  return shoottime_;
}
inline void CMD_C2S_AndroidShoot::set_shoottime(::google::protobuf::int64 value) {
  set_has_shoottime();
  shoottime_ = value;
}

// required int32 posX = 3;
inline bool CMD_C2S_AndroidShoot::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_C2S_AndroidShoot::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_C2S_AndroidShoot::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_C2S_AndroidShoot::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 CMD_C2S_AndroidShoot::posx() const {
  return posx_;
}
inline void CMD_C2S_AndroidShoot::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
}

// required int32 posY = 4;
inline bool CMD_C2S_AndroidShoot::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_C2S_AndroidShoot::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_C2S_AndroidShoot::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_C2S_AndroidShoot::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 CMD_C2S_AndroidShoot::posy() const {
  return posy_;
}
inline void CMD_C2S_AndroidShoot::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
}

// required int32 bulletLiveTime = 5;
inline bool CMD_C2S_AndroidShoot::has_bulletlivetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_C2S_AndroidShoot::set_has_bulletlivetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_C2S_AndroidShoot::clear_has_bulletlivetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_C2S_AndroidShoot::clear_bulletlivetime() {
  bulletlivetime_ = 0;
  clear_has_bulletlivetime();
}
inline ::google::protobuf::int32 CMD_C2S_AndroidShoot::bulletlivetime() const {
  return bulletlivetime_;
}
inline void CMD_C2S_AndroidShoot::set_bulletlivetime(::google::protobuf::int32 value) {
  set_has_bulletlivetime();
  bulletlivetime_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_CheckClientVer

// required int32 clientVer = 1;
inline bool CMD_C2S_CheckClientVer::has_clientver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_CheckClientVer::set_has_clientver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_CheckClientVer::clear_has_clientver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_CheckClientVer::clear_clientver() {
  clientver_ = 0;
  clear_has_clientver();
}
inline ::google::protobuf::int32 CMD_C2S_CheckClientVer::clientver() const {
  return clientver_;
}
inline void CMD_C2S_CheckClientVer::set_clientver(::google::protobuf::int32 value) {
  set_has_clientver();
  clientver_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_Outboard

// required int32 isOutboard = 1;
inline bool CMD_C2S_Outboard::has_isoutboard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_Outboard::set_has_isoutboard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_Outboard::clear_has_isoutboard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_Outboard::clear_isoutboard() {
  isoutboard_ = 0;
  clear_has_isoutboard();
}
inline ::google::protobuf::int32 CMD_C2S_Outboard::isoutboard() const {
  return isoutboard_;
}
inline void CMD_C2S_Outboard::set_isoutboard(::google::protobuf::int32 value) {
  set_has_isoutboard();
  isoutboard_ = value;
}

// -------------------------------------------------------------------

// CMD_C2S_AutoFire

// required int32 isAutoFire = 1;
inline bool CMD_C2S_AutoFire::has_isautofire() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_C2S_AutoFire::set_has_isautofire() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_C2S_AutoFire::clear_has_isautofire() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_C2S_AutoFire::clear_isautofire() {
  isautofire_ = 0;
  clear_has_isautofire();
}
inline ::google::protobuf::int32 CMD_C2S_AutoFire::isautofire() const {
  return isautofire_;
}
inline void CMD_C2S_AutoFire::set_isautofire(::google::protobuf::int32 value) {
  set_has_isautofire();
  isautofire_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace c2s
}  // namespace fish3d
}  // namespace game

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Game_2fFish3D_2ffish3d_5fc2s_2eproto__INCLUDED

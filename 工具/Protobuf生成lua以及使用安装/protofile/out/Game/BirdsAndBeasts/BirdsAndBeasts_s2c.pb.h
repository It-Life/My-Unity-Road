// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/BirdsAndBeasts/BirdsAndBeasts_s2c.proto

#ifndef PROTOBUF_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto__INCLUDED
#define PROTOBUF_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace birdsandbeasts {
namespace s2c {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

class tagSRankUserInfo;
class CMD_S2C_GameSceneRest;
class CMD_S2C_GameSceneBet;
class CMD_S2C_GameSceneResult;
class CMD_S2C_GameStepBet;
class CMD_S2C_PlayerBet;
class CMD_S2C_GameStepResult;
class CMD_S2C_GameStepRest;
class CMD_S2C_ResultHistory;
class CMD_S2C_ClearBet;
class CMD_S2C_RedPacket;

// ===================================================================

class tagSRankUserInfo : public ::google::protobuf::MessageLite {
 public:
  tagSRankUserInfo();
  virtual ~tagSRankUserInfo();

  tagSRankUserInfo(const tagSRankUserInfo& from);

  inline tagSRankUserInfo& operator=(const tagSRankUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const tagSRankUserInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const tagSRankUserInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(tagSRankUserInfo* other);

  // implements Message ----------------------------------------------

  tagSRankUserInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const tagSRankUserInfo& from);
  void MergeFrom(const tagSRankUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairId = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIdFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // required int64 winLose = 2;
  inline bool has_winlose() const;
  inline void clear_winlose();
  static const int kWinLoseFieldNumber = 2;
  inline ::google::protobuf::int64 winlose() const;
  inline void set_winlose(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.tagSRankUserInfo)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_winlose();
  inline void clear_has_winlose();

  ::google::protobuf::int64 winlose_;
  ::google::protobuf::int32 chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static tagSRankUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_GameSceneRest : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_GameSceneRest();
  virtual ~CMD_S2C_GameSceneRest();

  CMD_S2C_GameSceneRest(const CMD_S2C_GameSceneRest& from);

  inline CMD_S2C_GameSceneRest& operator=(const CMD_S2C_GameSceneRest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_GameSceneRest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_GameSceneRest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_GameSceneRest* other);

  // implements Message ----------------------------------------------

  CMD_S2C_GameSceneRest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_GameSceneRest& from);
  void MergeFrom(const CMD_S2C_GameSceneRest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 timeRemain = 1;
  inline bool has_timeremain() const;
  inline void clear_timeremain();
  static const int kTimeRemainFieldNumber = 1;
  inline ::google::protobuf::int32 timeremain() const;
  inline void set_timeremain(::google::protobuf::int32 value);

  // required int64 bonusPool = 2;
  inline bool has_bonuspool() const;
  inline void clear_bonuspool();
  static const int kBonusPoolFieldNumber = 2;
  inline ::google::protobuf::int64 bonuspool() const;
  inline void set_bonuspool(::google::protobuf::int64 value);

  // repeated int64 remainCanBetScore = 3;
  inline int remaincanbetscore_size() const;
  inline void clear_remaincanbetscore();
  static const int kRemainCanBetScoreFieldNumber = 3;
  inline ::google::protobuf::int64 remaincanbetscore(int index) const;
  inline void set_remaincanbetscore(int index, ::google::protobuf::int64 value);
  inline void add_remaincanbetscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      remaincanbetscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_remaincanbetscore();

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_GameSceneRest)
 private:
  inline void set_has_timeremain();
  inline void clear_has_timeremain();
  inline void set_has_bonuspool();
  inline void clear_has_bonuspool();

  ::google::protobuf::int64 bonuspool_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > remaincanbetscore_;
  ::google::protobuf::int32 timeremain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_GameSceneRest* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_GameSceneBet : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_GameSceneBet();
  virtual ~CMD_S2C_GameSceneBet();

  CMD_S2C_GameSceneBet(const CMD_S2C_GameSceneBet& from);

  inline CMD_S2C_GameSceneBet& operator=(const CMD_S2C_GameSceneBet& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_GameSceneBet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_GameSceneBet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_GameSceneBet* other);

  // implements Message ----------------------------------------------

  CMD_S2C_GameSceneBet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_GameSceneBet& from);
  void MergeFrom(const CMD_S2C_GameSceneBet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 timeRemain = 1;
  inline bool has_timeremain() const;
  inline void clear_timeremain();
  static const int kTimeRemainFieldNumber = 1;
  inline ::google::protobuf::int32 timeremain() const;
  inline void set_timeremain(::google::protobuf::int32 value);

  // repeated int64 allBetScore = 2;
  inline int allbetscore_size() const;
  inline void clear_allbetscore();
  static const int kAllBetScoreFieldNumber = 2;
  inline ::google::protobuf::int64 allbetscore(int index) const;
  inline void set_allbetscore(int index, ::google::protobuf::int64 value);
  inline void add_allbetscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      allbetscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_allbetscore();

  // repeated int64 myBetScore = 3;
  inline int mybetscore_size() const;
  inline void clear_mybetscore();
  static const int kMyBetScoreFieldNumber = 3;
  inline ::google::protobuf::int64 mybetscore(int index) const;
  inline void set_mybetscore(int index, ::google::protobuf::int64 value);
  inline void add_mybetscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      mybetscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_mybetscore();

  // required int64 bonusPool = 4;
  inline bool has_bonuspool() const;
  inline void clear_bonuspool();
  static const int kBonusPoolFieldNumber = 4;
  inline ::google::protobuf::int64 bonuspool() const;
  inline void set_bonuspool(::google::protobuf::int64 value);

  // repeated int64 remainCanBetScore = 5;
  inline int remaincanbetscore_size() const;
  inline void clear_remaincanbetscore();
  static const int kRemainCanBetScoreFieldNumber = 5;
  inline ::google::protobuf::int64 remaincanbetscore(int index) const;
  inline void set_remaincanbetscore(int index, ::google::protobuf::int64 value);
  inline void add_remaincanbetscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      remaincanbetscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_remaincanbetscore();

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_GameSceneBet)
 private:
  inline void set_has_timeremain();
  inline void clear_has_timeremain();
  inline void set_has_bonuspool();
  inline void clear_has_bonuspool();

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > allbetscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > mybetscore_;
  ::google::protobuf::int64 bonuspool_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > remaincanbetscore_;
  ::google::protobuf::int32 timeremain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_GameSceneBet* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_GameSceneResult : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_GameSceneResult();
  virtual ~CMD_S2C_GameSceneResult();

  CMD_S2C_GameSceneResult(const CMD_S2C_GameSceneResult& from);

  inline CMD_S2C_GameSceneResult& operator=(const CMD_S2C_GameSceneResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_GameSceneResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_GameSceneResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_GameSceneResult* other);

  // implements Message ----------------------------------------------

  CMD_S2C_GameSceneResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_GameSceneResult& from);
  void MergeFrom(const CMD_S2C_GameSceneResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 timeRemain = 1;
  inline bool has_timeremain() const;
  inline void clear_timeremain();
  static const int kTimeRemainFieldNumber = 1;
  inline ::google::protobuf::int32 timeremain() const;
  inline void set_timeremain(::google::protobuf::int32 value);

  // repeated int64 allBetScore = 2;
  inline int allbetscore_size() const;
  inline void clear_allbetscore();
  static const int kAllBetScoreFieldNumber = 2;
  inline ::google::protobuf::int64 allbetscore(int index) const;
  inline void set_allbetscore(int index, ::google::protobuf::int64 value);
  inline void add_allbetscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      allbetscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_allbetscore();

  // repeated int64 myBetScore = 3;
  inline int mybetscore_size() const;
  inline void clear_mybetscore();
  static const int kMyBetScoreFieldNumber = 3;
  inline ::google::protobuf::int64 mybetscore(int index) const;
  inline void set_mybetscore(int index, ::google::protobuf::int64 value);
  inline void add_mybetscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      mybetscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_mybetscore();

  // required int32 turntableId = 4;
  inline bool has_turntableid() const;
  inline void clear_turntableid();
  static const int kTurntableIdFieldNumber = 4;
  inline ::google::protobuf::int32 turntableid() const;
  inline void set_turntableid(::google::protobuf::int32 value);

  // required int64 bonusPool = 5;
  inline bool has_bonuspool() const;
  inline void clear_bonuspool();
  static const int kBonusPoolFieldNumber = 5;
  inline ::google::protobuf::int64 bonuspool() const;
  inline void set_bonuspool(::google::protobuf::int64 value);

  // required int64 bonusPoolWinLose = 6;
  inline bool has_bonuspoolwinlose() const;
  inline void clear_bonuspoolwinlose();
  static const int kBonusPoolWinLoseFieldNumber = 6;
  inline ::google::protobuf::int64 bonuspoolwinlose() const;
  inline void set_bonuspoolwinlose(::google::protobuf::int64 value);

  // required int32 rankUserInfoCount = 7;
  inline bool has_rankuserinfocount() const;
  inline void clear_rankuserinfocount();
  static const int kRankUserInfoCountFieldNumber = 7;
  inline ::google::protobuf::int32 rankuserinfocount() const;
  inline void set_rankuserinfocount(::google::protobuf::int32 value);

  // repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
  inline int rankuserinfo_size() const;
  inline void clear_rankuserinfo();
  static const int kRankUserInfoFieldNumber = 8;
  inline const ::game::birdsandbeasts::s2c::tagSRankUserInfo& rankuserinfo(int index) const;
  inline ::game::birdsandbeasts::s2c::tagSRankUserInfo* mutable_rankuserinfo(int index);
  inline ::game::birdsandbeasts::s2c::tagSRankUserInfo* add_rankuserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo >&
      rankuserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo >*
      mutable_rankuserinfo();

  // repeated int64 remainCanBetScore = 9;
  inline int remaincanbetscore_size() const;
  inline void clear_remaincanbetscore();
  static const int kRemainCanBetScoreFieldNumber = 9;
  inline ::google::protobuf::int64 remaincanbetscore(int index) const;
  inline void set_remaincanbetscore(int index, ::google::protobuf::int64 value);
  inline void add_remaincanbetscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      remaincanbetscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_remaincanbetscore();

  // required int32 sharkMultEx = 10;
  inline bool has_sharkmultex() const;
  inline void clear_sharkmultex();
  static const int kSharkMultExFieldNumber = 10;
  inline ::google::protobuf::int32 sharkmultex() const;
  inline void set_sharkmultex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_GameSceneResult)
 private:
  inline void set_has_timeremain();
  inline void clear_has_timeremain();
  inline void set_has_turntableid();
  inline void clear_has_turntableid();
  inline void set_has_bonuspool();
  inline void clear_has_bonuspool();
  inline void set_has_bonuspoolwinlose();
  inline void clear_has_bonuspoolwinlose();
  inline void set_has_rankuserinfocount();
  inline void clear_has_rankuserinfocount();
  inline void set_has_sharkmultex();
  inline void clear_has_sharkmultex();

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > allbetscore_;
  ::google::protobuf::int32 timeremain_;
  ::google::protobuf::int32 turntableid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > mybetscore_;
  ::google::protobuf::int64 bonuspool_;
  ::google::protobuf::int64 bonuspoolwinlose_;
  ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo > rankuserinfo_;
  ::google::protobuf::int32 rankuserinfocount_;
  ::google::protobuf::int32 sharkmultex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > remaincanbetscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_GameSceneResult* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_GameStepBet : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_GameStepBet();
  virtual ~CMD_S2C_GameStepBet();

  CMD_S2C_GameStepBet(const CMD_S2C_GameStepBet& from);

  inline CMD_S2C_GameStepBet& operator=(const CMD_S2C_GameStepBet& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_GameStepBet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_GameStepBet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_GameStepBet* other);

  // implements Message ----------------------------------------------

  CMD_S2C_GameStepBet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_GameStepBet& from);
  void MergeFrom(const CMD_S2C_GameStepBet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 byTimeBet = 1;
  inline bool has_bytimebet() const;
  inline void clear_bytimebet();
  static const int kByTimeBetFieldNumber = 1;
  inline ::google::protobuf::int32 bytimebet() const;
  inline void set_bytimebet(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_GameStepBet)
 private:
  inline void set_has_bytimebet();
  inline void clear_has_bytimebet();

  ::google::protobuf::int32 bytimebet_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_GameStepBet* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_PlayerBet : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_PlayerBet();
  virtual ~CMD_S2C_PlayerBet();

  CMD_S2C_PlayerBet(const CMD_S2C_PlayerBet& from);

  inline CMD_S2C_PlayerBet& operator=(const CMD_S2C_PlayerBet& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_PlayerBet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_PlayerBet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_PlayerBet* other);

  // implements Message ----------------------------------------------

  CMD_S2C_PlayerBet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_PlayerBet& from);
  void MergeFrom(const CMD_S2C_PlayerBet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairId = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIdFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // required int32 byBetAreaID = 2;
  inline bool has_bybetareaid() const;
  inline void clear_bybetareaid();
  static const int kByBetAreaIDFieldNumber = 2;
  inline ::google::protobuf::int32 bybetareaid() const;
  inline void set_bybetareaid(::google::protobuf::int32 value);

  // required int64 betScore = 3;
  inline bool has_betscore() const;
  inline void clear_betscore();
  static const int kBetScoreFieldNumber = 3;
  inline ::google::protobuf::int64 betscore() const;
  inline void set_betscore(::google::protobuf::int64 value);

  // repeated int64 remainCanBetScore = 4;
  inline int remaincanbetscore_size() const;
  inline void clear_remaincanbetscore();
  static const int kRemainCanBetScoreFieldNumber = 4;
  inline ::google::protobuf::int64 remaincanbetscore(int index) const;
  inline void set_remaincanbetscore(int index, ::google::protobuf::int64 value);
  inline void add_remaincanbetscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      remaincanbetscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_remaincanbetscore();

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_PlayerBet)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_bybetareaid();
  inline void clear_has_bybetareaid();
  inline void set_has_betscore();
  inline void clear_has_betscore();

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 bybetareaid_;
  ::google::protobuf::int64 betscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > remaincanbetscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_PlayerBet* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_GameStepResult : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_GameStepResult();
  virtual ~CMD_S2C_GameStepResult();

  CMD_S2C_GameStepResult(const CMD_S2C_GameStepResult& from);

  inline CMD_S2C_GameStepResult& operator=(const CMD_S2C_GameStepResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_GameStepResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_GameStepResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_GameStepResult* other);

  // implements Message ----------------------------------------------

  CMD_S2C_GameStepResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_GameStepResult& from);
  void MergeFrom(const CMD_S2C_GameStepResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 byTimeResult = 1;
  inline bool has_bytimeresult() const;
  inline void clear_bytimeresult();
  static const int kByTimeResultFieldNumber = 1;
  inline ::google::protobuf::int32 bytimeresult() const;
  inline void set_bytimeresult(::google::protobuf::int32 value);

  // required int32 byTurntableId = 2;
  inline bool has_byturntableid() const;
  inline void clear_byturntableid();
  static const int kByTurntableIdFieldNumber = 2;
  inline ::google::protobuf::int32 byturntableid() const;
  inline void set_byturntableid(::google::protobuf::int32 value);

  // required int64 clientWinScore = 3;
  inline bool has_clientwinscore() const;
  inline void clear_clientwinscore();
  static const int kClientWinScoreFieldNumber = 3;
  inline ::google::protobuf::int64 clientwinscore() const;
  inline void set_clientwinscore(::google::protobuf::int64 value);

  // required int64 winLoseScore = 4;
  inline bool has_winlosescore() const;
  inline void clear_winlosescore();
  static const int kWinLoseScoreFieldNumber = 4;
  inline ::google::protobuf::int64 winlosescore() const;
  inline void set_winlosescore(::google::protobuf::int64 value);

  // required int64 playerNewScore = 5;
  inline bool has_playernewscore() const;
  inline void clear_playernewscore();
  static const int kPlayerNewScoreFieldNumber = 5;
  inline ::google::protobuf::int64 playernewscore() const;
  inline void set_playernewscore(::google::protobuf::int64 value);

  // required int64 bonusPoolWinLose = 6;
  inline bool has_bonuspoolwinlose() const;
  inline void clear_bonuspoolwinlose();
  static const int kBonusPoolWinLoseFieldNumber = 6;
  inline ::google::protobuf::int64 bonuspoolwinlose() const;
  inline void set_bonuspoolwinlose(::google::protobuf::int64 value);

  // required int32 byRankUserInfoCount = 7;
  inline bool has_byrankuserinfocount() const;
  inline void clear_byrankuserinfocount();
  static const int kByRankUserInfoCountFieldNumber = 7;
  inline ::google::protobuf::int32 byrankuserinfocount() const;
  inline void set_byrankuserinfocount(::google::protobuf::int32 value);

  // repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
  inline int rankuserinfo_size() const;
  inline void clear_rankuserinfo();
  static const int kRankUserInfoFieldNumber = 8;
  inline const ::game::birdsandbeasts::s2c::tagSRankUserInfo& rankuserinfo(int index) const;
  inline ::game::birdsandbeasts::s2c::tagSRankUserInfo* mutable_rankuserinfo(int index);
  inline ::game::birdsandbeasts::s2c::tagSRankUserInfo* add_rankuserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo >&
      rankuserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo >*
      mutable_rankuserinfo();

  // required int32 sharkMultEx = 9;
  inline bool has_sharkmultex() const;
  inline void clear_sharkmultex();
  static const int kSharkMultExFieldNumber = 9;
  inline ::google::protobuf::int32 sharkmultex() const;
  inline void set_sharkmultex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_GameStepResult)
 private:
  inline void set_has_bytimeresult();
  inline void clear_has_bytimeresult();
  inline void set_has_byturntableid();
  inline void clear_has_byturntableid();
  inline void set_has_clientwinscore();
  inline void clear_has_clientwinscore();
  inline void set_has_winlosescore();
  inline void clear_has_winlosescore();
  inline void set_has_playernewscore();
  inline void clear_has_playernewscore();
  inline void set_has_bonuspoolwinlose();
  inline void clear_has_bonuspoolwinlose();
  inline void set_has_byrankuserinfocount();
  inline void clear_has_byrankuserinfocount();
  inline void set_has_sharkmultex();
  inline void clear_has_sharkmultex();

  ::google::protobuf::int32 bytimeresult_;
  ::google::protobuf::int32 byturntableid_;
  ::google::protobuf::int64 clientwinscore_;
  ::google::protobuf::int64 winlosescore_;
  ::google::protobuf::int64 playernewscore_;
  ::google::protobuf::int64 bonuspoolwinlose_;
  ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo > rankuserinfo_;
  ::google::protobuf::int32 byrankuserinfocount_;
  ::google::protobuf::int32 sharkmultex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_GameStepResult* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_GameStepRest : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_GameStepRest();
  virtual ~CMD_S2C_GameStepRest();

  CMD_S2C_GameStepRest(const CMD_S2C_GameStepRest& from);

  inline CMD_S2C_GameStepRest& operator=(const CMD_S2C_GameStepRest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_GameStepRest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_GameStepRest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_GameStepRest* other);

  // implements Message ----------------------------------------------

  CMD_S2C_GameStepRest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_GameStepRest& from);
  void MergeFrom(const CMD_S2C_GameStepRest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 byTimeRest = 1;
  inline bool has_bytimerest() const;
  inline void clear_bytimerest();
  static const int kByTimeRestFieldNumber = 1;
  inline ::google::protobuf::int32 bytimerest() const;
  inline void set_bytimerest(::google::protobuf::int32 value);

  // required int64 bonusPool = 2;
  inline bool has_bonuspool() const;
  inline void clear_bonuspool();
  static const int kBonusPoolFieldNumber = 2;
  inline ::google::protobuf::int64 bonuspool() const;
  inline void set_bonuspool(::google::protobuf::int64 value);

  // required bool hasRedPacket = 3;
  inline bool has_hasredpacket() const;
  inline void clear_hasredpacket();
  static const int kHasRedPacketFieldNumber = 3;
  inline bool hasredpacket() const;
  inline void set_hasredpacket(bool value);

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_GameStepRest)
 private:
  inline void set_has_bytimerest();
  inline void clear_has_bytimerest();
  inline void set_has_bonuspool();
  inline void clear_has_bonuspool();
  inline void set_has_hasredpacket();
  inline void clear_has_hasredpacket();

  ::google::protobuf::int64 bonuspool_;
  ::google::protobuf::int32 bytimerest_;
  bool hasredpacket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_GameStepRest* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_ResultHistory : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_ResultHistory();
  virtual ~CMD_S2C_ResultHistory();

  CMD_S2C_ResultHistory(const CMD_S2C_ResultHistory& from);

  inline CMD_S2C_ResultHistory& operator=(const CMD_S2C_ResultHistory& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_ResultHistory& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_ResultHistory* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_ResultHistory* other);

  // implements Message ----------------------------------------------

  CMD_S2C_ResultHistory* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_ResultHistory& from);
  void MergeFrom(const CMD_S2C_ResultHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 byHistoryCount = 1;
  inline bool has_byhistorycount() const;
  inline void clear_byhistorycount();
  static const int kByHistoryCountFieldNumber = 1;
  inline ::google::protobuf::int32 byhistorycount() const;
  inline void set_byhistorycount(::google::protobuf::int32 value);

  // repeated int64 byHistoryData = 2;
  inline int byhistorydata_size() const;
  inline void clear_byhistorydata();
  static const int kByHistoryDataFieldNumber = 2;
  inline ::google::protobuf::int64 byhistorydata(int index) const;
  inline void set_byhistorydata(int index, ::google::protobuf::int64 value);
  inline void add_byhistorydata(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      byhistorydata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_byhistorydata();

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_ResultHistory)
 private:
  inline void set_has_byhistorycount();
  inline void clear_has_byhistorycount();

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > byhistorydata_;
  ::google::protobuf::int32 byhistorycount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_ResultHistory* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_ClearBet : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_ClearBet();
  virtual ~CMD_S2C_ClearBet();

  CMD_S2C_ClearBet(const CMD_S2C_ClearBet& from);

  inline CMD_S2C_ClearBet& operator=(const CMD_S2C_ClearBet& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_ClearBet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_ClearBet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_ClearBet* other);

  // implements Message ----------------------------------------------

  CMD_S2C_ClearBet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_ClearBet& from);
  void MergeFrom(const CMD_S2C_ClearBet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairId = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIdFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // repeated int64 betScore = 2;
  inline int betscore_size() const;
  inline void clear_betscore();
  static const int kBetScoreFieldNumber = 2;
  inline ::google::protobuf::int64 betscore(int index) const;
  inline void set_betscore(int index, ::google::protobuf::int64 value);
  inline void add_betscore(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      betscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_betscore();

  // required int64 betTotalScore = 3;
  inline bool has_bettotalscore() const;
  inline void clear_bettotalscore();
  static const int kBetTotalScoreFieldNumber = 3;
  inline ::google::protobuf::int64 bettotalscore() const;
  inline void set_bettotalscore(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_ClearBet)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_bettotalscore();
  inline void clear_has_bettotalscore();

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > betscore_;
  ::google::protobuf::int64 bettotalscore_;
  ::google::protobuf::int32 chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_ClearBet* default_instance_;
};
// -------------------------------------------------------------------

class CMD_S2C_RedPacket : public ::google::protobuf::MessageLite {
 public:
  CMD_S2C_RedPacket();
  virtual ~CMD_S2C_RedPacket();

  CMD_S2C_RedPacket(const CMD_S2C_RedPacket& from);

  inline CMD_S2C_RedPacket& operator=(const CMD_S2C_RedPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_S2C_RedPacket& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_S2C_RedPacket* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_S2C_RedPacket* other);

  // implements Message ----------------------------------------------

  CMD_S2C_RedPacket* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_S2C_RedPacket& from);
  void MergeFrom(const CMD_S2C_RedPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 redPacketScore = 1;
  inline bool has_redpacketscore() const;
  inline void clear_redpacketscore();
  static const int kRedPacketScoreFieldNumber = 1;
  inline ::google::protobuf::int64 redpacketscore() const;
  inline void set_redpacketscore(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game.birdsandbeasts.s2c.CMD_S2C_RedPacket)
 private:
  inline void set_has_redpacketscore();
  inline void clear_has_redpacketscore();

  ::google::protobuf::int64 redpacketscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  #endif
  friend void protobuf_AssignDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  friend void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();

  void InitAsDefaultInstance();
  static CMD_S2C_RedPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// tagSRankUserInfo

// required int32 chairId = 1;
inline bool tagSRankUserInfo::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagSRankUserInfo::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagSRankUserInfo::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagSRankUserInfo::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 tagSRankUserInfo::chairid() const {
  return chairid_;
}
inline void tagSRankUserInfo::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// required int64 winLose = 2;
inline bool tagSRankUserInfo::has_winlose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagSRankUserInfo::set_has_winlose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagSRankUserInfo::clear_has_winlose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagSRankUserInfo::clear_winlose() {
  winlose_ = GOOGLE_LONGLONG(0);
  clear_has_winlose();
}
inline ::google::protobuf::int64 tagSRankUserInfo::winlose() const {
  return winlose_;
}
inline void tagSRankUserInfo::set_winlose(::google::protobuf::int64 value) {
  set_has_winlose();
  winlose_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_GameSceneRest

// required int32 timeRemain = 1;
inline bool CMD_S2C_GameSceneRest::has_timeremain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_GameSceneRest::set_has_timeremain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_GameSceneRest::clear_has_timeremain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_GameSceneRest::clear_timeremain() {
  timeremain_ = 0;
  clear_has_timeremain();
}
inline ::google::protobuf::int32 CMD_S2C_GameSceneRest::timeremain() const {
  return timeremain_;
}
inline void CMD_S2C_GameSceneRest::set_timeremain(::google::protobuf::int32 value) {
  set_has_timeremain();
  timeremain_ = value;
}

// required int64 bonusPool = 2;
inline bool CMD_S2C_GameSceneRest::has_bonuspool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_GameSceneRest::set_has_bonuspool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_GameSceneRest::clear_has_bonuspool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_GameSceneRest::clear_bonuspool() {
  bonuspool_ = GOOGLE_LONGLONG(0);
  clear_has_bonuspool();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneRest::bonuspool() const {
  return bonuspool_;
}
inline void CMD_S2C_GameSceneRest::set_bonuspool(::google::protobuf::int64 value) {
  set_has_bonuspool();
  bonuspool_ = value;
}

// repeated int64 remainCanBetScore = 3;
inline int CMD_S2C_GameSceneRest::remaincanbetscore_size() const {
  return remaincanbetscore_.size();
}
inline void CMD_S2C_GameSceneRest::clear_remaincanbetscore() {
  remaincanbetscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneRest::remaincanbetscore(int index) const {
  return remaincanbetscore_.Get(index);
}
inline void CMD_S2C_GameSceneRest::set_remaincanbetscore(int index, ::google::protobuf::int64 value) {
  remaincanbetscore_.Set(index, value);
}
inline void CMD_S2C_GameSceneRest::add_remaincanbetscore(::google::protobuf::int64 value) {
  remaincanbetscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_GameSceneRest::remaincanbetscore() const {
  return remaincanbetscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_GameSceneRest::mutable_remaincanbetscore() {
  return &remaincanbetscore_;
}

// -------------------------------------------------------------------

// CMD_S2C_GameSceneBet

// required int32 timeRemain = 1;
inline bool CMD_S2C_GameSceneBet::has_timeremain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_GameSceneBet::set_has_timeremain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_GameSceneBet::clear_has_timeremain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_GameSceneBet::clear_timeremain() {
  timeremain_ = 0;
  clear_has_timeremain();
}
inline ::google::protobuf::int32 CMD_S2C_GameSceneBet::timeremain() const {
  return timeremain_;
}
inline void CMD_S2C_GameSceneBet::set_timeremain(::google::protobuf::int32 value) {
  set_has_timeremain();
  timeremain_ = value;
}

// repeated int64 allBetScore = 2;
inline int CMD_S2C_GameSceneBet::allbetscore_size() const {
  return allbetscore_.size();
}
inline void CMD_S2C_GameSceneBet::clear_allbetscore() {
  allbetscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneBet::allbetscore(int index) const {
  return allbetscore_.Get(index);
}
inline void CMD_S2C_GameSceneBet::set_allbetscore(int index, ::google::protobuf::int64 value) {
  allbetscore_.Set(index, value);
}
inline void CMD_S2C_GameSceneBet::add_allbetscore(::google::protobuf::int64 value) {
  allbetscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_GameSceneBet::allbetscore() const {
  return allbetscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_GameSceneBet::mutable_allbetscore() {
  return &allbetscore_;
}

// repeated int64 myBetScore = 3;
inline int CMD_S2C_GameSceneBet::mybetscore_size() const {
  return mybetscore_.size();
}
inline void CMD_S2C_GameSceneBet::clear_mybetscore() {
  mybetscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneBet::mybetscore(int index) const {
  return mybetscore_.Get(index);
}
inline void CMD_S2C_GameSceneBet::set_mybetscore(int index, ::google::protobuf::int64 value) {
  mybetscore_.Set(index, value);
}
inline void CMD_S2C_GameSceneBet::add_mybetscore(::google::protobuf::int64 value) {
  mybetscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_GameSceneBet::mybetscore() const {
  return mybetscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_GameSceneBet::mutable_mybetscore() {
  return &mybetscore_;
}

// required int64 bonusPool = 4;
inline bool CMD_S2C_GameSceneBet::has_bonuspool() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_GameSceneBet::set_has_bonuspool() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_GameSceneBet::clear_has_bonuspool() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_GameSceneBet::clear_bonuspool() {
  bonuspool_ = GOOGLE_LONGLONG(0);
  clear_has_bonuspool();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneBet::bonuspool() const {
  return bonuspool_;
}
inline void CMD_S2C_GameSceneBet::set_bonuspool(::google::protobuf::int64 value) {
  set_has_bonuspool();
  bonuspool_ = value;
}

// repeated int64 remainCanBetScore = 5;
inline int CMD_S2C_GameSceneBet::remaincanbetscore_size() const {
  return remaincanbetscore_.size();
}
inline void CMD_S2C_GameSceneBet::clear_remaincanbetscore() {
  remaincanbetscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneBet::remaincanbetscore(int index) const {
  return remaincanbetscore_.Get(index);
}
inline void CMD_S2C_GameSceneBet::set_remaincanbetscore(int index, ::google::protobuf::int64 value) {
  remaincanbetscore_.Set(index, value);
}
inline void CMD_S2C_GameSceneBet::add_remaincanbetscore(::google::protobuf::int64 value) {
  remaincanbetscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_GameSceneBet::remaincanbetscore() const {
  return remaincanbetscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_GameSceneBet::mutable_remaincanbetscore() {
  return &remaincanbetscore_;
}

// -------------------------------------------------------------------

// CMD_S2C_GameSceneResult

// required int32 timeRemain = 1;
inline bool CMD_S2C_GameSceneResult::has_timeremain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_GameSceneResult::set_has_timeremain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_GameSceneResult::clear_has_timeremain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_GameSceneResult::clear_timeremain() {
  timeremain_ = 0;
  clear_has_timeremain();
}
inline ::google::protobuf::int32 CMD_S2C_GameSceneResult::timeremain() const {
  return timeremain_;
}
inline void CMD_S2C_GameSceneResult::set_timeremain(::google::protobuf::int32 value) {
  set_has_timeremain();
  timeremain_ = value;
}

// repeated int64 allBetScore = 2;
inline int CMD_S2C_GameSceneResult::allbetscore_size() const {
  return allbetscore_.size();
}
inline void CMD_S2C_GameSceneResult::clear_allbetscore() {
  allbetscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneResult::allbetscore(int index) const {
  return allbetscore_.Get(index);
}
inline void CMD_S2C_GameSceneResult::set_allbetscore(int index, ::google::protobuf::int64 value) {
  allbetscore_.Set(index, value);
}
inline void CMD_S2C_GameSceneResult::add_allbetscore(::google::protobuf::int64 value) {
  allbetscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_GameSceneResult::allbetscore() const {
  return allbetscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_GameSceneResult::mutable_allbetscore() {
  return &allbetscore_;
}

// repeated int64 myBetScore = 3;
inline int CMD_S2C_GameSceneResult::mybetscore_size() const {
  return mybetscore_.size();
}
inline void CMD_S2C_GameSceneResult::clear_mybetscore() {
  mybetscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneResult::mybetscore(int index) const {
  return mybetscore_.Get(index);
}
inline void CMD_S2C_GameSceneResult::set_mybetscore(int index, ::google::protobuf::int64 value) {
  mybetscore_.Set(index, value);
}
inline void CMD_S2C_GameSceneResult::add_mybetscore(::google::protobuf::int64 value) {
  mybetscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_GameSceneResult::mybetscore() const {
  return mybetscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_GameSceneResult::mutable_mybetscore() {
  return &mybetscore_;
}

// required int32 turntableId = 4;
inline bool CMD_S2C_GameSceneResult::has_turntableid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_GameSceneResult::set_has_turntableid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_GameSceneResult::clear_has_turntableid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_GameSceneResult::clear_turntableid() {
  turntableid_ = 0;
  clear_has_turntableid();
}
inline ::google::protobuf::int32 CMD_S2C_GameSceneResult::turntableid() const {
  return turntableid_;
}
inline void CMD_S2C_GameSceneResult::set_turntableid(::google::protobuf::int32 value) {
  set_has_turntableid();
  turntableid_ = value;
}

// required int64 bonusPool = 5;
inline bool CMD_S2C_GameSceneResult::has_bonuspool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_S2C_GameSceneResult::set_has_bonuspool() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_S2C_GameSceneResult::clear_has_bonuspool() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_S2C_GameSceneResult::clear_bonuspool() {
  bonuspool_ = GOOGLE_LONGLONG(0);
  clear_has_bonuspool();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneResult::bonuspool() const {
  return bonuspool_;
}
inline void CMD_S2C_GameSceneResult::set_bonuspool(::google::protobuf::int64 value) {
  set_has_bonuspool();
  bonuspool_ = value;
}

// required int64 bonusPoolWinLose = 6;
inline bool CMD_S2C_GameSceneResult::has_bonuspoolwinlose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_S2C_GameSceneResult::set_has_bonuspoolwinlose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_S2C_GameSceneResult::clear_has_bonuspoolwinlose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_S2C_GameSceneResult::clear_bonuspoolwinlose() {
  bonuspoolwinlose_ = GOOGLE_LONGLONG(0);
  clear_has_bonuspoolwinlose();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneResult::bonuspoolwinlose() const {
  return bonuspoolwinlose_;
}
inline void CMD_S2C_GameSceneResult::set_bonuspoolwinlose(::google::protobuf::int64 value) {
  set_has_bonuspoolwinlose();
  bonuspoolwinlose_ = value;
}

// required int32 rankUserInfoCount = 7;
inline bool CMD_S2C_GameSceneResult::has_rankuserinfocount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_S2C_GameSceneResult::set_has_rankuserinfocount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_S2C_GameSceneResult::clear_has_rankuserinfocount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_S2C_GameSceneResult::clear_rankuserinfocount() {
  rankuserinfocount_ = 0;
  clear_has_rankuserinfocount();
}
inline ::google::protobuf::int32 CMD_S2C_GameSceneResult::rankuserinfocount() const {
  return rankuserinfocount_;
}
inline void CMD_S2C_GameSceneResult::set_rankuserinfocount(::google::protobuf::int32 value) {
  set_has_rankuserinfocount();
  rankuserinfocount_ = value;
}

// repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
inline int CMD_S2C_GameSceneResult::rankuserinfo_size() const {
  return rankuserinfo_.size();
}
inline void CMD_S2C_GameSceneResult::clear_rankuserinfo() {
  rankuserinfo_.Clear();
}
inline const ::game::birdsandbeasts::s2c::tagSRankUserInfo& CMD_S2C_GameSceneResult::rankuserinfo(int index) const {
  return rankuserinfo_.Get(index);
}
inline ::game::birdsandbeasts::s2c::tagSRankUserInfo* CMD_S2C_GameSceneResult::mutable_rankuserinfo(int index) {
  return rankuserinfo_.Mutable(index);
}
inline ::game::birdsandbeasts::s2c::tagSRankUserInfo* CMD_S2C_GameSceneResult::add_rankuserinfo() {
  return rankuserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo >&
CMD_S2C_GameSceneResult::rankuserinfo() const {
  return rankuserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo >*
CMD_S2C_GameSceneResult::mutable_rankuserinfo() {
  return &rankuserinfo_;
}

// repeated int64 remainCanBetScore = 9;
inline int CMD_S2C_GameSceneResult::remaincanbetscore_size() const {
  return remaincanbetscore_.size();
}
inline void CMD_S2C_GameSceneResult::clear_remaincanbetscore() {
  remaincanbetscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_GameSceneResult::remaincanbetscore(int index) const {
  return remaincanbetscore_.Get(index);
}
inline void CMD_S2C_GameSceneResult::set_remaincanbetscore(int index, ::google::protobuf::int64 value) {
  remaincanbetscore_.Set(index, value);
}
inline void CMD_S2C_GameSceneResult::add_remaincanbetscore(::google::protobuf::int64 value) {
  remaincanbetscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_GameSceneResult::remaincanbetscore() const {
  return remaincanbetscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_GameSceneResult::mutable_remaincanbetscore() {
  return &remaincanbetscore_;
}

// required int32 sharkMultEx = 10;
inline bool CMD_S2C_GameSceneResult::has_sharkmultex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMD_S2C_GameSceneResult::set_has_sharkmultex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMD_S2C_GameSceneResult::clear_has_sharkmultex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMD_S2C_GameSceneResult::clear_sharkmultex() {
  sharkmultex_ = 0;
  clear_has_sharkmultex();
}
inline ::google::protobuf::int32 CMD_S2C_GameSceneResult::sharkmultex() const {
  return sharkmultex_;
}
inline void CMD_S2C_GameSceneResult::set_sharkmultex(::google::protobuf::int32 value) {
  set_has_sharkmultex();
  sharkmultex_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_GameStepBet

// required int32 byTimeBet = 1;
inline bool CMD_S2C_GameStepBet::has_bytimebet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_GameStepBet::set_has_bytimebet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_GameStepBet::clear_has_bytimebet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_GameStepBet::clear_bytimebet() {
  bytimebet_ = 0;
  clear_has_bytimebet();
}
inline ::google::protobuf::int32 CMD_S2C_GameStepBet::bytimebet() const {
  return bytimebet_;
}
inline void CMD_S2C_GameStepBet::set_bytimebet(::google::protobuf::int32 value) {
  set_has_bytimebet();
  bytimebet_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_PlayerBet

// required int32 chairId = 1;
inline bool CMD_S2C_PlayerBet::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_PlayerBet::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_PlayerBet::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_PlayerBet::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 CMD_S2C_PlayerBet::chairid() const {
  return chairid_;
}
inline void CMD_S2C_PlayerBet::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// required int32 byBetAreaID = 2;
inline bool CMD_S2C_PlayerBet::has_bybetareaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_PlayerBet::set_has_bybetareaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_PlayerBet::clear_has_bybetareaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_PlayerBet::clear_bybetareaid() {
  bybetareaid_ = 0;
  clear_has_bybetareaid();
}
inline ::google::protobuf::int32 CMD_S2C_PlayerBet::bybetareaid() const {
  return bybetareaid_;
}
inline void CMD_S2C_PlayerBet::set_bybetareaid(::google::protobuf::int32 value) {
  set_has_bybetareaid();
  bybetareaid_ = value;
}

// required int64 betScore = 3;
inline bool CMD_S2C_PlayerBet::has_betscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_PlayerBet::set_has_betscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_PlayerBet::clear_has_betscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_PlayerBet::clear_betscore() {
  betscore_ = GOOGLE_LONGLONG(0);
  clear_has_betscore();
}
inline ::google::protobuf::int64 CMD_S2C_PlayerBet::betscore() const {
  return betscore_;
}
inline void CMD_S2C_PlayerBet::set_betscore(::google::protobuf::int64 value) {
  set_has_betscore();
  betscore_ = value;
}

// repeated int64 remainCanBetScore = 4;
inline int CMD_S2C_PlayerBet::remaincanbetscore_size() const {
  return remaincanbetscore_.size();
}
inline void CMD_S2C_PlayerBet::clear_remaincanbetscore() {
  remaincanbetscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_PlayerBet::remaincanbetscore(int index) const {
  return remaincanbetscore_.Get(index);
}
inline void CMD_S2C_PlayerBet::set_remaincanbetscore(int index, ::google::protobuf::int64 value) {
  remaincanbetscore_.Set(index, value);
}
inline void CMD_S2C_PlayerBet::add_remaincanbetscore(::google::protobuf::int64 value) {
  remaincanbetscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_PlayerBet::remaincanbetscore() const {
  return remaincanbetscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_PlayerBet::mutable_remaincanbetscore() {
  return &remaincanbetscore_;
}

// -------------------------------------------------------------------

// CMD_S2C_GameStepResult

// required int32 byTimeResult = 1;
inline bool CMD_S2C_GameStepResult::has_bytimeresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_GameStepResult::set_has_bytimeresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_GameStepResult::clear_has_bytimeresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_GameStepResult::clear_bytimeresult() {
  bytimeresult_ = 0;
  clear_has_bytimeresult();
}
inline ::google::protobuf::int32 CMD_S2C_GameStepResult::bytimeresult() const {
  return bytimeresult_;
}
inline void CMD_S2C_GameStepResult::set_bytimeresult(::google::protobuf::int32 value) {
  set_has_bytimeresult();
  bytimeresult_ = value;
}

// required int32 byTurntableId = 2;
inline bool CMD_S2C_GameStepResult::has_byturntableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_GameStepResult::set_has_byturntableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_GameStepResult::clear_has_byturntableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_GameStepResult::clear_byturntableid() {
  byturntableid_ = 0;
  clear_has_byturntableid();
}
inline ::google::protobuf::int32 CMD_S2C_GameStepResult::byturntableid() const {
  return byturntableid_;
}
inline void CMD_S2C_GameStepResult::set_byturntableid(::google::protobuf::int32 value) {
  set_has_byturntableid();
  byturntableid_ = value;
}

// required int64 clientWinScore = 3;
inline bool CMD_S2C_GameStepResult::has_clientwinscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_GameStepResult::set_has_clientwinscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_GameStepResult::clear_has_clientwinscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_GameStepResult::clear_clientwinscore() {
  clientwinscore_ = GOOGLE_LONGLONG(0);
  clear_has_clientwinscore();
}
inline ::google::protobuf::int64 CMD_S2C_GameStepResult::clientwinscore() const {
  return clientwinscore_;
}
inline void CMD_S2C_GameStepResult::set_clientwinscore(::google::protobuf::int64 value) {
  set_has_clientwinscore();
  clientwinscore_ = value;
}

// required int64 winLoseScore = 4;
inline bool CMD_S2C_GameStepResult::has_winlosescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_S2C_GameStepResult::set_has_winlosescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_S2C_GameStepResult::clear_has_winlosescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_S2C_GameStepResult::clear_winlosescore() {
  winlosescore_ = GOOGLE_LONGLONG(0);
  clear_has_winlosescore();
}
inline ::google::protobuf::int64 CMD_S2C_GameStepResult::winlosescore() const {
  return winlosescore_;
}
inline void CMD_S2C_GameStepResult::set_winlosescore(::google::protobuf::int64 value) {
  set_has_winlosescore();
  winlosescore_ = value;
}

// required int64 playerNewScore = 5;
inline bool CMD_S2C_GameStepResult::has_playernewscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_S2C_GameStepResult::set_has_playernewscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_S2C_GameStepResult::clear_has_playernewscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_S2C_GameStepResult::clear_playernewscore() {
  playernewscore_ = GOOGLE_LONGLONG(0);
  clear_has_playernewscore();
}
inline ::google::protobuf::int64 CMD_S2C_GameStepResult::playernewscore() const {
  return playernewscore_;
}
inline void CMD_S2C_GameStepResult::set_playernewscore(::google::protobuf::int64 value) {
  set_has_playernewscore();
  playernewscore_ = value;
}

// required int64 bonusPoolWinLose = 6;
inline bool CMD_S2C_GameStepResult::has_bonuspoolwinlose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_S2C_GameStepResult::set_has_bonuspoolwinlose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_S2C_GameStepResult::clear_has_bonuspoolwinlose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_S2C_GameStepResult::clear_bonuspoolwinlose() {
  bonuspoolwinlose_ = GOOGLE_LONGLONG(0);
  clear_has_bonuspoolwinlose();
}
inline ::google::protobuf::int64 CMD_S2C_GameStepResult::bonuspoolwinlose() const {
  return bonuspoolwinlose_;
}
inline void CMD_S2C_GameStepResult::set_bonuspoolwinlose(::google::protobuf::int64 value) {
  set_has_bonuspoolwinlose();
  bonuspoolwinlose_ = value;
}

// required int32 byRankUserInfoCount = 7;
inline bool CMD_S2C_GameStepResult::has_byrankuserinfocount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_S2C_GameStepResult::set_has_byrankuserinfocount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_S2C_GameStepResult::clear_has_byrankuserinfocount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_S2C_GameStepResult::clear_byrankuserinfocount() {
  byrankuserinfocount_ = 0;
  clear_has_byrankuserinfocount();
}
inline ::google::protobuf::int32 CMD_S2C_GameStepResult::byrankuserinfocount() const {
  return byrankuserinfocount_;
}
inline void CMD_S2C_GameStepResult::set_byrankuserinfocount(::google::protobuf::int32 value) {
  set_has_byrankuserinfocount();
  byrankuserinfocount_ = value;
}

// repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
inline int CMD_S2C_GameStepResult::rankuserinfo_size() const {
  return rankuserinfo_.size();
}
inline void CMD_S2C_GameStepResult::clear_rankuserinfo() {
  rankuserinfo_.Clear();
}
inline const ::game::birdsandbeasts::s2c::tagSRankUserInfo& CMD_S2C_GameStepResult::rankuserinfo(int index) const {
  return rankuserinfo_.Get(index);
}
inline ::game::birdsandbeasts::s2c::tagSRankUserInfo* CMD_S2C_GameStepResult::mutable_rankuserinfo(int index) {
  return rankuserinfo_.Mutable(index);
}
inline ::game::birdsandbeasts::s2c::tagSRankUserInfo* CMD_S2C_GameStepResult::add_rankuserinfo() {
  return rankuserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo >&
CMD_S2C_GameStepResult::rankuserinfo() const {
  return rankuserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::game::birdsandbeasts::s2c::tagSRankUserInfo >*
CMD_S2C_GameStepResult::mutable_rankuserinfo() {
  return &rankuserinfo_;
}

// required int32 sharkMultEx = 9;
inline bool CMD_S2C_GameStepResult::has_sharkmultex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMD_S2C_GameStepResult::set_has_sharkmultex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMD_S2C_GameStepResult::clear_has_sharkmultex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMD_S2C_GameStepResult::clear_sharkmultex() {
  sharkmultex_ = 0;
  clear_has_sharkmultex();
}
inline ::google::protobuf::int32 CMD_S2C_GameStepResult::sharkmultex() const {
  return sharkmultex_;
}
inline void CMD_S2C_GameStepResult::set_sharkmultex(::google::protobuf::int32 value) {
  set_has_sharkmultex();
  sharkmultex_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_GameStepRest

// required int32 byTimeRest = 1;
inline bool CMD_S2C_GameStepRest::has_bytimerest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_GameStepRest::set_has_bytimerest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_GameStepRest::clear_has_bytimerest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_GameStepRest::clear_bytimerest() {
  bytimerest_ = 0;
  clear_has_bytimerest();
}
inline ::google::protobuf::int32 CMD_S2C_GameStepRest::bytimerest() const {
  return bytimerest_;
}
inline void CMD_S2C_GameStepRest::set_bytimerest(::google::protobuf::int32 value) {
  set_has_bytimerest();
  bytimerest_ = value;
}

// required int64 bonusPool = 2;
inline bool CMD_S2C_GameStepRest::has_bonuspool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_S2C_GameStepRest::set_has_bonuspool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_S2C_GameStepRest::clear_has_bonuspool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_S2C_GameStepRest::clear_bonuspool() {
  bonuspool_ = GOOGLE_LONGLONG(0);
  clear_has_bonuspool();
}
inline ::google::protobuf::int64 CMD_S2C_GameStepRest::bonuspool() const {
  return bonuspool_;
}
inline void CMD_S2C_GameStepRest::set_bonuspool(::google::protobuf::int64 value) {
  set_has_bonuspool();
  bonuspool_ = value;
}

// required bool hasRedPacket = 3;
inline bool CMD_S2C_GameStepRest::has_hasredpacket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_GameStepRest::set_has_hasredpacket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_GameStepRest::clear_has_hasredpacket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_GameStepRest::clear_hasredpacket() {
  hasredpacket_ = false;
  clear_has_hasredpacket();
}
inline bool CMD_S2C_GameStepRest::hasredpacket() const {
  return hasredpacket_;
}
inline void CMD_S2C_GameStepRest::set_hasredpacket(bool value) {
  set_has_hasredpacket();
  hasredpacket_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_ResultHistory

// required int32 byHistoryCount = 1;
inline bool CMD_S2C_ResultHistory::has_byhistorycount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_ResultHistory::set_has_byhistorycount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_ResultHistory::clear_has_byhistorycount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_ResultHistory::clear_byhistorycount() {
  byhistorycount_ = 0;
  clear_has_byhistorycount();
}
inline ::google::protobuf::int32 CMD_S2C_ResultHistory::byhistorycount() const {
  return byhistorycount_;
}
inline void CMD_S2C_ResultHistory::set_byhistorycount(::google::protobuf::int32 value) {
  set_has_byhistorycount();
  byhistorycount_ = value;
}

// repeated int64 byHistoryData = 2;
inline int CMD_S2C_ResultHistory::byhistorydata_size() const {
  return byhistorydata_.size();
}
inline void CMD_S2C_ResultHistory::clear_byhistorydata() {
  byhistorydata_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_ResultHistory::byhistorydata(int index) const {
  return byhistorydata_.Get(index);
}
inline void CMD_S2C_ResultHistory::set_byhistorydata(int index, ::google::protobuf::int64 value) {
  byhistorydata_.Set(index, value);
}
inline void CMD_S2C_ResultHistory::add_byhistorydata(::google::protobuf::int64 value) {
  byhistorydata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_ResultHistory::byhistorydata() const {
  return byhistorydata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_ResultHistory::mutable_byhistorydata() {
  return &byhistorydata_;
}

// -------------------------------------------------------------------

// CMD_S2C_ClearBet

// required int32 chairId = 1;
inline bool CMD_S2C_ClearBet::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_ClearBet::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_ClearBet::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_ClearBet::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 CMD_S2C_ClearBet::chairid() const {
  return chairid_;
}
inline void CMD_S2C_ClearBet::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// repeated int64 betScore = 2;
inline int CMD_S2C_ClearBet::betscore_size() const {
  return betscore_.size();
}
inline void CMD_S2C_ClearBet::clear_betscore() {
  betscore_.Clear();
}
inline ::google::protobuf::int64 CMD_S2C_ClearBet::betscore(int index) const {
  return betscore_.Get(index);
}
inline void CMD_S2C_ClearBet::set_betscore(int index, ::google::protobuf::int64 value) {
  betscore_.Set(index, value);
}
inline void CMD_S2C_ClearBet::add_betscore(::google::protobuf::int64 value) {
  betscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CMD_S2C_ClearBet::betscore() const {
  return betscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CMD_S2C_ClearBet::mutable_betscore() {
  return &betscore_;
}

// required int64 betTotalScore = 3;
inline bool CMD_S2C_ClearBet::has_bettotalscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_S2C_ClearBet::set_has_bettotalscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_S2C_ClearBet::clear_has_bettotalscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_S2C_ClearBet::clear_bettotalscore() {
  bettotalscore_ = GOOGLE_LONGLONG(0);
  clear_has_bettotalscore();
}
inline ::google::protobuf::int64 CMD_S2C_ClearBet::bettotalscore() const {
  return bettotalscore_;
}
inline void CMD_S2C_ClearBet::set_bettotalscore(::google::protobuf::int64 value) {
  set_has_bettotalscore();
  bettotalscore_ = value;
}

// -------------------------------------------------------------------

// CMD_S2C_RedPacket

// required int64 redPacketScore = 1;
inline bool CMD_S2C_RedPacket::has_redpacketscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_S2C_RedPacket::set_has_redpacketscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_S2C_RedPacket::clear_has_redpacketscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_S2C_RedPacket::clear_redpacketscore() {
  redpacketscore_ = GOOGLE_LONGLONG(0);
  clear_has_redpacketscore();
}
inline ::google::protobuf::int64 CMD_S2C_RedPacket::redpacketscore() const {
  return redpacketscore_;
}
inline void CMD_S2C_RedPacket::set_redpacketscore(::google::protobuf::int64 value) {
  set_has_redpacketscore();
  redpacketscore_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2c
}  // namespace birdsandbeasts
}  // namespace game

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto__INCLUDED

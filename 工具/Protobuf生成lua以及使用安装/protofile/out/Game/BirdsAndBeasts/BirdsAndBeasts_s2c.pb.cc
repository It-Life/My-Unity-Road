// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game/BirdsAndBeasts/BirdsAndBeasts_s2c.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Game/BirdsAndBeasts/BirdsAndBeasts_s2c.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace game {
namespace birdsandbeasts {
namespace s2c {

void protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto() {
  delete tagSRankUserInfo::default_instance_;
  delete CMD_S2C_GameSceneRest::default_instance_;
  delete CMD_S2C_GameSceneBet::default_instance_;
  delete CMD_S2C_GameSceneResult::default_instance_;
  delete CMD_S2C_GameStepBet::default_instance_;
  delete CMD_S2C_PlayerBet::default_instance_;
  delete CMD_S2C_GameStepResult::default_instance_;
  delete CMD_S2C_GameStepRest::default_instance_;
  delete CMD_S2C_ResultHistory::default_instance_;
  delete CMD_S2C_ClearBet::default_instance_;
  delete CMD_S2C_RedPacket::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  tagSRankUserInfo::default_instance_ = new tagSRankUserInfo();
  CMD_S2C_GameSceneRest::default_instance_ = new CMD_S2C_GameSceneRest();
  CMD_S2C_GameSceneBet::default_instance_ = new CMD_S2C_GameSceneBet();
  CMD_S2C_GameSceneResult::default_instance_ = new CMD_S2C_GameSceneResult();
  CMD_S2C_GameStepBet::default_instance_ = new CMD_S2C_GameStepBet();
  CMD_S2C_PlayerBet::default_instance_ = new CMD_S2C_PlayerBet();
  CMD_S2C_GameStepResult::default_instance_ = new CMD_S2C_GameStepResult();
  CMD_S2C_GameStepRest::default_instance_ = new CMD_S2C_GameStepRest();
  CMD_S2C_ResultHistory::default_instance_ = new CMD_S2C_ResultHistory();
  CMD_S2C_ClearBet::default_instance_ = new CMD_S2C_ClearBet();
  CMD_S2C_RedPacket::default_instance_ = new CMD_S2C_RedPacket();
  tagSRankUserInfo::default_instance_->InitAsDefaultInstance();
  CMD_S2C_GameSceneRest::default_instance_->InitAsDefaultInstance();
  CMD_S2C_GameSceneBet::default_instance_->InitAsDefaultInstance();
  CMD_S2C_GameSceneResult::default_instance_->InitAsDefaultInstance();
  CMD_S2C_GameStepBet::default_instance_->InitAsDefaultInstance();
  CMD_S2C_PlayerBet::default_instance_->InitAsDefaultInstance();
  CMD_S2C_GameStepResult::default_instance_->InitAsDefaultInstance();
  CMD_S2C_GameStepRest::default_instance_->InitAsDefaultInstance();
  CMD_S2C_ResultHistory::default_instance_->InitAsDefaultInstance();
  CMD_S2C_ClearBet::default_instance_->InitAsDefaultInstance();
  CMD_S2C_RedPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_once_);
void protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_once_,
                 &protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto {
  StaticDescriptorInitializer_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto() {
    protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
  }
} static_descriptor_initializer_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int tagSRankUserInfo::kChairIdFieldNumber;
const int tagSRankUserInfo::kWinLoseFieldNumber;
#endif  // !_MSC_VER

tagSRankUserInfo::tagSRankUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagSRankUserInfo::InitAsDefaultInstance() {
}

tagSRankUserInfo::tagSRankUserInfo(const tagSRankUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagSRankUserInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  winlose_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagSRankUserInfo::~tagSRankUserInfo() {
  SharedDtor();
}

void tagSRankUserInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void tagSRankUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagSRankUserInfo& tagSRankUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagSRankUserInfo* tagSRankUserInfo::default_instance_ = NULL;

tagSRankUserInfo* tagSRankUserInfo::New() const {
  return new tagSRankUserInfo;
}

void tagSRankUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    winlose_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagSRankUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winLose;
        break;
      }

      // required int64 winLose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winlose_)));
          set_has_winlose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagSRankUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairId = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // required int64 winLose = 2;
  if (has_winlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->winlose(), output);
  }

}

int tagSRankUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairId = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int64 winLose = 2;
    if (has_winlose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winlose());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagSRankUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagSRankUserInfo*>(&from));
}

void tagSRankUserInfo::MergeFrom(const tagSRankUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_winlose()) {
      set_winlose(from.winlose());
    }
  }
}

void tagSRankUserInfo::CopyFrom(const tagSRankUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagSRankUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tagSRankUserInfo::Swap(tagSRankUserInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(winlose_, other->winlose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagSRankUserInfo::GetTypeName() const {
  return "game.birdsandbeasts.s2c.tagSRankUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_GameSceneRest::kTimeRemainFieldNumber;
const int CMD_S2C_GameSceneRest::kBonusPoolFieldNumber;
const int CMD_S2C_GameSceneRest::kRemainCanBetScoreFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_GameSceneRest::CMD_S2C_GameSceneRest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_GameSceneRest::InitAsDefaultInstance() {
}

CMD_S2C_GameSceneRest::CMD_S2C_GameSceneRest(const CMD_S2C_GameSceneRest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_GameSceneRest::SharedCtor() {
  _cached_size_ = 0;
  timeremain_ = 0;
  bonuspool_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_GameSceneRest::~CMD_S2C_GameSceneRest() {
  SharedDtor();
}

void CMD_S2C_GameSceneRest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_GameSceneRest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_GameSceneRest& CMD_S2C_GameSceneRest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_GameSceneRest* CMD_S2C_GameSceneRest::default_instance_ = NULL;

CMD_S2C_GameSceneRest* CMD_S2C_GameSceneRest::New() const {
  return new CMD_S2C_GameSceneRest;
}

void CMD_S2C_GameSceneRest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeremain_ = 0;
    bonuspool_ = GOOGLE_LONGLONG(0);
  }
  remaincanbetscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_GameSceneRest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timeRemain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeremain_)));
          set_has_timeremain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bonusPool;
        break;
      }

      // required int64 bonusPool = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bonuspool_)));
          set_has_bonuspool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainCanBetScore;
        break;
      }

      // repeated int64 remainCanBetScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainCanBetScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_remaincanbetscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_remaincanbetscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainCanBetScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_GameSceneRest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timeRemain = 1;
  if (has_timeremain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeremain(), output);
  }

  // required int64 bonusPool = 2;
  if (has_bonuspool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bonuspool(), output);
  }

  // repeated int64 remainCanBetScore = 3;
  for (int i = 0; i < this->remaincanbetscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->remaincanbetscore(i), output);
  }

}

int CMD_S2C_GameSceneRest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timeRemain = 1;
    if (has_timeremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeremain());
    }

    // required int64 bonusPool = 2;
    if (has_bonuspool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bonuspool());
    }

  }
  // repeated int64 remainCanBetScore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->remaincanbetscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->remaincanbetscore(i));
    }
    total_size += 1 * this->remaincanbetscore_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_GameSceneRest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_GameSceneRest*>(&from));
}

void CMD_S2C_GameSceneRest::MergeFrom(const CMD_S2C_GameSceneRest& from) {
  GOOGLE_CHECK_NE(&from, this);
  remaincanbetscore_.MergeFrom(from.remaincanbetscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeremain()) {
      set_timeremain(from.timeremain());
    }
    if (from.has_bonuspool()) {
      set_bonuspool(from.bonuspool());
    }
  }
}

void CMD_S2C_GameSceneRest::CopyFrom(const CMD_S2C_GameSceneRest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_GameSceneRest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_S2C_GameSceneRest::Swap(CMD_S2C_GameSceneRest* other) {
  if (other != this) {
    std::swap(timeremain_, other->timeremain_);
    std::swap(bonuspool_, other->bonuspool_);
    remaincanbetscore_.Swap(&other->remaincanbetscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_GameSceneRest::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_GameSceneRest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_GameSceneBet::kTimeRemainFieldNumber;
const int CMD_S2C_GameSceneBet::kAllBetScoreFieldNumber;
const int CMD_S2C_GameSceneBet::kMyBetScoreFieldNumber;
const int CMD_S2C_GameSceneBet::kBonusPoolFieldNumber;
const int CMD_S2C_GameSceneBet::kRemainCanBetScoreFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_GameSceneBet::CMD_S2C_GameSceneBet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_GameSceneBet::InitAsDefaultInstance() {
}

CMD_S2C_GameSceneBet::CMD_S2C_GameSceneBet(const CMD_S2C_GameSceneBet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_GameSceneBet::SharedCtor() {
  _cached_size_ = 0;
  timeremain_ = 0;
  bonuspool_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_GameSceneBet::~CMD_S2C_GameSceneBet() {
  SharedDtor();
}

void CMD_S2C_GameSceneBet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_GameSceneBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_GameSceneBet& CMD_S2C_GameSceneBet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_GameSceneBet* CMD_S2C_GameSceneBet::default_instance_ = NULL;

CMD_S2C_GameSceneBet* CMD_S2C_GameSceneBet::New() const {
  return new CMD_S2C_GameSceneBet;
}

void CMD_S2C_GameSceneBet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeremain_ = 0;
    bonuspool_ = GOOGLE_LONGLONG(0);
  }
  allbetscore_.Clear();
  mybetscore_.Clear();
  remaincanbetscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_GameSceneBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timeRemain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeremain_)));
          set_has_timeremain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allBetScore;
        break;
      }

      // repeated int64 allBetScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allBetScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_allbetscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_allbetscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allBetScore;
        if (input->ExpectTag(24)) goto parse_myBetScore;
        break;
      }

      // repeated int64 myBetScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myBetScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_mybetscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mybetscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_myBetScore;
        if (input->ExpectTag(32)) goto parse_bonusPool;
        break;
      }

      // required int64 bonusPool = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bonuspool_)));
          set_has_bonuspool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainCanBetScore;
        break;
      }

      // repeated int64 remainCanBetScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainCanBetScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_remaincanbetscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_remaincanbetscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainCanBetScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_GameSceneBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timeRemain = 1;
  if (has_timeremain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeremain(), output);
  }

  // repeated int64 allBetScore = 2;
  for (int i = 0; i < this->allbetscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->allbetscore(i), output);
  }

  // repeated int64 myBetScore = 3;
  for (int i = 0; i < this->mybetscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->mybetscore(i), output);
  }

  // required int64 bonusPool = 4;
  if (has_bonuspool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bonuspool(), output);
  }

  // repeated int64 remainCanBetScore = 5;
  for (int i = 0; i < this->remaincanbetscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->remaincanbetscore(i), output);
  }

}

int CMD_S2C_GameSceneBet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timeRemain = 1;
    if (has_timeremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeremain());
    }

    // required int64 bonusPool = 4;
    if (has_bonuspool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bonuspool());
    }

  }
  // repeated int64 allBetScore = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->allbetscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->allbetscore(i));
    }
    total_size += 1 * this->allbetscore_size() + data_size;
  }

  // repeated int64 myBetScore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mybetscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mybetscore(i));
    }
    total_size += 1 * this->mybetscore_size() + data_size;
  }

  // repeated int64 remainCanBetScore = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->remaincanbetscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->remaincanbetscore(i));
    }
    total_size += 1 * this->remaincanbetscore_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_GameSceneBet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_GameSceneBet*>(&from));
}

void CMD_S2C_GameSceneBet::MergeFrom(const CMD_S2C_GameSceneBet& from) {
  GOOGLE_CHECK_NE(&from, this);
  allbetscore_.MergeFrom(from.allbetscore_);
  mybetscore_.MergeFrom(from.mybetscore_);
  remaincanbetscore_.MergeFrom(from.remaincanbetscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeremain()) {
      set_timeremain(from.timeremain());
    }
    if (from.has_bonuspool()) {
      set_bonuspool(from.bonuspool());
    }
  }
}

void CMD_S2C_GameSceneBet::CopyFrom(const CMD_S2C_GameSceneBet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_GameSceneBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void CMD_S2C_GameSceneBet::Swap(CMD_S2C_GameSceneBet* other) {
  if (other != this) {
    std::swap(timeremain_, other->timeremain_);
    allbetscore_.Swap(&other->allbetscore_);
    mybetscore_.Swap(&other->mybetscore_);
    std::swap(bonuspool_, other->bonuspool_);
    remaincanbetscore_.Swap(&other->remaincanbetscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_GameSceneBet::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_GameSceneBet";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_GameSceneResult::kTimeRemainFieldNumber;
const int CMD_S2C_GameSceneResult::kAllBetScoreFieldNumber;
const int CMD_S2C_GameSceneResult::kMyBetScoreFieldNumber;
const int CMD_S2C_GameSceneResult::kTurntableIdFieldNumber;
const int CMD_S2C_GameSceneResult::kBonusPoolFieldNumber;
const int CMD_S2C_GameSceneResult::kBonusPoolWinLoseFieldNumber;
const int CMD_S2C_GameSceneResult::kRankUserInfoCountFieldNumber;
const int CMD_S2C_GameSceneResult::kRankUserInfoFieldNumber;
const int CMD_S2C_GameSceneResult::kRemainCanBetScoreFieldNumber;
const int CMD_S2C_GameSceneResult::kSharkMultExFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_GameSceneResult::CMD_S2C_GameSceneResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_GameSceneResult::InitAsDefaultInstance() {
}

CMD_S2C_GameSceneResult::CMD_S2C_GameSceneResult(const CMD_S2C_GameSceneResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_GameSceneResult::SharedCtor() {
  _cached_size_ = 0;
  timeremain_ = 0;
  turntableid_ = 0;
  bonuspool_ = GOOGLE_LONGLONG(0);
  bonuspoolwinlose_ = GOOGLE_LONGLONG(0);
  rankuserinfocount_ = 0;
  sharkmultex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_GameSceneResult::~CMD_S2C_GameSceneResult() {
  SharedDtor();
}

void CMD_S2C_GameSceneResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_GameSceneResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_GameSceneResult& CMD_S2C_GameSceneResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_GameSceneResult* CMD_S2C_GameSceneResult::default_instance_ = NULL;

CMD_S2C_GameSceneResult* CMD_S2C_GameSceneResult::New() const {
  return new CMD_S2C_GameSceneResult;
}

void CMD_S2C_GameSceneResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeremain_ = 0;
    turntableid_ = 0;
    bonuspool_ = GOOGLE_LONGLONG(0);
    bonuspoolwinlose_ = GOOGLE_LONGLONG(0);
    rankuserinfocount_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    sharkmultex_ = 0;
  }
  allbetscore_.Clear();
  mybetscore_.Clear();
  rankuserinfo_.Clear();
  remaincanbetscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_GameSceneResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timeRemain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeremain_)));
          set_has_timeremain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allBetScore;
        break;
      }

      // repeated int64 allBetScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allBetScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_allbetscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_allbetscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allBetScore;
        if (input->ExpectTag(24)) goto parse_myBetScore;
        break;
      }

      // repeated int64 myBetScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myBetScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_mybetscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mybetscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_myBetScore;
        if (input->ExpectTag(32)) goto parse_turntableId;
        break;
      }

      // required int32 turntableId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turntableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turntableid_)));
          set_has_turntableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bonusPool;
        break;
      }

      // required int64 bonusPool = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bonuspool_)));
          set_has_bonuspool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bonusPoolWinLose;
        break;
      }

      // required int64 bonusPoolWinLose = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusPoolWinLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bonuspoolwinlose_)));
          set_has_bonuspoolwinlose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rankUserInfoCount;
        break;
      }

      // required int32 rankUserInfoCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankUserInfoCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankuserinfocount_)));
          set_has_rankuserinfocount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rankUserInfo;
        break;
      }

      // repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rankUserInfo;
        if (input->ExpectTag(72)) goto parse_remainCanBetScore;
        break;
      }

      // repeated int64 remainCanBetScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainCanBetScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 72, input, this->mutable_remaincanbetscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_remaincanbetscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_remainCanBetScore;
        if (input->ExpectTag(80)) goto parse_sharkMultEx;
        break;
      }

      // required int32 sharkMultEx = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sharkMultEx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sharkmultex_)));
          set_has_sharkmultex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_GameSceneResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timeRemain = 1;
  if (has_timeremain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeremain(), output);
  }

  // repeated int64 allBetScore = 2;
  for (int i = 0; i < this->allbetscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->allbetscore(i), output);
  }

  // repeated int64 myBetScore = 3;
  for (int i = 0; i < this->mybetscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->mybetscore(i), output);
  }

  // required int32 turntableId = 4;
  if (has_turntableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->turntableid(), output);
  }

  // required int64 bonusPool = 5;
  if (has_bonuspool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bonuspool(), output);
  }

  // required int64 bonusPoolWinLose = 6;
  if (has_bonuspoolwinlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->bonuspoolwinlose(), output);
  }

  // required int32 rankUserInfoCount = 7;
  if (has_rankuserinfocount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rankuserinfocount(), output);
  }

  // repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
  for (int i = 0; i < this->rankuserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->rankuserinfo(i), output);
  }

  // repeated int64 remainCanBetScore = 9;
  for (int i = 0; i < this->remaincanbetscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      9, this->remaincanbetscore(i), output);
  }

  // required int32 sharkMultEx = 10;
  if (has_sharkmultex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sharkmultex(), output);
  }

}

int CMD_S2C_GameSceneResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timeRemain = 1;
    if (has_timeremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeremain());
    }

    // required int32 turntableId = 4;
    if (has_turntableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turntableid());
    }

    // required int64 bonusPool = 5;
    if (has_bonuspool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bonuspool());
    }

    // required int64 bonusPoolWinLose = 6;
    if (has_bonuspoolwinlose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bonuspoolwinlose());
    }

    // required int32 rankUserInfoCount = 7;
    if (has_rankuserinfocount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankuserinfocount());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 sharkMultEx = 10;
    if (has_sharkmultex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sharkmultex());
    }

  }
  // repeated int64 allBetScore = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->allbetscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->allbetscore(i));
    }
    total_size += 1 * this->allbetscore_size() + data_size;
  }

  // repeated int64 myBetScore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mybetscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mybetscore(i));
    }
    total_size += 1 * this->mybetscore_size() + data_size;
  }

  // repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
  total_size += 1 * this->rankuserinfo_size();
  for (int i = 0; i < this->rankuserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankuserinfo(i));
  }

  // repeated int64 remainCanBetScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->remaincanbetscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->remaincanbetscore(i));
    }
    total_size += 1 * this->remaincanbetscore_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_GameSceneResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_GameSceneResult*>(&from));
}

void CMD_S2C_GameSceneResult::MergeFrom(const CMD_S2C_GameSceneResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  allbetscore_.MergeFrom(from.allbetscore_);
  mybetscore_.MergeFrom(from.mybetscore_);
  rankuserinfo_.MergeFrom(from.rankuserinfo_);
  remaincanbetscore_.MergeFrom(from.remaincanbetscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeremain()) {
      set_timeremain(from.timeremain());
    }
    if (from.has_turntableid()) {
      set_turntableid(from.turntableid());
    }
    if (from.has_bonuspool()) {
      set_bonuspool(from.bonuspool());
    }
    if (from.has_bonuspoolwinlose()) {
      set_bonuspoolwinlose(from.bonuspoolwinlose());
    }
    if (from.has_rankuserinfocount()) {
      set_rankuserinfocount(from.rankuserinfocount());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_sharkmultex()) {
      set_sharkmultex(from.sharkmultex());
    }
  }
}

void CMD_S2C_GameSceneResult::CopyFrom(const CMD_S2C_GameSceneResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_GameSceneResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000279) != 0x00000279) return false;

  for (int i = 0; i < rankuserinfo_size(); i++) {
    if (!this->rankuserinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_GameSceneResult::Swap(CMD_S2C_GameSceneResult* other) {
  if (other != this) {
    std::swap(timeremain_, other->timeremain_);
    allbetscore_.Swap(&other->allbetscore_);
    mybetscore_.Swap(&other->mybetscore_);
    std::swap(turntableid_, other->turntableid_);
    std::swap(bonuspool_, other->bonuspool_);
    std::swap(bonuspoolwinlose_, other->bonuspoolwinlose_);
    std::swap(rankuserinfocount_, other->rankuserinfocount_);
    rankuserinfo_.Swap(&other->rankuserinfo_);
    remaincanbetscore_.Swap(&other->remaincanbetscore_);
    std::swap(sharkmultex_, other->sharkmultex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_GameSceneResult::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_GameSceneResult";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_GameStepBet::kByTimeBetFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_GameStepBet::CMD_S2C_GameStepBet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_GameStepBet::InitAsDefaultInstance() {
}

CMD_S2C_GameStepBet::CMD_S2C_GameStepBet(const CMD_S2C_GameStepBet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_GameStepBet::SharedCtor() {
  _cached_size_ = 0;
  bytimebet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_GameStepBet::~CMD_S2C_GameStepBet() {
  SharedDtor();
}

void CMD_S2C_GameStepBet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_GameStepBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_GameStepBet& CMD_S2C_GameStepBet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_GameStepBet* CMD_S2C_GameStepBet::default_instance_ = NULL;

CMD_S2C_GameStepBet* CMD_S2C_GameStepBet::New() const {
  return new CMD_S2C_GameStepBet;
}

void CMD_S2C_GameStepBet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytimebet_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_GameStepBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 byTimeBet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytimebet_)));
          set_has_bytimebet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_GameStepBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 byTimeBet = 1;
  if (has_bytimebet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bytimebet(), output);
  }

}

int CMD_S2C_GameStepBet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 byTimeBet = 1;
    if (has_bytimebet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytimebet());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_GameStepBet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_GameStepBet*>(&from));
}

void CMD_S2C_GameStepBet::MergeFrom(const CMD_S2C_GameStepBet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytimebet()) {
      set_bytimebet(from.bytimebet());
    }
  }
}

void CMD_S2C_GameStepBet::CopyFrom(const CMD_S2C_GameStepBet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_GameStepBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_S2C_GameStepBet::Swap(CMD_S2C_GameStepBet* other) {
  if (other != this) {
    std::swap(bytimebet_, other->bytimebet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_GameStepBet::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_GameStepBet";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_PlayerBet::kChairIdFieldNumber;
const int CMD_S2C_PlayerBet::kByBetAreaIDFieldNumber;
const int CMD_S2C_PlayerBet::kBetScoreFieldNumber;
const int CMD_S2C_PlayerBet::kRemainCanBetScoreFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_PlayerBet::CMD_S2C_PlayerBet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_PlayerBet::InitAsDefaultInstance() {
}

CMD_S2C_PlayerBet::CMD_S2C_PlayerBet(const CMD_S2C_PlayerBet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_PlayerBet::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  bybetareaid_ = 0;
  betscore_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_PlayerBet::~CMD_S2C_PlayerBet() {
  SharedDtor();
}

void CMD_S2C_PlayerBet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_PlayerBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_PlayerBet& CMD_S2C_PlayerBet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_PlayerBet* CMD_S2C_PlayerBet::default_instance_ = NULL;

CMD_S2C_PlayerBet* CMD_S2C_PlayerBet::New() const {
  return new CMD_S2C_PlayerBet;
}

void CMD_S2C_PlayerBet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    bybetareaid_ = 0;
    betscore_ = GOOGLE_LONGLONG(0);
  }
  remaincanbetscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_PlayerBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_byBetAreaID;
        break;
      }

      // required int32 byBetAreaID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byBetAreaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bybetareaid_)));
          set_has_bybetareaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_betScore;
        break;
      }

      // required int64 betScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betscore_)));
          set_has_betscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remainCanBetScore;
        break;
      }

      // repeated int64 remainCanBetScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainCanBetScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_remaincanbetscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_remaincanbetscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remainCanBetScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_PlayerBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairId = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // required int32 byBetAreaID = 2;
  if (has_bybetareaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bybetareaid(), output);
  }

  // required int64 betScore = 3;
  if (has_betscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->betscore(), output);
  }

  // repeated int64 remainCanBetScore = 4;
  for (int i = 0; i < this->remaincanbetscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->remaincanbetscore(i), output);
  }

}

int CMD_S2C_PlayerBet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairId = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int32 byBetAreaID = 2;
    if (has_bybetareaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bybetareaid());
    }

    // required int64 betScore = 3;
    if (has_betscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->betscore());
    }

  }
  // repeated int64 remainCanBetScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->remaincanbetscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->remaincanbetscore(i));
    }
    total_size += 1 * this->remaincanbetscore_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_PlayerBet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_PlayerBet*>(&from));
}

void CMD_S2C_PlayerBet::MergeFrom(const CMD_S2C_PlayerBet& from) {
  GOOGLE_CHECK_NE(&from, this);
  remaincanbetscore_.MergeFrom(from.remaincanbetscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_bybetareaid()) {
      set_bybetareaid(from.bybetareaid());
    }
    if (from.has_betscore()) {
      set_betscore(from.betscore());
    }
  }
}

void CMD_S2C_PlayerBet::CopyFrom(const CMD_S2C_PlayerBet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_PlayerBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_S2C_PlayerBet::Swap(CMD_S2C_PlayerBet* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(bybetareaid_, other->bybetareaid_);
    std::swap(betscore_, other->betscore_);
    remaincanbetscore_.Swap(&other->remaincanbetscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_PlayerBet::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_PlayerBet";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_GameStepResult::kByTimeResultFieldNumber;
const int CMD_S2C_GameStepResult::kByTurntableIdFieldNumber;
const int CMD_S2C_GameStepResult::kClientWinScoreFieldNumber;
const int CMD_S2C_GameStepResult::kWinLoseScoreFieldNumber;
const int CMD_S2C_GameStepResult::kPlayerNewScoreFieldNumber;
const int CMD_S2C_GameStepResult::kBonusPoolWinLoseFieldNumber;
const int CMD_S2C_GameStepResult::kByRankUserInfoCountFieldNumber;
const int CMD_S2C_GameStepResult::kRankUserInfoFieldNumber;
const int CMD_S2C_GameStepResult::kSharkMultExFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_GameStepResult::CMD_S2C_GameStepResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_GameStepResult::InitAsDefaultInstance() {
}

CMD_S2C_GameStepResult::CMD_S2C_GameStepResult(const CMD_S2C_GameStepResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_GameStepResult::SharedCtor() {
  _cached_size_ = 0;
  bytimeresult_ = 0;
  byturntableid_ = 0;
  clientwinscore_ = GOOGLE_LONGLONG(0);
  winlosescore_ = GOOGLE_LONGLONG(0);
  playernewscore_ = GOOGLE_LONGLONG(0);
  bonuspoolwinlose_ = GOOGLE_LONGLONG(0);
  byrankuserinfocount_ = 0;
  sharkmultex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_GameStepResult::~CMD_S2C_GameStepResult() {
  SharedDtor();
}

void CMD_S2C_GameStepResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_GameStepResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_GameStepResult& CMD_S2C_GameStepResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_GameStepResult* CMD_S2C_GameStepResult::default_instance_ = NULL;

CMD_S2C_GameStepResult* CMD_S2C_GameStepResult::New() const {
  return new CMD_S2C_GameStepResult;
}

void CMD_S2C_GameStepResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytimeresult_ = 0;
    byturntableid_ = 0;
    clientwinscore_ = GOOGLE_LONGLONG(0);
    winlosescore_ = GOOGLE_LONGLONG(0);
    playernewscore_ = GOOGLE_LONGLONG(0);
    bonuspoolwinlose_ = GOOGLE_LONGLONG(0);
    byrankuserinfocount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sharkmultex_ = 0;
  }
  rankuserinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_GameStepResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 byTimeResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytimeresult_)));
          set_has_bytimeresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_byTurntableId;
        break;
      }

      // required int32 byTurntableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byTurntableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byturntableid_)));
          set_has_byturntableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientWinScore;
        break;
      }

      // required int64 clientWinScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientwinscore_)));
          set_has_clientwinscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winLoseScore;
        break;
      }

      // required int64 winLoseScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winLoseScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winlosescore_)));
          set_has_winlosescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerNewScore;
        break;
      }

      // required int64 playerNewScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerNewScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playernewscore_)));
          set_has_playernewscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bonusPoolWinLose;
        break;
      }

      // required int64 bonusPoolWinLose = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusPoolWinLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bonuspoolwinlose_)));
          set_has_bonuspoolwinlose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_byRankUserInfoCount;
        break;
      }

      // required int32 byRankUserInfoCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byRankUserInfoCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byrankuserinfocount_)));
          set_has_byrankuserinfocount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rankUserInfo;
        break;
      }

      // repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rankUserInfo;
        if (input->ExpectTag(72)) goto parse_sharkMultEx;
        break;
      }

      // required int32 sharkMultEx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sharkMultEx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sharkmultex_)));
          set_has_sharkmultex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_GameStepResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 byTimeResult = 1;
  if (has_bytimeresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bytimeresult(), output);
  }

  // required int32 byTurntableId = 2;
  if (has_byturntableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->byturntableid(), output);
  }

  // required int64 clientWinScore = 3;
  if (has_clientwinscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->clientwinscore(), output);
  }

  // required int64 winLoseScore = 4;
  if (has_winlosescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->winlosescore(), output);
  }

  // required int64 playerNewScore = 5;
  if (has_playernewscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->playernewscore(), output);
  }

  // required int64 bonusPoolWinLose = 6;
  if (has_bonuspoolwinlose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->bonuspoolwinlose(), output);
  }

  // required int32 byRankUserInfoCount = 7;
  if (has_byrankuserinfocount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->byrankuserinfocount(), output);
  }

  // repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
  for (int i = 0; i < this->rankuserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->rankuserinfo(i), output);
  }

  // required int32 sharkMultEx = 9;
  if (has_sharkmultex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sharkmultex(), output);
  }

}

int CMD_S2C_GameStepResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 byTimeResult = 1;
    if (has_bytimeresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytimeresult());
    }

    // required int32 byTurntableId = 2;
    if (has_byturntableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byturntableid());
    }

    // required int64 clientWinScore = 3;
    if (has_clientwinscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientwinscore());
    }

    // required int64 winLoseScore = 4;
    if (has_winlosescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winlosescore());
    }

    // required int64 playerNewScore = 5;
    if (has_playernewscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playernewscore());
    }

    // required int64 bonusPoolWinLose = 6;
    if (has_bonuspoolwinlose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bonuspoolwinlose());
    }

    // required int32 byRankUserInfoCount = 7;
    if (has_byrankuserinfocount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byrankuserinfocount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 sharkMultEx = 9;
    if (has_sharkmultex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sharkmultex());
    }

  }
  // repeated .game.birdsandbeasts.s2c.tagSRankUserInfo rankUserInfo = 8;
  total_size += 1 * this->rankuserinfo_size();
  for (int i = 0; i < this->rankuserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankuserinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_GameStepResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_GameStepResult*>(&from));
}

void CMD_S2C_GameStepResult::MergeFrom(const CMD_S2C_GameStepResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankuserinfo_.MergeFrom(from.rankuserinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytimeresult()) {
      set_bytimeresult(from.bytimeresult());
    }
    if (from.has_byturntableid()) {
      set_byturntableid(from.byturntableid());
    }
    if (from.has_clientwinscore()) {
      set_clientwinscore(from.clientwinscore());
    }
    if (from.has_winlosescore()) {
      set_winlosescore(from.winlosescore());
    }
    if (from.has_playernewscore()) {
      set_playernewscore(from.playernewscore());
    }
    if (from.has_bonuspoolwinlose()) {
      set_bonuspoolwinlose(from.bonuspoolwinlose());
    }
    if (from.has_byrankuserinfocount()) {
      set_byrankuserinfocount(from.byrankuserinfocount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sharkmultex()) {
      set_sharkmultex(from.sharkmultex());
    }
  }
}

void CMD_S2C_GameStepResult::CopyFrom(const CMD_S2C_GameStepResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_GameStepResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017f) != 0x0000017f) return false;

  for (int i = 0; i < rankuserinfo_size(); i++) {
    if (!this->rankuserinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_S2C_GameStepResult::Swap(CMD_S2C_GameStepResult* other) {
  if (other != this) {
    std::swap(bytimeresult_, other->bytimeresult_);
    std::swap(byturntableid_, other->byturntableid_);
    std::swap(clientwinscore_, other->clientwinscore_);
    std::swap(winlosescore_, other->winlosescore_);
    std::swap(playernewscore_, other->playernewscore_);
    std::swap(bonuspoolwinlose_, other->bonuspoolwinlose_);
    std::swap(byrankuserinfocount_, other->byrankuserinfocount_);
    rankuserinfo_.Swap(&other->rankuserinfo_);
    std::swap(sharkmultex_, other->sharkmultex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_GameStepResult::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_GameStepResult";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_GameStepRest::kByTimeRestFieldNumber;
const int CMD_S2C_GameStepRest::kBonusPoolFieldNumber;
const int CMD_S2C_GameStepRest::kHasRedPacketFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_GameStepRest::CMD_S2C_GameStepRest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_GameStepRest::InitAsDefaultInstance() {
}

CMD_S2C_GameStepRest::CMD_S2C_GameStepRest(const CMD_S2C_GameStepRest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_GameStepRest::SharedCtor() {
  _cached_size_ = 0;
  bytimerest_ = 0;
  bonuspool_ = GOOGLE_LONGLONG(0);
  hasredpacket_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_GameStepRest::~CMD_S2C_GameStepRest() {
  SharedDtor();
}

void CMD_S2C_GameStepRest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_GameStepRest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_GameStepRest& CMD_S2C_GameStepRest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_GameStepRest* CMD_S2C_GameStepRest::default_instance_ = NULL;

CMD_S2C_GameStepRest* CMD_S2C_GameStepRest::New() const {
  return new CMD_S2C_GameStepRest;
}

void CMD_S2C_GameStepRest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytimerest_ = 0;
    bonuspool_ = GOOGLE_LONGLONG(0);
    hasredpacket_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_GameStepRest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 byTimeRest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytimerest_)));
          set_has_bytimerest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bonusPool;
        break;
      }

      // required int64 bonusPool = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonusPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bonuspool_)));
          set_has_bonuspool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasRedPacket;
        break;
      }

      // required bool hasRedPacket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasRedPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasredpacket_)));
          set_has_hasredpacket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_GameStepRest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 byTimeRest = 1;
  if (has_bytimerest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bytimerest(), output);
  }

  // required int64 bonusPool = 2;
  if (has_bonuspool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bonuspool(), output);
  }

  // required bool hasRedPacket = 3;
  if (has_hasredpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasredpacket(), output);
  }

}

int CMD_S2C_GameStepRest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 byTimeRest = 1;
    if (has_bytimerest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytimerest());
    }

    // required int64 bonusPool = 2;
    if (has_bonuspool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bonuspool());
    }

    // required bool hasRedPacket = 3;
    if (has_hasredpacket()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_GameStepRest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_GameStepRest*>(&from));
}

void CMD_S2C_GameStepRest::MergeFrom(const CMD_S2C_GameStepRest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytimerest()) {
      set_bytimerest(from.bytimerest());
    }
    if (from.has_bonuspool()) {
      set_bonuspool(from.bonuspool());
    }
    if (from.has_hasredpacket()) {
      set_hasredpacket(from.hasredpacket());
    }
  }
}

void CMD_S2C_GameStepRest::CopyFrom(const CMD_S2C_GameStepRest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_GameStepRest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_S2C_GameStepRest::Swap(CMD_S2C_GameStepRest* other) {
  if (other != this) {
    std::swap(bytimerest_, other->bytimerest_);
    std::swap(bonuspool_, other->bonuspool_);
    std::swap(hasredpacket_, other->hasredpacket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_GameStepRest::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_GameStepRest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_ResultHistory::kByHistoryCountFieldNumber;
const int CMD_S2C_ResultHistory::kByHistoryDataFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_ResultHistory::CMD_S2C_ResultHistory()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_ResultHistory::InitAsDefaultInstance() {
}

CMD_S2C_ResultHistory::CMD_S2C_ResultHistory(const CMD_S2C_ResultHistory& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_ResultHistory::SharedCtor() {
  _cached_size_ = 0;
  byhistorycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_ResultHistory::~CMD_S2C_ResultHistory() {
  SharedDtor();
}

void CMD_S2C_ResultHistory::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_ResultHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_ResultHistory& CMD_S2C_ResultHistory::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_ResultHistory* CMD_S2C_ResultHistory::default_instance_ = NULL;

CMD_S2C_ResultHistory* CMD_S2C_ResultHistory::New() const {
  return new CMD_S2C_ResultHistory;
}

void CMD_S2C_ResultHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    byhistorycount_ = 0;
  }
  byhistorydata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_ResultHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 byHistoryCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byhistorycount_)));
          set_has_byhistorycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_byHistoryData;
        break;
      }

      // repeated int64 byHistoryData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byHistoryData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_byhistorydata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_byhistorydata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_byHistoryData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_ResultHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 byHistoryCount = 1;
  if (has_byhistorycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->byhistorycount(), output);
  }

  // repeated int64 byHistoryData = 2;
  for (int i = 0; i < this->byhistorydata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->byhistorydata(i), output);
  }

}

int CMD_S2C_ResultHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 byHistoryCount = 1;
    if (has_byhistorycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byhistorycount());
    }

  }
  // repeated int64 byHistoryData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->byhistorydata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->byhistorydata(i));
    }
    total_size += 1 * this->byhistorydata_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_ResultHistory::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_ResultHistory*>(&from));
}

void CMD_S2C_ResultHistory::MergeFrom(const CMD_S2C_ResultHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  byhistorydata_.MergeFrom(from.byhistorydata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_byhistorycount()) {
      set_byhistorycount(from.byhistorycount());
    }
  }
}

void CMD_S2C_ResultHistory::CopyFrom(const CMD_S2C_ResultHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_ResultHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_S2C_ResultHistory::Swap(CMD_S2C_ResultHistory* other) {
  if (other != this) {
    std::swap(byhistorycount_, other->byhistorycount_);
    byhistorydata_.Swap(&other->byhistorydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_ResultHistory::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_ResultHistory";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_ClearBet::kChairIdFieldNumber;
const int CMD_S2C_ClearBet::kBetScoreFieldNumber;
const int CMD_S2C_ClearBet::kBetTotalScoreFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_ClearBet::CMD_S2C_ClearBet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_ClearBet::InitAsDefaultInstance() {
}

CMD_S2C_ClearBet::CMD_S2C_ClearBet(const CMD_S2C_ClearBet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_ClearBet::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  bettotalscore_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_ClearBet::~CMD_S2C_ClearBet() {
  SharedDtor();
}

void CMD_S2C_ClearBet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_ClearBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_ClearBet& CMD_S2C_ClearBet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_ClearBet* CMD_S2C_ClearBet::default_instance_ = NULL;

CMD_S2C_ClearBet* CMD_S2C_ClearBet::New() const {
  return new CMD_S2C_ClearBet;
}

void CMD_S2C_ClearBet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    bettotalscore_ = GOOGLE_LONGLONG(0);
  }
  betscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_ClearBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betScore;
        break;
      }

      // repeated int64 betScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_betscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_betscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betScore;
        if (input->ExpectTag(24)) goto parse_betTotalScore;
        break;
      }

      // required int64 betTotalScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bettotalscore_)));
          set_has_bettotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_ClearBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairId = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // repeated int64 betScore = 2;
  for (int i = 0; i < this->betscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->betscore(i), output);
  }

  // required int64 betTotalScore = 3;
  if (has_bettotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bettotalscore(), output);
  }

}

int CMD_S2C_ClearBet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairId = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int64 betTotalScore = 3;
    if (has_bettotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bettotalscore());
    }

  }
  // repeated int64 betScore = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->betscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->betscore(i));
    }
    total_size += 1 * this->betscore_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_ClearBet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_ClearBet*>(&from));
}

void CMD_S2C_ClearBet::MergeFrom(const CMD_S2C_ClearBet& from) {
  GOOGLE_CHECK_NE(&from, this);
  betscore_.MergeFrom(from.betscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_bettotalscore()) {
      set_bettotalscore(from.bettotalscore());
    }
  }
}

void CMD_S2C_ClearBet::CopyFrom(const CMD_S2C_ClearBet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_ClearBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void CMD_S2C_ClearBet::Swap(CMD_S2C_ClearBet* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    betscore_.Swap(&other->betscore_);
    std::swap(bettotalscore_, other->bettotalscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_ClearBet::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_ClearBet";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_S2C_RedPacket::kRedPacketScoreFieldNumber;
#endif  // !_MSC_VER

CMD_S2C_RedPacket::CMD_S2C_RedPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_S2C_RedPacket::InitAsDefaultInstance() {
}

CMD_S2C_RedPacket::CMD_S2C_RedPacket(const CMD_S2C_RedPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_S2C_RedPacket::SharedCtor() {
  _cached_size_ = 0;
  redpacketscore_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_S2C_RedPacket::~CMD_S2C_RedPacket() {
  SharedDtor();
}

void CMD_S2C_RedPacket::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_S2C_RedPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_S2C_RedPacket& CMD_S2C_RedPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2fBirdsAndBeasts_2fBirdsAndBeasts_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_S2C_RedPacket* CMD_S2C_RedPacket::default_instance_ = NULL;

CMD_S2C_RedPacket* CMD_S2C_RedPacket::New() const {
  return new CMD_S2C_RedPacket;
}

void CMD_S2C_RedPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    redpacketscore_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_S2C_RedPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 redPacketScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &redpacketscore_)));
          set_has_redpacketscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_S2C_RedPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 redPacketScore = 1;
  if (has_redpacketscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->redpacketscore(), output);
  }

}

int CMD_S2C_RedPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 redPacketScore = 1;
    if (has_redpacketscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->redpacketscore());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_S2C_RedPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_S2C_RedPacket*>(&from));
}

void CMD_S2C_RedPacket::MergeFrom(const CMD_S2C_RedPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redpacketscore()) {
      set_redpacketscore(from.redpacketscore());
    }
  }
}

void CMD_S2C_RedPacket::CopyFrom(const CMD_S2C_RedPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_S2C_RedPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_S2C_RedPacket::Swap(CMD_S2C_RedPacket* other) {
  if (other != this) {
    std::swap(redpacketscore_, other->redpacketscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_S2C_RedPacket::GetTypeName() const {
  return "game.birdsandbeasts.s2c.CMD_S2C_RedPacket";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2c
}  // namespace birdsandbeasts
}  // namespace game

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Room/room_c2s.proto

#ifndef PROTOBUF_Room_2froom_5fc2s_2eproto__INCLUDED
#define PROTOBUF_Room_2froom_5fc2s_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace room {
namespace c2s {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

class CMD_GR_LogonUserID;
class CMD_GR_UserRule;
class CMD_GR_UserSitDown;
class CMD_GR_UserStandUp;
class CMD_GR_C_UserChat;
class CMD_GR_C_UserExpression;
class CMD_GR_KickUser;
class CMD_GR_UserInfoReq;
class CMD_GR_ChairUserInfoReq;
class CMD_GF_GameOption;
class CMD_GF_C_UserChat;
class CMD_GF_C_UserExpression;

// ===================================================================

class CMD_GR_LogonUserID : public ::google::protobuf::MessageLite {
 public:
  CMD_GR_LogonUserID();
  virtual ~CMD_GR_LogonUserID();

  CMD_GR_LogonUserID(const CMD_GR_LogonUserID& from);

  inline CMD_GR_LogonUserID& operator=(const CMD_GR_LogonUserID& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GR_LogonUserID& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GR_LogonUserID* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GR_LogonUserID* other);

  // implements Message ----------------------------------------------

  CMD_GR_LogonUserID* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GR_LogonUserID& from);
  void MergeFrom(const CMD_GR_LogonUserID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 plazaVersion = 1;
  inline bool has_plazaversion() const;
  inline void clear_plazaversion();
  static const int kPlazaVersionFieldNumber = 1;
  inline ::google::protobuf::int32 plazaversion() const;
  inline void set_plazaversion(::google::protobuf::int32 value);

  // required int32 frameVersion = 2;
  inline bool has_frameversion() const;
  inline void clear_frameversion();
  static const int kFrameVersionFieldNumber = 2;
  inline ::google::protobuf::int32 frameversion() const;
  inline void set_frameversion(::google::protobuf::int32 value);

  // required int32 processVersion = 3;
  inline bool has_processversion() const;
  inline void clear_processversion();
  static const int kProcessVersionFieldNumber = 3;
  inline ::google::protobuf::int32 processversion() const;
  inline void set_processversion(::google::protobuf::int32 value);

  // required int32 userId = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required string password = 5;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 5;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required string machineId = 6;
  inline bool has_machineid() const;
  inline void clear_machineid();
  static const int kMachineIdFieldNumber = 6;
  inline const ::std::string& machineid() const;
  inline void set_machineid(const ::std::string& value);
  inline void set_machineid(const char* value);
  inline void set_machineid(const char* value, size_t size);
  inline ::std::string* mutable_machineid();
  inline ::std::string* release_machineid();
  inline void set_allocated_machineid(::std::string* machineid);

  // required int32 kindId = 7;
  inline bool has_kindid() const;
  inline void clear_kindid();
  static const int kKindIdFieldNumber = 7;
  inline ::google::protobuf::int32 kindid() const;
  inline void set_kindid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GR_LogonUserID)
 private:
  inline void set_has_plazaversion();
  inline void clear_has_plazaversion();
  inline void set_has_frameversion();
  inline void clear_has_frameversion();
  inline void set_has_processversion();
  inline void clear_has_processversion();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_machineid();
  inline void clear_has_machineid();
  inline void set_has_kindid();
  inline void clear_has_kindid();

  ::google::protobuf::int32 plazaversion_;
  ::google::protobuf::int32 frameversion_;
  ::google::protobuf::int32 processversion_;
  ::google::protobuf::int32 userid_;
  ::std::string* password_;
  ::std::string* machineid_;
  ::google::protobuf::int32 kindid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_LogonUserID* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GR_UserRule : public ::google::protobuf::MessageLite {
 public:
  CMD_GR_UserRule();
  virtual ~CMD_GR_UserRule();

  CMD_GR_UserRule(const CMD_GR_UserRule& from);

  inline CMD_GR_UserRule& operator=(const CMD_GR_UserRule& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GR_UserRule& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GR_UserRule* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GR_UserRule* other);

  // implements Message ----------------------------------------------

  CMD_GR_UserRule* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GR_UserRule& from);
  void MergeFrom(const CMD_GR_UserRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ruleMask = 1;
  inline bool has_rulemask() const;
  inline void clear_rulemask();
  static const int kRuleMaskFieldNumber = 1;
  inline ::google::protobuf::int32 rulemask() const;
  inline void set_rulemask(::google::protobuf::int32 value);

  // required int32 minWinRate = 2;
  inline bool has_minwinrate() const;
  inline void clear_minwinrate();
  static const int kMinWinRateFieldNumber = 2;
  inline ::google::protobuf::int32 minwinrate() const;
  inline void set_minwinrate(::google::protobuf::int32 value);

  // required int32 maxFleeRate = 3;
  inline bool has_maxfleerate() const;
  inline void clear_maxfleerate();
  static const int kMaxFleeRateFieldNumber = 3;
  inline ::google::protobuf::int32 maxfleerate() const;
  inline void set_maxfleerate(::google::protobuf::int32 value);

  // required int32 maxGameScore = 4;
  inline bool has_maxgamescore() const;
  inline void clear_maxgamescore();
  static const int kMaxGameScoreFieldNumber = 4;
  inline ::google::protobuf::int32 maxgamescore() const;
  inline void set_maxgamescore(::google::protobuf::int32 value);

  // required int32 minGameScore = 5;
  inline bool has_mingamescore() const;
  inline void clear_mingamescore();
  static const int kMinGameScoreFieldNumber = 5;
  inline ::google::protobuf::int32 mingamescore() const;
  inline void set_mingamescore(::google::protobuf::int32 value);

  // optional string tablePassword = 6;
  inline bool has_tablepassword() const;
  inline void clear_tablepassword();
  static const int kTablePasswordFieldNumber = 6;
  inline const ::std::string& tablepassword() const;
  inline void set_tablepassword(const ::std::string& value);
  inline void set_tablepassword(const char* value);
  inline void set_tablepassword(const char* value, size_t size);
  inline ::std::string* mutable_tablepassword();
  inline ::std::string* release_tablepassword();
  inline void set_allocated_tablepassword(::std::string* tablepassword);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GR_UserRule)
 private:
  inline void set_has_rulemask();
  inline void clear_has_rulemask();
  inline void set_has_minwinrate();
  inline void clear_has_minwinrate();
  inline void set_has_maxfleerate();
  inline void clear_has_maxfleerate();
  inline void set_has_maxgamescore();
  inline void clear_has_maxgamescore();
  inline void set_has_mingamescore();
  inline void clear_has_mingamescore();
  inline void set_has_tablepassword();
  inline void clear_has_tablepassword();

  ::google::protobuf::int32 rulemask_;
  ::google::protobuf::int32 minwinrate_;
  ::google::protobuf::int32 maxfleerate_;
  ::google::protobuf::int32 maxgamescore_;
  ::std::string* tablepassword_;
  ::google::protobuf::int32 mingamescore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_UserRule* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GR_UserSitDown : public ::google::protobuf::MessageLite {
 public:
  CMD_GR_UserSitDown();
  virtual ~CMD_GR_UserSitDown();

  CMD_GR_UserSitDown(const CMD_GR_UserSitDown& from);

  inline CMD_GR_UserSitDown& operator=(const CMD_GR_UserSitDown& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GR_UserSitDown& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GR_UserSitDown* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GR_UserSitDown* other);

  // implements Message ----------------------------------------------

  CMD_GR_UserSitDown* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GR_UserSitDown& from);
  void MergeFrom(const CMD_GR_UserSitDown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableId = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 chairId = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIdFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GR_UserSitDown)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 chairid_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_UserSitDown* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GR_UserStandUp : public ::google::protobuf::MessageLite {
 public:
  CMD_GR_UserStandUp();
  virtual ~CMD_GR_UserStandUp();

  CMD_GR_UserStandUp(const CMD_GR_UserStandUp& from);

  inline CMD_GR_UserStandUp& operator=(const CMD_GR_UserStandUp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GR_UserStandUp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GR_UserStandUp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GR_UserStandUp* other);

  // implements Message ----------------------------------------------

  CMD_GR_UserStandUp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GR_UserStandUp& from);
  void MergeFrom(const CMD_GR_UserStandUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableId = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 chairId = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIdFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // required int32 forceLeave = 3;
  inline bool has_forceleave() const;
  inline void clear_forceleave();
  static const int kForceLeaveFieldNumber = 3;
  inline ::google::protobuf::int32 forceleave() const;
  inline void set_forceleave(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GR_UserStandUp)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_forceleave();
  inline void clear_has_forceleave();

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 forceleave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_UserStandUp* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GR_C_UserChat : public ::google::protobuf::MessageLite {
 public:
  CMD_GR_C_UserChat();
  virtual ~CMD_GR_C_UserChat();

  CMD_GR_C_UserChat(const CMD_GR_C_UserChat& from);

  inline CMD_GR_C_UserChat& operator=(const CMD_GR_C_UserChat& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GR_C_UserChat& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GR_C_UserChat* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GR_C_UserChat* other);

  // implements Message ----------------------------------------------

  CMD_GR_C_UserChat* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GR_C_UserChat& from);
  void MergeFrom(const CMD_GR_C_UserChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chatColor = 1;
  inline bool has_chatcolor() const;
  inline void clear_chatcolor();
  static const int kChatColorFieldNumber = 1;
  inline ::google::protobuf::int32 chatcolor() const;
  inline void set_chatcolor(::google::protobuf::int32 value);

  // required int32 sendUserId = 2;
  inline bool has_senduserid() const;
  inline void clear_senduserid();
  static const int kSendUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 senduserid() const;
  inline void set_senduserid(::google::protobuf::int32 value);

  // required int32 targetUserId = 3;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int32 value);

  // required string chatString = 4;
  inline bool has_chatstring() const;
  inline void clear_chatstring();
  static const int kChatStringFieldNumber = 4;
  inline const ::std::string& chatstring() const;
  inline void set_chatstring(const ::std::string& value);
  inline void set_chatstring(const char* value);
  inline void set_chatstring(const char* value, size_t size);
  inline ::std::string* mutable_chatstring();
  inline ::std::string* release_chatstring();
  inline void set_allocated_chatstring(::std::string* chatstring);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GR_C_UserChat)
 private:
  inline void set_has_chatcolor();
  inline void clear_has_chatcolor();
  inline void set_has_senduserid();
  inline void clear_has_senduserid();
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();
  inline void set_has_chatstring();
  inline void clear_has_chatstring();

  ::google::protobuf::int32 chatcolor_;
  ::google::protobuf::int32 senduserid_;
  ::std::string* chatstring_;
  ::google::protobuf::int32 targetuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_C_UserChat* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GR_C_UserExpression : public ::google::protobuf::MessageLite {
 public:
  CMD_GR_C_UserExpression();
  virtual ~CMD_GR_C_UserExpression();

  CMD_GR_C_UserExpression(const CMD_GR_C_UserExpression& from);

  inline CMD_GR_C_UserExpression& operator=(const CMD_GR_C_UserExpression& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GR_C_UserExpression& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GR_C_UserExpression* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GR_C_UserExpression* other);

  // implements Message ----------------------------------------------

  CMD_GR_C_UserExpression* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GR_C_UserExpression& from);
  void MergeFrom(const CMD_GR_C_UserExpression& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 itemIndex = 1;
  inline bool has_itemindex() const;
  inline void clear_itemindex();
  static const int kItemIndexFieldNumber = 1;
  inline ::google::protobuf::int32 itemindex() const;
  inline void set_itemindex(::google::protobuf::int32 value);

  // required int32 sendUserId = 2;
  inline bool has_senduserid() const;
  inline void clear_senduserid();
  static const int kSendUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 senduserid() const;
  inline void set_senduserid(::google::protobuf::int32 value);

  // required int32 targetUserId = 3;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GR_C_UserExpression)
 private:
  inline void set_has_itemindex();
  inline void clear_has_itemindex();
  inline void set_has_senduserid();
  inline void clear_has_senduserid();
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();

  ::google::protobuf::int32 itemindex_;
  ::google::protobuf::int32 senduserid_;
  ::google::protobuf::int32 targetuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_C_UserExpression* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GR_KickUser : public ::google::protobuf::MessageLite {
 public:
  CMD_GR_KickUser();
  virtual ~CMD_GR_KickUser();

  CMD_GR_KickUser(const CMD_GR_KickUser& from);

  inline CMD_GR_KickUser& operator=(const CMD_GR_KickUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GR_KickUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GR_KickUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GR_KickUser* other);

  // implements Message ----------------------------------------------

  CMD_GR_KickUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GR_KickUser& from);
  void MergeFrom(const CMD_GR_KickUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 targetUserId = 1;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GR_KickUser)
 private:
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();

  ::google::protobuf::int32 targetuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_KickUser* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GR_UserInfoReq : public ::google::protobuf::MessageLite {
 public:
  CMD_GR_UserInfoReq();
  virtual ~CMD_GR_UserInfoReq();

  CMD_GR_UserInfoReq(const CMD_GR_UserInfoReq& from);

  inline CMD_GR_UserInfoReq& operator=(const CMD_GR_UserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GR_UserInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GR_UserInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GR_UserInfoReq* other);

  // implements Message ----------------------------------------------

  CMD_GR_UserInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GR_UserInfoReq& from);
  void MergeFrom(const CMD_GR_UserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userIdReq = 1;
  inline bool has_useridreq() const;
  inline void clear_useridreq();
  static const int kUserIdReqFieldNumber = 1;
  inline ::google::protobuf::int32 useridreq() const;
  inline void set_useridreq(::google::protobuf::int32 value);

  // required int32 tablePos = 2;
  inline bool has_tablepos() const;
  inline void clear_tablepos();
  static const int kTablePosFieldNumber = 2;
  inline ::google::protobuf::int32 tablepos() const;
  inline void set_tablepos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GR_UserInfoReq)
 private:
  inline void set_has_useridreq();
  inline void clear_has_useridreq();
  inline void set_has_tablepos();
  inline void clear_has_tablepos();

  ::google::protobuf::int32 useridreq_;
  ::google::protobuf::int32 tablepos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_UserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GR_ChairUserInfoReq : public ::google::protobuf::MessageLite {
 public:
  CMD_GR_ChairUserInfoReq();
  virtual ~CMD_GR_ChairUserInfoReq();

  CMD_GR_ChairUserInfoReq(const CMD_GR_ChairUserInfoReq& from);

  inline CMD_GR_ChairUserInfoReq& operator=(const CMD_GR_ChairUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GR_ChairUserInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GR_ChairUserInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GR_ChairUserInfoReq* other);

  // implements Message ----------------------------------------------

  CMD_GR_ChairUserInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GR_ChairUserInfoReq& from);
  void MergeFrom(const CMD_GR_ChairUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableId = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 chairId = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIdFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GR_ChairUserInfoReq)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_chairid();
  inline void clear_has_chairid();

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GR_ChairUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GF_GameOption : public ::google::protobuf::MessageLite {
 public:
  CMD_GF_GameOption();
  virtual ~CMD_GF_GameOption();

  CMD_GF_GameOption(const CMD_GF_GameOption& from);

  inline CMD_GF_GameOption& operator=(const CMD_GF_GameOption& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GF_GameOption& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GF_GameOption* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GF_GameOption* other);

  // implements Message ----------------------------------------------

  CMD_GF_GameOption* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GF_GameOption& from);
  void MergeFrom(const CMD_GF_GameOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 frameVersion = 1;
  inline bool has_frameversion() const;
  inline void clear_frameversion();
  static const int kFrameVersionFieldNumber = 1;
  inline ::google::protobuf::int32 frameversion() const;
  inline void set_frameversion(::google::protobuf::int32 value);

  // optional int32 clientVersion = 2;
  inline bool has_clientversion() const;
  inline void clear_clientversion();
  static const int kClientVersionFieldNumber = 2;
  inline ::google::protobuf::int32 clientversion() const;
  inline void set_clientversion(::google::protobuf::int32 value);

  // required int32 setScore = 3;
  inline bool has_setscore() const;
  inline void clear_setscore();
  static const int kSetScoreFieldNumber = 3;
  inline ::google::protobuf::int32 setscore() const;
  inline void set_setscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GF_GameOption)
 private:
  inline void set_has_frameversion();
  inline void clear_has_frameversion();
  inline void set_has_clientversion();
  inline void clear_has_clientversion();
  inline void set_has_setscore();
  inline void clear_has_setscore();

  ::google::protobuf::int32 frameversion_;
  ::google::protobuf::int32 clientversion_;
  ::google::protobuf::int32 setscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GF_GameOption* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GF_C_UserChat : public ::google::protobuf::MessageLite {
 public:
  CMD_GF_C_UserChat();
  virtual ~CMD_GF_C_UserChat();

  CMD_GF_C_UserChat(const CMD_GF_C_UserChat& from);

  inline CMD_GF_C_UserChat& operator=(const CMD_GF_C_UserChat& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GF_C_UserChat& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GF_C_UserChat* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GF_C_UserChat* other);

  // implements Message ----------------------------------------------

  CMD_GF_C_UserChat* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GF_C_UserChat& from);
  void MergeFrom(const CMD_GF_C_UserChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chatColor = 1;
  inline bool has_chatcolor() const;
  inline void clear_chatcolor();
  static const int kChatColorFieldNumber = 1;
  inline ::google::protobuf::int32 chatcolor() const;
  inline void set_chatcolor(::google::protobuf::int32 value);

  // required int32 sendUserId = 2;
  inline bool has_senduserid() const;
  inline void clear_senduserid();
  static const int kSendUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 senduserid() const;
  inline void set_senduserid(::google::protobuf::int32 value);

  // required int32 targetUserId = 3;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int32 value);

  // required string chatString = 4;
  inline bool has_chatstring() const;
  inline void clear_chatstring();
  static const int kChatStringFieldNumber = 4;
  inline const ::std::string& chatstring() const;
  inline void set_chatstring(const ::std::string& value);
  inline void set_chatstring(const char* value);
  inline void set_chatstring(const char* value, size_t size);
  inline ::std::string* mutable_chatstring();
  inline ::std::string* release_chatstring();
  inline void set_allocated_chatstring(::std::string* chatstring);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GF_C_UserChat)
 private:
  inline void set_has_chatcolor();
  inline void clear_has_chatcolor();
  inline void set_has_senduserid();
  inline void clear_has_senduserid();
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();
  inline void set_has_chatstring();
  inline void clear_has_chatstring();

  ::google::protobuf::int32 chatcolor_;
  ::google::protobuf::int32 senduserid_;
  ::std::string* chatstring_;
  ::google::protobuf::int32 targetuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GF_C_UserChat* default_instance_;
};
// -------------------------------------------------------------------

class CMD_GF_C_UserExpression : public ::google::protobuf::MessageLite {
 public:
  CMD_GF_C_UserExpression();
  virtual ~CMD_GF_C_UserExpression();

  CMD_GF_C_UserExpression(const CMD_GF_C_UserExpression& from);

  inline CMD_GF_C_UserExpression& operator=(const CMD_GF_C_UserExpression& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMD_GF_C_UserExpression& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMD_GF_C_UserExpression* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMD_GF_C_UserExpression* other);

  // implements Message ----------------------------------------------

  CMD_GF_C_UserExpression* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMD_GF_C_UserExpression& from);
  void MergeFrom(const CMD_GF_C_UserExpression& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 itemIndex = 1;
  inline bool has_itemindex() const;
  inline void clear_itemindex();
  static const int kItemIndexFieldNumber = 1;
  inline ::google::protobuf::int32 itemindex() const;
  inline void set_itemindex(::google::protobuf::int32 value);

  // required int32 sendUserId = 2;
  inline bool has_senduserid() const;
  inline void clear_senduserid();
  static const int kSendUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 senduserid() const;
  inline void set_senduserid(::google::protobuf::int32 value);

  // required int32 targetUserId = 3;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:room.c2s.CMD_GF_C_UserExpression)
 private:
  inline void set_has_itemindex();
  inline void clear_has_itemindex();
  inline void set_has_senduserid();
  inline void clear_has_senduserid();
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();

  ::google::protobuf::int32 itemindex_;
  ::google::protobuf::int32 senduserid_;
  ::google::protobuf::int32 targetuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  #endif
  friend void protobuf_AssignDesc_Room_2froom_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static CMD_GF_C_UserExpression* default_instance_;
};
// ===================================================================


// ===================================================================

// CMD_GR_LogonUserID

// required int32 plazaVersion = 1;
inline bool CMD_GR_LogonUserID::has_plazaversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_LogonUserID::set_has_plazaversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_LogonUserID::clear_has_plazaversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_LogonUserID::clear_plazaversion() {
  plazaversion_ = 0;
  clear_has_plazaversion();
}
inline ::google::protobuf::int32 CMD_GR_LogonUserID::plazaversion() const {
  return plazaversion_;
}
inline void CMD_GR_LogonUserID::set_plazaversion(::google::protobuf::int32 value) {
  set_has_plazaversion();
  plazaversion_ = value;
}

// required int32 frameVersion = 2;
inline bool CMD_GR_LogonUserID::has_frameversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_LogonUserID::set_has_frameversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_LogonUserID::clear_has_frameversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_LogonUserID::clear_frameversion() {
  frameversion_ = 0;
  clear_has_frameversion();
}
inline ::google::protobuf::int32 CMD_GR_LogonUserID::frameversion() const {
  return frameversion_;
}
inline void CMD_GR_LogonUserID::set_frameversion(::google::protobuf::int32 value) {
  set_has_frameversion();
  frameversion_ = value;
}

// required int32 processVersion = 3;
inline bool CMD_GR_LogonUserID::has_processversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GR_LogonUserID::set_has_processversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GR_LogonUserID::clear_has_processversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GR_LogonUserID::clear_processversion() {
  processversion_ = 0;
  clear_has_processversion();
}
inline ::google::protobuf::int32 CMD_GR_LogonUserID::processversion() const {
  return processversion_;
}
inline void CMD_GR_LogonUserID::set_processversion(::google::protobuf::int32 value) {
  set_has_processversion();
  processversion_ = value;
}

// required int32 userId = 4;
inline bool CMD_GR_LogonUserID::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GR_LogonUserID::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GR_LogonUserID::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GR_LogonUserID::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 CMD_GR_LogonUserID::userid() const {
  return userid_;
}
inline void CMD_GR_LogonUserID::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required string password = 5;
inline bool CMD_GR_LogonUserID::has_password() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GR_LogonUserID::set_has_password() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GR_LogonUserID::clear_has_password() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GR_LogonUserID::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& CMD_GR_LogonUserID::password() const {
  return *password_;
}
inline void CMD_GR_LogonUserID::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CMD_GR_LogonUserID::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CMD_GR_LogonUserID::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GR_LogonUserID::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* CMD_GR_LogonUserID::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GR_LogonUserID::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string machineId = 6;
inline bool CMD_GR_LogonUserID::has_machineid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GR_LogonUserID::set_has_machineid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GR_LogonUserID::clear_has_machineid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GR_LogonUserID::clear_machineid() {
  if (machineid_ != &::google::protobuf::internal::kEmptyString) {
    machineid_->clear();
  }
  clear_has_machineid();
}
inline const ::std::string& CMD_GR_LogonUserID::machineid() const {
  return *machineid_;
}
inline void CMD_GR_LogonUserID::set_machineid(const ::std::string& value) {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  machineid_->assign(value);
}
inline void CMD_GR_LogonUserID::set_machineid(const char* value) {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  machineid_->assign(value);
}
inline void CMD_GR_LogonUserID::set_machineid(const char* value, size_t size) {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  machineid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GR_LogonUserID::mutable_machineid() {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  return machineid_;
}
inline ::std::string* CMD_GR_LogonUserID::release_machineid() {
  clear_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machineid_;
    machineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GR_LogonUserID::set_allocated_machineid(::std::string* machineid) {
  if (machineid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineid_;
  }
  if (machineid) {
    set_has_machineid();
    machineid_ = machineid;
  } else {
    clear_has_machineid();
    machineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 kindId = 7;
inline bool CMD_GR_LogonUserID::has_kindid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMD_GR_LogonUserID::set_has_kindid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMD_GR_LogonUserID::clear_has_kindid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMD_GR_LogonUserID::clear_kindid() {
  kindid_ = 0;
  clear_has_kindid();
}
inline ::google::protobuf::int32 CMD_GR_LogonUserID::kindid() const {
  return kindid_;
}
inline void CMD_GR_LogonUserID::set_kindid(::google::protobuf::int32 value) {
  set_has_kindid();
  kindid_ = value;
}

// -------------------------------------------------------------------

// CMD_GR_UserRule

// required int32 ruleMask = 1;
inline bool CMD_GR_UserRule::has_rulemask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_UserRule::set_has_rulemask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_UserRule::clear_has_rulemask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_UserRule::clear_rulemask() {
  rulemask_ = 0;
  clear_has_rulemask();
}
inline ::google::protobuf::int32 CMD_GR_UserRule::rulemask() const {
  return rulemask_;
}
inline void CMD_GR_UserRule::set_rulemask(::google::protobuf::int32 value) {
  set_has_rulemask();
  rulemask_ = value;
}

// required int32 minWinRate = 2;
inline bool CMD_GR_UserRule::has_minwinrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_UserRule::set_has_minwinrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_UserRule::clear_has_minwinrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_UserRule::clear_minwinrate() {
  minwinrate_ = 0;
  clear_has_minwinrate();
}
inline ::google::protobuf::int32 CMD_GR_UserRule::minwinrate() const {
  return minwinrate_;
}
inline void CMD_GR_UserRule::set_minwinrate(::google::protobuf::int32 value) {
  set_has_minwinrate();
  minwinrate_ = value;
}

// required int32 maxFleeRate = 3;
inline bool CMD_GR_UserRule::has_maxfleerate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GR_UserRule::set_has_maxfleerate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GR_UserRule::clear_has_maxfleerate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GR_UserRule::clear_maxfleerate() {
  maxfleerate_ = 0;
  clear_has_maxfleerate();
}
inline ::google::protobuf::int32 CMD_GR_UserRule::maxfleerate() const {
  return maxfleerate_;
}
inline void CMD_GR_UserRule::set_maxfleerate(::google::protobuf::int32 value) {
  set_has_maxfleerate();
  maxfleerate_ = value;
}

// required int32 maxGameScore = 4;
inline bool CMD_GR_UserRule::has_maxgamescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GR_UserRule::set_has_maxgamescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GR_UserRule::clear_has_maxgamescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GR_UserRule::clear_maxgamescore() {
  maxgamescore_ = 0;
  clear_has_maxgamescore();
}
inline ::google::protobuf::int32 CMD_GR_UserRule::maxgamescore() const {
  return maxgamescore_;
}
inline void CMD_GR_UserRule::set_maxgamescore(::google::protobuf::int32 value) {
  set_has_maxgamescore();
  maxgamescore_ = value;
}

// required int32 minGameScore = 5;
inline bool CMD_GR_UserRule::has_mingamescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMD_GR_UserRule::set_has_mingamescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMD_GR_UserRule::clear_has_mingamescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMD_GR_UserRule::clear_mingamescore() {
  mingamescore_ = 0;
  clear_has_mingamescore();
}
inline ::google::protobuf::int32 CMD_GR_UserRule::mingamescore() const {
  return mingamescore_;
}
inline void CMD_GR_UserRule::set_mingamescore(::google::protobuf::int32 value) {
  set_has_mingamescore();
  mingamescore_ = value;
}

// optional string tablePassword = 6;
inline bool CMD_GR_UserRule::has_tablepassword() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMD_GR_UserRule::set_has_tablepassword() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMD_GR_UserRule::clear_has_tablepassword() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMD_GR_UserRule::clear_tablepassword() {
  if (tablepassword_ != &::google::protobuf::internal::kEmptyString) {
    tablepassword_->clear();
  }
  clear_has_tablepassword();
}
inline const ::std::string& CMD_GR_UserRule::tablepassword() const {
  return *tablepassword_;
}
inline void CMD_GR_UserRule::set_tablepassword(const ::std::string& value) {
  set_has_tablepassword();
  if (tablepassword_ == &::google::protobuf::internal::kEmptyString) {
    tablepassword_ = new ::std::string;
  }
  tablepassword_->assign(value);
}
inline void CMD_GR_UserRule::set_tablepassword(const char* value) {
  set_has_tablepassword();
  if (tablepassword_ == &::google::protobuf::internal::kEmptyString) {
    tablepassword_ = new ::std::string;
  }
  tablepassword_->assign(value);
}
inline void CMD_GR_UserRule::set_tablepassword(const char* value, size_t size) {
  set_has_tablepassword();
  if (tablepassword_ == &::google::protobuf::internal::kEmptyString) {
    tablepassword_ = new ::std::string;
  }
  tablepassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GR_UserRule::mutable_tablepassword() {
  set_has_tablepassword();
  if (tablepassword_ == &::google::protobuf::internal::kEmptyString) {
    tablepassword_ = new ::std::string;
  }
  return tablepassword_;
}
inline ::std::string* CMD_GR_UserRule::release_tablepassword() {
  clear_has_tablepassword();
  if (tablepassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablepassword_;
    tablepassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GR_UserRule::set_allocated_tablepassword(::std::string* tablepassword) {
  if (tablepassword_ != &::google::protobuf::internal::kEmptyString) {
    delete tablepassword_;
  }
  if (tablepassword) {
    set_has_tablepassword();
    tablepassword_ = tablepassword;
  } else {
    clear_has_tablepassword();
    tablepassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GR_UserSitDown

// required int32 tableId = 1;
inline bool CMD_GR_UserSitDown::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_UserSitDown::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_UserSitDown::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_UserSitDown::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 CMD_GR_UserSitDown::tableid() const {
  return tableid_;
}
inline void CMD_GR_UserSitDown::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// required int32 chairId = 2;
inline bool CMD_GR_UserSitDown::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_UserSitDown::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_UserSitDown::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_UserSitDown::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 CMD_GR_UserSitDown::chairid() const {
  return chairid_;
}
inline void CMD_GR_UserSitDown::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional string password = 3;
inline bool CMD_GR_UserSitDown::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GR_UserSitDown::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GR_UserSitDown::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GR_UserSitDown::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& CMD_GR_UserSitDown::password() const {
  return *password_;
}
inline void CMD_GR_UserSitDown::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CMD_GR_UserSitDown::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CMD_GR_UserSitDown::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GR_UserSitDown::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* CMD_GR_UserSitDown::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GR_UserSitDown::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GR_UserStandUp

// required int32 tableId = 1;
inline bool CMD_GR_UserStandUp::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_UserStandUp::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_UserStandUp::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_UserStandUp::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 CMD_GR_UserStandUp::tableid() const {
  return tableid_;
}
inline void CMD_GR_UserStandUp::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// required int32 chairId = 2;
inline bool CMD_GR_UserStandUp::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_UserStandUp::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_UserStandUp::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_UserStandUp::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 CMD_GR_UserStandUp::chairid() const {
  return chairid_;
}
inline void CMD_GR_UserStandUp::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// required int32 forceLeave = 3;
inline bool CMD_GR_UserStandUp::has_forceleave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GR_UserStandUp::set_has_forceleave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GR_UserStandUp::clear_has_forceleave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GR_UserStandUp::clear_forceleave() {
  forceleave_ = 0;
  clear_has_forceleave();
}
inline ::google::protobuf::int32 CMD_GR_UserStandUp::forceleave() const {
  return forceleave_;
}
inline void CMD_GR_UserStandUp::set_forceleave(::google::protobuf::int32 value) {
  set_has_forceleave();
  forceleave_ = value;
}

// -------------------------------------------------------------------

// CMD_GR_C_UserChat

// required int32 chatColor = 1;
inline bool CMD_GR_C_UserChat::has_chatcolor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_C_UserChat::set_has_chatcolor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_C_UserChat::clear_has_chatcolor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_C_UserChat::clear_chatcolor() {
  chatcolor_ = 0;
  clear_has_chatcolor();
}
inline ::google::protobuf::int32 CMD_GR_C_UserChat::chatcolor() const {
  return chatcolor_;
}
inline void CMD_GR_C_UserChat::set_chatcolor(::google::protobuf::int32 value) {
  set_has_chatcolor();
  chatcolor_ = value;
}

// required int32 sendUserId = 2;
inline bool CMD_GR_C_UserChat::has_senduserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_C_UserChat::set_has_senduserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_C_UserChat::clear_has_senduserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_C_UserChat::clear_senduserid() {
  senduserid_ = 0;
  clear_has_senduserid();
}
inline ::google::protobuf::int32 CMD_GR_C_UserChat::senduserid() const {
  return senduserid_;
}
inline void CMD_GR_C_UserChat::set_senduserid(::google::protobuf::int32 value) {
  set_has_senduserid();
  senduserid_ = value;
}

// required int32 targetUserId = 3;
inline bool CMD_GR_C_UserChat::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GR_C_UserChat::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GR_C_UserChat::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GR_C_UserChat::clear_targetuserid() {
  targetuserid_ = 0;
  clear_has_targetuserid();
}
inline ::google::protobuf::int32 CMD_GR_C_UserChat::targetuserid() const {
  return targetuserid_;
}
inline void CMD_GR_C_UserChat::set_targetuserid(::google::protobuf::int32 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// required string chatString = 4;
inline bool CMD_GR_C_UserChat::has_chatstring() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GR_C_UserChat::set_has_chatstring() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GR_C_UserChat::clear_has_chatstring() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GR_C_UserChat::clear_chatstring() {
  if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
    chatstring_->clear();
  }
  clear_has_chatstring();
}
inline const ::std::string& CMD_GR_C_UserChat::chatstring() const {
  return *chatstring_;
}
inline void CMD_GR_C_UserChat::set_chatstring(const ::std::string& value) {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  chatstring_->assign(value);
}
inline void CMD_GR_C_UserChat::set_chatstring(const char* value) {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  chatstring_->assign(value);
}
inline void CMD_GR_C_UserChat::set_chatstring(const char* value, size_t size) {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  chatstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GR_C_UserChat::mutable_chatstring() {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  return chatstring_;
}
inline ::std::string* CMD_GR_C_UserChat::release_chatstring() {
  clear_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chatstring_;
    chatstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GR_C_UserChat::set_allocated_chatstring(::std::string* chatstring) {
  if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
    delete chatstring_;
  }
  if (chatstring) {
    set_has_chatstring();
    chatstring_ = chatstring;
  } else {
    clear_has_chatstring();
    chatstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GR_C_UserExpression

// required int32 itemIndex = 1;
inline bool CMD_GR_C_UserExpression::has_itemindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_C_UserExpression::set_has_itemindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_C_UserExpression::clear_has_itemindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_C_UserExpression::clear_itemindex() {
  itemindex_ = 0;
  clear_has_itemindex();
}
inline ::google::protobuf::int32 CMD_GR_C_UserExpression::itemindex() const {
  return itemindex_;
}
inline void CMD_GR_C_UserExpression::set_itemindex(::google::protobuf::int32 value) {
  set_has_itemindex();
  itemindex_ = value;
}

// required int32 sendUserId = 2;
inline bool CMD_GR_C_UserExpression::has_senduserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_C_UserExpression::set_has_senduserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_C_UserExpression::clear_has_senduserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_C_UserExpression::clear_senduserid() {
  senduserid_ = 0;
  clear_has_senduserid();
}
inline ::google::protobuf::int32 CMD_GR_C_UserExpression::senduserid() const {
  return senduserid_;
}
inline void CMD_GR_C_UserExpression::set_senduserid(::google::protobuf::int32 value) {
  set_has_senduserid();
  senduserid_ = value;
}

// required int32 targetUserId = 3;
inline bool CMD_GR_C_UserExpression::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GR_C_UserExpression::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GR_C_UserExpression::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GR_C_UserExpression::clear_targetuserid() {
  targetuserid_ = 0;
  clear_has_targetuserid();
}
inline ::google::protobuf::int32 CMD_GR_C_UserExpression::targetuserid() const {
  return targetuserid_;
}
inline void CMD_GR_C_UserExpression::set_targetuserid(::google::protobuf::int32 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// -------------------------------------------------------------------

// CMD_GR_KickUser

// required int32 targetUserId = 1;
inline bool CMD_GR_KickUser::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_KickUser::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_KickUser::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_KickUser::clear_targetuserid() {
  targetuserid_ = 0;
  clear_has_targetuserid();
}
inline ::google::protobuf::int32 CMD_GR_KickUser::targetuserid() const {
  return targetuserid_;
}
inline void CMD_GR_KickUser::set_targetuserid(::google::protobuf::int32 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// -------------------------------------------------------------------

// CMD_GR_UserInfoReq

// required int32 userIdReq = 1;
inline bool CMD_GR_UserInfoReq::has_useridreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_UserInfoReq::set_has_useridreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_UserInfoReq::clear_has_useridreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_UserInfoReq::clear_useridreq() {
  useridreq_ = 0;
  clear_has_useridreq();
}
inline ::google::protobuf::int32 CMD_GR_UserInfoReq::useridreq() const {
  return useridreq_;
}
inline void CMD_GR_UserInfoReq::set_useridreq(::google::protobuf::int32 value) {
  set_has_useridreq();
  useridreq_ = value;
}

// required int32 tablePos = 2;
inline bool CMD_GR_UserInfoReq::has_tablepos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_UserInfoReq::set_has_tablepos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_UserInfoReq::clear_has_tablepos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_UserInfoReq::clear_tablepos() {
  tablepos_ = 0;
  clear_has_tablepos();
}
inline ::google::protobuf::int32 CMD_GR_UserInfoReq::tablepos() const {
  return tablepos_;
}
inline void CMD_GR_UserInfoReq::set_tablepos(::google::protobuf::int32 value) {
  set_has_tablepos();
  tablepos_ = value;
}

// -------------------------------------------------------------------

// CMD_GR_ChairUserInfoReq

// required int32 tableId = 1;
inline bool CMD_GR_ChairUserInfoReq::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GR_ChairUserInfoReq::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GR_ChairUserInfoReq::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GR_ChairUserInfoReq::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 CMD_GR_ChairUserInfoReq::tableid() const {
  return tableid_;
}
inline void CMD_GR_ChairUserInfoReq::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// required int32 chairId = 2;
inline bool CMD_GR_ChairUserInfoReq::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GR_ChairUserInfoReq::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GR_ChairUserInfoReq::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GR_ChairUserInfoReq::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 CMD_GR_ChairUserInfoReq::chairid() const {
  return chairid_;
}
inline void CMD_GR_ChairUserInfoReq::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// -------------------------------------------------------------------

// CMD_GF_GameOption

// optional int32 frameVersion = 1;
inline bool CMD_GF_GameOption::has_frameversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GF_GameOption::set_has_frameversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GF_GameOption::clear_has_frameversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GF_GameOption::clear_frameversion() {
  frameversion_ = 0;
  clear_has_frameversion();
}
inline ::google::protobuf::int32 CMD_GF_GameOption::frameversion() const {
  return frameversion_;
}
inline void CMD_GF_GameOption::set_frameversion(::google::protobuf::int32 value) {
  set_has_frameversion();
  frameversion_ = value;
}

// optional int32 clientVersion = 2;
inline bool CMD_GF_GameOption::has_clientversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GF_GameOption::set_has_clientversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GF_GameOption::clear_has_clientversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GF_GameOption::clear_clientversion() {
  clientversion_ = 0;
  clear_has_clientversion();
}
inline ::google::protobuf::int32 CMD_GF_GameOption::clientversion() const {
  return clientversion_;
}
inline void CMD_GF_GameOption::set_clientversion(::google::protobuf::int32 value) {
  set_has_clientversion();
  clientversion_ = value;
}

// required int32 setScore = 3;
inline bool CMD_GF_GameOption::has_setscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GF_GameOption::set_has_setscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GF_GameOption::clear_has_setscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GF_GameOption::clear_setscore() {
  setscore_ = 0;
  clear_has_setscore();
}
inline ::google::protobuf::int32 CMD_GF_GameOption::setscore() const {
  return setscore_;
}
inline void CMD_GF_GameOption::set_setscore(::google::protobuf::int32 value) {
  set_has_setscore();
  setscore_ = value;
}

// -------------------------------------------------------------------

// CMD_GF_C_UserChat

// required int32 chatColor = 1;
inline bool CMD_GF_C_UserChat::has_chatcolor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GF_C_UserChat::set_has_chatcolor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GF_C_UserChat::clear_has_chatcolor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GF_C_UserChat::clear_chatcolor() {
  chatcolor_ = 0;
  clear_has_chatcolor();
}
inline ::google::protobuf::int32 CMD_GF_C_UserChat::chatcolor() const {
  return chatcolor_;
}
inline void CMD_GF_C_UserChat::set_chatcolor(::google::protobuf::int32 value) {
  set_has_chatcolor();
  chatcolor_ = value;
}

// required int32 sendUserId = 2;
inline bool CMD_GF_C_UserChat::has_senduserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GF_C_UserChat::set_has_senduserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GF_C_UserChat::clear_has_senduserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GF_C_UserChat::clear_senduserid() {
  senduserid_ = 0;
  clear_has_senduserid();
}
inline ::google::protobuf::int32 CMD_GF_C_UserChat::senduserid() const {
  return senduserid_;
}
inline void CMD_GF_C_UserChat::set_senduserid(::google::protobuf::int32 value) {
  set_has_senduserid();
  senduserid_ = value;
}

// required int32 targetUserId = 3;
inline bool CMD_GF_C_UserChat::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GF_C_UserChat::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GF_C_UserChat::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GF_C_UserChat::clear_targetuserid() {
  targetuserid_ = 0;
  clear_has_targetuserid();
}
inline ::google::protobuf::int32 CMD_GF_C_UserChat::targetuserid() const {
  return targetuserid_;
}
inline void CMD_GF_C_UserChat::set_targetuserid(::google::protobuf::int32 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// required string chatString = 4;
inline bool CMD_GF_C_UserChat::has_chatstring() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMD_GF_C_UserChat::set_has_chatstring() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMD_GF_C_UserChat::clear_has_chatstring() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMD_GF_C_UserChat::clear_chatstring() {
  if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
    chatstring_->clear();
  }
  clear_has_chatstring();
}
inline const ::std::string& CMD_GF_C_UserChat::chatstring() const {
  return *chatstring_;
}
inline void CMD_GF_C_UserChat::set_chatstring(const ::std::string& value) {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  chatstring_->assign(value);
}
inline void CMD_GF_C_UserChat::set_chatstring(const char* value) {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  chatstring_->assign(value);
}
inline void CMD_GF_C_UserChat::set_chatstring(const char* value, size_t size) {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  chatstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMD_GF_C_UserChat::mutable_chatstring() {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  return chatstring_;
}
inline ::std::string* CMD_GF_C_UserChat::release_chatstring() {
  clear_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chatstring_;
    chatstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMD_GF_C_UserChat::set_allocated_chatstring(::std::string* chatstring) {
  if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
    delete chatstring_;
  }
  if (chatstring) {
    set_has_chatstring();
    chatstring_ = chatstring;
  } else {
    clear_has_chatstring();
    chatstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMD_GF_C_UserExpression

// required int32 itemIndex = 1;
inline bool CMD_GF_C_UserExpression::has_itemindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMD_GF_C_UserExpression::set_has_itemindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMD_GF_C_UserExpression::clear_has_itemindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMD_GF_C_UserExpression::clear_itemindex() {
  itemindex_ = 0;
  clear_has_itemindex();
}
inline ::google::protobuf::int32 CMD_GF_C_UserExpression::itemindex() const {
  return itemindex_;
}
inline void CMD_GF_C_UserExpression::set_itemindex(::google::protobuf::int32 value) {
  set_has_itemindex();
  itemindex_ = value;
}

// required int32 sendUserId = 2;
inline bool CMD_GF_C_UserExpression::has_senduserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMD_GF_C_UserExpression::set_has_senduserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMD_GF_C_UserExpression::clear_has_senduserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMD_GF_C_UserExpression::clear_senduserid() {
  senduserid_ = 0;
  clear_has_senduserid();
}
inline ::google::protobuf::int32 CMD_GF_C_UserExpression::senduserid() const {
  return senduserid_;
}
inline void CMD_GF_C_UserExpression::set_senduserid(::google::protobuf::int32 value) {
  set_has_senduserid();
  senduserid_ = value;
}

// required int32 targetUserId = 3;
inline bool CMD_GF_C_UserExpression::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMD_GF_C_UserExpression::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMD_GF_C_UserExpression::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMD_GF_C_UserExpression::clear_targetuserid() {
  targetuserid_ = 0;
  clear_has_targetuserid();
}
inline ::google::protobuf::int32 CMD_GF_C_UserExpression::targetuserid() const {
  return targetuserid_;
}
inline void CMD_GF_C_UserExpression::set_targetuserid(::google::protobuf::int32 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace c2s
}  // namespace room

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Room_2froom_5fc2s_2eproto__INCLUDED

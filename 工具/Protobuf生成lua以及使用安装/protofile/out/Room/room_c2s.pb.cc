// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Room/room_c2s.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Room/room_c2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace room {
namespace c2s {

void protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto() {
  delete CMD_GR_LogonUserID::default_instance_;
  delete CMD_GR_UserRule::default_instance_;
  delete CMD_GR_UserSitDown::default_instance_;
  delete CMD_GR_UserStandUp::default_instance_;
  delete CMD_GR_C_UserChat::default_instance_;
  delete CMD_GR_C_UserExpression::default_instance_;
  delete CMD_GR_KickUser::default_instance_;
  delete CMD_GR_UserInfoReq::default_instance_;
  delete CMD_GR_ChairUserInfoReq::default_instance_;
  delete CMD_GF_GameOption::default_instance_;
  delete CMD_GF_C_UserChat::default_instance_;
  delete CMD_GF_C_UserExpression::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Room_2froom_5fc2s_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CMD_GR_LogonUserID::default_instance_ = new CMD_GR_LogonUserID();
  CMD_GR_UserRule::default_instance_ = new CMD_GR_UserRule();
  CMD_GR_UserSitDown::default_instance_ = new CMD_GR_UserSitDown();
  CMD_GR_UserStandUp::default_instance_ = new CMD_GR_UserStandUp();
  CMD_GR_C_UserChat::default_instance_ = new CMD_GR_C_UserChat();
  CMD_GR_C_UserExpression::default_instance_ = new CMD_GR_C_UserExpression();
  CMD_GR_KickUser::default_instance_ = new CMD_GR_KickUser();
  CMD_GR_UserInfoReq::default_instance_ = new CMD_GR_UserInfoReq();
  CMD_GR_ChairUserInfoReq::default_instance_ = new CMD_GR_ChairUserInfoReq();
  CMD_GF_GameOption::default_instance_ = new CMD_GF_GameOption();
  CMD_GF_C_UserChat::default_instance_ = new CMD_GF_C_UserChat();
  CMD_GF_C_UserExpression::default_instance_ = new CMD_GF_C_UserExpression();
  CMD_GR_LogonUserID::default_instance_->InitAsDefaultInstance();
  CMD_GR_UserRule::default_instance_->InitAsDefaultInstance();
  CMD_GR_UserSitDown::default_instance_->InitAsDefaultInstance();
  CMD_GR_UserStandUp::default_instance_->InitAsDefaultInstance();
  CMD_GR_C_UserChat::default_instance_->InitAsDefaultInstance();
  CMD_GR_C_UserExpression::default_instance_->InitAsDefaultInstance();
  CMD_GR_KickUser::default_instance_->InitAsDefaultInstance();
  CMD_GR_UserInfoReq::default_instance_->InitAsDefaultInstance();
  CMD_GR_ChairUserInfoReq::default_instance_->InitAsDefaultInstance();
  CMD_GF_GameOption::default_instance_->InitAsDefaultInstance();
  CMD_GF_C_UserChat::default_instance_->InitAsDefaultInstance();
  CMD_GF_C_UserExpression::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Room_2froom_5fc2s_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Room_2froom_5fc2s_2eproto_once_);
void protobuf_AddDesc_Room_2froom_5fc2s_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Room_2froom_5fc2s_2eproto_once_,
                 &protobuf_AddDesc_Room_2froom_5fc2s_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Room_2froom_5fc2s_2eproto {
  StaticDescriptorInitializer_Room_2froom_5fc2s_2eproto() {
    protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
  }
} static_descriptor_initializer_Room_2froom_5fc2s_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_LogonUserID::kPlazaVersionFieldNumber;
const int CMD_GR_LogonUserID::kFrameVersionFieldNumber;
const int CMD_GR_LogonUserID::kProcessVersionFieldNumber;
const int CMD_GR_LogonUserID::kUserIdFieldNumber;
const int CMD_GR_LogonUserID::kPasswordFieldNumber;
const int CMD_GR_LogonUserID::kMachineIdFieldNumber;
const int CMD_GR_LogonUserID::kKindIdFieldNumber;
#endif  // !_MSC_VER

CMD_GR_LogonUserID::CMD_GR_LogonUserID()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_LogonUserID::InitAsDefaultInstance() {
}

CMD_GR_LogonUserID::CMD_GR_LogonUserID(const CMD_GR_LogonUserID& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_LogonUserID::SharedCtor() {
  _cached_size_ = 0;
  plazaversion_ = 0;
  frameversion_ = 0;
  processversion_ = 0;
  userid_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kindid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_LogonUserID::~CMD_GR_LogonUserID() {
  SharedDtor();
}

void CMD_GR_LogonUserID::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (machineid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_LogonUserID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_LogonUserID& CMD_GR_LogonUserID::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_LogonUserID* CMD_GR_LogonUserID::default_instance_ = NULL;

CMD_GR_LogonUserID* CMD_GR_LogonUserID::New() const {
  return new CMD_GR_LogonUserID;
}

void CMD_GR_LogonUserID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plazaversion_ = 0;
    frameversion_ = 0;
    processversion_ = 0;
    userid_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_machineid()) {
      if (machineid_ != &::google::protobuf::internal::kEmptyString) {
        machineid_->clear();
      }
    }
    kindid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_LogonUserID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plazaVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plazaversion_)));
          set_has_plazaversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frameVersion;
        break;
      }

      // required int32 frameVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameversion_)));
          set_has_frameversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_processVersion;
        break;
      }

      // required int32 processVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processversion_)));
          set_has_processversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userId;
        break;
      }

      // required int32 userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_password;
        break;
      }

      // required string password = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_machineId;
        break;
      }

      // required string machineId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machineid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_kindId;
        break;
      }

      // required int32 kindId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kindId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kindid_)));
          set_has_kindid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_LogonUserID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 plazaVersion = 1;
  if (has_plazaversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plazaversion(), output);
  }

  // required int32 frameVersion = 2;
  if (has_frameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frameversion(), output);
  }

  // required int32 processVersion = 3;
  if (has_processversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->processversion(), output);
  }

  // required int32 userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userid(), output);
  }

  // required string password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->password(), output);
  }

  // required string machineId = 6;
  if (has_machineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->machineid(), output);
  }

  // required int32 kindId = 7;
  if (has_kindid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kindid(), output);
  }

}

int CMD_GR_LogonUserID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plazaVersion = 1;
    if (has_plazaversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plazaversion());
    }

    // required int32 frameVersion = 2;
    if (has_frameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameversion());
    }

    // required int32 processVersion = 3;
    if (has_processversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processversion());
    }

    // required int32 userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required string password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string machineId = 6;
    if (has_machineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machineid());
    }

    // required int32 kindId = 7;
    if (has_kindid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kindid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_LogonUserID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_LogonUserID*>(&from));
}

void CMD_GR_LogonUserID::MergeFrom(const CMD_GR_LogonUserID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plazaversion()) {
      set_plazaversion(from.plazaversion());
    }
    if (from.has_frameversion()) {
      set_frameversion(from.frameversion());
    }
    if (from.has_processversion()) {
      set_processversion(from.processversion());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_machineid()) {
      set_machineid(from.machineid());
    }
    if (from.has_kindid()) {
      set_kindid(from.kindid());
    }
  }
}

void CMD_GR_LogonUserID::CopyFrom(const CMD_GR_LogonUserID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_LogonUserID::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void CMD_GR_LogonUserID::Swap(CMD_GR_LogonUserID* other) {
  if (other != this) {
    std::swap(plazaversion_, other->plazaversion_);
    std::swap(frameversion_, other->frameversion_);
    std::swap(processversion_, other->processversion_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(machineid_, other->machineid_);
    std::swap(kindid_, other->kindid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_LogonUserID::GetTypeName() const {
  return "room.c2s.CMD_GR_LogonUserID";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_UserRule::kRuleMaskFieldNumber;
const int CMD_GR_UserRule::kMinWinRateFieldNumber;
const int CMD_GR_UserRule::kMaxFleeRateFieldNumber;
const int CMD_GR_UserRule::kMaxGameScoreFieldNumber;
const int CMD_GR_UserRule::kMinGameScoreFieldNumber;
const int CMD_GR_UserRule::kTablePasswordFieldNumber;
#endif  // !_MSC_VER

CMD_GR_UserRule::CMD_GR_UserRule()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_UserRule::InitAsDefaultInstance() {
}

CMD_GR_UserRule::CMD_GR_UserRule(const CMD_GR_UserRule& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_UserRule::SharedCtor() {
  _cached_size_ = 0;
  rulemask_ = 0;
  minwinrate_ = 0;
  maxfleerate_ = 0;
  maxgamescore_ = 0;
  mingamescore_ = 0;
  tablepassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_UserRule::~CMD_GR_UserRule() {
  SharedDtor();
}

void CMD_GR_UserRule::SharedDtor() {
  if (tablepassword_ != &::google::protobuf::internal::kEmptyString) {
    delete tablepassword_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_UserRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_UserRule& CMD_GR_UserRule::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_UserRule* CMD_GR_UserRule::default_instance_ = NULL;

CMD_GR_UserRule* CMD_GR_UserRule::New() const {
  return new CMD_GR_UserRule;
}

void CMD_GR_UserRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rulemask_ = 0;
    minwinrate_ = 0;
    maxfleerate_ = 0;
    maxgamescore_ = 0;
    mingamescore_ = 0;
    if (has_tablepassword()) {
      if (tablepassword_ != &::google::protobuf::internal::kEmptyString) {
        tablepassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_UserRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ruleMask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rulemask_)));
          set_has_rulemask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minWinRate;
        break;
      }

      // required int32 minWinRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minWinRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minwinrate_)));
          set_has_minwinrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxFleeRate;
        break;
      }

      // required int32 maxFleeRate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxFleeRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfleerate_)));
          set_has_maxfleerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxGameScore;
        break;
      }

      // required int32 maxGameScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxgamescore_)));
          set_has_maxgamescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minGameScore;
        break;
      }

      // required int32 minGameScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mingamescore_)));
          set_has_mingamescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tablePassword;
        break;
      }

      // optional string tablePassword = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablePassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablepassword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_UserRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ruleMask = 1;
  if (has_rulemask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rulemask(), output);
  }

  // required int32 minWinRate = 2;
  if (has_minwinrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minwinrate(), output);
  }

  // required int32 maxFleeRate = 3;
  if (has_maxfleerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxfleerate(), output);
  }

  // required int32 maxGameScore = 4;
  if (has_maxgamescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxgamescore(), output);
  }

  // required int32 minGameScore = 5;
  if (has_mingamescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mingamescore(), output);
  }

  // optional string tablePassword = 6;
  if (has_tablepassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tablepassword(), output);
  }

}

int CMD_GR_UserRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ruleMask = 1;
    if (has_rulemask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rulemask());
    }

    // required int32 minWinRate = 2;
    if (has_minwinrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minwinrate());
    }

    // required int32 maxFleeRate = 3;
    if (has_maxfleerate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfleerate());
    }

    // required int32 maxGameScore = 4;
    if (has_maxgamescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxgamescore());
    }

    // required int32 minGameScore = 5;
    if (has_mingamescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mingamescore());
    }

    // optional string tablePassword = 6;
    if (has_tablepassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablepassword());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_UserRule::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_UserRule*>(&from));
}

void CMD_GR_UserRule::MergeFrom(const CMD_GR_UserRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rulemask()) {
      set_rulemask(from.rulemask());
    }
    if (from.has_minwinrate()) {
      set_minwinrate(from.minwinrate());
    }
    if (from.has_maxfleerate()) {
      set_maxfleerate(from.maxfleerate());
    }
    if (from.has_maxgamescore()) {
      set_maxgamescore(from.maxgamescore());
    }
    if (from.has_mingamescore()) {
      set_mingamescore(from.mingamescore());
    }
    if (from.has_tablepassword()) {
      set_tablepassword(from.tablepassword());
    }
  }
}

void CMD_GR_UserRule::CopyFrom(const CMD_GR_UserRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_UserRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CMD_GR_UserRule::Swap(CMD_GR_UserRule* other) {
  if (other != this) {
    std::swap(rulemask_, other->rulemask_);
    std::swap(minwinrate_, other->minwinrate_);
    std::swap(maxfleerate_, other->maxfleerate_);
    std::swap(maxgamescore_, other->maxgamescore_);
    std::swap(mingamescore_, other->mingamescore_);
    std::swap(tablepassword_, other->tablepassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_UserRule::GetTypeName() const {
  return "room.c2s.CMD_GR_UserRule";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_UserSitDown::kTableIdFieldNumber;
const int CMD_GR_UserSitDown::kChairIdFieldNumber;
const int CMD_GR_UserSitDown::kPasswordFieldNumber;
#endif  // !_MSC_VER

CMD_GR_UserSitDown::CMD_GR_UserSitDown()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_UserSitDown::InitAsDefaultInstance() {
}

CMD_GR_UserSitDown::CMD_GR_UserSitDown(const CMD_GR_UserSitDown& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_UserSitDown::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  chairid_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_UserSitDown::~CMD_GR_UserSitDown() {
  SharedDtor();
}

void CMD_GR_UserSitDown::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_UserSitDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_UserSitDown& CMD_GR_UserSitDown::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_UserSitDown* CMD_GR_UserSitDown::default_instance_ = NULL;

CMD_GR_UserSitDown* CMD_GR_UserSitDown::New() const {
  return new CMD_GR_UserSitDown;
}

void CMD_GR_UserSitDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    chairid_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_UserSitDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairId;
        break;
      }

      // required int32 chairId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_UserSitDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 chairId = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

}

int CMD_GR_UserSitDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 chairId = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_UserSitDown::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_UserSitDown*>(&from));
}

void CMD_GR_UserSitDown::MergeFrom(const CMD_GR_UserSitDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
}

void CMD_GR_UserSitDown::CopyFrom(const CMD_GR_UserSitDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_UserSitDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GR_UserSitDown::Swap(CMD_GR_UserSitDown* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(chairid_, other->chairid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_UserSitDown::GetTypeName() const {
  return "room.c2s.CMD_GR_UserSitDown";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_UserStandUp::kTableIdFieldNumber;
const int CMD_GR_UserStandUp::kChairIdFieldNumber;
const int CMD_GR_UserStandUp::kForceLeaveFieldNumber;
#endif  // !_MSC_VER

CMD_GR_UserStandUp::CMD_GR_UserStandUp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_UserStandUp::InitAsDefaultInstance() {
}

CMD_GR_UserStandUp::CMD_GR_UserStandUp(const CMD_GR_UserStandUp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_UserStandUp::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  chairid_ = 0;
  forceleave_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_UserStandUp::~CMD_GR_UserStandUp() {
  SharedDtor();
}

void CMD_GR_UserStandUp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_UserStandUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_UserStandUp& CMD_GR_UserStandUp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_UserStandUp* CMD_GR_UserStandUp::default_instance_ = NULL;

CMD_GR_UserStandUp* CMD_GR_UserStandUp::New() const {
  return new CMD_GR_UserStandUp;
}

void CMD_GR_UserStandUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    chairid_ = 0;
    forceleave_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_UserStandUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairId;
        break;
      }

      // required int32 chairId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_forceLeave;
        break;
      }

      // required int32 forceLeave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forceLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forceleave_)));
          set_has_forceleave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_UserStandUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 chairId = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // required int32 forceLeave = 3;
  if (has_forceleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->forceleave(), output);
  }

}

int CMD_GR_UserStandUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 chairId = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int32 forceLeave = 3;
    if (has_forceleave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forceleave());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_UserStandUp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_UserStandUp*>(&from));
}

void CMD_GR_UserStandUp::MergeFrom(const CMD_GR_UserStandUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_forceleave()) {
      set_forceleave(from.forceleave());
    }
  }
}

void CMD_GR_UserStandUp::CopyFrom(const CMD_GR_UserStandUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_UserStandUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GR_UserStandUp::Swap(CMD_GR_UserStandUp* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(chairid_, other->chairid_);
    std::swap(forceleave_, other->forceleave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_UserStandUp::GetTypeName() const {
  return "room.c2s.CMD_GR_UserStandUp";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_C_UserChat::kChatColorFieldNumber;
const int CMD_GR_C_UserChat::kSendUserIdFieldNumber;
const int CMD_GR_C_UserChat::kTargetUserIdFieldNumber;
const int CMD_GR_C_UserChat::kChatStringFieldNumber;
#endif  // !_MSC_VER

CMD_GR_C_UserChat::CMD_GR_C_UserChat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_C_UserChat::InitAsDefaultInstance() {
}

CMD_GR_C_UserChat::CMD_GR_C_UserChat(const CMD_GR_C_UserChat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_C_UserChat::SharedCtor() {
  _cached_size_ = 0;
  chatcolor_ = 0;
  senduserid_ = 0;
  targetuserid_ = 0;
  chatstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_C_UserChat::~CMD_GR_C_UserChat() {
  SharedDtor();
}

void CMD_GR_C_UserChat::SharedDtor() {
  if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
    delete chatstring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_C_UserChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_C_UserChat& CMD_GR_C_UserChat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_C_UserChat* CMD_GR_C_UserChat::default_instance_ = NULL;

CMD_GR_C_UserChat* CMD_GR_C_UserChat::New() const {
  return new CMD_GR_C_UserChat;
}

void CMD_GR_C_UserChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatcolor_ = 0;
    senduserid_ = 0;
    targetuserid_ = 0;
    if (has_chatstring()) {
      if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
        chatstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_C_UserChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chatColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatcolor_)));
          set_has_chatcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendUserId;
        break;
      }

      // required int32 sendUserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senduserid_)));
          set_has_senduserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetUserId;
        break;
      }

      // required int32 targetUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chatString;
        break;
      }

      // required string chatString = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_C_UserChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chatColor = 1;
  if (has_chatcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chatcolor(), output);
  }

  // required int32 sendUserId = 2;
  if (has_senduserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senduserid(), output);
  }

  // required int32 targetUserId = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetuserid(), output);
  }

  // required string chatString = 4;
  if (has_chatstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chatstring(), output);
  }

}

int CMD_GR_C_UserChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chatColor = 1;
    if (has_chatcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatcolor());
    }

    // required int32 sendUserId = 2;
    if (has_senduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senduserid());
    }

    // required int32 targetUserId = 3;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetuserid());
    }

    // required string chatString = 4;
    if (has_chatstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatstring());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_C_UserChat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_C_UserChat*>(&from));
}

void CMD_GR_C_UserChat::MergeFrom(const CMD_GR_C_UserChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatcolor()) {
      set_chatcolor(from.chatcolor());
    }
    if (from.has_senduserid()) {
      set_senduserid(from.senduserid());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
    if (from.has_chatstring()) {
      set_chatstring(from.chatstring());
    }
  }
}

void CMD_GR_C_UserChat::CopyFrom(const CMD_GR_C_UserChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_C_UserChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_GR_C_UserChat::Swap(CMD_GR_C_UserChat* other) {
  if (other != this) {
    std::swap(chatcolor_, other->chatcolor_);
    std::swap(senduserid_, other->senduserid_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(chatstring_, other->chatstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_C_UserChat::GetTypeName() const {
  return "room.c2s.CMD_GR_C_UserChat";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_C_UserExpression::kItemIndexFieldNumber;
const int CMD_GR_C_UserExpression::kSendUserIdFieldNumber;
const int CMD_GR_C_UserExpression::kTargetUserIdFieldNumber;
#endif  // !_MSC_VER

CMD_GR_C_UserExpression::CMD_GR_C_UserExpression()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_C_UserExpression::InitAsDefaultInstance() {
}

CMD_GR_C_UserExpression::CMD_GR_C_UserExpression(const CMD_GR_C_UserExpression& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_C_UserExpression::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0;
  senduserid_ = 0;
  targetuserid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_C_UserExpression::~CMD_GR_C_UserExpression() {
  SharedDtor();
}

void CMD_GR_C_UserExpression::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_C_UserExpression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_C_UserExpression& CMD_GR_C_UserExpression::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_C_UserExpression* CMD_GR_C_UserExpression::default_instance_ = NULL;

CMD_GR_C_UserExpression* CMD_GR_C_UserExpression::New() const {
  return new CMD_GR_C_UserExpression;
}

void CMD_GR_C_UserExpression::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0;
    senduserid_ = 0;
    targetuserid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_C_UserExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemindex_)));
          set_has_itemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendUserId;
        break;
      }

      // required int32 sendUserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senduserid_)));
          set_has_senduserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetUserId;
        break;
      }

      // required int32 targetUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_C_UserExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemIndex = 1;
  if (has_itemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemindex(), output);
  }

  // required int32 sendUserId = 2;
  if (has_senduserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senduserid(), output);
  }

  // required int32 targetUserId = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetuserid(), output);
  }

}

int CMD_GR_C_UserExpression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemindex());
    }

    // required int32 sendUserId = 2;
    if (has_senduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senduserid());
    }

    // required int32 targetUserId = 3;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetuserid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_C_UserExpression::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_C_UserExpression*>(&from));
}

void CMD_GR_C_UserExpression::MergeFrom(const CMD_GR_C_UserExpression& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemindex()) {
      set_itemindex(from.itemindex());
    }
    if (from.has_senduserid()) {
      set_senduserid(from.senduserid());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
  }
}

void CMD_GR_C_UserExpression::CopyFrom(const CMD_GR_C_UserExpression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_C_UserExpression::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GR_C_UserExpression::Swap(CMD_GR_C_UserExpression* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(senduserid_, other->senduserid_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_C_UserExpression::GetTypeName() const {
  return "room.c2s.CMD_GR_C_UserExpression";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_KickUser::kTargetUserIdFieldNumber;
#endif  // !_MSC_VER

CMD_GR_KickUser::CMD_GR_KickUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_KickUser::InitAsDefaultInstance() {
}

CMD_GR_KickUser::CMD_GR_KickUser(const CMD_GR_KickUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_KickUser::SharedCtor() {
  _cached_size_ = 0;
  targetuserid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_KickUser::~CMD_GR_KickUser() {
  SharedDtor();
}

void CMD_GR_KickUser::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_KickUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_KickUser& CMD_GR_KickUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_KickUser* CMD_GR_KickUser::default_instance_ = NULL;

CMD_GR_KickUser* CMD_GR_KickUser::New() const {
  return new CMD_GR_KickUser;
}

void CMD_GR_KickUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetuserid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_KickUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 targetUserId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_KickUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 targetUserId = 1;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetuserid(), output);
  }

}

int CMD_GR_KickUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 targetUserId = 1;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetuserid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_KickUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_KickUser*>(&from));
}

void CMD_GR_KickUser::MergeFrom(const CMD_GR_KickUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
  }
}

void CMD_GR_KickUser::CopyFrom(const CMD_GR_KickUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_KickUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GR_KickUser::Swap(CMD_GR_KickUser* other) {
  if (other != this) {
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_KickUser::GetTypeName() const {
  return "room.c2s.CMD_GR_KickUser";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_UserInfoReq::kUserIdReqFieldNumber;
const int CMD_GR_UserInfoReq::kTablePosFieldNumber;
#endif  // !_MSC_VER

CMD_GR_UserInfoReq::CMD_GR_UserInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_UserInfoReq::InitAsDefaultInstance() {
}

CMD_GR_UserInfoReq::CMD_GR_UserInfoReq(const CMD_GR_UserInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_UserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  useridreq_ = 0;
  tablepos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_UserInfoReq::~CMD_GR_UserInfoReq() {
  SharedDtor();
}

void CMD_GR_UserInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_UserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_UserInfoReq& CMD_GR_UserInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_UserInfoReq* CMD_GR_UserInfoReq::default_instance_ = NULL;

CMD_GR_UserInfoReq* CMD_GR_UserInfoReq::New() const {
  return new CMD_GR_UserInfoReq;
}

void CMD_GR_UserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    useridreq_ = 0;
    tablepos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_UserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userIdReq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useridreq_)));
          set_has_useridreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tablePos;
        break;
      }

      // required int32 tablePos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tablePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablepos_)));
          set_has_tablepos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_UserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userIdReq = 1;
  if (has_useridreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->useridreq(), output);
  }

  // required int32 tablePos = 2;
  if (has_tablepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tablepos(), output);
  }

}

int CMD_GR_UserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userIdReq = 1;
    if (has_useridreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useridreq());
    }

    // required int32 tablePos = 2;
    if (has_tablepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablepos());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_UserInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_UserInfoReq*>(&from));
}

void CMD_GR_UserInfoReq::MergeFrom(const CMD_GR_UserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useridreq()) {
      set_useridreq(from.useridreq());
    }
    if (from.has_tablepos()) {
      set_tablepos(from.tablepos());
    }
  }
}

void CMD_GR_UserInfoReq::CopyFrom(const CMD_GR_UserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_UserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GR_UserInfoReq::Swap(CMD_GR_UserInfoReq* other) {
  if (other != this) {
    std::swap(useridreq_, other->useridreq_);
    std::swap(tablepos_, other->tablepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_UserInfoReq::GetTypeName() const {
  return "room.c2s.CMD_GR_UserInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_ChairUserInfoReq::kTableIdFieldNumber;
const int CMD_GR_ChairUserInfoReq::kChairIdFieldNumber;
#endif  // !_MSC_VER

CMD_GR_ChairUserInfoReq::CMD_GR_ChairUserInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_ChairUserInfoReq::InitAsDefaultInstance() {
}

CMD_GR_ChairUserInfoReq::CMD_GR_ChairUserInfoReq(const CMD_GR_ChairUserInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_ChairUserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_ChairUserInfoReq::~CMD_GR_ChairUserInfoReq() {
  SharedDtor();
}

void CMD_GR_ChairUserInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_ChairUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_ChairUserInfoReq& CMD_GR_ChairUserInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_ChairUserInfoReq* CMD_GR_ChairUserInfoReq::default_instance_ = NULL;

CMD_GR_ChairUserInfoReq* CMD_GR_ChairUserInfoReq::New() const {
  return new CMD_GR_ChairUserInfoReq;
}

void CMD_GR_ChairUserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    chairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_ChairUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairId;
        break;
      }

      // required int32 chairId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_ChairUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 chairId = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

}

int CMD_GR_ChairUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 chairId = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_ChairUserInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_ChairUserInfoReq*>(&from));
}

void CMD_GR_ChairUserInfoReq::MergeFrom(const CMD_GR_ChairUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
}

void CMD_GR_ChairUserInfoReq::CopyFrom(const CMD_GR_ChairUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_ChairUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GR_ChairUserInfoReq::Swap(CMD_GR_ChairUserInfoReq* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(chairid_, other->chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_ChairUserInfoReq::GetTypeName() const {
  return "room.c2s.CMD_GR_ChairUserInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GF_GameOption::kFrameVersionFieldNumber;
const int CMD_GF_GameOption::kClientVersionFieldNumber;
const int CMD_GF_GameOption::kSetScoreFieldNumber;
#endif  // !_MSC_VER

CMD_GF_GameOption::CMD_GF_GameOption()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GF_GameOption::InitAsDefaultInstance() {
}

CMD_GF_GameOption::CMD_GF_GameOption(const CMD_GF_GameOption& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GF_GameOption::SharedCtor() {
  _cached_size_ = 0;
  frameversion_ = 0;
  clientversion_ = 0;
  setscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GF_GameOption::~CMD_GF_GameOption() {
  SharedDtor();
}

void CMD_GF_GameOption::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GF_GameOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GF_GameOption& CMD_GF_GameOption::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GF_GameOption* CMD_GF_GameOption::default_instance_ = NULL;

CMD_GF_GameOption* CMD_GF_GameOption::New() const {
  return new CMD_GF_GameOption;
}

void CMD_GF_GameOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frameversion_ = 0;
    clientversion_ = 0;
    setscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GF_GameOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frameVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameversion_)));
          set_has_frameversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientVersion;
        break;
      }

      // optional int32 clientVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_setScore;
        break;
      }

      // required int32 setScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setscore_)));
          set_has_setscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GF_GameOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 frameVersion = 1;
  if (has_frameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frameversion(), output);
  }

  // optional int32 clientVersion = 2;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clientversion(), output);
  }

  // required int32 setScore = 3;
  if (has_setscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->setscore(), output);
  }

}

int CMD_GF_GameOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 frameVersion = 1;
    if (has_frameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameversion());
    }

    // optional int32 clientVersion = 2;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientversion());
    }

    // required int32 setScore = 3;
    if (has_setscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setscore());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GF_GameOption::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GF_GameOption*>(&from));
}

void CMD_GF_GameOption::MergeFrom(const CMD_GF_GameOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frameversion()) {
      set_frameversion(from.frameversion());
    }
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_setscore()) {
      set_setscore(from.setscore());
    }
  }
}

void CMD_GF_GameOption::CopyFrom(const CMD_GF_GameOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GF_GameOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void CMD_GF_GameOption::Swap(CMD_GF_GameOption* other) {
  if (other != this) {
    std::swap(frameversion_, other->frameversion_);
    std::swap(clientversion_, other->clientversion_);
    std::swap(setscore_, other->setscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GF_GameOption::GetTypeName() const {
  return "room.c2s.CMD_GF_GameOption";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GF_C_UserChat::kChatColorFieldNumber;
const int CMD_GF_C_UserChat::kSendUserIdFieldNumber;
const int CMD_GF_C_UserChat::kTargetUserIdFieldNumber;
const int CMD_GF_C_UserChat::kChatStringFieldNumber;
#endif  // !_MSC_VER

CMD_GF_C_UserChat::CMD_GF_C_UserChat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GF_C_UserChat::InitAsDefaultInstance() {
}

CMD_GF_C_UserChat::CMD_GF_C_UserChat(const CMD_GF_C_UserChat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GF_C_UserChat::SharedCtor() {
  _cached_size_ = 0;
  chatcolor_ = 0;
  senduserid_ = 0;
  targetuserid_ = 0;
  chatstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GF_C_UserChat::~CMD_GF_C_UserChat() {
  SharedDtor();
}

void CMD_GF_C_UserChat::SharedDtor() {
  if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
    delete chatstring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GF_C_UserChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GF_C_UserChat& CMD_GF_C_UserChat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GF_C_UserChat* CMD_GF_C_UserChat::default_instance_ = NULL;

CMD_GF_C_UserChat* CMD_GF_C_UserChat::New() const {
  return new CMD_GF_C_UserChat;
}

void CMD_GF_C_UserChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatcolor_ = 0;
    senduserid_ = 0;
    targetuserid_ = 0;
    if (has_chatstring()) {
      if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
        chatstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GF_C_UserChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chatColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatcolor_)));
          set_has_chatcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendUserId;
        break;
      }

      // required int32 sendUserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senduserid_)));
          set_has_senduserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetUserId;
        break;
      }

      // required int32 targetUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chatString;
        break;
      }

      // required string chatString = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GF_C_UserChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chatColor = 1;
  if (has_chatcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chatcolor(), output);
  }

  // required int32 sendUserId = 2;
  if (has_senduserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senduserid(), output);
  }

  // required int32 targetUserId = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetuserid(), output);
  }

  // required string chatString = 4;
  if (has_chatstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chatstring(), output);
  }

}

int CMD_GF_C_UserChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chatColor = 1;
    if (has_chatcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatcolor());
    }

    // required int32 sendUserId = 2;
    if (has_senduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senduserid());
    }

    // required int32 targetUserId = 3;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetuserid());
    }

    // required string chatString = 4;
    if (has_chatstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatstring());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GF_C_UserChat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GF_C_UserChat*>(&from));
}

void CMD_GF_C_UserChat::MergeFrom(const CMD_GF_C_UserChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatcolor()) {
      set_chatcolor(from.chatcolor());
    }
    if (from.has_senduserid()) {
      set_senduserid(from.senduserid());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
    if (from.has_chatstring()) {
      set_chatstring(from.chatstring());
    }
  }
}

void CMD_GF_C_UserChat::CopyFrom(const CMD_GF_C_UserChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GF_C_UserChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_GF_C_UserChat::Swap(CMD_GF_C_UserChat* other) {
  if (other != this) {
    std::swap(chatcolor_, other->chatcolor_);
    std::swap(senduserid_, other->senduserid_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(chatstring_, other->chatstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GF_C_UserChat::GetTypeName() const {
  return "room.c2s.CMD_GF_C_UserChat";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GF_C_UserExpression::kItemIndexFieldNumber;
const int CMD_GF_C_UserExpression::kSendUserIdFieldNumber;
const int CMD_GF_C_UserExpression::kTargetUserIdFieldNumber;
#endif  // !_MSC_VER

CMD_GF_C_UserExpression::CMD_GF_C_UserExpression()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GF_C_UserExpression::InitAsDefaultInstance() {
}

CMD_GF_C_UserExpression::CMD_GF_C_UserExpression(const CMD_GF_C_UserExpression& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GF_C_UserExpression::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0;
  senduserid_ = 0;
  targetuserid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GF_C_UserExpression::~CMD_GF_C_UserExpression() {
  SharedDtor();
}

void CMD_GF_C_UserExpression::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GF_C_UserExpression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GF_C_UserExpression& CMD_GF_C_UserExpression::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fc2s_2eproto();
#endif
  return *default_instance_;
}

CMD_GF_C_UserExpression* CMD_GF_C_UserExpression::default_instance_ = NULL;

CMD_GF_C_UserExpression* CMD_GF_C_UserExpression::New() const {
  return new CMD_GF_C_UserExpression;
}

void CMD_GF_C_UserExpression::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0;
    senduserid_ = 0;
    targetuserid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GF_C_UserExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemindex_)));
          set_has_itemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendUserId;
        break;
      }

      // required int32 sendUserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senduserid_)));
          set_has_senduserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetUserId;
        break;
      }

      // required int32 targetUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GF_C_UserExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemIndex = 1;
  if (has_itemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemindex(), output);
  }

  // required int32 sendUserId = 2;
  if (has_senduserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senduserid(), output);
  }

  // required int32 targetUserId = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetuserid(), output);
  }

}

int CMD_GF_C_UserExpression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemindex());
    }

    // required int32 sendUserId = 2;
    if (has_senduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senduserid());
    }

    // required int32 targetUserId = 3;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetuserid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GF_C_UserExpression::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GF_C_UserExpression*>(&from));
}

void CMD_GF_C_UserExpression::MergeFrom(const CMD_GF_C_UserExpression& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemindex()) {
      set_itemindex(from.itemindex());
    }
    if (from.has_senduserid()) {
      set_senduserid(from.senduserid());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
  }
}

void CMD_GF_C_UserExpression::CopyFrom(const CMD_GF_C_UserExpression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GF_C_UserExpression::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GF_C_UserExpression::Swap(CMD_GF_C_UserExpression* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(senduserid_, other->senduserid_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GF_C_UserExpression::GetTypeName() const {
  return "room.c2s.CMD_GF_C_UserExpression";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace c2s
}  // namespace room

// @@protoc_insertion_point(global_scope)

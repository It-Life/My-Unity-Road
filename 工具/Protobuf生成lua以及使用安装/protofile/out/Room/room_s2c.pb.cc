// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Room/room_s2c.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Room/room_s2c.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace room {
namespace s2c {

void protobuf_ShutdownFile_Room_2froom_5fs2c_2eproto() {
  delete tagUserStatus::default_instance_;
  delete tagTableStatus::default_instance_;
  delete tagUserScore::default_instance_;
  delete tagUserInfo::default_instance_;
  delete CMD_GR_LogonSuccess::default_instance_;
  delete CMD_GR_LogonFailure::default_instance_;
  delete CMD_GR_ConfigServer::default_instance_;
  delete CMD_GR_RequestFailure::default_instance_;
  delete CMD_GR_UserStatus::default_instance_;
  delete CMD_GR_UserScore::default_instance_;
  delete CMD_CM_SystemMessage::default_instance_;
  delete CMD_GR_TableStatus::default_instance_;
  delete CMD_GR_S_UserChat::default_instance_;
  delete CMD_GR_S_UserExpression::default_instance_;
  delete CMD_GR_TableInfo::default_instance_;
  delete CMD_GF_GameStatus::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Room_2froom_5fs2c_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Room_2froom_5fs2c_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  tagUserStatus::default_instance_ = new tagUserStatus();
  tagTableStatus::default_instance_ = new tagTableStatus();
  tagUserScore::default_instance_ = new tagUserScore();
  tagUserInfo::default_instance_ = new tagUserInfo();
  CMD_GR_LogonSuccess::default_instance_ = new CMD_GR_LogonSuccess();
  CMD_GR_LogonFailure::default_instance_ = new CMD_GR_LogonFailure();
  CMD_GR_ConfigServer::default_instance_ = new CMD_GR_ConfigServer();
  CMD_GR_RequestFailure::default_instance_ = new CMD_GR_RequestFailure();
  CMD_GR_UserStatus::default_instance_ = new CMD_GR_UserStatus();
  CMD_GR_UserScore::default_instance_ = new CMD_GR_UserScore();
  CMD_CM_SystemMessage::default_instance_ = new CMD_CM_SystemMessage();
  CMD_GR_TableStatus::default_instance_ = new CMD_GR_TableStatus();
  CMD_GR_S_UserChat::default_instance_ = new CMD_GR_S_UserChat();
  CMD_GR_S_UserExpression::default_instance_ = new CMD_GR_S_UserExpression();
  CMD_GR_TableInfo::default_instance_ = new CMD_GR_TableInfo();
  CMD_GF_GameStatus::default_instance_ = new CMD_GF_GameStatus();
  tagUserStatus::default_instance_->InitAsDefaultInstance();
  tagTableStatus::default_instance_->InitAsDefaultInstance();
  tagUserScore::default_instance_->InitAsDefaultInstance();
  tagUserInfo::default_instance_->InitAsDefaultInstance();
  CMD_GR_LogonSuccess::default_instance_->InitAsDefaultInstance();
  CMD_GR_LogonFailure::default_instance_->InitAsDefaultInstance();
  CMD_GR_ConfigServer::default_instance_->InitAsDefaultInstance();
  CMD_GR_RequestFailure::default_instance_->InitAsDefaultInstance();
  CMD_GR_UserStatus::default_instance_->InitAsDefaultInstance();
  CMD_GR_UserScore::default_instance_->InitAsDefaultInstance();
  CMD_CM_SystemMessage::default_instance_->InitAsDefaultInstance();
  CMD_GR_TableStatus::default_instance_->InitAsDefaultInstance();
  CMD_GR_S_UserChat::default_instance_->InitAsDefaultInstance();
  CMD_GR_S_UserExpression::default_instance_->InitAsDefaultInstance();
  CMD_GR_TableInfo::default_instance_->InitAsDefaultInstance();
  CMD_GF_GameStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Room_2froom_5fs2c_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Room_2froom_5fs2c_2eproto_once_);
void protobuf_AddDesc_Room_2froom_5fs2c_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Room_2froom_5fs2c_2eproto_once_,
                 &protobuf_AddDesc_Room_2froom_5fs2c_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Room_2froom_5fs2c_2eproto {
  StaticDescriptorInitializer_Room_2froom_5fs2c_2eproto() {
    protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
  }
} static_descriptor_initializer_Room_2froom_5fs2c_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int tagUserStatus::kTableIdFieldNumber;
const int tagUserStatus::kChairIdFieldNumber;
const int tagUserStatus::kUserStatusFieldNumber;
#endif  // !_MSC_VER

tagUserStatus::tagUserStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagUserStatus::InitAsDefaultInstance() {
}

tagUserStatus::tagUserStatus(const tagUserStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagUserStatus::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  chairid_ = 0;
  userstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserStatus::~tagUserStatus() {
  SharedDtor();
}

void tagUserStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void tagUserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagUserStatus& tagUserStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagUserStatus* tagUserStatus::default_instance_ = NULL;

tagUserStatus* tagUserStatus::New() const {
  return new tagUserStatus;
}

void tagUserStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    chairid_ = 0;
    userstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagUserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairId;
        break;
      }

      // required int32 chairId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userStatus;
        break;
      }

      // required int32 userStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagUserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 chairId = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // required int32 userStatus = 3;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userstatus(), output);
  }

}

int tagUserStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 chairId = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int32 userStatus = 3;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagUserStatus*>(&from));
}

void tagUserStatus::MergeFrom(const tagUserStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
}

void tagUserStatus::CopyFrom(const tagUserStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void tagUserStatus::Swap(tagUserStatus* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(chairid_, other->chairid_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagUserStatus::GetTypeName() const {
  return "room.s2c.tagUserStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int tagTableStatus::kTableLockFieldNumber;
const int tagTableStatus::kPlayStatusFieldNumber;
const int tagTableStatus::kCellScoreFieldNumber;
#endif  // !_MSC_VER

tagTableStatus::tagTableStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagTableStatus::InitAsDefaultInstance() {
}

tagTableStatus::tagTableStatus(const tagTableStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagTableStatus::SharedCtor() {
  _cached_size_ = 0;
  tablelock_ = 0;
  playstatus_ = 0;
  cellscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagTableStatus::~tagTableStatus() {
  SharedDtor();
}

void tagTableStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void tagTableStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagTableStatus& tagTableStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagTableStatus* tagTableStatus::default_instance_ = NULL;

tagTableStatus* tagTableStatus::New() const {
  return new tagTableStatus;
}

void tagTableStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tablelock_ = 0;
    playstatus_ = 0;
    cellscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagTableStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableLock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablelock_)));
          set_has_tablelock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playStatus;
        break;
      }

      // required int32 playStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playstatus_)));
          set_has_playstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cellScore;
        break;
      }

      // required int32 cellScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellscore_)));
          set_has_cellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagTableStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableLock = 1;
  if (has_tablelock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tablelock(), output);
  }

  // required int32 playStatus = 2;
  if (has_playstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playstatus(), output);
  }

  // required int32 cellScore = 3;
  if (has_cellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellscore(), output);
  }

}

int tagTableStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableLock = 1;
    if (has_tablelock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablelock());
    }

    // required int32 playStatus = 2;
    if (has_playstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playstatus());
    }

    // required int32 cellScore = 3;
    if (has_cellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellscore());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagTableStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagTableStatus*>(&from));
}

void tagTableStatus::MergeFrom(const tagTableStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablelock()) {
      set_tablelock(from.tablelock());
    }
    if (from.has_playstatus()) {
      set_playstatus(from.playstatus());
    }
    if (from.has_cellscore()) {
      set_cellscore(from.cellscore());
    }
  }
}

void tagTableStatus::CopyFrom(const tagTableStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagTableStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void tagTableStatus::Swap(tagTableStatus* other) {
  if (other != this) {
    std::swap(tablelock_, other->tablelock_);
    std::swap(playstatus_, other->playstatus_);
    std::swap(cellscore_, other->cellscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagTableStatus::GetTypeName() const {
  return "room.s2c.tagTableStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int tagUserScore::kScoreFieldNumber;
const int tagUserScore::kGradeFieldNumber;
const int tagUserScore::kInsureFieldNumber;
const int tagUserScore::kWinCountFieldNumber;
const int tagUserScore::kLostCountFieldNumber;
const int tagUserScore::kDrawCountFieldNumber;
const int tagUserScore::kFleeCountFieldNumber;
const int tagUserScore::kIntegralCountFieldNumber;
const int tagUserScore::kDanScoreFieldNumber;
const int tagUserScore::kAwardFlagFieldNumber;
const int tagUserScore::kWinStreakFieldNumber;
const int tagUserScore::kUserMedalFieldNumber;
const int tagUserScore::kExperienceFieldNumber;
const int tagUserScore::kLoveLinessFieldNumber;
const int tagUserScore::kMemberOrderFieldNumber;
const int tagUserScore::kTicketFieldNumber;
#endif  // !_MSC_VER

tagUserScore::tagUserScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagUserScore::InitAsDefaultInstance() {
}

tagUserScore::tagUserScore(const tagUserScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagUserScore::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  grade_ = GOOGLE_LONGLONG(0);
  insure_ = GOOGLE_LONGLONG(0);
  wincount_ = 0;
  lostcount_ = 0;
  drawcount_ = 0;
  fleecount_ = 0;
  integralcount_ = GOOGLE_LONGLONG(0);
  danscore_ = GOOGLE_LONGLONG(0);
  awardflag_ = 0;
  winstreak_ = 0;
  usermedal_ = 0;
  experience_ = 0;
  loveliness_ = 0;
  memberorder_ = 0;
  ticket_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserScore::~tagUserScore() {
  SharedDtor();
}

void tagUserScore::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void tagUserScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagUserScore& tagUserScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagUserScore* tagUserScore::default_instance_ = NULL;

tagUserScore* tagUserScore::New() const {
  return new tagUserScore;
}

void tagUserScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
    grade_ = GOOGLE_LONGLONG(0);
    insure_ = GOOGLE_LONGLONG(0);
    wincount_ = 0;
    lostcount_ = 0;
    drawcount_ = 0;
    fleecount_ = 0;
    integralcount_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    danscore_ = GOOGLE_LONGLONG(0);
    awardflag_ = 0;
    winstreak_ = 0;
    usermedal_ = 0;
    experience_ = 0;
    loveliness_ = 0;
    memberorder_ = 0;
    ticket_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagUserScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional int64 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_insure;
        break;
      }

      // required int64 insure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &insure_)));
          set_has_insure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winCount;
        break;
      }

      // required int32 winCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lostCount;
        break;
      }

      // required int32 lostCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lostCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lostcount_)));
          set_has_lostcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_drawCount;
        break;
      }

      // required int32 drawCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawcount_)));
          set_has_drawcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fleeCount;
        break;
      }

      // required int32 fleeCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fleeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fleecount_)));
          set_has_fleecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_integralCount;
        break;
      }

      // optional int64 integralCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integralCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &integralcount_)));
          set_has_integralcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_danScore;
        break;
      }

      // optional int64 danScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_danScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &danscore_)));
          set_has_danscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_awardFlag;
        break;
      }

      // optional int32 awardFlag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardflag_)));
          set_has_awardflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_winStreak;
        break;
      }

      // optional int32 winStreak = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winStreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winstreak_)));
          set_has_winstreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_userMedal;
        break;
      }

      // optional int32 userMedal = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userMedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usermedal_)));
          set_has_usermedal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_experience;
        break;
      }

      // optional int32 experience = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_loveLiness;
        break;
      }

      // optional int32 loveLiness = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loveLiness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loveliness_)));
          set_has_loveliness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_memberOrder;
        break;
      }

      // optional int32 memberOrder = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberorder_)));
          set_has_memberorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ticket;
        break;
      }

      // optional int64 ticket = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagUserScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // optional int64 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->grade(), output);
  }

  // required int64 insure = 3;
  if (has_insure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->insure(), output);
  }

  // required int32 winCount = 4;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wincount(), output);
  }

  // required int32 lostCount = 5;
  if (has_lostcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lostcount(), output);
  }

  // required int32 drawCount = 6;
  if (has_drawcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->drawcount(), output);
  }

  // required int32 fleeCount = 7;
  if (has_fleecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fleecount(), output);
  }

  // optional int64 integralCount = 8;
  if (has_integralcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->integralcount(), output);
  }

  // optional int64 danScore = 9;
  if (has_danscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->danscore(), output);
  }

  // optional int32 awardFlag = 10;
  if (has_awardflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->awardflag(), output);
  }

  // optional int32 winStreak = 11;
  if (has_winstreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->winstreak(), output);
  }

  // optional int32 userMedal = 12;
  if (has_usermedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->usermedal(), output);
  }

  // optional int32 experience = 13;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->experience(), output);
  }

  // optional int32 loveLiness = 14;
  if (has_loveliness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->loveliness(), output);
  }

  // optional int32 memberOrder = 15;
  if (has_memberorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->memberorder(), output);
  }

  // optional int64 ticket = 16;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->ticket(), output);
  }

}

int tagUserScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->grade());
    }

    // required int64 insure = 3;
    if (has_insure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->insure());
    }

    // required int32 winCount = 4;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincount());
    }

    // required int32 lostCount = 5;
    if (has_lostcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lostcount());
    }

    // required int32 drawCount = 6;
    if (has_drawcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawcount());
    }

    // required int32 fleeCount = 7;
    if (has_fleecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fleecount());
    }

    // optional int64 integralCount = 8;
    if (has_integralcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->integralcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 danScore = 9;
    if (has_danscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->danscore());
    }

    // optional int32 awardFlag = 10;
    if (has_awardflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardflag());
    }

    // optional int32 winStreak = 11;
    if (has_winstreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winstreak());
    }

    // optional int32 userMedal = 12;
    if (has_usermedal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usermedal());
    }

    // optional int32 experience = 13;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

    // optional int32 loveLiness = 14;
    if (has_loveliness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loveliness());
    }

    // optional int32 memberOrder = 15;
    if (has_memberorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberorder());
    }

    // optional int64 ticket = 16;
    if (has_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ticket());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagUserScore*>(&from));
}

void tagUserScore::MergeFrom(const tagUserScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_insure()) {
      set_insure(from.insure());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_lostcount()) {
      set_lostcount(from.lostcount());
    }
    if (from.has_drawcount()) {
      set_drawcount(from.drawcount());
    }
    if (from.has_fleecount()) {
      set_fleecount(from.fleecount());
    }
    if (from.has_integralcount()) {
      set_integralcount(from.integralcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_danscore()) {
      set_danscore(from.danscore());
    }
    if (from.has_awardflag()) {
      set_awardflag(from.awardflag());
    }
    if (from.has_winstreak()) {
      set_winstreak(from.winstreak());
    }
    if (from.has_usermedal()) {
      set_usermedal(from.usermedal());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_loveliness()) {
      set_loveliness(from.loveliness());
    }
    if (from.has_memberorder()) {
      set_memberorder(from.memberorder());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
}

void tagUserScore::CopyFrom(const tagUserScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;

  return true;
}

void tagUserScore::Swap(tagUserScore* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(grade_, other->grade_);
    std::swap(insure_, other->insure_);
    std::swap(wincount_, other->wincount_);
    std::swap(lostcount_, other->lostcount_);
    std::swap(drawcount_, other->drawcount_);
    std::swap(fleecount_, other->fleecount_);
    std::swap(integralcount_, other->integralcount_);
    std::swap(danscore_, other->danscore_);
    std::swap(awardflag_, other->awardflag_);
    std::swap(winstreak_, other->winstreak_);
    std::swap(usermedal_, other->usermedal_);
    std::swap(experience_, other->experience_);
    std::swap(loveliness_, other->loveliness_);
    std::swap(memberorder_, other->memberorder_);
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagUserScore::GetTypeName() const {
  return "room.s2c.tagUserScore";
}


// ===================================================================

#ifndef _MSC_VER
const int tagUserInfo::kGameIdFieldNumber;
const int tagUserInfo::kUserIdFieldNumber;
const int tagUserInfo::kGroupIdFieldNumber;
const int tagUserInfo::kFaceIdFieldNumber;
const int tagUserInfo::kCustomIdFieldNumber;
const int tagUserInfo::kGenderFieldNumber;
const int tagUserInfo::kMemberOrderFieldNumber;
const int tagUserInfo::kMasterOrderFieldNumber;
const int tagUserInfo::kUserStatusFieldNumber;
const int tagUserInfo::kUserScoreFieldNumber;
const int tagUserInfo::kRoomCardFieldNumber;
const int tagUserInfo::kRechargeAmountFieldNumber;
const int tagUserInfo::kTakeCountFieldNumber;
const int tagUserInfo::kNickNameFieldNumber;
const int tagUserInfo::kGroupNameFieldNumber;
const int tagUserInfo::kUnderWriteFieldNumber;
#endif  // !_MSC_VER

tagUserInfo::tagUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void tagUserInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  userstatus_ = const_cast< ::room::s2c::tagUserStatus*>(
      ::room::s2c::tagUserStatus::internal_default_instance());
#else
  userstatus_ = const_cast< ::room::s2c::tagUserStatus*>(&::room::s2c::tagUserStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  userscore_ = const_cast< ::room::s2c::tagUserScore*>(
      ::room::s2c::tagUserScore::internal_default_instance());
#else
  userscore_ = const_cast< ::room::s2c::tagUserScore*>(&::room::s2c::tagUserScore::default_instance());
#endif
}

tagUserInfo::tagUserInfo(const tagUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void tagUserInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  userid_ = 0;
  groupid_ = 0;
  faceid_ = 0;
  customid_ = 0;
  gender_ = 0;
  memberorder_ = 0;
  masterorder_ = 0;
  userstatus_ = NULL;
  userscore_ = NULL;
  roomcard_ = 0;
  rechargeamount_ = 0;
  takecount_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underwrite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserInfo::~tagUserInfo() {
  SharedDtor();
}

void tagUserInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (underwrite_ != &::google::protobuf::internal::kEmptyString) {
    delete underwrite_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete userstatus_;
    delete userscore_;
  }
}

void tagUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const tagUserInfo& tagUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

tagUserInfo* tagUserInfo::default_instance_ = NULL;

tagUserInfo* tagUserInfo::New() const {
  return new tagUserInfo;
}

void tagUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    userid_ = 0;
    groupid_ = 0;
    faceid_ = 0;
    customid_ = 0;
    gender_ = 0;
    memberorder_ = 0;
    masterorder_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_userstatus()) {
      if (userstatus_ != NULL) userstatus_->::room::s2c::tagUserStatus::Clear();
    }
    if (has_userscore()) {
      if (userscore_ != NULL) userscore_->::room::s2c::tagUserScore::Clear();
    }
    roomcard_ = 0;
    rechargeamount_ = 0;
    takecount_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    if (has_underwrite()) {
      if (underwrite_ != &::google::protobuf::internal::kEmptyString) {
        underwrite_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool tagUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // required int32 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupId;
        break;
      }

      // optional int32 groupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_faceId;
        break;
      }

      // optional int32 faceId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_customId;
        break;
      }

      // optional int32 customId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_customId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customid_)));
          set_has_customid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }

      // required int32 gender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_memberOrder;
        break;
      }

      // required int32 memberOrder = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberorder_)));
          set_has_memberorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_masterOrder;
        break;
      }

      // required int32 masterOrder = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masterOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &masterorder_)));
          set_has_masterorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_userStatus;
        break;
      }

      // required .room.s2c.tagUserStatus userStatus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_userScore;
        break;
      }

      // required .room.s2c.tagUserScore userScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userScore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_roomCard;
        break;
      }

      // optional int32 roomCard = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomcard_)));
          set_has_roomcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_rechargeAmount;
        break;
      }

      // optional int32 rechargeAmount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargeamount_)));
          set_has_rechargeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_takeCount;
        break;
      }

      // optional int32 takeCount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_takeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &takecount_)));
          set_has_takecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_nickName;
        break;
      }

      // required string nickName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_groupName;
        break;
      }

      // optional string groupName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_underWrite;
        break;
      }

      // optional string underWrite = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underWrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underwrite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int32 groupId = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // optional int32 faceId = 4;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->faceid(), output);
  }

  // optional int32 customId = 5;
  if (has_customid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->customid(), output);
  }

  // required int32 gender = 6;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gender(), output);
  }

  // required int32 memberOrder = 7;
  if (has_memberorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->memberorder(), output);
  }

  // required int32 masterOrder = 8;
  if (has_masterorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->masterorder(), output);
  }

  // required .room.s2c.tagUserStatus userStatus = 9;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->userstatus(), output);
  }

  // required .room.s2c.tagUserScore userScore = 10;
  if (has_userscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->userscore(), output);
  }

  // optional int32 roomCard = 11;
  if (has_roomcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->roomcard(), output);
  }

  // optional int32 rechargeAmount = 12;
  if (has_rechargeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->rechargeamount(), output);
  }

  // optional int32 takeCount = 13;
  if (has_takecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->takecount(), output);
  }

  // required string nickName = 14;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->nickname(), output);
  }

  // optional string groupName = 15;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->groupname(), output);
  }

  // optional string underWrite = 16;
  if (has_underwrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->underwrite(), output);
  }

}

int tagUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 groupId = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 faceId = 4;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faceid());
    }

    // optional int32 customId = 5;
    if (has_customid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customid());
    }

    // required int32 gender = 6;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // required int32 memberOrder = 7;
    if (has_memberorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberorder());
    }

    // required int32 masterOrder = 8;
    if (has_masterorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->masterorder());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .room.s2c.tagUserStatus userStatus = 9;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userstatus());
    }

    // required .room.s2c.tagUserScore userScore = 10;
    if (has_userscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userscore());
    }

    // optional int32 roomCard = 11;
    if (has_roomcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomcard());
    }

    // optional int32 rechargeAmount = 12;
    if (has_rechargeamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargeamount());
    }

    // optional int32 takeCount = 13;
    if (has_takecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->takecount());
    }

    // required string nickName = 14;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string groupName = 15;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional string underWrite = 16;
    if (has_underwrite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underwrite());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const tagUserInfo*>(&from));
}

void tagUserInfo::MergeFrom(const tagUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_customid()) {
      set_customid(from.customid());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_memberorder()) {
      set_memberorder(from.memberorder());
    }
    if (from.has_masterorder()) {
      set_masterorder(from.masterorder());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_userstatus()) {
      mutable_userstatus()->::room::s2c::tagUserStatus::MergeFrom(from.userstatus());
    }
    if (from.has_userscore()) {
      mutable_userscore()->::room::s2c::tagUserScore::MergeFrom(from.userscore());
    }
    if (from.has_roomcard()) {
      set_roomcard(from.roomcard());
    }
    if (from.has_rechargeamount()) {
      set_rechargeamount(from.rechargeamount());
    }
    if (from.has_takecount()) {
      set_takecount(from.takecount());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_underwrite()) {
      set_underwrite(from.underwrite());
    }
  }
}

void tagUserInfo::CopyFrom(const tagUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000023e3) != 0x000023e3) return false;

  if (has_userstatus()) {
    if (!this->userstatus().IsInitialized()) return false;
  }
  if (has_userscore()) {
    if (!this->userscore().IsInitialized()) return false;
  }
  return true;
}

void tagUserInfo::Swap(tagUserInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(userid_, other->userid_);
    std::swap(groupid_, other->groupid_);
    std::swap(faceid_, other->faceid_);
    std::swap(customid_, other->customid_);
    std::swap(gender_, other->gender_);
    std::swap(memberorder_, other->memberorder_);
    std::swap(masterorder_, other->masterorder_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(userscore_, other->userscore_);
    std::swap(roomcard_, other->roomcard_);
    std::swap(rechargeamount_, other->rechargeamount_);
    std::swap(takecount_, other->takecount_);
    std::swap(nickname_, other->nickname_);
    std::swap(groupname_, other->groupname_);
    std::swap(underwrite_, other->underwrite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string tagUserInfo::GetTypeName() const {
  return "room.s2c.tagUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_LogonSuccess::kUserRightFieldNumber;
const int CMD_GR_LogonSuccess::kMasterRightFieldNumber;
#endif  // !_MSC_VER

CMD_GR_LogonSuccess::CMD_GR_LogonSuccess()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_LogonSuccess::InitAsDefaultInstance() {
}

CMD_GR_LogonSuccess::CMD_GR_LogonSuccess(const CMD_GR_LogonSuccess& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_LogonSuccess::SharedCtor() {
  _cached_size_ = 0;
  userright_ = 0;
  masterright_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_LogonSuccess::~CMD_GR_LogonSuccess() {
  SharedDtor();
}

void CMD_GR_LogonSuccess::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_LogonSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_LogonSuccess& CMD_GR_LogonSuccess::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_LogonSuccess* CMD_GR_LogonSuccess::default_instance_ = NULL;

CMD_GR_LogonSuccess* CMD_GR_LogonSuccess::New() const {
  return new CMD_GR_LogonSuccess;
}

void CMD_GR_LogonSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userright_ = 0;
    masterright_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_LogonSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userRight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userright_)));
          set_has_userright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_masterRight;
        break;
      }

      // required int32 masterRight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masterRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &masterright_)));
          set_has_masterright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_LogonSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userRight = 1;
  if (has_userright()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userright(), output);
  }

  // required int32 masterRight = 2;
  if (has_masterright()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->masterright(), output);
  }

}

int CMD_GR_LogonSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userRight = 1;
    if (has_userright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userright());
    }

    // required int32 masterRight = 2;
    if (has_masterright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->masterright());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_LogonSuccess::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_LogonSuccess*>(&from));
}

void CMD_GR_LogonSuccess::MergeFrom(const CMD_GR_LogonSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userright()) {
      set_userright(from.userright());
    }
    if (from.has_masterright()) {
      set_masterright(from.masterright());
    }
  }
}

void CMD_GR_LogonSuccess::CopyFrom(const CMD_GR_LogonSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_LogonSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GR_LogonSuccess::Swap(CMD_GR_LogonSuccess* other) {
  if (other != this) {
    std::swap(userright_, other->userright_);
    std::swap(masterright_, other->masterright_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_LogonSuccess::GetTypeName() const {
  return "room.s2c.CMD_GR_LogonSuccess";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_LogonFailure::kErrorCodeFieldNumber;
const int CMD_GR_LogonFailure::kDescribeStringFieldNumber;
#endif  // !_MSC_VER

CMD_GR_LogonFailure::CMD_GR_LogonFailure()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_LogonFailure::InitAsDefaultInstance() {
}

CMD_GR_LogonFailure::CMD_GR_LogonFailure(const CMD_GR_LogonFailure& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_LogonFailure::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  describestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_LogonFailure::~CMD_GR_LogonFailure() {
  SharedDtor();
}

void CMD_GR_LogonFailure::SharedDtor() {
  if (describestring_ != &::google::protobuf::internal::kEmptyString) {
    delete describestring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_LogonFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_LogonFailure& CMD_GR_LogonFailure::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_LogonFailure* CMD_GR_LogonFailure::default_instance_ = NULL;

CMD_GR_LogonFailure* CMD_GR_LogonFailure::New() const {
  return new CMD_GR_LogonFailure;
}

void CMD_GR_LogonFailure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_describestring()) {
      if (describestring_ != &::google::protobuf::internal::kEmptyString) {
        describestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_LogonFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_describeString;
        break;
      }

      // required string describeString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describestring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_LogonFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required string describeString = 2;
  if (has_describestring()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->describestring(), output);
  }

}

int CMD_GR_LogonFailure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required string describeString = 2;
    if (has_describestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describestring());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_LogonFailure::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_LogonFailure*>(&from));
}

void CMD_GR_LogonFailure::MergeFrom(const CMD_GR_LogonFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_describestring()) {
      set_describestring(from.describestring());
    }
  }
}

void CMD_GR_LogonFailure::CopyFrom(const CMD_GR_LogonFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_LogonFailure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GR_LogonFailure::Swap(CMD_GR_LogonFailure* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(describestring_, other->describestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_LogonFailure::GetTypeName() const {
  return "room.s2c.CMD_GR_LogonFailure";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_ConfigServer::kTableCountFieldNumber;
const int CMD_GR_ConfigServer::kChairCountFieldNumber;
const int CMD_GR_ConfigServer::kServerTypeFieldNumber;
const int CMD_GR_ConfigServer::kServerRuleFieldNumber;
const int CMD_GR_ConfigServer::kSetScoreFieldNumber;
const int CMD_GR_ConfigServer::kMaxTimesFieldNumber;
const int CMD_GR_ConfigServer::kCaijinRoomFieldNumber;
#endif  // !_MSC_VER

CMD_GR_ConfigServer::CMD_GR_ConfigServer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_ConfigServer::InitAsDefaultInstance() {
}

CMD_GR_ConfigServer::CMD_GR_ConfigServer(const CMD_GR_ConfigServer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_ConfigServer::SharedCtor() {
  _cached_size_ = 0;
  tablecount_ = 0;
  chaircount_ = 0;
  servertype_ = 0;
  serverrule_ = 0;
  setscore_ = false;
  maxtimes_ = 0;
  caijinroom_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_ConfigServer::~CMD_GR_ConfigServer() {
  SharedDtor();
}

void CMD_GR_ConfigServer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_ConfigServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_ConfigServer& CMD_GR_ConfigServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_ConfigServer* CMD_GR_ConfigServer::default_instance_ = NULL;

CMD_GR_ConfigServer* CMD_GR_ConfigServer::New() const {
  return new CMD_GR_ConfigServer;
}

void CMD_GR_ConfigServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tablecount_ = 0;
    chaircount_ = 0;
    servertype_ = 0;
    serverrule_ = 0;
    setscore_ = false;
    maxtimes_ = 0;
    caijinroom_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_ConfigServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablecount_)));
          set_has_tablecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairCount;
        break;
      }

      // required int32 chairCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chaircount_)));
          set_has_chaircount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverType;
        break;
      }

      // required int32 serverType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverRule;
        break;
      }

      // required int32 serverRule = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverrule_)));
          set_has_serverrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_setScore;
        break;
      }

      // required bool setScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setscore_)));
          set_has_setscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxTimes;
        break;
      }

      // optional int32 maxTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxtimes_)));
          set_has_maxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_caijinRoom;
        break;
      }

      // optional bool caijinRoom = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caijinRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &caijinroom_)));
          set_has_caijinroom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_ConfigServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableCount = 1;
  if (has_tablecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tablecount(), output);
  }

  // required int32 chairCount = 2;
  if (has_chaircount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chaircount(), output);
  }

  // required int32 serverType = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->servertype(), output);
  }

  // required int32 serverRule = 4;
  if (has_serverrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serverrule(), output);
  }

  // required bool setScore = 5;
  if (has_setscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->setscore(), output);
  }

  // optional int32 maxTimes = 6;
  if (has_maxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxtimes(), output);
  }

  // optional bool caijinRoom = 7;
  if (has_caijinroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->caijinroom(), output);
  }

}

int CMD_GR_ConfigServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableCount = 1;
    if (has_tablecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablecount());
    }

    // required int32 chairCount = 2;
    if (has_chaircount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chaircount());
    }

    // required int32 serverType = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // required int32 serverRule = 4;
    if (has_serverrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverrule());
    }

    // required bool setScore = 5;
    if (has_setscore()) {
      total_size += 1 + 1;
    }

    // optional int32 maxTimes = 6;
    if (has_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxtimes());
    }

    // optional bool caijinRoom = 7;
    if (has_caijinroom()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_ConfigServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_ConfigServer*>(&from));
}

void CMD_GR_ConfigServer::MergeFrom(const CMD_GR_ConfigServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablecount()) {
      set_tablecount(from.tablecount());
    }
    if (from.has_chaircount()) {
      set_chaircount(from.chaircount());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_serverrule()) {
      set_serverrule(from.serverrule());
    }
    if (from.has_setscore()) {
      set_setscore(from.setscore());
    }
    if (from.has_maxtimes()) {
      set_maxtimes(from.maxtimes());
    }
    if (from.has_caijinroom()) {
      set_caijinroom(from.caijinroom());
    }
  }
}

void CMD_GR_ConfigServer::CopyFrom(const CMD_GR_ConfigServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_ConfigServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CMD_GR_ConfigServer::Swap(CMD_GR_ConfigServer* other) {
  if (other != this) {
    std::swap(tablecount_, other->tablecount_);
    std::swap(chaircount_, other->chaircount_);
    std::swap(servertype_, other->servertype_);
    std::swap(serverrule_, other->serverrule_);
    std::swap(setscore_, other->setscore_);
    std::swap(maxtimes_, other->maxtimes_);
    std::swap(caijinroom_, other->caijinroom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_ConfigServer::GetTypeName() const {
  return "room.s2c.CMD_GR_ConfigServer";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_RequestFailure::kErrorCodeFieldNumber;
const int CMD_GR_RequestFailure::kDescribeStringFieldNumber;
#endif  // !_MSC_VER

CMD_GR_RequestFailure::CMD_GR_RequestFailure()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_RequestFailure::InitAsDefaultInstance() {
}

CMD_GR_RequestFailure::CMD_GR_RequestFailure(const CMD_GR_RequestFailure& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_RequestFailure::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  describestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_RequestFailure::~CMD_GR_RequestFailure() {
  SharedDtor();
}

void CMD_GR_RequestFailure::SharedDtor() {
  if (describestring_ != &::google::protobuf::internal::kEmptyString) {
    delete describestring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_RequestFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_RequestFailure& CMD_GR_RequestFailure::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_RequestFailure* CMD_GR_RequestFailure::default_instance_ = NULL;

CMD_GR_RequestFailure* CMD_GR_RequestFailure::New() const {
  return new CMD_GR_RequestFailure;
}

void CMD_GR_RequestFailure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_describestring()) {
      if (describestring_ != &::google::protobuf::internal::kEmptyString) {
        describestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_RequestFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_describeString;
        break;
      }

      // required string describeString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describeString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describestring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_RequestFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required string describeString = 2;
  if (has_describestring()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->describestring(), output);
  }

}

int CMD_GR_RequestFailure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required string describeString = 2;
    if (has_describestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describestring());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_RequestFailure::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_RequestFailure*>(&from));
}

void CMD_GR_RequestFailure::MergeFrom(const CMD_GR_RequestFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_describestring()) {
      set_describestring(from.describestring());
    }
  }
}

void CMD_GR_RequestFailure::CopyFrom(const CMD_GR_RequestFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_RequestFailure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_GR_RequestFailure::Swap(CMD_GR_RequestFailure* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(describestring_, other->describestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_RequestFailure::GetTypeName() const {
  return "room.s2c.CMD_GR_RequestFailure";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_UserStatus::kUserIdFieldNumber;
const int CMD_GR_UserStatus::kUserStatusFieldNumber;
#endif  // !_MSC_VER

CMD_GR_UserStatus::CMD_GR_UserStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_UserStatus::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  userstatus_ = const_cast< ::room::s2c::tagUserStatus*>(
      ::room::s2c::tagUserStatus::internal_default_instance());
#else
  userstatus_ = const_cast< ::room::s2c::tagUserStatus*>(&::room::s2c::tagUserStatus::default_instance());
#endif
}

CMD_GR_UserStatus::CMD_GR_UserStatus(const CMD_GR_UserStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_UserStatus::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  userstatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_UserStatus::~CMD_GR_UserStatus() {
  SharedDtor();
}

void CMD_GR_UserStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete userstatus_;
  }
}

void CMD_GR_UserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_UserStatus& CMD_GR_UserStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_UserStatus* CMD_GR_UserStatus::default_instance_ = NULL;

CMD_GR_UserStatus* CMD_GR_UserStatus::New() const {
  return new CMD_GR_UserStatus;
}

void CMD_GR_UserStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_userstatus()) {
      if (userstatus_ != NULL) userstatus_->::room::s2c::tagUserStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_UserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userStatus;
        break;
      }

      // required .room.s2c.tagUserStatus userStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_UserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required .room.s2c.tagUserStatus userStatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->userstatus(), output);
  }

}

int CMD_GR_UserStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required .room.s2c.tagUserStatus userStatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userstatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_UserStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_UserStatus*>(&from));
}

void CMD_GR_UserStatus::MergeFrom(const CMD_GR_UserStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userstatus()) {
      mutable_userstatus()->::room::s2c::tagUserStatus::MergeFrom(from.userstatus());
    }
  }
}

void CMD_GR_UserStatus::CopyFrom(const CMD_GR_UserStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_UserStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_userstatus()) {
    if (!this->userstatus().IsInitialized()) return false;
  }
  return true;
}

void CMD_GR_UserStatus::Swap(CMD_GR_UserStatus* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_UserStatus::GetTypeName() const {
  return "room.s2c.CMD_GR_UserStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_UserScore::kUserIdFieldNumber;
const int CMD_GR_UserScore::kUserScoreFieldNumber;
#endif  // !_MSC_VER

CMD_GR_UserScore::CMD_GR_UserScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_UserScore::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  userscore_ = const_cast< ::room::s2c::tagUserScore*>(
      ::room::s2c::tagUserScore::internal_default_instance());
#else
  userscore_ = const_cast< ::room::s2c::tagUserScore*>(&::room::s2c::tagUserScore::default_instance());
#endif
}

CMD_GR_UserScore::CMD_GR_UserScore(const CMD_GR_UserScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_UserScore::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  userscore_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_UserScore::~CMD_GR_UserScore() {
  SharedDtor();
}

void CMD_GR_UserScore::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete userscore_;
  }
}

void CMD_GR_UserScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_UserScore& CMD_GR_UserScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_UserScore* CMD_GR_UserScore::default_instance_ = NULL;

CMD_GR_UserScore* CMD_GR_UserScore::New() const {
  return new CMD_GR_UserScore;
}

void CMD_GR_UserScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_userscore()) {
      if (userscore_ != NULL) userscore_->::room::s2c::tagUserScore::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_UserScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userScore;
        break;
      }

      // required .room.s2c.tagUserScore userScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userScore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_UserScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required .room.s2c.tagUserScore userScore = 2;
  if (has_userscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->userscore(), output);
  }

}

int CMD_GR_UserScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required .room.s2c.tagUserScore userScore = 2;
    if (has_userscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userscore());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_UserScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_UserScore*>(&from));
}

void CMD_GR_UserScore::MergeFrom(const CMD_GR_UserScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userscore()) {
      mutable_userscore()->::room::s2c::tagUserScore::MergeFrom(from.userscore());
    }
  }
}

void CMD_GR_UserScore::CopyFrom(const CMD_GR_UserScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_UserScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_userscore()) {
    if (!this->userscore().IsInitialized()) return false;
  }
  return true;
}

void CMD_GR_UserScore::Swap(CMD_GR_UserScore* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(userscore_, other->userscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_UserScore::GetTypeName() const {
  return "room.s2c.CMD_GR_UserScore";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_CM_SystemMessage::kTypeFieldNumber;
const int CMD_CM_SystemMessage::kMsgContentFieldNumber;
#endif  // !_MSC_VER

CMD_CM_SystemMessage::CMD_CM_SystemMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_CM_SystemMessage::InitAsDefaultInstance() {
}

CMD_CM_SystemMessage::CMD_CM_SystemMessage(const CMD_CM_SystemMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_CM_SystemMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_CM_SystemMessage::~CMD_CM_SystemMessage() {
  SharedDtor();
}

void CMD_CM_SystemMessage::SharedDtor() {
  if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete msgcontent_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_CM_SystemMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_CM_SystemMessage& CMD_CM_SystemMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_CM_SystemMessage* CMD_CM_SystemMessage::default_instance_ = NULL;

CMD_CM_SystemMessage* CMD_CM_SystemMessage::New() const {
  return new CMD_CM_SystemMessage;
}

void CMD_CM_SystemMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msgcontent()) {
      if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
        msgcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_CM_SystemMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgContent;
        break;
      }

      // required string msgContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_CM_SystemMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string msgContent = 2;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgcontent(), output);
  }

}

int CMD_CM_SystemMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string msgContent = 2;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgcontent());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_CM_SystemMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_CM_SystemMessage*>(&from));
}

void CMD_CM_SystemMessage::MergeFrom(const CMD_CM_SystemMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msgcontent()) {
      set_msgcontent(from.msgcontent());
    }
  }
}

void CMD_CM_SystemMessage::CopyFrom(const CMD_CM_SystemMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_CM_SystemMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_CM_SystemMessage::Swap(CMD_CM_SystemMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msgcontent_, other->msgcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_CM_SystemMessage::GetTypeName() const {
  return "room.s2c.CMD_CM_SystemMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_TableStatus::kTableIdFieldNumber;
const int CMD_GR_TableStatus::kTableStatusFieldNumber;
#endif  // !_MSC_VER

CMD_GR_TableStatus::CMD_GR_TableStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_TableStatus::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tablestatus_ = const_cast< ::room::s2c::tagTableStatus*>(
      ::room::s2c::tagTableStatus::internal_default_instance());
#else
  tablestatus_ = const_cast< ::room::s2c::tagTableStatus*>(&::room::s2c::tagTableStatus::default_instance());
#endif
}

CMD_GR_TableStatus::CMD_GR_TableStatus(const CMD_GR_TableStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_TableStatus::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablestatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_TableStatus::~CMD_GR_TableStatus() {
  SharedDtor();
}

void CMD_GR_TableStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete tablestatus_;
  }
}

void CMD_GR_TableStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_TableStatus& CMD_GR_TableStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_TableStatus* CMD_GR_TableStatus::default_instance_ = NULL;

CMD_GR_TableStatus* CMD_GR_TableStatus::New() const {
  return new CMD_GR_TableStatus;
}

void CMD_GR_TableStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    if (has_tablestatus()) {
      if (tablestatus_ != NULL) tablestatus_->::room::s2c::tagTableStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_TableStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tableStatus;
        break;
      }

      // required .room.s2c.tagTableStatus tableStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tablestatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_TableStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required .room.s2c.tagTableStatus tableStatus = 2;
  if (has_tablestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->tablestatus(), output);
  }

}

int CMD_GR_TableStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required .room.s2c.tagTableStatus tableStatus = 2;
    if (has_tablestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tablestatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_TableStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_TableStatus*>(&from));
}

void CMD_GR_TableStatus::MergeFrom(const CMD_GR_TableStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablestatus()) {
      mutable_tablestatus()->::room::s2c::tagTableStatus::MergeFrom(from.tablestatus());
    }
  }
}

void CMD_GR_TableStatus::CopyFrom(const CMD_GR_TableStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_TableStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_tablestatus()) {
    if (!this->tablestatus().IsInitialized()) return false;
  }
  return true;
}

void CMD_GR_TableStatus::Swap(CMD_GR_TableStatus* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablestatus_, other->tablestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_TableStatus::GetTypeName() const {
  return "room.s2c.CMD_GR_TableStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_S_UserChat::kChatColorFieldNumber;
const int CMD_GR_S_UserChat::kSendUserIDFieldNumber;
const int CMD_GR_S_UserChat::kTargetUserIDFieldNumber;
const int CMD_GR_S_UserChat::kChatStringFieldNumber;
#endif  // !_MSC_VER

CMD_GR_S_UserChat::CMD_GR_S_UserChat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_S_UserChat::InitAsDefaultInstance() {
}

CMD_GR_S_UserChat::CMD_GR_S_UserChat(const CMD_GR_S_UserChat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_S_UserChat::SharedCtor() {
  _cached_size_ = 0;
  chatcolor_ = 0;
  senduserid_ = 0;
  targetuserid_ = 0;
  chatstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_S_UserChat::~CMD_GR_S_UserChat() {
  SharedDtor();
}

void CMD_GR_S_UserChat::SharedDtor() {
  if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
    delete chatstring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_S_UserChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_S_UserChat& CMD_GR_S_UserChat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_S_UserChat* CMD_GR_S_UserChat::default_instance_ = NULL;

CMD_GR_S_UserChat* CMD_GR_S_UserChat::New() const {
  return new CMD_GR_S_UserChat;
}

void CMD_GR_S_UserChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatcolor_ = 0;
    senduserid_ = 0;
    targetuserid_ = 0;
    if (has_chatstring()) {
      if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
        chatstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_S_UserChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chatColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatcolor_)));
          set_has_chatcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendUserID;
        break;
      }

      // required int32 sendUserID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senduserid_)));
          set_has_senduserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetUserID;
        break;
      }

      // required int32 targetUserID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chatString;
        break;
      }

      // required string chatString = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_S_UserChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chatColor = 1;
  if (has_chatcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chatcolor(), output);
  }

  // required int32 sendUserID = 2;
  if (has_senduserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senduserid(), output);
  }

  // required int32 targetUserID = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetuserid(), output);
  }

  // required string chatString = 4;
  if (has_chatstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chatstring(), output);
  }

}

int CMD_GR_S_UserChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chatColor = 1;
    if (has_chatcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatcolor());
    }

    // required int32 sendUserID = 2;
    if (has_senduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senduserid());
    }

    // required int32 targetUserID = 3;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetuserid());
    }

    // required string chatString = 4;
    if (has_chatstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatstring());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_S_UserChat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_S_UserChat*>(&from));
}

void CMD_GR_S_UserChat::MergeFrom(const CMD_GR_S_UserChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatcolor()) {
      set_chatcolor(from.chatcolor());
    }
    if (from.has_senduserid()) {
      set_senduserid(from.senduserid());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
    if (from.has_chatstring()) {
      set_chatstring(from.chatstring());
    }
  }
}

void CMD_GR_S_UserChat::CopyFrom(const CMD_GR_S_UserChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_S_UserChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_GR_S_UserChat::Swap(CMD_GR_S_UserChat* other) {
  if (other != this) {
    std::swap(chatcolor_, other->chatcolor_);
    std::swap(senduserid_, other->senduserid_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(chatstring_, other->chatstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_S_UserChat::GetTypeName() const {
  return "room.s2c.CMD_GR_S_UserChat";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_S_UserExpression::kItemIndexFieldNumber;
const int CMD_GR_S_UserExpression::kSendUserIdFieldNumber;
const int CMD_GR_S_UserExpression::kTargetUserIdFieldNumber;
#endif  // !_MSC_VER

CMD_GR_S_UserExpression::CMD_GR_S_UserExpression()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_S_UserExpression::InitAsDefaultInstance() {
}

CMD_GR_S_UserExpression::CMD_GR_S_UserExpression(const CMD_GR_S_UserExpression& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_S_UserExpression::SharedCtor() {
  _cached_size_ = 0;
  itemindex_ = 0;
  senduserid_ = 0;
  targetuserid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_S_UserExpression::~CMD_GR_S_UserExpression() {
  SharedDtor();
}

void CMD_GR_S_UserExpression::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_S_UserExpression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_S_UserExpression& CMD_GR_S_UserExpression::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_S_UserExpression* CMD_GR_S_UserExpression::default_instance_ = NULL;

CMD_GR_S_UserExpression* CMD_GR_S_UserExpression::New() const {
  return new CMD_GR_S_UserExpression;
}

void CMD_GR_S_UserExpression::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemindex_ = 0;
    senduserid_ = 0;
    targetuserid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_S_UserExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemindex_)));
          set_has_itemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendUserId;
        break;
      }

      // required int32 sendUserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senduserid_)));
          set_has_senduserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetUserId;
        break;
      }

      // required int32 targetUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_S_UserExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemIndex = 1;
  if (has_itemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemindex(), output);
  }

  // required int32 sendUserId = 2;
  if (has_senduserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senduserid(), output);
  }

  // required int32 targetUserId = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetuserid(), output);
  }

}

int CMD_GR_S_UserExpression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemIndex = 1;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemindex());
    }

    // required int32 sendUserId = 2;
    if (has_senduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senduserid());
    }

    // required int32 targetUserId = 3;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetuserid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_S_UserExpression::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_S_UserExpression*>(&from));
}

void CMD_GR_S_UserExpression::MergeFrom(const CMD_GR_S_UserExpression& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemindex()) {
      set_itemindex(from.itemindex());
    }
    if (from.has_senduserid()) {
      set_senduserid(from.senduserid());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
  }
}

void CMD_GR_S_UserExpression::CopyFrom(const CMD_GR_S_UserExpression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_S_UserExpression::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMD_GR_S_UserExpression::Swap(CMD_GR_S_UserExpression* other) {
  if (other != this) {
    std::swap(itemindex_, other->itemindex_);
    std::swap(senduserid_, other->senduserid_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_S_UserExpression::GetTypeName() const {
  return "room.s2c.CMD_GR_S_UserExpression";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GR_TableInfo::kTableStatusArrayFieldNumber;
#endif  // !_MSC_VER

CMD_GR_TableInfo::CMD_GR_TableInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GR_TableInfo::InitAsDefaultInstance() {
}

CMD_GR_TableInfo::CMD_GR_TableInfo(const CMD_GR_TableInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GR_TableInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GR_TableInfo::~CMD_GR_TableInfo() {
  SharedDtor();
}

void CMD_GR_TableInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GR_TableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GR_TableInfo& CMD_GR_TableInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GR_TableInfo* CMD_GR_TableInfo::default_instance_ = NULL;

CMD_GR_TableInfo* CMD_GR_TableInfo::New() const {
  return new CMD_GR_TableInfo;
}

void CMD_GR_TableInfo::Clear() {
  tablestatusarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GR_TableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .room.s2c.tagTableStatus tableStatusArray = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableStatusArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tablestatusarray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tableStatusArray;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GR_TableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .room.s2c.tagTableStatus tableStatusArray = 1;
  for (int i = 0; i < this->tablestatusarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tablestatusarray(i), output);
  }

}

int CMD_GR_TableInfo::ByteSize() const {
  int total_size = 0;

  // repeated .room.s2c.tagTableStatus tableStatusArray = 1;
  total_size += 1 * this->tablestatusarray_size();
  for (int i = 0; i < this->tablestatusarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tablestatusarray(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GR_TableInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GR_TableInfo*>(&from));
}

void CMD_GR_TableInfo::MergeFrom(const CMD_GR_TableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tablestatusarray_.MergeFrom(from.tablestatusarray_);
}

void CMD_GR_TableInfo::CopyFrom(const CMD_GR_TableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GR_TableInfo::IsInitialized() const {

  for (int i = 0; i < tablestatusarray_size(); i++) {
    if (!this->tablestatusarray(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_GR_TableInfo::Swap(CMD_GR_TableInfo* other) {
  if (other != this) {
    tablestatusarray_.Swap(&other->tablestatusarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GR_TableInfo::GetTypeName() const {
  return "room.s2c.CMD_GR_TableInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GF_GameStatus::kGameStatusFieldNumber;
#endif  // !_MSC_VER

CMD_GF_GameStatus::CMD_GF_GameStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_GF_GameStatus::InitAsDefaultInstance() {
}

CMD_GF_GameStatus::CMD_GF_GameStatus(const CMD_GF_GameStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GF_GameStatus::SharedCtor() {
  _cached_size_ = 0;
  gamestatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GF_GameStatus::~CMD_GF_GameStatus() {
  SharedDtor();
}

void CMD_GF_GameStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMD_GF_GameStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_GF_GameStatus& CMD_GF_GameStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2froom_5fs2c_2eproto();
#endif
  return *default_instance_;
}

CMD_GF_GameStatus* CMD_GF_GameStatus::default_instance_ = NULL;

CMD_GF_GameStatus* CMD_GF_GameStatus::New() const {
  return new CMD_GF_GameStatus;
}

void CMD_GF_GameStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamestatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_GF_GameStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamestatus_)));
          set_has_gamestatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GF_GameStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameStatus = 1;
  if (has_gamestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamestatus(), output);
  }

}

int CMD_GF_GameStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameStatus = 1;
    if (has_gamestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamestatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GF_GameStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_GF_GameStatus*>(&from));
}

void CMD_GF_GameStatus::MergeFrom(const CMD_GF_GameStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamestatus()) {
      set_gamestatus(from.gamestatus());
    }
  }
}

void CMD_GF_GameStatus::CopyFrom(const CMD_GF_GameStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GF_GameStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GF_GameStatus::Swap(CMD_GF_GameStatus* other) {
  if (other != this) {
    std::swap(gamestatus_, other->gamestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_GF_GameStatus::GetTypeName() const {
  return "room.s2c.CMD_GF_GameStatus";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2c
}  // namespace room

// @@protoc_insertion_point(global_scope)
